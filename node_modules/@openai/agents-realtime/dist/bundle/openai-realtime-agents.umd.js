(function(M,V){typeof exports=="object"&&typeof module<"u"?V(exports):typeof define=="function"&&define.amd?define(["exports"],V):(M=typeof globalThis<"u"?globalThis:M||self,V(M.OpenAIAgentsRealtime={}))})(this,(function(M){"use strict";var yd=Object.defineProperty;var Ya=M=>{throw TypeError(M)};var vd=(M,V,ee)=>V in M?yd(M,V,{enumerable:!0,configurable:!0,writable:!0,value:ee}):M[V]=ee;var _=(M,V,ee)=>vd(M,typeof V!="symbol"?V+"":V,ee),Jr=(M,V,ee)=>V.has(M)||Ya("Cannot "+ee);var o=(M,V,ee)=>(Jr(M,V,"read from private field"),ee?ee.call(M):V.get(M)),T=(M,V,ee)=>V.has(M)?Ya("Cannot add the same private member more than once"):V instanceof WeakSet?V.add(M):V.set(M,ee),y=(M,V,ee,kn)=>(Jr(M,V,"write to private field"),kn?kn.call(M,ee):V.set(M,ee),ee),L=(M,V,ee)=>(Jr(M,V,"access private method"),ee);var Ct,lt,rn,Et,sn,an,Ot,ue,je,Ge,ze,Rt,le,Br,Gr,Bt,me,on,un,cn,dn,pt,Ve,He,ft,ln,Nt,$e,oe,ht,er,Xa,ge,pn,We,_e,Fe,Dt,Pt,fn,mt,Mt,ce,zr,Vr,Hr,Qa,Wr,gt,hn,pe,mn,gn,K,_n,_t,yn,Ke,Ye,ae,vn,Le,yt,vt,$t,wn,tr,ei,F,D,Ft,P,Lt,Zt,bn,Q,Ut,qt,Re,xn,wt,Sn,Tn,Y,rr,sr,ti,ar,ni,Kr,ri,Yr;const V={version:"0.1.8"};async function ee(n){try{return[null,await n()]}catch(e){return[e,null]}}function kn(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const si=Symbol("Let zodToJsonSchema decide on which parser to use"),Xr={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},ai=n=>typeof n=="string"?{...Xr,basePath:["#"],definitions:{},name:n}:{...Xr,basePath:["#"],definitions:{},...n},ir=n=>"_def"in n?n._def:n;function ii(n){if(!n)return!0;for(const e in n)return!1;return!0}const oi=n=>{const e=ai(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[ir(s),{def:ir(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function Qr(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function W(n,e,t,r,s){n[e]=t,Qr(n,e,r,s)}var J;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(u=>typeof s[s[u]]!="number"),i={};for(const u of a)i[u]=s[u];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(J||(J={}));var es;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(es||(es={}));const k=J.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Ze=n=>{switch(typeof n){case"undefined":return k.undefined;case"string":return k.string;case"number":return Number.isNaN(n)?k.nan:k.number;case"boolean":return k.boolean;case"function":return k.function;case"bigint":return k.bigint;case"symbol":return k.symbol;case"object":return Array.isArray(n)?k.array:n===null?k.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?k.promise:typeof Map<"u"&&n instanceof Map?k.map:typeof Set<"u"&&n instanceof Set?k.set:typeof Date<"u"&&n instanceof Date?k.date:k.object;default:return k.unknown}},x=J.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Ne extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let u=r,d=0;for(;d<i.path.length;){const l=i.path[d];d===i.path.length-1?(u[l]=u[l]||{_errors:[]},u[l]._errors.push(t(i))):u[l]=u[l]||{_errors:[]},u=u[l],d++}}};return s(this),r}static assert(e){if(!(e instanceof Ne))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,J.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Ne.create=n=>new Ne(n);const or=(n,e)=>{let t;switch(n.code){case x.invalid_type:n.received===k.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case x.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,J.jsonStringifyReplacer)}`;break;case x.unrecognized_keys:t=`Unrecognized key(s) in object: ${J.joinValues(n.keys,", ")}`;break;case x.invalid_union:t="Invalid input";break;case x.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${J.joinValues(n.options)}`;break;case x.invalid_enum_value:t=`Invalid enum value. Expected ${J.joinValues(n.options)}, received '${n.received}'`;break;case x.invalid_arguments:t="Invalid function arguments";break;case x.invalid_return_type:t="Invalid function return type";break;case x.invalid_date:t="Invalid date";break;case x.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:J.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case x.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case x.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case x.custom:t="Invalid input";break;case x.invalid_intersection_types:t="Intersection results could not be merged";break;case x.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case x.not_finite:t="Number must be finite";break;default:t=e.defaultError,J.assertNever(n)}return{message:t}};let ui=or;function ci(){return ui}const di=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let u="";const d=r.filter(l=>!!l).slice().reverse();for(const l of d)u=l(i,{data:e,defaultError:u}).message;return{...s,path:a,message:u}};function I(n,e){const t=ci(),r=di({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===or?void 0:or].filter(s=>!!s)});n.common.issues.push(r)}class de{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return N;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return de.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return N;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const N=Object.freeze({status:"aborted"}),Gt=n=>({status:"dirty",value:n}),ve=n=>({status:"valid",value:n}),ts=n=>n.status==="aborted",ns=n=>n.status==="dirty",bt=n=>n.status==="valid",An=n=>typeof Promise<"u"&&n instanceof Promise;var C;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(C||(C={}));class ke{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const rs=(n,e)=>{if(bt(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Ne(n.common.issues);return this._error=t,this._error}}};function j(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,u)=>{const{message:d}=n;return i.code==="invalid_enum_value"?{message:d??u.defaultError}:typeof u.data>"u"?{message:d??r??u.defaultError}:i.code!=="invalid_type"?{message:u.defaultError}:{message:d??t??u.defaultError}},description:s}}class Z{get description(){return this._def.description}_getType(e){return Ze(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Ze(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new de,ctx:{common:e.parent.common,data:e.data,parsedType:Ze(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(An(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ze(e)},s=this._parseSync({data:e,path:r.path,parent:r});return rs(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ze(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return bt(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>bt(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ze(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(An(s)?s:Promise.resolve(s));return rs(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),u=()=>a.addIssue({code:x.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(d=>d?!0:(u(),!1)):i?!0:(u(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new et({schema:this,typeName:S.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Me.create(this,this._def)}nullable(){return tt.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Ae.create(this)}promise(){return Pn.create(this,this._def)}or(e){return En.create([this,e],this._def)}and(e){return On.create(this,e,this._def)}transform(e){return new et({...j(this._def),schema:this,typeName:S.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new Mn({...j(this._def),innerType:this,defaultValue:t,typeName:S.ZodDefault})}brand(){return new ps({typeName:S.ZodBranded,type:this,...j(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new jn({...j(this._def),innerType:this,catchValue:t,typeName:S.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return gr.create(this,e)}readonly(){return $n.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const li=/^c[^\s-]{8,}$/i,pi=/^[0-9a-z]+$/,fi=/^[0-9A-HJKMNP-TV-Z]{26}$/i,hi=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,mi=/^[a-z0-9_-]{21}$/i,gi=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,_i=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,yi=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,vi="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let ur;const wi=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,bi=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,xi=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,Si=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,Ti=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,Ii=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,ss="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",ki=new RegExp(`^${ss}$`);function as(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function Ai(n){return new RegExp(`^${as(n)}$`)}function Ci(n){let e=`${ss}T${as(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function Ei(n,e){return!!((e==="v4"||!e)&&wi.test(n)||(e==="v6"||!e)&&xi.test(n))}function Oi(n,e){if(!gi.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function Ri(n,e){return!!((e==="v4"||!e)&&bi.test(n)||(e==="v6"||!e)&&Si.test(n))}class De extends Z{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==k.string){const a=this._getOrReturnCtx(e);return I(a,{code:x.invalid_type,expected:k.string,received:a.parsedType}),N}const r=new de;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),I(s,{code:x.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),I(s,{code:x.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,u=e.data.length<a.value;(i||u)&&(s=this._getOrReturnCtx(e,s),i?I(s,{code:x.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):u&&I(s,{code:x.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")yi.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"email",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")ur||(ur=new RegExp(vi,"u")),ur.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"emoji",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")hi.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"uuid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")mi.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"nanoid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")li.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"cuid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")pi.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"cuid2",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")fi.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"ulid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),I(s,{validation:"url",code:x.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"regex",code:x.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),I(s,{code:x.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),I(s,{code:x.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),I(s,{code:x.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?Ci(a).test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{code:x.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?ki.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{code:x.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?Ai(a).test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{code:x.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?_i.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"duration",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?Ei(e.data,a.version)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"ip",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?Oi(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"jwt",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?Ri(e.data,a.version)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"cidr",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?Ti.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"base64",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?Ii.test(e.data)||(s=this._getOrReturnCtx(e,s),I(s,{validation:"base64url",code:x.invalid_string,message:a.message}),r.dirty()):J.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:x.invalid_string,...C.errToObj(r)})}_addCheck(e){return new De({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...C.errToObj(e)})}url(e){return this._addCheck({kind:"url",...C.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...C.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...C.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...C.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...C.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...C.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...C.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...C.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...C.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...C.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...C.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...C.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...C.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...C.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...C.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...C.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...C.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...C.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...C.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...C.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...C.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...C.errToObj(t)})}nonempty(e){return this.min(1,C.errToObj(e))}trim(){return new De({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new De({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new De({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}De.create=n=>new De({checks:[],typeName:S.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});function Ni(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class xt extends Z{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==k.number){const a=this._getOrReturnCtx(e);return I(a,{code:x.invalid_type,expected:k.number,received:a.parsedType}),N}let r;const s=new de;for(const a of this._def.checks)a.kind==="int"?J.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),I(r,{code:x.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),I(r,{code:x.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),I(r,{code:x.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?Ni(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),I(r,{code:x.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),I(r,{code:x.not_finite,message:a.message}),s.dirty()):J.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,C.toString(t))}gt(e,t){return this.setLimit("min",e,!1,C.toString(t))}lte(e,t){return this.setLimit("max",e,!0,C.toString(t))}lt(e,t){return this.setLimit("max",e,!1,C.toString(t))}setLimit(e,t,r,s){return new xt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:C.toString(s)}]})}_addCheck(e){return new xt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:C.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:C.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:C.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:C.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:C.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:C.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:C.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:C.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:C.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&J.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}xt.create=n=>new xt({checks:[],typeName:S.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class zt extends Z{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==k.bigint)return this._getInvalidInput(e);let r;const s=new de;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),I(r,{code:x.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),I(r,{code:x.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),I(r,{code:x.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):J.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return I(t,{code:x.invalid_type,expected:k.bigint,received:t.parsedType}),N}gte(e,t){return this.setLimit("min",e,!0,C.toString(t))}gt(e,t){return this.setLimit("min",e,!1,C.toString(t))}lte(e,t){return this.setLimit("max",e,!0,C.toString(t))}lt(e,t){return this.setLimit("max",e,!1,C.toString(t))}setLimit(e,t,r,s){return new zt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:C.toString(s)}]})}_addCheck(e){return new zt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:C.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:C.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:C.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:C.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:C.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}zt.create=n=>new zt({checks:[],typeName:S.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});class cr extends Z{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==k.boolean){const r=this._getOrReturnCtx(e);return I(r,{code:x.invalid_type,expected:k.boolean,received:r.parsedType}),N}return ve(e.data)}}cr.create=n=>new cr({typeName:S.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Cn extends Z{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==k.date){const a=this._getOrReturnCtx(e);return I(a,{code:x.invalid_type,expected:k.date,received:a.parsedType}),N}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return I(a,{code:x.invalid_date}),N}const r=new de;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),I(s,{code:x.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),I(s,{code:x.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):J.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new Cn({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:C.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:C.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}Cn.create=n=>new Cn({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:S.ZodDate,...j(n)});class is extends Z{_parse(e){if(this._getType(e)!==k.symbol){const r=this._getOrReturnCtx(e);return I(r,{code:x.invalid_type,expected:k.symbol,received:r.parsedType}),N}return ve(e.data)}}is.create=n=>new is({typeName:S.ZodSymbol,...j(n)});class dr extends Z{_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return I(r,{code:x.invalid_type,expected:k.undefined,received:r.parsedType}),N}return ve(e.data)}}dr.create=n=>new dr({typeName:S.ZodUndefined,...j(n)});class lr extends Z{_parse(e){if(this._getType(e)!==k.null){const r=this._getOrReturnCtx(e);return I(r,{code:x.invalid_type,expected:k.null,received:r.parsedType}),N}return ve(e.data)}}lr.create=n=>new lr({typeName:S.ZodNull,...j(n)});class pr extends Z{constructor(){super(...arguments),this._any=!0}_parse(e){return ve(e.data)}}pr.create=n=>new pr({typeName:S.ZodAny,...j(n)});class os extends Z{constructor(){super(...arguments),this._unknown=!0}_parse(e){return ve(e.data)}}os.create=n=>new os({typeName:S.ZodUnknown,...j(n)});class Ue extends Z{_parse(e){const t=this._getOrReturnCtx(e);return I(t,{code:x.invalid_type,expected:k.never,received:t.parsedType}),N}}Ue.create=n=>new Ue({typeName:S.ZodNever,...j(n)});class us extends Z{_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return I(r,{code:x.invalid_type,expected:k.void,received:r.parsedType}),N}return ve(e.data)}}us.create=n=>new us({typeName:S.ZodVoid,...j(n)});class Ae extends Z{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==k.array)return I(t,{code:x.invalid_type,expected:k.array,received:t.parsedType}),N;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,u=t.data.length<s.exactLength.value;(i||u)&&(I(t,{code:i?x.too_big:x.too_small,minimum:u?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(I(t,{code:x.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(I(t,{code:x.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,u)=>s.type._parseAsync(new ke(t,i,t.path,u)))).then(i=>de.mergeArray(r,i));const a=[...t.data].map((i,u)=>s.type._parseSync(new ke(t,i,t.path,u)));return de.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new Ae({...this._def,minLength:{value:e,message:C.toString(t)}})}max(e,t){return new Ae({...this._def,maxLength:{value:e,message:C.toString(t)}})}length(e,t){return new Ae({...this._def,exactLength:{value:e,message:C.toString(t)}})}nonempty(e){return this.min(1,e)}}Ae.create=(n,e)=>new Ae({type:n,minLength:null,maxLength:null,exactLength:null,typeName:S.ZodArray,...j(e)});function St(n){if(n instanceof te){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=Me.create(St(r))}return new te({...n._def,shape:()=>e})}else return n instanceof Ae?new Ae({...n._def,type:St(n.element)}):n instanceof Me?Me.create(St(n.unwrap())):n instanceof tt?tt.create(St(n.unwrap())):n instanceof Xe?Xe.create(n.items.map(e=>St(e))):n}class te extends Z{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=J.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==k.object){const l=this._getOrReturnCtx(e);return I(l,{code:x.invalid_type,expected:k.object,received:l.parsedType}),N}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),u=[];if(!(this._def.catchall instanceof Ue&&this._def.unknownKeys==="strip"))for(const l in s.data)i.includes(l)||u.push(l);const d=[];for(const l of i){const p=a[l],f=s.data[l];d.push({key:{status:"valid",value:l},value:p._parse(new ke(s,f,s.path,l)),alwaysSet:l in s.data})}if(this._def.catchall instanceof Ue){const l=this._def.unknownKeys;if(l==="passthrough")for(const p of u)d.push({key:{status:"valid",value:p},value:{status:"valid",value:s.data[p]}});else if(l==="strict")u.length>0&&(I(s,{code:x.unrecognized_keys,keys:u}),r.dirty());else if(l!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const l=this._def.catchall;for(const p of u){const f=s.data[p];d.push({key:{status:"valid",value:p},value:l._parse(new ke(s,f,s.path,p)),alwaysSet:p in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const l=[];for(const p of d){const f=await p.key,h=await p.value;l.push({key:f,value:h,alwaysSet:p.alwaysSet})}return l}).then(l=>de.mergeObjectSync(r,l)):de.mergeObjectSync(r,d)}get shape(){return this._def.shape()}strict(e){return C.errToObj,new te({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:C.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new te({...this._def,unknownKeys:"strip"})}passthrough(){return new te({...this._def,unknownKeys:"passthrough"})}extend(e){return new te({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new te({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:S.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new te({...this._def,catchall:e})}pick(e){const t={};for(const r of J.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new te({...this._def,shape:()=>t})}omit(e){const t={};for(const r of J.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new te({...this._def,shape:()=>t})}deepPartial(){return St(this)}partial(e){const t={};for(const r of J.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new te({...this._def,shape:()=>t})}required(e){const t={};for(const r of J.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof Me;)a=a._def.innerType;t[r]=a}return new te({...this._def,shape:()=>t})}keyof(){return ds(J.objectKeys(this.shape))}}te.create=(n,e)=>new te({shape:()=>n,unknownKeys:"strip",catchall:Ue.create(),typeName:S.ZodObject,...j(e)}),te.strictCreate=(n,e)=>new te({shape:()=>n,unknownKeys:"strict",catchall:Ue.create(),typeName:S.ZodObject,...j(e)}),te.lazycreate=(n,e)=>new te({shape:n,unknownKeys:"strip",catchall:Ue.create(),typeName:S.ZodObject,...j(e)});class En extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const u of a)if(u.result.status==="valid")return u.result;for(const u of a)if(u.result.status==="dirty")return t.common.issues.push(...u.ctx.common.issues),u.result;const i=a.map(u=>new Ne(u.ctx.common.issues));return I(t,{code:x.invalid_union,unionErrors:i}),N}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const d of r){const l={...t,common:{...t.common,issues:[]},parent:null},p=d._parseSync({data:t.data,path:t.path,parent:l});if(p.status==="valid")return p;p.status==="dirty"&&!a&&(a={result:p,ctx:l}),l.common.issues.length&&i.push(l.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const u=i.map(d=>new Ne(d));return I(t,{code:x.invalid_union,unionErrors:u}),N}}get options(){return this._def.options}}En.create=(n,e)=>new En({options:n,typeName:S.ZodUnion,...j(e)});const Pe=n=>n instanceof Nn?Pe(n.schema):n instanceof et?Pe(n.innerType()):n instanceof Dn?[n.value]:n instanceof Qe?n.options:n instanceof mr?J.objectValues(n.enum):n instanceof Mn?Pe(n._def.innerType):n instanceof dr?[void 0]:n instanceof lr?[null]:n instanceof Me?[void 0,...Pe(n.unwrap())]:n instanceof tt?[null,...Pe(n.unwrap())]:n instanceof ps||n instanceof $n?Pe(n.unwrap()):n instanceof jn?Pe(n._def.innerType):[];class fr extends Z{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.object)return I(t,{code:x.invalid_type,expected:k.object,received:t.parsedType}),N;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(I(t,{code:x.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),N)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=Pe(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const u of i){if(s.has(u))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(u)}`);s.set(u,a)}}return new fr({typeName:S.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...j(r)})}}function hr(n,e){const t=Ze(n),r=Ze(e);if(n===e)return{valid:!0,data:n};if(t===k.object&&r===k.object){const s=J.objectKeys(e),a=J.objectKeys(n).filter(u=>s.indexOf(u)!==-1),i={...n,...e};for(const u of a){const d=hr(n[u],e[u]);if(!d.valid)return{valid:!1};i[u]=d.data}return{valid:!0,data:i}}else if(t===k.array&&r===k.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],u=e[a],d=hr(i,u);if(!d.valid)return{valid:!1};s.push(d.data)}return{valid:!0,data:s}}else return t===k.date&&r===k.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class On extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(ts(a)||ts(i))return N;const u=hr(a.value,i.value);return u.valid?((ns(a)||ns(i))&&t.dirty(),{status:t.value,value:u.data}):(I(r,{code:x.invalid_intersection_types}),N)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}On.create=(n,e,t)=>new On({left:n,right:e,typeName:S.ZodIntersection,...j(t)});class Xe extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.array)return I(r,{code:x.invalid_type,expected:k.array,received:r.parsedType}),N;if(r.data.length<this._def.items.length)return I(r,{code:x.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),N;!this._def.rest&&r.data.length>this._def.items.length&&(I(r,{code:x.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,u)=>{const d=this._def.items[u]||this._def.rest;return d?d._parse(new ke(r,i,r.path,u)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>de.mergeArray(t,i)):de.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new Xe({...this._def,rest:e})}}Xe.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new Xe({items:n,typeName:S.ZodTuple,rest:null,...j(e)})};class Rn extends Z{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.object)return I(r,{code:x.invalid_type,expected:k.object,received:r.parsedType}),N;const s=[],a=this._def.keyType,i=this._def.valueType;for(const u in r.data)s.push({key:a._parse(new ke(r,u,r.path,u)),value:i._parse(new ke(r,r.data[u],r.path,u)),alwaysSet:u in r.data});return r.common.async?de.mergeObjectAsync(t,s):de.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof Z?new Rn({keyType:e,valueType:t,typeName:S.ZodRecord,...j(r)}):new Rn({keyType:De.create(),valueType:e,typeName:S.ZodRecord,...j(t)})}}class cs extends Z{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.map)return I(r,{code:x.invalid_type,expected:k.map,received:r.parsedType}),N;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([u,d],l)=>({key:s._parse(new ke(r,u,r.path,[l,"key"])),value:a._parse(new ke(r,d,r.path,[l,"value"]))}));if(r.common.async){const u=new Map;return Promise.resolve().then(async()=>{for(const d of i){const l=await d.key,p=await d.value;if(l.status==="aborted"||p.status==="aborted")return N;(l.status==="dirty"||p.status==="dirty")&&t.dirty(),u.set(l.value,p.value)}return{status:t.value,value:u}})}else{const u=new Map;for(const d of i){const l=d.key,p=d.value;if(l.status==="aborted"||p.status==="aborted")return N;(l.status==="dirty"||p.status==="dirty")&&t.dirty(),u.set(l.value,p.value)}return{status:t.value,value:u}}}}cs.create=(n,e,t)=>new cs({valueType:e,keyType:n,typeName:S.ZodMap,...j(t)});class Vt extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.set)return I(r,{code:x.invalid_type,expected:k.set,received:r.parsedType}),N;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(I(r,{code:x.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(I(r,{code:x.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(d){const l=new Set;for(const p of d){if(p.status==="aborted")return N;p.status==="dirty"&&t.dirty(),l.add(p.value)}return{status:t.value,value:l}}const u=[...r.data.values()].map((d,l)=>a._parse(new ke(r,d,r.path,l)));return r.common.async?Promise.all(u).then(d=>i(d)):i(u)}min(e,t){return new Vt({...this._def,minSize:{value:e,message:C.toString(t)}})}max(e,t){return new Vt({...this._def,maxSize:{value:e,message:C.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}Vt.create=(n,e)=>new Vt({valueType:n,minSize:null,maxSize:null,typeName:S.ZodSet,...j(e)});class Nn extends Z{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}Nn.create=(n,e)=>new Nn({getter:n,typeName:S.ZodLazy,...j(e)});class Dn extends Z{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return I(t,{received:t.data,code:x.invalid_literal,expected:this._def.value}),N}return{status:"valid",value:e.data}}get value(){return this._def.value}}Dn.create=(n,e)=>new Dn({value:n,typeName:S.ZodLiteral,...j(e)});function ds(n,e){return new Qe({values:n,typeName:S.ZodEnum,...j(e)})}class Qe extends Z{_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return I(t,{expected:J.joinValues(r),received:t.parsedType,code:x.invalid_type}),N}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return I(t,{received:t.data,code:x.invalid_enum_value,options:r}),N}return ve(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return Qe.create(e,{...this._def,...t})}exclude(e,t=this._def){return Qe.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}Qe.create=ds;class mr extends Z{_parse(e){const t=J.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==k.string&&r.parsedType!==k.number){const s=J.objectValues(t);return I(r,{expected:J.joinValues(s),received:r.parsedType,code:x.invalid_type}),N}if(this._cache||(this._cache=new Set(J.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=J.objectValues(t);return I(r,{received:r.data,code:x.invalid_enum_value,options:s}),N}return ve(e.data)}get enum(){return this._def.values}}mr.create=(n,e)=>new mr({values:n,typeName:S.ZodNativeEnum,...j(e)});class Pn extends Z{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.promise&&t.common.async===!1)return I(t,{code:x.invalid_type,expected:k.promise,received:t.parsedType}),N;const r=t.parsedType===k.promise?t.data:Promise.resolve(t.data);return ve(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}Pn.create=(n,e)=>new Pn({type:n,typeName:S.ZodPromise,...j(e)});class et extends Z{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===S.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{I(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async u=>{if(t.value==="aborted")return N;const d=await this._def.schema._parseAsync({data:u,path:r.path,parent:r});return d.status==="aborted"?N:d.status==="dirty"||t.value==="dirty"?Gt(d.value):d});{if(t.value==="aborted")return N;const u=this._def.schema._parseSync({data:i,path:r.path,parent:r});return u.status==="aborted"?N:u.status==="dirty"||t.value==="dirty"?Gt(u.value):u}}if(s.type==="refinement"){const i=u=>{const d=s.refinement(u,a);if(r.common.async)return Promise.resolve(d);if(d instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return u};if(r.common.async===!1){const u=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return u.status==="aborted"?N:(u.status==="dirty"&&t.dirty(),i(u.value),{status:t.value,value:u.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(u=>u.status==="aborted"?N:(u.status==="dirty"&&t.dirty(),i(u.value).then(()=>({status:t.value,value:u.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!bt(i))return N;const u=s.transform(i.value,a);if(u instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:u}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>bt(i)?Promise.resolve(s.transform(i.value,a)).then(u=>({status:t.value,value:u})):N);J.assertNever(s)}}et.create=(n,e,t)=>new et({schema:n,typeName:S.ZodEffects,effect:e,...j(t)}),et.createWithPreprocess=(n,e,t)=>new et({schema:e,effect:{type:"preprocess",transform:n},typeName:S.ZodEffects,...j(t)});class Me extends Z{_parse(e){return this._getType(e)===k.undefined?ve(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Me.create=(n,e)=>new Me({innerType:n,typeName:S.ZodOptional,...j(e)});class tt extends Z{_parse(e){return this._getType(e)===k.null?ve(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}tt.create=(n,e)=>new tt({innerType:n,typeName:S.ZodNullable,...j(e)});class Mn extends Z{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===k.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}Mn.create=(n,e)=>new Mn({innerType:n,typeName:S.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...j(e)});class jn extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return An(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Ne(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Ne(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}jn.create=(n,e)=>new jn({innerType:n,typeName:S.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...j(e)});class ls extends Z{_parse(e){if(this._getType(e)!==k.nan){const r=this._getOrReturnCtx(e);return I(r,{code:x.invalid_type,expected:k.nan,received:r.parsedType}),N}return{status:"valid",value:e.data}}}ls.create=n=>new ls({typeName:S.ZodNaN,...j(n)});class ps extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class gr extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?N:a.status==="dirty"?(t.dirty(),Gt(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?N:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new gr({in:e,out:t,typeName:S.ZodPipeline})}}class $n extends Z{_parse(e){const t=this._def.innerType._parse(e),r=s=>(bt(s)&&(s.value=Object.freeze(s.value)),s);return An(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}$n.create=(n,e)=>new $n({innerType:n,typeName:S.ZodReadonly,...j(e)});var S;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(S||(S={}));const c=De.create,A=xt.create,nt=cr.create,U=pr.create;Ue.create;const B=Ae.create,m=te.create,fs=En.create,fe=fr.create;On.create,Xe.create;const ne=Rn.create,Di=Nn.create,g=Dn.create,ie=Qe.create;Pn.create,Me.create,tt.create;function Pi(){return{}}function Mi(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==S.ZodAny&&(t.items=G(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&W(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&W(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(W(t,"minItems",n.exactLength.value,n.exactLength.message,e),W(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function ji(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?W(t,"minimum",r.value,r.message,e):W(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),W(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?W(t,"maximum",r.value,r.message,e):W(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),W(t,"maximum",r.value,r.message,e));break;case"multipleOf":W(t,"multipleOf",r.value,r.message,e);break}return t}function $i(){return{type:"boolean"}}function Fi(n,e){return G(n.type._def,e)}const Li=(n,e)=>G(n.innerType._def,e);function hs(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>hs(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return Zi(n,e)}}const Zi=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":W(t,"minimum",r.value,r.message,e);break;case"max":W(t,"maximum",r.value,r.message,e);break}return t};function Ui(n,e){return{...G(n.innerType._def,e),default:n.defaultValue()}}function qi(n,e,t){return e.effectStrategy==="input"?G(n.schema._def,e,t):{}}function Ji(n){return{type:"string",enum:[...n.values]}}const Bi=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function Gi(n,e){const t=[G(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),G(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(Bi(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:u,...d}=a;i=d}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function zi(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let _r;const rt={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(_r===void 0&&(_r=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),_r),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function ms(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?Vi(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":W(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":W(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":Se(t,"email",s.message,e);break;case"format:idn-email":Se(t,"idn-email",s.message,e);break;case"pattern:zod":Te(t,rt.email,s.message,e);break}break;case"url":Se(t,"uri",s.message,e);break;case"uuid":Se(t,"uuid",s.message,e);break;case"regex":Te(t,s.regex,s.message,e);break;case"cuid":Te(t,rt.cuid,s.message,e);break;case"cuid2":Te(t,rt.cuid2,s.message,e);break;case"startsWith":Te(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":Te(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":Se(t,"date-time",s.message,e);break;case"date":Se(t,"date",s.message,e);break;case"time":Se(t,"time",s.message,e);break;case"duration":Se(t,"duration",s.message,e);break;case"length":W(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),W(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{Te(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&Se(t,"ipv4",s.message,e),s.version!=="v4"&&Se(t,"ipv6",s.message,e);break}case"emoji":Te(t,rt.emoji,s.message,e);break;case"ulid":{Te(t,rt.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{Se(t,"binary",s.message,e);break}case"contentEncoding:base64":{W(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{Te(t,rt.base64,s.message,e);break}}break}case"nanoid":Te(t,rt.nanoid,s.message,e)}return t}const Vi=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),Se=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):W(n,"format",e,t,r)},Te=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:gs(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):W(n,"pattern",gs(e,r),t,r)},gs=(n,e)=>{var l;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,u=!1,d=!1;for(let p=0;p<s.length;p++){if(i){a+=s[p],i=!1;continue}if(r.i){if(u){if(s[p].match(/[a-z]/)){d?(a+=s[p],a+=`${s[p-2]}-${s[p]}`.toUpperCase(),d=!1):s[p+1]==="-"&&((l=s[p+2])!=null&&l.match(/[a-z]/))?(a+=s[p],d=!0):a+=`${s[p]}${s[p].toUpperCase()}`;continue}}else if(s[p].match(/[a-z]/)){a+=`[${s[p]}${s[p].toUpperCase()}]`;continue}}if(r.m){if(s[p]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[p]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[p]==="."){a+=u?`${s[p]}\r
`:`[${s[p]}\r
]`;continue}a+=s[p],s[p]==="\\"?i=!0:u&&s[p]==="]"?u=!1:!u&&s[p]==="["&&(u=!0)}try{const p=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function _s(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===S.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((u,d)=>({...u,[d]:G(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",d]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:G(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===S.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const u=Object.entries(ms(n.keyType._def,e)).reduce((d,[l,p])=>l==="type"?d:{...d,[l]:p},{});return{...t,propertyNames:u}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===S.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function Hi(n,e){if(e.mapStrategy==="record")return _s(n,e);const t=G(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=G(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function Wi(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function Ki(){return{not:{}}}function Yi(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const Fn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function Xi(n,e){if(e.target==="openApi3")return ys(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in Fn&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=Fn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,u)=>u.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return ys(n,e)}const ys=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>G(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function Qi(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:Fn[n.innerType._def.typeName],nullable:!0}:{type:[Fn[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=G(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=G(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function eo(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",Qr(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?W(t,"minimum",r.value,r.message,e):W(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),W(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?W(t,"maximum",r.value,r.message,e):W(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),W(t,"maximum",r.value,r.message,e));break;case"multipleOf":W(t,"multipleOf",r.value,r.message,e);break}return t}function to(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":G(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":G(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function no(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var d;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],u=G(a._def,{...e,currentPath:i,propertyPath:i});if(u===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((d=a._def)==null?void 0:d.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:u},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:to(n,e)};return t.required.length||delete t.required,t}const ro=(n,e)=>{if(e.propertyPath&&e.currentPath.slice(0,e.propertyPath.length).toString()===e.propertyPath.toString())return G(n.innerType._def,{...e,currentPath:e.currentPath});const t=G(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},so=(n,e)=>{if(e.pipeStrategy==="input")return G(n.in._def,e);if(e.pipeStrategy==="output")return G(n.out._def,e);const t=G(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=G(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function ao(n,e){return G(n.type._def,e)}function io(n,e){const r={type:"array",uniqueItems:!0,items:G(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&W(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&W(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function oo(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>G(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:G(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>G(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function uo(){return{not:{}}}function co(){return{}}const lo=(n,e)=>G(n.innerType._def,e);function G(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const u=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(u!==si)return u}if(r&&!t){const u=po(r,e);if(u!==void 0)return"$ref"in u&&e.seenRefs.add(u.$ref),u}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=ho(n,n.typeName,e,t);return a&&mo(n,e,a),s.jsonSchema=a,a}const po=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:fo(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},fo=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},ho=(n,e,t,r)=>{switch(e){case S.ZodString:return ms(n,t);case S.ZodNumber:return eo(n,t);case S.ZodObject:return no(n,t);case S.ZodBigInt:return ji(n,t);case S.ZodBoolean:return $i();case S.ZodDate:return hs(n,t);case S.ZodUndefined:return uo();case S.ZodNull:return Yi(t);case S.ZodArray:return Mi(n,t);case S.ZodUnion:case S.ZodDiscriminatedUnion:return Xi(n,t);case S.ZodIntersection:return Gi(n,t);case S.ZodTuple:return oo(n,t);case S.ZodRecord:return _s(n,t);case S.ZodLiteral:return zi(n,t);case S.ZodEnum:return Ji(n);case S.ZodNativeEnum:return Wi(n);case S.ZodNullable:return Qi(n,t);case S.ZodOptional:return ro(n,t);case S.ZodMap:return Hi(n,t);case S.ZodSet:return io(n,t);case S.ZodLazy:return G(n.getter()._def,t);case S.ZodPromise:return ao(n,t);case S.ZodNaN:case S.ZodNever:return Ki();case S.ZodEffects:return qi(n,t,r);case S.ZodAny:return Pi();case S.ZodUnknown:return co();case S.ZodDefault:return Ui(n,t);case S.ZodBranded:return Fi(n,t);case S.ZodReadonly:return lo(n,t);case S.ZodCatch:return Li(n,t);case S.ZodPipeline:return so(n,t);case S.ZodFunction:case S.ZodVoid:case S.ZodSymbol:return;default:return(s=>{})()}},mo=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),go=(n,e)=>{const t=oi(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=G(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(ii(t.definitions))return;const d={},l=new Set;for(let p=0;p<500;p++){const f=Object.entries(t.definitions).filter(([h])=>!l.has(h));if(f.length===0)break;for(const[h,w]of f)d[h]=G(ir(w),{...t,currentPath:[...t.basePath,t.definitionPath,h]},!0)??{},l.add(h)}return d})(),u=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?u.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(u.$schema="https://json-schema.org/draft/2019-09/schema#"),u};function _o(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function vs(n,e){return go(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function yo(n,e,t){return kn({type:"json_schema",...t,name:e,strict:!0,schema:vs(n,{name:e})},r=>n.parse(JSON.parse(r)))}function vo(n){return _o({type:"function",name:n.name,parameters:vs(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class qe extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class wo extends qe{}class ws extends qe{}class he extends qe{}class re extends qe{}class bs extends qe{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class bo extends qe{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class xs extends qe{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class Ln extends qe{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function st(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function xo(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function Zn(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function yr(n,e){const t=r=>JSON.parse(r);if(st(n)){const r=vo({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new re("Input type is not a ZodObject or a valid JSON schema")}function Ss(n){if(n==="text")return"text";if(st(n)){const e=yo(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function So(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var Un={exports:{}},vr,Ts;function To(){if(Ts)return vr;Ts=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;vr=function(p,f){f=f||{};var h=typeof p;if(h==="string"&&p.length>0)return i(p);if(h==="number"&&isFinite(p))return f.long?d(p):u(p);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(p))};function i(p){if(p=String(p),!(p.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(p);if(f){var h=parseFloat(f[1]),w=(f[2]||"ms").toLowerCase();switch(w){case"years":case"year":case"yrs":case"yr":case"y":return h*a;case"weeks":case"week":case"w":return h*s;case"days":case"day":case"d":return h*r;case"hours":case"hour":case"hrs":case"hr":case"h":return h*t;case"minutes":case"minute":case"mins":case"min":case"m":return h*e;case"seconds":case"second":case"secs":case"sec":case"s":return h*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return h;default:return}}}}function u(p){var f=Math.abs(p);return f>=r?Math.round(p/r)+"d":f>=t?Math.round(p/t)+"h":f>=e?Math.round(p/e)+"m":f>=n?Math.round(p/n)+"s":p+"ms"}function d(p){var f=Math.abs(p);return f>=r?l(p,f,r,"day"):f>=t?l(p,f,t,"hour"):f>=e?l(p,f,e,"minute"):f>=n?l(p,f,n,"second"):p+" ms"}function l(p,f,h,w){var v=f>=h*1.5;return Math.round(p/h)+" "+w+(v?"s":"")}return vr}var wr,Is;function Io(){if(Is)return wr;Is=1;function n(e){r.debug=r,r.default=r,r.coerce=l,r.disable=u,r.enable=a,r.enabled=d,r.humanize=To(),r.destroy=p,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let h=0;for(let w=0;w<f.length;w++)h=(h<<5)-h+f.charCodeAt(w),h|=0;return r.colors[Math.abs(h)%r.colors.length]}r.selectColor=t;function r(f){let h,w=null,v,b;function O(...R){if(!O.enabled)return;const $=O,H=Number(new Date),q=H-(h||H);$.diff=q,$.prev=h,$.curr=H,h=H,R[0]=r.coerce(R[0]),typeof R[0]!="string"&&R.unshift("%O");let z=0;R[0]=R[0].replace(/%([a-zA-Z%])/g,(ye,Jt)=>{if(ye==="%%")return"%";z++;const In=r.formatters[Jt];if(typeof In=="function"){const nr=R[z];ye=In.call($,nr),R.splice(z,1),z--}return ye}),r.formatArgs.call($,R),($.log||r.log).apply($,R)}return O.namespace=f,O.useColors=r.useColors(),O.color=r.selectColor(f),O.extend=s,O.destroy=r.destroy,Object.defineProperty(O,"enabled",{enumerable:!0,configurable:!1,get:()=>w!==null?w:(v!==r.namespaces&&(v=r.namespaces,b=r.enabled(f)),b),set:R=>{w=R}}),typeof r.init=="function"&&r.init(O),O}function s(f,h){const w=r(this.namespace+(typeof h>"u"?":":h)+f);return w.log=this.log,w}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const h=(typeof f=="string"?f:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const w of h)w[0]==="-"?r.skips.push(w.slice(1)):r.names.push(w)}function i(f,h){let w=0,v=0,b=-1,O=0;for(;w<f.length;)if(v<h.length&&(h[v]===f[w]||h[v]==="*"))h[v]==="*"?(b=v,O=w,v++):(w++,v++);else if(b!==-1)v=b+1,O++,w=O;else return!1;for(;v<h.length&&h[v]==="*";)v++;return v===h.length}function u(){const f=[...r.names,...r.skips.map(h=>"-"+h)].join(",");return r.enable(""),f}function d(f){for(const h of r.skips)if(i(f,h))return!1;for(const h of r.names)if(i(f,h))return!0;return!1}function l(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return wr=n,wr}var ks;function ko(){return ks||(ks=1,(function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let d=!1;return()=>{d||(d=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let d;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(d=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(d[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(d){if(d[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+d[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const l="color: "+this.color;d.splice(1,0,l,"color: inherit");let p=0,f=0;d[0].replace(/%[a-zA-Z%]/g,h=>{h!=="%%"&&(p++,h==="%c"&&(f=p))}),d.splice(f,0,l)}e.log=console.debug||console.log||(()=>{});function s(d){try{d?e.storage.setItem("debug",d):e.storage.removeItem("debug")}catch{}}function a(){let d;try{d=e.storage.getItem("debug")||e.storage.getItem("DEBUG")}catch{}return!d&&typeof process<"u"&&"env"in process&&(d=process.env.DEBUG),d}function i(){try{return localStorage}catch{}}n.exports=Io()(e);const{formatters:u}=n.exports;u.j=function(d){try{return JSON.stringify(d)}catch(l){return"[UnexpectedJSONParseError]: "+l.message}}})(Un,Un.exports)),Un.exports}var Ao=ko();const Co=So(Ao);function As(){return Mo()}function Cs(n){const e=As();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const Es={get disabled(){return!0}},Os={get dontLogModelData(){return Cs("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return Cs("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},Eo=Os.dontLogModelData,Oo=Os.dontLogToolData;function Rs(n="openai-agents"){return{namespace:n,debug:Co(n),error:console.error,warn:console.warn,dontLogModelData:Eo,dontLogToolData:Oo}}const E=Rs("openai-agents:core");function Je(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function Ro(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function qn(n){const e=n.name?Zn(n.name):Zn(n.execute.name),t=typeof n.errorFunction>"u"?Ro:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&st(n.parameters))throw new re("Strict mode is required for Zod parameters");const{parser:s,schema:a}=yr(n.parameters,e);async function i(p,f,h){const[w,v]=await ee(()=>s(f));if(w!==null)throw E.dontLogToolData?E.debug(`Invalid JSON input for tool ${e}`):E.debug(`Invalid JSON input for tool ${e}: ${f}`),new he("Invalid JSON input for tool");E.dontLogToolData?E.debug(`Invoking tool ${e}`):E.debug(`Invoking tool ${e} with input ${f}`);const b=await n.execute(v,p,h),O=Je(b);return E.dontLogToolData?E.debug(`Tool ${e} completed`):E.debug(`Tool ${e} returned: ${O}`),b}async function u(p,f,h){return i(p,f,h).catch(w=>{if(t){const v=Wt();return v==null||v.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:w.toString()}}),t(p,w)}throw w})}const d=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1,l=typeof n.isEnabled=="function"?async(p,f)=>{const h=n.isEnabled;return!!await h({runContext:p,agent:f})}:async()=>typeof n.isEnabled=="boolean"?n.isEnabled:!0;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:u,needsApproval:d,isEnabled:l}}m({name:c(),description:c().optional(),inputSchema:m({type:g("object"),properties:ne(c(),U()),required:B(c()),additionalProperties:nt()})});const br={};async function No({server:n,convertSchemasToStrict:e,runContext:t,agent:r}){return n.cacheToolsList&&br[n.name]?br[n.name].map(s=>Ns(s,n,e)):su(async s=>{const a=await n.listTools();let i=a;if(t&&r){const d={runContext:t,agent:r,serverName:n.name},l=[];for(const p of a){const f=n.toolFilter;if(f)if(typeof f=="function"){if(!await f(d,p)){E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);continue}}else{const h=f.allowedToolNames??[],w=f.blockedToolNames??[];if(h.length>0||w.length>0){const v=h.length>0?h.includes(p.name):!0,b=w.length>0?w.includes(p.name):!1;if(!v||b){b?E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`):v||E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);continue}}}l.push(p)}i=l}s.spanData.result=i.map(d=>d.name);const u=i.map(d=>Ns(d,n,e));return n.cacheToolsList&&(br[n.name]=i),u},{data:{server:n.name}})}async function Do(n,e,t,r=!1){const s=Array.isArray(n)?{mcpServers:n,runContext:e,agent:t,convertSchemasToStrict:r}:n,{mcpServers:a,convertSchemasToStrict:i=!1,runContext:u,agent:d}=s,l=[],p=new Set;for(const f of a){const h=await No({server:f,convertSchemasToStrict:i,runContext:u,agent:d}),v=[...new Set(h.map(b=>b.name))].filter(b=>p.has(b));if(v.length>0)throw new re(`Duplicate tool names found across MCP servers: ${v.join(", ")}`);for(const b of h)p.add(b.name),l.push(b)}return l}function Ns(n,e,t){var i,u,d,l;async function r(p,f){let h={};typeof p=="string"&&p?h=JSON.parse(p):typeof p=="object"&&p!=null&&(h=p);const w=Wt();w&&(w.spanData.mcp_data={server:e.name});const v=await e.callTool(n.name,h);return v.length===1?v[0]:v}const s={...n.inputSchema,type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((u=n.inputSchema)==null?void 0:u.properties)??{},required:((d=n.inputSchema)==null?void 0:d.required)??[],additionalProperties:((l=n.inputSchema)==null?void 0:l.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const p=Po(s);return qn({name:n.name,description:n.description||"",parameters:p,strict:!0,execute:r})}catch(p){E.warn(`Error converting MCP schema to strict mode: ${p}`)}const a={...s,additionalProperties:!0};return qn({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function Po(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function Mo(){return{}}class Jn{constructor(){T(this,Ct,new EventTarget);T(this,lt,new Map)}on(e,t){const r=e;let s=o(this,lt).get(r);s||(s=new Map,o(this,lt).set(r,s));let a=s.get(t);a||(a=new Set,s.set(t,a));const i=(u=>t(...u.detail??[]));return a.add(i),o(this,Ct).addEventListener(r,i),this}off(e,t){const r=e,s=o(this,lt).get(r),a=s==null?void 0:s.get(t);if(a!=null&&a.size){for(const i of a)o(this,Ct).removeEventListener(r,i);s==null||s.delete(t),(s==null?void 0:s.size)===0&&o(this,lt).delete(r)}return this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return o(this,Ct).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}Ct=new WeakMap,lt=new WeakMap;const Ds=()=>typeof crypto<"u"&&crypto.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){const e=Math.random()*16|0;return(n==="x"?e:e&3|8).toString(16)}),jo=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},$o=globalThis.ReadableStream,Fo=globalThis.TransformStream;class Lo{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class Zo{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const Uo=new Zo;let Ps;function Ce(){return Ps??(Ps=new Lo),Ps}function Ht(){const n=Ce().getStore();return n!=null&&n.trace?n.trace:null}function Wt(){const n=Ce().getStore();return n!=null&&n.span?n.span:null}function Ms(n){return async()=>{const e=Ht();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);return await e.end(),t}}async function qo(n,e,t={}){const r=typeof n=="string"?Ee().createTrace({...t,name:n}):n;return Ce().run({trace:r},Ms(e))}async function Jo(n,e={}){if(Ht())return await n();const r=Ee().createTrace(e);return Ce().run({trace:r},Ms(n))}function Bn(n){const e=Ce().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,Ce().enterWith(e)}function Kt(){var e;const n=Ce().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,Ce().enterWith(n))}function Tt(n){const e=Wt();e&&e.setError(n)}function Bo(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function xr(n){const e=Ce().getStore();if(!e)throw new Error("No existing trace found");const t=Bo(e);return Ce().run(t,n)}class Go{async export(e){if(Es.disabled){E.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId?` groupId=${t.groupId}`:""}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class zo{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){T(this,le);T(this,rn);T(this,Et);T(this,sn);T(this,an);T(this,Ot);T(this,ue,[]);T(this,je);T(this,Ge,null);T(this,ze,!1);T(this,Rt,null);y(this,rn,t),y(this,Et,r),y(this,sn,s),y(this,an,t*a),y(this,Ot,e),y(this,je,Uo),E.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){y(this,Rt,new AbortController),L(this,le,Gr).call(this)}async onTraceStart(e){await L(this,le,Br).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await L(this,le,Br).call(this,e)}async shutdown(e){var t;for(e&&o(this,je).setTimeout(()=>{var r;(r=o(this,Rt))==null||r.abort()},e),E.debug("Shutting down gracefully");o(this,ue).length>0;){if(E.debug(`Waiting for buffer to empty. Items left: ${o(this,ue).length}`),o(this,ze)||await L(this,le,Bt).call(this,!0),(t=o(this,Rt))!=null&&t.signal.aborted){E.debug("Timeout reached, force flushing"),await L(this,le,Bt).call(this,!0);break}await new Promise(r=>o(this,je).setTimeout(r,500))}E.debug("Buffer empty. Exiting"),o(this,je)&&o(this,Ge)&&o(this,je).clearTimeout(o(this,Ge))}async forceFlush(){o(this,ue).length>0&&await L(this,le,Bt).call(this,!0)}}rn=new WeakMap,Et=new WeakMap,sn=new WeakMap,an=new WeakMap,Ot=new WeakMap,ue=new WeakMap,je=new WeakMap,Ge=new WeakMap,ze=new WeakMap,Rt=new WeakMap,le=new WeakSet,Br=async function(e){if(o(this,ue).length+1>o(this,rn)){E.error("Dropping trace because buffer is full");return}o(this,ue).push(e),o(this,ue).length>o(this,an)&&await L(this,le,Bt).call(this)},Gr=function(){y(this,Ge,o(this,je).setTimeout(async()=>{await L(this,le,Bt).call(this),L(this,le,Gr).call(this)},o(this,sn))),typeof o(this,Ge).unref=="function"&&o(this,Ge).unref()},Bt=async function(e=!1){if(o(this,ue).length!==0){if(E.debug(`Exporting batches. Force: ${e}. Buffer size: ${o(this,ue).length}`),e||o(this,ue).length<o(this,Et)){const t=[...o(this,ue)];y(this,ue,[]),y(this,ze,!0),await o(this,Ot).export(t),y(this,ze,!1)}else if(o(this,ue).length>0){const t=o(this,ue).splice(0,o(this,Et));y(this,ze,!0),await o(this,Ot).export(t),y(this,ze,!1)}}};class Vo{constructor(){T(this,me,[])}start(){for(const e of o(this,me))e.start&&e.start()}addTraceProcessor(e){o(this,me).push(e)}setProcessors(e){E.debug("Shutting down old processors");for(const t of o(this,me))t.shutdown();y(this,me,e)}async onTraceStart(e){for(const t of o(this,me))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of o(this,me))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of o(this,me))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of o(this,me))await t.onSpanEnd(e)}async shutdown(e){for(const t of o(this,me))await t.shutdown(e)}async forceFlush(){for(const e of o(this,me))await e.forceFlush()}}me=new WeakMap;let Sr=null,Tr=null;function Ho(){return Sr||(Sr=new Go),Sr}function js(){return Tr||(Tr=new zo(Ho())),Tr}function $s(){return new Date().toISOString()}function Fs(){return`trace_${Ds().replace(/-/g,"")}`}function Wo(){return`span_${Ds().replace(/-/g,"").slice(0,24)}`}function Ko(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const Zr=class Zr{constructor(e,t){_(this,"type","trace.span");T(this,on);T(this,un);T(this,cn);T(this,dn);T(this,pt);T(this,Ve);T(this,He);T(this,ft);T(this,ln);y(this,un,e.traceId),y(this,cn,e.spanId??Wo()),y(this,on,e.data),y(this,pt,t),y(this,dn,e.parentId??null),y(this,ft,e.error??null),y(this,Ve,e.startedAt??null),y(this,He,e.endedAt??null)}get traceId(){return o(this,un)}get spanData(){return o(this,on)}get spanId(){return o(this,cn)}get parentId(){return o(this,dn)}get previousSpan(){return o(this,ln)}set previousSpan(e){y(this,ln,e)}start(){if(o(this,Ve)){E.warn("Span already started");return}y(this,Ve,$s()),o(this,pt).onSpanStart(this)}end(){if(o(this,He)){E.debug("Span already finished",this.spanData);return}y(this,He,$s()),o(this,pt).onSpanEnd(this)}setError(e){y(this,ft,e)}get error(){return o(this,ft)}get startedAt(){return o(this,Ve)}get endedAt(){return o(this,He)}clone(){var t;const e=new Zr({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:o(this,Ve)??void 0,endedAt:o(this,He)??void 0,error:o(this,ft)??void 0},o(this,pt));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:Ko(this.spanData),error:this.error}}};on=new WeakMap,un=new WeakMap,cn=new WeakMap,dn=new WeakMap,pt=new WeakMap,Ve=new WeakMap,He=new WeakMap,ft=new WeakMap,ln=new WeakMap;let Yt=Zr;class Be extends Yt{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Ur=class Ur{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");T(this,Nt);T(this,$e);this.traceId=e.traceId??Fs(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},y(this,Nt,t??js()),y(this,$e,e.started??!1)}async start(){o(this,$e)||(y(this,$e,!0),await o(this,Nt).onTraceStart(this))}async end(){o(this,$e)&&(y(this,$e,!1),await o(this,Nt).onTraceEnd(this))}clone(){return new Ur({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:o(this,$e)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};Nt=new WeakMap,$e=new WeakMap;let Xt=Ur;class Ir extends Xt{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class Yo{constructor(){T(this,er);T(this,oe);T(this,ht);y(this,oe,new Vo),y(this,ht,Es.disabled),L(this,er,Xa).call(this)}registerProcessor(e){o(this,oe).addTraceProcessor(e)}setProcessors(e){o(this,oe).setProcessors(e)}getCurrentTrace(){return Ht()}getCurrentSpan(){return Wt()}setDisabled(e){y(this,ht,e)}startExportLoop(){o(this,oe).start()}createTrace(e){if(o(this,ht))return E.debug("Tracing is disabled, Not creating trace %o",e),new Ir;const t=e.traceId??Fs(),r=e.name??"Agent workflow";return E.debug("Creating trace %s with name %s",t,r),new Xt({...e,name:r,traceId:t},o(this,oe))}createSpan(e,t){if(o(this,ht)||e.disabled)return E.debug("Tracing is disabled, Not creating span %o",e),new Be(e.data,o(this,oe));let r,s;if(t){if(t instanceof Xt){if(t instanceof Ir)return E.debug("Parent trace is no-op, returning NoopSpan"),new Be(e.data,o(this,oe));s=t.traceId}else if(t instanceof Yt){if(t instanceof Be)return E.debug("Parent span is no-op, returning NoopSpan"),new Be(e.data,o(this,oe));r=t.spanId,s=t.traceId}}else{const a=Ht(),i=Wt();if(!a)return E.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Be(e.data,o(this,oe));if(i instanceof Be||a instanceof Ir)return E.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Be(e.data,o(this,oe));s=a.traceId,i?(E.debug("Using parent span %s",i.spanId),r=i.spanId):E.debug("No parent span, using current trace %s",a.traceId)}return s?(E.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new Yt({...e,traceId:s,parentId:r},o(this,oe))):(E.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Be(e.data,o(this,oe)))}async shutdown(e){try{E.debug("Shutting down tracing provider"),await o(this,oe).shutdown(e)}catch(t){E.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await o(this,oe).forceFlush()}}oe=new WeakMap,ht=new WeakMap,er=new WeakSet,Xa=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),Ls("SIGINT")||process.exit(130)}),process.on("SIGTERM",async()=>{await e(),Ls("SIGTERM")||process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{E.error("Unhandled rejection",t,r),await e(),Xo("unhandledRejection")||process.exit(1)})}};function Ls(n){return process.listeners(n).length>1}function Xo(n){return process.listeners(n).length>1}let kr;function Ee(){return kr||(kr=new Yo),kr}function Gn(n){return async(e,...t)=>xr(async()=>{const r=n(...t);Bn(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),Kt()}})}function Zs(n,e){var t;return Ee().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function Qo(n,e){var t,r;return Ee().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const Us=Gn(Qo);function eu(n,e){return Ee().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const tu=Gn(eu);function nu(n,e){return Ee().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const qs=Gn(nu);function ru(n,e){return Ee().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const su=Gn(ru);function au(n){Ee().registerProcessor(n)}class Ar{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class iu extends Ar{constructor(){super(...arguments);_(this,"eventEmitter",new Jn)}}class ou extends Ar{constructor(){super(...arguments);_(this,"eventEmitter",new Jn)}}const uu="OPENAI_DEFAULT_MODEL";function zn(n){return n.startsWith("gpt-5-chat")?!1:n.startsWith("gpt-5")}function Js(){return zn(Bs())}function Bs(){var e;return((e=As()[uu])==null?void 0:e.toLowerCase())??"gpt-4.1"}function cu(n){const e=Bs();return zn(e)?{reasoning:{effort:"low"},text:{verbosity:"low"}}:{}}function Gs(n){return JSON.stringify({assistant:n.name})}function du(n){return`transfer_to_${Zn(n.name)}`}function lu(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class zs{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");_(this,"isEnabled",async()=>!0);this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=du(e),this.toolDescription=lu(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function Vs(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new re("You must provide either both `onHandoff` and `inputType` or neither.");async function i(d,l){var p;if(t){if(!l)throw Tt({message:`Handoff function expected non empty input but got: ${l}`,data:{details:"input is empty"}}),new he("Handoff function expected non empty input");try{const f=await t(l);e.onHandoff&&await e.onHandoff(d,f)}catch(f){throw Tt({message:"Invalid JSON provided",data:{}}),E.dontLogToolData||E.error(`Invalid JSON when parsing: ${l}. Error: ${f}`),new he("Invalid JSON provided")}}else await((p=e.onHandoff)==null?void 0:p.call(e,d));return n}const u=new zs(n,i);if(typeof e.isEnabled=="function"){const d=e.isEnabled;u.isEnabled=async({runContext:l,agent:p})=>!!await d({runContext:l,agent:p})}else typeof e.isEnabled=="boolean"&&(u.isEnabled=async()=>e.isEnabled);if(e.inputType){const d=yr(e.inputType,u.toolName);u.inputJsonSchema=d.schema,u.strictJsonSchema=!0,t=d.parser}return e.toolNameOverride&&(u.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(u.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(u.inputFilter=e.inputFilter),u}function pu(n){return n instanceof zs?n:Vs(n)}function Hs({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function Cr({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function fu(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const se=m({providerData:ne(c(),U()).optional()}),at=se.extend({id:c().optional()}),hu=se.extend({type:g("refusal"),refusal:c()}),mu=se.extend({type:g("output_text"),text:c()}),Ws=se.extend({type:g("input_text"),text:c()}),gu=se.extend({type:g("reasoning_text"),text:c()}),_u=se.extend({type:g("input_image"),image:c().or(m({id:c()})).describe("Could be a URL, base64 or an object with a file ID.")}),yu=se.extend({type:g("input_file"),file:c().describe("Either base64 encoded file data or a publicly accessible file URL").or(m({id:c().describe("OpenAI file ID")})).or(m({url:c().describe("Publicly accessible PDF file URL")})).describe("Contents of the file or an object with a file ID.")}),Ks=se.extend({type:g("audio"),audio:c().or(m({id:c()})).describe("Base64 encoded audio data or file id"),format:c().nullable().optional(),transcript:c().nullable().optional()}),vu=se.extend({type:g("image"),image:c().describe("Base64 encoded image data")}),wu=se.extend({type:g("text"),text:c()}),bu=se.extend({type:g("image"),data:c().describe("Base64 encoded image data"),mediaType:c().describe("IANA media type of the image")}),xu=se.extend({type:g("computer_screenshot"),data:c().describe("Base64 encoded image data or URL")}),Su=fe("type",[m({type:g("screenshot")}),m({type:g("click"),x:A(),y:A(),button:ie(["left","right","wheel","back","forward"])}),m({type:g("double_click"),x:A(),y:A()}),m({type:g("scroll"),x:A(),y:A(),scroll_x:A(),scroll_y:A()}),m({type:g("type"),text:c()}),m({type:g("wait")}),m({type:g("move"),x:A(),y:A()}),m({type:g("keypress"),keys:B(c())}),m({type:g("drag"),path:B(m({x:A(),y:A()}))})]),Tu=fe("type",[mu,hu,Ks,vu]),Er=at.extend({type:g("message").optional()}),Vn=Er.extend({role:g("assistant"),status:ie(["in_progress","completed","incomplete"]),content:B(Tu)}),Iu=fe("type",[Ws,_u,yu,Ks]),Ys=Er.extend({role:g("user"),content:B(Iu).or(c())}),Xs=Er.extend({role:g("system"),content:c()});fe("role",[Xs,Vn,Ys]);const Qt=at.extend({type:g("hosted_tool_call"),name:c().describe("The name of the hosted tool"),arguments:c().describe("The arguments of the hosted tool call").optional(),status:c().optional(),output:c().optional()}),en=at.extend({type:g("function_call"),callId:c().describe("The ID of the tool call"),name:c().describe("The name of the function"),status:ie(["in_progress","completed","incomplete"]).optional(),arguments:c()}),Or=at.extend({type:g("function_call_result"),name:c().describe("The name of the tool"),callId:c().describe("The ID of the tool call"),status:ie(["in_progress","completed","incomplete"]),output:fe("type",[wu,bu])}),Rr=at.extend({type:g("computer_call"),callId:c().describe("The ID of the computer call"),status:ie(["in_progress","completed","incomplete"]),action:Su}),ku=at.extend({type:g("computer_call_result"),callId:c().describe("The ID of the computer call"),output:xu}),Au=fe("type",[Rr,en,Qt]),Nr=se.extend({id:c().optional(),type:g("reasoning"),content:B(Ws),rawContent:B(gu).optional()}),Qs=at.extend({type:g("unknown")}),Dr=fe("type",[Vn,Qt,en,Rr,Nr,Qs]),Cu=fs([Ys,Vn,Xs,Qt,en,Rr,Or,ku,Nr,Qs]),Eu=m({requests:A().optional(),inputTokens:A(),outputTokens:A(),totalTokens:A(),inputTokensDetails:ne(c(),A()).optional(),outputTokensDetails:ne(c(),A()).optional()}),ea=se.extend({type:g("output_text_delta"),delta:c()}),Ou=se.extend({type:g("response_started")}),ta=se.extend({type:g("response_done"),response:se.extend({id:c(),usage:Eu,output:B(Dr)})}),Ru=se.extend({type:g("model"),event:U().describe("The event from the model")});fe("type",[ea,ta,Ou,Ru]);class Hn{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);if(typeof e>"u")this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[];else{this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??(e==null?void 0:e.input_tokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??(e==null?void 0:e.output_tokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??(e==null?void 0:e.total_tokens)??0;const t=(e==null?void 0:e.inputTokensDetails)??(e==null?void 0:e.input_tokens_details);this.inputTokensDetails=t?[t]:[];const r=(e==null?void 0:e.outputTokensDetails)??(e==null?void 0:e.output_tokens_details);this.outputTokensDetails=r?[r]:[]}}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,e.inputTokensDetails&&this.inputTokensDetails.push(...e.inputTokensDetails),e.outputTokensDetails&&this.outputTokensDetails.push(...e.outputTokensDetails)}}class It{constructor(e={}){_(this,"context");_(this,"usage");T(this,ge);this.context=e,this.usage=new Hn,y(this,ge,new Map)}_rebuildApprovals(e){y(this,ge,new Map(Object.entries(e)))}isToolApproved({toolName:e,callId:t}){const r=o(this,ge).get(e);if((r==null?void 0:r.approved)===!0&&r.rejected===!0)return E.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((r==null?void 0:r.approved)===!0)return!0;if((r==null?void 0:r.rejected)===!0)return!1;const s=Array.isArray(r==null?void 0:r.approved)?r.approved.includes(t):!1,a=Array.isArray(r==null?void 0:r.rejected)?r.rejected.includes(t):!1;if(s&&a)return E.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`),!0;if(s)return!0;if(a)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){o(this,ge).set(r,{approved:!0,rejected:[]});return}const s=o(this,ge).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}o(this,ge).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){o(this,ge).set(r,{approved:!1,rejected:!0});return}const s=o(this,ge).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}o(this,ge).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(o(this,ge).entries())}}}ge=new WeakMap;class na{constructor(e){_(this,"state");this.state=e}get history(){return tn(this.input,this.newItems)}get output(){return tn([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);E.warn("Accessed finalOutput before agent run is completed.")}}class Pr extends na{constructor(e){super(e)}}class Nu extends na{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");T(this,pn,null);T(this,We);T(this,_e);T(this,Fe);T(this,Dt);T(this,Pt);T(this,fn);T(this,mt,!1);if(y(this,We,t.signal),y(this,Fe,new $o({start:r=>{y(this,_e,r)},cancel:()=>{y(this,mt,!0)}})),y(this,Dt,new Promise((r,s)=>{y(this,Pt,r),y(this,fn,s)})),o(this,We)){const r=()=>{var a,i;if(o(this,mt))return;y(this,mt,!0);const s=o(this,_e);if(y(this,_e,void 0),o(this,Fe).locked){if(s)try{s.close()}catch(u){E.debug(`Failed to close readable stream on abort: ${u}`)}}else o(this,Fe).cancel((a=o(this,We))==null?void 0:a.reason).catch(u=>{E.debug(`Failed to cancel readable stream on abort: ${u}`)});(i=o(this,Pt))==null||i.call(this)};o(this,We).aborted?r():o(this,We).addEventListener("abort",r,{once:!0})}}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=o(this,_e))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&o(this,_e)&&(o(this,_e).close(),y(this,_e,void 0),(t=o(this,Pt))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&o(this,_e)&&(o(this,_e).error(t),y(this,_e,void 0)),y(this,pn,t),(r=o(this,fn))==null||r.call(this,t),o(this,Dt).catch(s=>{E.debug(`Resulted in an error: ${s}`)})}get cancelled(){return o(this,mt)}toStream(){return o(this,Fe)}get completed(){return o(this,Dt)}get error(){return o(this,pn)}toTextStream(t={}){const r=o(this,Fe).pipeThrough(new Fo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=ea.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?jo.fromWeb(r):r}[Symbol.asyncIterator](){return o(this,Fe)[Symbol.asyncIterator]()}}pn=new WeakMap,We=new WeakMap,_e=new WeakMap,Fe=new WeakMap,Dt=new WeakMap,Pt=new WeakMap,fn=new WeakMap,mt=new WeakMap;function ra(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function sa(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class it{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class Wn extends it{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class ot extends it{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class kt extends it{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:Je(this.output)}}}class Mr extends it{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class jr extends it{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class $r extends it{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class we extends it{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function aa(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function Du(n){return n.output.length===0?"":aa(n.output[n.output.length-1])||""}class Pu{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class Mu{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class ju{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function ia(n,e,t,r){var v;const s=[],a=[],i=[],u=[],d=[],l=[],p=new Map(r.map(b=>[b.toolName,b])),f=new Map(t.filter(b=>b.type==="function").map(b=>[b.name,b])),h=t.find(b=>b.type==="computer"),w=new Map(t.filter(b=>{var O;return b.type==="hosted_tool"&&((O=b.providerData)==null?void 0:O.type)==="mcp"}).map(b=>b).map(b=>[b.providerData.server_label,b]));for(const b of n.output){if(b.type==="message")b.role==="assistant"&&s.push(new Wn(b,e));else if(b.type==="hosted_tool_call"){s.push(new ot(b,e));const R=b.name;if(l.push(R),((v=b.providerData)==null?void 0:v.type)==="mcp_approval_request"||b.name==="mcp_approval_request"){const $=b.providerData,H=$.server_label,q=w.get(H);if(typeof q>"u"){const X=`MCP server (${H}) not found in Agent (${e.name})`;throw Tt({message:X,data:{mcp_server_label:H}}),new he(X)}const z=new we({type:"hosted_tool_call",name:$.name,id:$.id,status:"in_progress",providerData:$},e);d.push({requestItem:z,mcpTool:q}),q.providerData.on_approval||s.push(z)}}else if(b.type==="reasoning")s.push(new Mr(b,e));else if(b.type==="computer_call"){if(s.push(new ot(b,e)),l.push("computer_use"),!h)throw Tt({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new he("Model produced computer action without a computer tool.");u.push({toolCall:b,computer:h})}if(b.type!=="function_call")continue;l.push(b.name);const O=p.get(b.name);if(O)s.push(new jr(b,e)),a.push({toolCall:b,handoff:O});else{const R=f.get(b.name);if(!R)throw Tt({message:`Tool ${b.name} not found in agent ${e.name}.`,data:{tool_name:b.name,agent_name:e.name}}),new he(`Tool ${b.name} not found in agent ${e.name}.`);s.push(new ot(b,e)),i.push({toolCall:b,tool:R})}}return{newItems:s,handoffs:a,functions:i,computerActions:u,mcpApprovalRequests:d,toolsUsed:l,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||d.length>0||u.length>0}}}const $u=fe("type",[m({type:g("next_step_handoff"),newAgent:U()}),m({type:g("next_step_final_output"),output:c()}),m({type:g("next_step_run_again")}),m({type:g("next_step_interruption"),data:ne(c(),U())})]);class be{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function oa(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function ua(n,e,t,r,s,a,i){const u=t.filter(v=>v instanceof we&&"callId"in v.rawItem&&v.rawItem.type==="function_call").map(v=>v.rawItem.callId),d=s.functions.filter(v=>u.includes(v.toolCall.callId)),l=await da(n,d,a,i),p=l.map(v=>v.runItem),f=s.mcpApprovalRequests.filter(v=>{var b;return v.requestItem.type==="tool_approval_item"&&v.requestItem.rawItem.type==="hosted_tool_call"&&((b=v.requestItem.rawItem.providerData)==null?void 0:b.type)==="mcp_approval_request"});for(const v of f){const b=v.requestItem.rawItem.id,O=i._context.isToolApproved({toolName:v.requestItem.rawItem.name,callId:b});if(typeof O<"u"){const R={approve:O,approval_request_id:b,reason:void 0};p.push(new ot({type:"hosted_tool_call",name:"mcp_approval_response",providerData:R},n))}}const h=await la(n,l,i),w=t.filter(v=>!(v instanceof we));return h.isFinalOutput?(a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new be(e,r,w,p,{type:"next_step_final_output",output:h.finalOutput})):h.isInterrupted?new be(e,r,w,p,{type:"next_step_interruption",data:{interruptions:h.interruptions}}):new be(e,r,w,p,{type:"next_step_run_again"})}async function ca(n,e,t,r,s,a,i){var O,R,$,H;const u=t;let d=s.newItems;const[l,p]=await Promise.all([da(n,s.functions,a,i),Lu(n,s.computerActions,a,i._context)]);if(d=d.concat(l.map(q=>q.runItem)),d=d.concat(p),s.mcpApprovalRequests.length>0)for(const q of s.mcpApprovalRequests){const z=q.mcpTool.providerData,X=q.requestItem.rawItem.providerData;if(z.on_approval){const ye=await z.on_approval(i._context,q.requestItem),Jt={approve:ye.approve,approval_request_id:X.id,reason:ye.reason};d.push(new ot({type:"hosted_tool_call",name:"mcp_approval_response",providerData:Jt},n))}else{d.push(q.requestItem);const ye={type:"hosted_mcp_tool_approval",tool:q.mcpTool,runItem:new we({type:"hosted_tool_call",name:X.name,id:X.id,arguments:X.arguments,status:"in_progress",providerData:X},n)};l.push(ye)}}if(s.handoffs.length>0)return await Zu(n,e,u,d,r,s.handoffs,a,i._context);const f=await la(n,l,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new be(e,r,u,d,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new be(e,r,u,d,{type:"next_step_interruption",data:{interruptions:f.interruptions}});if((((O=s.functions)==null?void 0:O.length)??0)>0||(((R=s.computerActions)==null?void 0:R.length)??0)>0||((($=s.mcpApprovalRequests)==null?void 0:$.length)??0)>0||(((H=s.handoffs)==null?void 0:H.length)??0)>0)return new be(e,r,u,d,{type:"next_step_run_again"});const w=d.filter(q=>q instanceof Wn),v=w.length>0?aa(w[w.length-1].rawItem):void 0;if(typeof v>"u")return new be(e,r,u,d,{type:"next_step_run_again"});if(!l.some(q=>q.runItem instanceof we)){if(n.outputType==="text")return new be(e,r,u,d,{type:"next_step_final_output",output:v});if(n.outputType!=="text"&&v){const{parser:q}=yr(n.outputType,"final_output"),[z]=await ee(()=>q(v));if(z)throw Tt({message:"Invalid output type",data:{error:String(z)}}),new he("Invalid output type");return new be(e,r,u,d,{type:"next_step_final_output",output:v})}}return new be(e,r,u,d,{type:"next_step_run_again"})}function Kn(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:Je(e)}}}async function da(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(st(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const d=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(d===!1)return Us(async l=>{const p="Tool execution was not approved.";return l.setError({message:p,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),l.spanData.output=p,{type:"function_output",tool:a.tool,output:p,runItem:new kt(Kn(a.toolCall,p),n,p)}},{data:{name:a.tool.name}});if(d!==!0)return{type:"function_approval",tool:a.tool,runItem:new we(a.toolCall,n)}}return Us(async d=>{t.config.traceIncludeSensitiveData&&(d.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool,{toolCall:a.toolCall}),n.emit("agent_tool_start",r._context,a.tool,{toolCall:a.toolCall});const l=await a.tool.invoke(r._context,a.toolCall.arguments,{toolCall:a.toolCall}),p=Je(l);t.emit("agent_tool_end",r._context,n,a.tool,p,{toolCall:a.toolCall}),n.emit("agent_tool_end",r._context,a.tool,p,{toolCall:a.toolCall}),t.config.traceIncludeSensitiveData&&(d.spanData.output=p);const f={type:"function_output",tool:a.tool,output:l,runItem:new kt(Kn(a.toolCall,l),n,l)},h=Xu(a.toolCall);if(h){f.agentRunResult=h;const w=h.interruptions;w.length>0&&(f.interruptions=w)}return f}catch(l){throw d.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(l)}}),l}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new bo(`Failed to run function tools: ${a}`,a,r)}}async function Fu(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function Lu(n,e,t,r,s=void 0){const a=s??E,i=[];for(const u of e){const d=u.computer.computer,l=u.toolCall;t.emit("agent_tool_start",r,n,u.computer,{toolCall:l}),typeof n.emit=="function"&&n.emit("agent_tool_start",r,u.computer,{toolCall:l});let p;try{p=await Fu(d,l)}catch(w){a.error("Failed to execute computer action:",w),p=""}t.emit("agent_tool_end",r,n,u.computer,p,{toolCall:l}),typeof n.emit=="function"&&n.emit("agent_tool_end",r,u.computer,p,{toolCall:l});const f=p?`data:image/png;base64,${p}`:"",h={type:"computer_call_result",callId:l.callId,output:{type:"computer_screenshot",data:f}};i.push(new kt(h,n,f))}return i}async function Zu(n,e,t,r,s,a,i,u){if(r=[...r],a.length===0)return E.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new be(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const l="Multiple handoffs detected, ignoring this one.";for(let p=1;p<a.length;p++)r.push(new kt(Kn(a[p].toolCall,l),n,l))}const d=a[0];return tu(async l=>{const p=d.handoff,f=await p.onInvokeHandoff(u,d.toolCall.arguments);if(l.spanData.to_agent=f.name,a.length>1){const w=a.map(v=>v.handoff.agentName);l.setError({message:"Multiple handoffs requested",data:{requested_agents:w}})}r.push(new $r(Kn(d.toolCall,Gs(f)),n,f)),i.emit("agent_handoff",u,n,f),n.emit("agent_handoff",u,f);const h=p.inputFilter??i.config.handoffInputFilter;if(h){E.debug("Filtering inputs for handoff"),typeof h!="function"&&l.setError({message:"Invalid input filter",data:{details:"not callable"}});const w={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r],runContext:u},v=h(w);e=v.inputHistory,t=v.preHandoffItems,r=v.newItems}return new be(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const Yn={isFinalOutput:!1,isInterrupted:void 0};async function la(n,e,t){if(e.length===0)return Yn;const r=[];for(const i of e)if(i.runItem instanceof we&&r.push(i.runItem),i.type==="function_output"){if(Array.isArray(i.interruptions))r.push(...i.interruptions);else if(i.agentRunResult){const u=i.agentRunResult.interruptions;u.length>0&&r.push(...u)}}if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Yn;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:Je(s.output)}:Yn;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(u=>a.stopAtToolNames.includes(u.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:Je(i.output)}:Yn}if(typeof a=="function")return a(t._context,e);throw new re(`Invalid toolUseBehavior: ${a}`,t)}function Uu(n){if(n instanceof Wn)return"message_output_created";if(n instanceof jr)return"handoff_requested";if(n instanceof $r)return"handoff_occurred";if(n instanceof ot)return"tool_called";if(n instanceof kt)return"tool_output";if(n instanceof Mr)return"reasoning_item_created";if(n instanceof we)return"tool_approval_requested"}function pa(n,e){const t=Uu(e);if(!t){E.warn("Unknown item type: ",e);return}n._addItem(new Mu(t,e))}function qu(n,e){for(const t of e)pa(n,t)}function fa(n,e,t){const r=t==null?void 0:t.skipItems;for(const s of e.newStepItems)r!=null&&r.has(s)||pa(n,s)}class ha{constructor(){T(this,Mt,new Map)}addToolUse(e,t){o(this,Mt).set(e,t)}hasUsedTools(e){return o(this,Mt).has(e)}toJSON(){return Object.fromEntries(Array.from(o(this,Mt).entries()).map(([e,t])=>[e.name,t]))}}Mt=new WeakMap;const Xn="1.0",Ju=g(Xn),Oe=m({name:c()}),ma=m({object:g("trace.span"),id:c(),trace_id:c(),parent_id:c().nullable(),started_at:c().nullable(),ended_at:c().nullable(),error:m({message:c(),data:ne(c(),U()).optional()}).nullable(),span_data:ne(c(),U())}).extend({previous_span:Di(()=>ma).optional()}),ga=m({requests:A(),inputTokens:A(),outputTokens:A(),totalTokens:A()}),_a=m({usage:ga,output:B(Dr),responseId:c().optional(),providerData:ne(c(),U()).optional()}),ya=fe("type",[m({type:g("message_output_item"),rawItem:Vn,agent:Oe}),m({type:g("tool_call_item"),rawItem:Au.or(Qt),agent:Oe}),m({type:g("tool_call_output_item"),rawItem:Or,agent:Oe,output:c()}),m({type:g("reasoning_item"),rawItem:Nr,agent:Oe}),m({type:g("handoff_call_item"),rawItem:en,agent:Oe}),m({type:g("handoff_output_item"),rawItem:Or,sourceAgent:Oe,targetAgent:Oe}),m({type:g("tool_approval_item"),rawItem:en.or(Qt),agent:Oe})]),Bu=m({object:g("trace"),id:c(),workflow_name:c(),group_id:c().nullable(),metadata:ne(c(),U())}),Gu=m({newItems:B(ya),toolsUsed:B(c()),handoffs:B(m({toolCall:U(),handoff:U()})),functions:B(m({toolCall:U(),tool:U()})),computerActions:B(m({toolCall:U(),computer:U()})),mcpApprovalRequests:B(m({requestItem:m({rawItem:m({type:g("hosted_tool_call"),name:c(),arguments:c().optional(),status:c().optional(),output:c().optional(),providerData:ne(c(),U()).nullable().optional()})}),mcpTool:m({type:g("hosted_tool"),name:g("hosted_mcp"),providerData:ne(c(),U())})})).optional()}),va=m({tripwireTriggered:nt(),outputInfo:U()}),zu=m({guardrail:m({type:g("input"),name:c()}),output:va}),Vu=m({guardrail:m({type:g("output"),name:c()}),agentOutput:U(),agent:Oe,output:va}),wa=m({$schemaVersion:Ju,currentTurn:A(),currentAgent:Oe,originalInput:c().or(B(Cu)),modelResponses:B(_a),context:m({usage:ga,approvals:ne(c(),m({approved:B(c()).or(nt()),rejected:B(c()).or(nt())})),context:ne(c(),U())}),toolUseTracker:ne(c(),B(c())),maxTurns:A(),currentAgentSpan:ma.nullable().optional(),noActiveAgentRun:nt(),inputGuardrailResults:B(zu),outputGuardrailResults:B(Vu),currentStep:$u.optional(),lastModelResponse:_a.optional(),generatedItems:B(ya),lastProcessedResponse:Gu.optional(),trace:Bu.nullable()});class ut{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new ha,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=Ht()}get history(){return tn(this._originalInput,this._generatedItems)}getInterruptions(){var e;return((e=this._currentStep)==null?void 0:e.type)!=="next_step_interruption"?[]:this._currentStep.data.interruptions}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:Xn,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId,providerData:s.providerData})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=wa.safeParse(e);if(!t.success)throw new wo(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,h,w,v,b;const[r,s]=await ee(()=>JSON.parse(t));if(r)throw new re(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new re("Run state is missing schema version");if(a!==Xn)throw new re(`Run state schema version ${a} is not supported. Please use version ${Xn}`);const i=wa.parse(JSON.parse(t)),u=Hu(e),d=new It(i.context.context);d._rebuildApprovals(i.context.approvals);const l=u.get(i.currentAgent.name);if(!l)throw new re(`Agent ${i.currentAgent.name} not found`);const p=new ut(d,"",l,i.maxTurns);p._currentTurn=i.currentTurn,p._toolUseTracker=new ha;for(const[O,R]of Object.entries(i.toolUseTracker))p._toolUseTracker.addToolUse(u.get(O),R);if(i.currentAgentSpan){i.trace||E.warn("Trace is not set, skipping tracing setup");const O=Ee().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(h=i.trace)==null?void 0:h.workflow_name,groupId:((w=i.trace)==null?void 0:w.group_id)??void 0,metadata:(v=i.trace)==null?void 0:v.metadata});p._currentAgentSpan=ba(O,i.currentAgentSpan),p._trace=O}return p._noActiveAgentRun=i.noActiveAgentRun,p._inputGuardrailResults=i.inputGuardrailResults,p._outputGuardrailResults=i.outputGuardrailResults.map(O=>({...O,agent:u.get(O.agent.name)})),p._currentStep=i.currentStep,p._originalInput=i.originalInput,p._modelResponses=i.modelResponses.map(xa),p._lastTurnResponse=i.lastModelResponse?xa(i.lastModelResponse):void 0,p._generatedItems=i.generatedItems.map(O=>Sa(O,u)),p._lastProcessedResponse=i.lastProcessedResponse?await Wu(u,p._currentAgent,p._context,i.lastProcessedResponse):void 0,((b=i.currentStep)==null?void 0:b.type)==="next_step_handoff"&&(p._currentStep={type:"next_step_handoff",newAgent:u.get(i.currentStep.newAgent.name)}),p}}function Hu(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof ct?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function ba(n,e){const t=e.span_data,r=e.previous_span?ba(n,e.previous_span):void 0,s=Ee().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function xa(n){const e=new Hn;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>Dr.parse(t)),responseId:n.responseId,providerData:n.providerData}}function Sa(n,e){switch(n.type){case"message_output_item":return new Wn(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new ot(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new kt(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new Mr(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new jr(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new $r(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new we(n.rawItem,e.get(n.agent.name))}}async function Wu(n,e,t,r){const s=await e.getAllTools(t),a=new Map(s.filter(l=>l.type==="function").map(l=>[l.name,l])),i=new Map(s.filter(l=>l.type==="computer").map(l=>[l.name,l])),u=new Map(e.handoffs.map(l=>l instanceof ct?[l.name,Vs(l)]:[l.toolName,l])),d={newItems:r.newItems.map(l=>Sa(l,n)),toolsUsed:r.toolsUsed,handoffs:r.handoffs.map(l=>{if(!u.has(l.handoff.toolName))throw new re(`Handoff ${l.handoff.toolName} not found`);return{toolCall:l.toolCall,handoff:u.get(l.handoff.toolName)}}),functions:await Promise.all(r.functions.map(async l=>{if(!a.has(l.tool.name))throw new re(`Tool ${l.tool.name} not found`);return{toolCall:l.toolCall,tool:a.get(l.tool.name)}})),computerActions:r.computerActions.map(l=>{const p=l.computer.name;if(!i.has(p))throw new re(`Computer tool ${p} not found`);return{toolCall:l.toolCall,computer:i.get(p)}}),mcpApprovalRequests:(r.mcpApprovalRequests??[]).map(l=>({requestItem:new we(l.requestItem.rawItem,e),mcpTool:l.mcpTool}))};return{...d,hasToolsOrApprovalsToRun(){return d.handoffs.length>0||d.functions.length>0||d.mcpApprovalRequests.length>0||d.computerActions.length>0}}}const Ta=10;function Ia(n,e){return n?!1:e?!0:"enabled_without_data"}function tn(n,e){const t=e.filter(r=>r.type!=="tool_approval_item").map(r=>r.rawItem);return typeof n=="string"&&(n=[{type:"message",role:"user",content:n}]),[...n,...t]}class Ku extends ou{constructor(t={}){super();T(this,ce);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??fu(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map(Hs),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(Cr)}run(t,r,s={stream:!1,context:void 0}){return r instanceof ut&&r._trace?qo(r._trace,async()=>(r._currentAgentSpan&&Bn(r._currentAgentSpan),s!=null&&s.stream?L(this,ce,Wr).call(this,t,r,s):L(this,ce,zr).call(this,t,r,s))):Jo(async()=>s!=null&&s.stream?L(this,ce,Wr).call(this,t,r,s):L(this,ce,zr).call(this,t,r,s),{traceId:this.config.traceId,name:this.config.workflowName,groupId:this.config.groupId,metadata:this.config.traceMetadata})}}ce=new WeakSet,zr=async function(t,r,s){return xr(async()=>{var i,u;const a=r instanceof ut?r:new ut(s.context instanceof It?s.context:new It(s.context),r,t,s.maxTurns??Ta);try{for(;;){const d=a._currentAgent.model!==void 0&&a._currentAgent.model!==""||this.config.model!==void 0&&this.config.model!=="";let l=ka(a._currentAgent.model,this.config.model);if(typeof l=="string"&&(l=await this.config.modelProvider.getModel(l)),a._currentStep=a._currentStep??{type:"next_step_run_again"},a._currentStep.type==="next_step_interruption"){if(E.debug("Continuing from interruption"),!a._lastTurnResponse||!a._lastProcessedResponse)throw new re("No model response found in previous state",a);const p=await ua(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);if(a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=p.originalInput,a._generatedItems=p.generatedItems,a._currentStep=p.nextStep,p.nextStep.type==="next_step_interruption")return new Pr(a);continue}if(a._currentStep.type==="next_step_run_again"){const p=await a._currentAgent.getEnabledHandoffs(a._context);if(!a._currentAgentSpan){const H=p.map(q=>q.agentName);a._currentAgentSpan=Zs({data:{name:a._currentAgent.name,handoffs:H,output_type:a._currentAgent.outputSchemaName}}),a._currentAgentSpan.start(),Bn(a._currentAgentSpan)}const f=await a._currentAgent.getAllTools(a._context),h=f.map(H=>ra(H)),w=p.map(H=>sa(H));if(a._currentAgentSpan&&(a._currentAgentSpan.spanData.tools=f.map(H=>H.name)),a._currentTurn++,a._currentTurn>a._maxTurns)throw(i=a._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:a._maxTurns}}),new ws(`Max turns (${a._maxTurns}) exceeded`,a);E.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`),a._currentTurn===1&&await L(this,ce,Vr).call(this,a);const v=tn(a._originalInput,a._generatedItems);a._noActiveAgentRun&&(a._currentAgent.emit("agent_start",a._context,a._currentAgent),this.emit("agent_start",a._context,a._currentAgent));let b={...this.config.modelSettings,...a._currentAgent.modelSettings};const O=a._currentAgent.modelSettings;b=Aa(d,O,l,b),b=oa(a._currentAgent,a._toolUseTracker,b),a._lastTurnResponse=await l.getResponse({systemInstructions:await a._currentAgent.getSystemPrompt(a._context),prompt:await a._currentAgent.getPrompt(a._context),input:v,previousResponseId:s.previousResponseId,conversationId:s.conversationId,modelSettings:b,tools:h,outputType:Ss(a._currentAgent.outputType),handoffs:w,tracing:Ia(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),a._modelResponses.push(a._lastTurnResponse),a._context.usage.add(a._lastTurnResponse.usage),a._noActiveAgentRun=!1;const R=ia(a._lastTurnResponse,a._currentAgent,f,p);a._lastProcessedResponse=R;const $=await ca(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=$.originalInput,a._generatedItems=$.generatedItems,a._currentStep=$.nextStep}if(a._currentStep&&a._currentStep.type==="next_step_final_output")return await L(this,ce,Hr).call(this,a,a._currentStep.output),this.emit("agent_end",a._context,a._currentAgent,a._currentStep.output),a._currentAgent.emit("agent_end",a._context,a._currentStep.output),new Pr(a);if(a._currentStep&&a._currentStep.type==="next_step_handoff")a._currentAgent=a._currentStep.newAgent,a._currentAgentSpan&&(a._currentAgentSpan.end(),Kt(),a._currentAgentSpan=void 0),a._noActiveAgentRun=!0,a._currentStep={type:"next_step_run_again"};else{if(a._currentStep&&a._currentStep.type==="next_step_interruption")return new Pr(a);E.debug("Running next loop")}}}catch(d){throw a._currentAgentSpan&&a._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(d)}}),d}finally{a._currentAgentSpan&&(((u=a._currentStep)==null?void 0:u.type)!=="next_step_interruption"&&a._currentAgentSpan.end(),Kt())}})},Vr=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(Hs));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>qs(async u=>{const d=await i.run(s);return u.spanData.triggered=d.output.tripwireTriggered,d},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new xs(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof xs?a:(t._currentTurn--,new bs(`Input guardrail failed to complete: ${a}`,a,t))}}},Hr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Cr));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context,details:{modelResponse:t._lastTurnResponse}};try{const u=await Promise.all(s.map(async d=>qs(async l=>{const p=await d.run(i);return l.spanData.triggered=p.output.tripwireTriggered,p},{data:{name:d.name}},t._currentAgentSpan)));for(const d of u)if(d.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:d.guardrail.name}}),new Ln(`Output guardrail triggered: ${JSON.stringify(d.output.outputInfo)}`,d,t)}catch(u){throw u instanceof Ln?u:new bs(`Output guardrail failed to complete: ${u}`,u,t)}}},Qa=async function(t,r){var s,a,i;try{for(;;){const u=t.state._currentAgent,d=await u.getEnabledHandoffs(t.state._context),l=await u.getAllTools(t.state._context),p=l.map(h=>ra(h)),f=d.map(h=>sa(h));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(E.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new re("No model response found in previous state",t.state);const h=await ua(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);if(fa(t,h),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=h.originalInput,t.state._generatedItems=h.generatedItems,t.state._currentStep=h.nextStep,h.nextStep.type==="next_step_interruption")return;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const z=d.map(X=>X.agentName);t.state._currentAgentSpan=Zs({data:{name:u.name,handoffs:z,tools:l.map(X=>X.name),output_type:u.outputSchemaName}}),t.state._currentAgentSpan.start(),Bn(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(s=t.state._currentAgentSpan)==null||s.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new ws(`Max turns (${t.state._maxTurns}) exceeded`,t.state);E.debug(`Running agent ${u.name} (turn ${t.state._currentTurn})`);const h=u.model!==void 0&&u.model!==""||this.config.model!==void 0&&this.config.model!=="";let w=ka(u.model,this.config.model);typeof w=="string"&&(w=await this.config.modelProvider.getModel(w)),t.state._currentTurn===1&&await L(this,ce,Vr).call(this,t.state);let v={...this.config.modelSettings,...u.modelSettings};const b=u.modelSettings;v=Aa(h,b,w,v),v=oa(u,t.state._toolUseTracker,v);const O=tn(t.input,t.newItems);t.state._noActiveAgentRun&&(u.emit("agent_start",t.state._context,u),this.emit("agent_start",t.state._context,u));let R;for await(const z of w.getStreamedResponse({systemInstructions:await u.getSystemPrompt(t.state._context),prompt:await u.getPrompt(t.state._context),input:O,previousResponseId:r.previousResponseId,conversationId:r.conversationId,modelSettings:v,tools:p,handoffs:f,outputType:Ss(u.outputType),tracing:Ia(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(z.type==="response_done"){const X=ta.parse(z);R={usage:new Hn(X.response.usage),output:X.response.output,responseId:X.response.id}}if(t.cancelled)return;t._addItem(new Pu(z))}if(t.state._noActiveAgentRun=!1,!R)throw new he("Model did not produce a final response!",t.state);t.state._lastTurnResponse=R,t.state._modelResponses.push(t.state._lastTurnResponse);const $=ia(t.state._lastTurnResponse,u,l,d);t.state._lastProcessedResponse=$;const H=new Set($.newItems);H.size>0&&qu(t,$.newItems);const q=await ca(u,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);fa(t,q,{skipItems:H}),t.state._toolUseTracker.addToolUse(u,$.toolsUsed),t.state._originalInput=q.originalInput,t.state._generatedItems=q.generatedItems,t.state._currentStep=q.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await L(this,ce,Hr).call(this,t.state,t.state._currentStep.output),this.emit("agent_end",t.state._context,u,t.state._currentStep.output),u.emit("agent_end",t.state._context,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(a=t.state._currentStep)==null?void 0:a.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),Kt()),t.state._currentAgentSpan=void 0,t._addItem(new ju(t.state._currentAgent)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):E.debug("Running next loop")}}}catch(u){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(u)}}),u}finally{t.state._currentAgentSpan&&(((i=t.state._currentStep)==null?void 0:i.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),Kt())}},Wr=async function(t,r,s){return s=s??{},xr(async()=>{const a=r instanceof ut?r:new ut(s.context instanceof It?s.context:new It(s.context),r,t,s.maxTurns??Ta),i=new Nu({signal:s.signal,state:a});return i.maxTurns=s.maxTurns??a._maxTurns,L(this,ce,Qa).call(this,i,s).then(()=>{i._done()},u=>{i._raiseError(u)}),i})};function ka(n,e){return typeof n=="string"&&n!==ct.DEFAULT_MODEL_PLACEHOLDER||n?n:e??n??ct.DEFAULT_MODEL_PLACEHOLDER}function Aa(n,e,t,r){var s,a,i,u,d,l,p,f;if(Js()&&n&&(typeof t!="string"||!zn(t))&&((s=e.providerData)!=null&&s.reasoning||(i=(a=e.providerData)==null?void 0:a.text)!=null&&i.verbosity||(u=e.providerData)!=null&&u.reasoning_effort)){const h={...r};return(d=h.providerData)==null||delete d.reasoning,(p=(l=h.providerData)==null?void 0:l.text)==null||delete p.verbosity,(f=h.providerData)==null||delete f.reasoning_effort,h.reasoning&&(delete h.reasoning.effort,delete h.reasoning.summary),h.text&&delete h.text.verbosity,h}return r}const Fr=new WeakMap;function Yu(n,e){n&&Fr.set(n,e)}function Xu(n){const e=Fr.get(n);return e&&Fr.delete(n),e}const Qu=m({input:c()}),jt=class jt extends iu{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"prompt");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new re("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??jt.DEFAULT_MODEL_PLACEHOLDER,this.prompt=t.prompt,this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??cu(),this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,t.model!==void 0&&Js()&&(typeof t.model!="string"||!zn(t.model))&&t.modelSettings===void 0&&(this.modelSettings={}),(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&E.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new jt({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(st(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new jt({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a,needsApproval:i,runConfig:u,runOptions:d,isEnabled:l}=t;return qn({name:r??Zn(this.name),description:s??"",parameters:Qu,strict:!0,needsApproval:i,isEnabled:l,execute:async(p,f,h)=>{if(!xo(p))throw new he("Agent tool called with invalid input");const v=await new Ku(u??{}).run(this,p.input,{context:f,...d??{}}),b=typeof this.toolUseBehavior=="object"&&this.toolUseBehavior!==null&&"stopAtToolNames"in this.toolUseBehavior;typeof a!="function"&&b&&E.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);const O=typeof a=="function"?await a(v):Du(v.rawResponses[v.rawResponses.length-1]);return h!=null&&h.toolCall&&Yu(h.toolCall,v),O}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getPrompt(t){return typeof this.prompt=="function"?await this.prompt(t,this):this.prompt}async getMcpTools(t){return this.mcpServers.length>0?Do({mcpServers:this.mcpServers,runContext:t,agent:this,convertSchemasToStrict:!1}):[]}async getAllTools(t){const r=await this.getMcpTools(t),s=[];for(const a of this.tools){if(a.type==="function"){const i=a.isEnabled;if(!(typeof i=="function"?await i(t,this):typeof i=="boolean"?i:!0))continue}s.push(a)}return[...r,...s]}async getEnabledHandoffs(t){var a;const r=((a=this.handoffs)==null?void 0:a.map(i=>pu(i)))??[],s=[];for(const i of r)await i.isEnabled({runContext:t,agent:this})&&s.push(i);return s}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return st(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}};_(jt,"DEFAULT_MODEL_PLACEHOLDER","");let ct=jt;au(js());function Ca(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Ea(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Oa(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="output_text")return typeof e.text=="string"?e.text:void 0;if(e.type==="output_audio")return typeof e.transcript=="string"?e.transcript:void 0}}function ec(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function tc(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function Ra(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="output_audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function Na(n,e,t){if(e.type==="conversation.item.input_audio_transcription.completed")return n.map(a=>{if(a.itemId===e.item_id&&a.type==="message"&&"role"in a&&a.role==="user"){const i=a.content.map(u=>u.type==="input_audio"?{...u,transcript:e.transcript}:u);return{...a,content:i,status:"completed"}}return a});const r=!t&&e.type==="message"?Ra(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?Ra(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const Da={"User-Agent":`Agents/JavaScript ${V.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${V.version}`},nc=`openai-agents-sdk.${V.version}`;function rc(n,e){const{name:t,arguments:r,...s}=e;return new we({type:"hosted_tool_call",name:t,arguments:JSON.stringify(r),status:"in_progress",providerData:{...s}},n)}function Pa(n){const{name:e,arguments:t,providerData:r}=n.rawItem,{itemId:s,serverLabel:a,...i}=r??{};if(!s||!a)throw new Error("Invalid approval item for Realtime MCP approval request");return{type:"mcp_approval_request",itemId:s,serverLabel:a,...i,name:e,arguments:t?JSON.parse(t):{},approved:null}}class sc extends ct{constructor(t){super(t);_(this,"voice");this.voice=t.voice}}function ac(n){return{debounceTextLength:n.debounceTextLength??100}}function ic({policyHint:n,...e}){const t=Cr(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function oc(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}function dt(n,e){return n in e&&typeof e[n]<"u"}function uc(n){return dt("modalities",n)||dt("inputAudioFormat",n)||dt("outputAudioFormat",n)||dt("inputAudioTranscription",n)||dt("turnDetection",n)||dt("inputAudioNoiseReduction",n)||dt("speed",n)}function cc(n){var e,t,r,s,a,i,u,d;if(!uc(n)){const l=(e=n.audio)!=null&&e.input?{format:Qn(n.audio.input.format),noiseReduction:n.audio.input.noiseReduction??null,transcription:n.audio.input.transcription,turnDetection:n.audio.input.turnDetection}:void 0,p=((r=(t=n.audio)==null?void 0:t.output)==null?void 0:r.voice)??n.voice,f=(s=n.audio)!=null&&s.output||typeof p<"u"?{format:Qn((i=(a=n.audio)==null?void 0:a.output)==null?void 0:i.format),voice:p,speed:(d=(u=n.audio)==null?void 0:u.output)==null?void 0:d.speed}:void 0;return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.outputModalities,audio:l||f?{input:l,output:f}:void 0}}return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.modalities,audio:{input:{format:Qn(n.inputAudioFormat),noiseReduction:n.inputAudioNoiseReduction??null,transcription:n.inputAudioTranscription,turnDetection:n.turnDetection},output:{format:Qn(n.outputAudioFormat),voice:n.voice,speed:n.speed}}}}function Qn(n){if(!n)return;if(typeof n=="object")return n;const e=String(n);return e==="pcm16"?{type:"audio/pcm",rate:24e3}:e==="g711_ulaw"?{type:"audio/pcmu"}:e==="g711_alaw"?{type:"audio/pcma"}:{type:"audio/pcm",rate:24e3}}m({itemId:c()});const Ma=fe("role",[m({itemId:c(),previousItemId:c().nullable().optional(),type:g("message"),role:g("system"),content:B(m({type:g("input_text"),text:c()}))}),m({itemId:c(),previousItemId:c().nullable().optional(),type:g("message"),role:g("user"),status:ie(["in_progress","completed"]),content:B(m({type:g("input_text"),text:c()}).or(m({type:g("input_audio"),audio:c().nullable().optional(),transcript:c().nullable()})))}),m({itemId:c(),previousItemId:c().nullable().optional(),type:g("message"),role:g("assistant"),status:ie(["in_progress","completed","incomplete"]),content:B(m({type:g("output_text"),text:c()}).or(m({type:g("output_audio"),audio:c().nullable().optional(),transcript:c().nullable().optional()})))})]),ja=m({itemId:c(),previousItemId:c().nullable().optional(),type:g("function_call"),status:ie(["in_progress","completed","incomplete"]),arguments:c(),name:c(),output:c().nullable()}),$a=m({itemId:c(),previousItemId:c().nullable().optional(),type:ie(["mcp_call","mcp_tool_call"]),status:ie(["in_progress","completed","incomplete"]),arguments:c(),name:c(),output:c().nullable()}),dc=m({itemId:c(),type:g("mcp_approval_request"),serverLabel:c(),name:c(),arguments:ne(c(),U()),approved:nt().optional().nullable()}),xe=Rs("openai-agents:realtime"),Fa=m({id:c().optional().nullable(),conversation_id:c().optional().nullable(),max_output_tokens:A().or(g("inf")).optional().nullable(),metadata:ne(c(),U()).optional().nullable(),output_modalities:B(c()).optional().nullable(),object:g("realtime.response").optional().nullable(),output:B(U()).optional().nullable(),audio:m({output:m({format:U().optional().nullable(),voice:c().optional().nullable()}).optional().nullable()}).optional().nullable(),status:ie(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:ne(c(),U()).optional().nullable(),usage:m({input_tokens:A().optional(),input_tokens_details:ne(c(),U()).optional().nullable(),output_tokens:A().optional(),output_tokens_details:ne(c(),U()).optional().nullable()}).optional().nullable()}),lc=m({id:c().optional(),audio:c().nullable().optional(),text:c().nullable().optional(),transcript:c().nullable().optional(),type:fs([g("input_text"),g("input_audio"),g("item_reference"),g("output_text"),g("output_audio")])}),At=m({id:c().optional(),arguments:c().optional(),call_id:c().optional(),content:B(lc).optional(),name:c().optional(),output:c().nullable().optional(),role:ie(["user","assistant","system"]).optional(),status:ie(["completed","incomplete","in_progress"]).optional(),type:ie(["message","function_call","function_call_output","mcp_list_tools","mcp_tool_call","mcp_call","mcp_approval_request","mcp_approval_response"]).optional(),approval_request_id:c().nullable().optional(),approve:nt().nullable().optional(),reason:c().nullable().optional(),server_label:c().optional(),error:U().nullable().optional(),tools:B(m({name:c(),description:c(),input_schema:ne(U()).optional()}).passthrough()).optional()}).passthrough(),pc=m({type:g("conversation.created"),event_id:c(),conversation:m({id:c().optional(),object:g("realtime.conversation").optional()})}),fc=m({type:g("conversation.item.added"),event_id:c(),item:At,previous_item_id:c().nullable().optional()}),hc=m({type:g("conversation.item.done"),event_id:c(),item:At,previous_item_id:c().nullable().optional()}),mc=m({type:g("conversation.item.deleted"),event_id:c(),item_id:c()}),gc=m({type:g("conversation.item.input_audio_transcription.completed"),event_id:c(),item_id:c(),content_index:A(),transcript:c(),logprobs:B(U()).nullable().optional()}),_c=m({type:g("conversation.item.input_audio_transcription.delta"),event_id:c(),item_id:c(),content_index:A().optional(),delta:c().optional(),logprobs:B(U()).nullable().optional()}),yc=m({type:g("conversation.item.input_audio_transcription.failed"),event_id:c(),item_id:c(),content_index:A(),error:m({code:c().optional(),message:c().optional(),param:c().optional(),type:c().optional()})}),vc=m({type:g("conversation.item.retrieved"),event_id:c(),item:At}),wc=m({type:g("conversation.item.truncated"),event_id:c(),item_id:c(),audio_end_ms:A(),content_index:A()}),bc=m({type:g("conversation.item.create"),item:At,event_id:c().optional(),previous_item_id:c().nullable().optional()}),xc=m({type:g("conversation.item.delete"),item_id:c(),event_id:c().optional()}),Sc=m({type:g("conversation.item.retrieve"),item_id:c(),event_id:c().optional()}),Tc=m({type:g("conversation.item.truncate"),item_id:c(),audio_end_ms:A(),content_index:A(),event_id:c().optional()}),Ic=m({type:g("error"),event_id:c().optional(),error:U().optional()}),kc=m({type:g("input_audio_buffer.cleared"),event_id:c()}),Ac=m({type:g("input_audio_buffer.append"),audio:c(),event_id:c().optional()}),Cc=m({type:g("input_audio_buffer.clear"),event_id:c().optional()}),Ec=m({type:g("input_audio_buffer.commit"),event_id:c().optional()}),Oc=m({type:g("input_audio_buffer.committed"),event_id:c(),item_id:c(),previous_item_id:c().nullable().optional()}),Rc=m({type:g("input_audio_buffer.speech_started"),event_id:c(),item_id:c(),audio_start_ms:A()}),Nc=m({type:g("input_audio_buffer.speech_stopped"),event_id:c(),item_id:c(),audio_end_ms:A()}),Dc=m({type:g("output_audio_buffer.started"),event_id:c()}).passthrough(),Pc=m({type:g("output_audio_buffer.stopped"),event_id:c()}).passthrough(),Mc=m({type:g("output_audio_buffer.cleared"),event_id:c()}),jc=m({type:g("rate_limits.updated"),event_id:c(),rate_limits:B(m({limit:A().optional(),name:ie(["requests","tokens"]).optional(),remaining:A().optional(),reset_seconds:A().optional()}))}),$c=m({type:g("response.output_audio.delta"),event_id:c(),item_id:c(),content_index:A(),delta:c(),output_index:A(),response_id:c()}),Fc=m({type:g("response.output_audio.done"),event_id:c(),item_id:c(),content_index:A(),output_index:A(),response_id:c()}),Lc=m({type:g("response.output_audio_transcript.delta"),event_id:c(),item_id:c(),content_index:A(),delta:c(),output_index:A(),response_id:c()}),Zc=m({type:g("response.output_audio_transcript.done"),event_id:c(),item_id:c(),content_index:A(),transcript:c(),output_index:A(),response_id:c()}),Uc=m({type:g("response.content_part.added"),event_id:c(),item_id:c(),content_index:A(),output_index:A(),response_id:c(),part:m({audio:c().optional(),text:c().optional(),transcript:c().optional(),type:ie(["text","audio"]).optional()})}),qc=m({type:g("response.content_part.done"),event_id:c(),item_id:c(),content_index:A(),output_index:A(),response_id:c(),part:m({audio:c().optional(),text:c().optional(),transcript:c().optional(),type:ie(["text","audio"]).optional()})}),Jc=m({type:g("response.created"),event_id:c(),response:Fa}),La=m({type:g("response.done"),event_id:c(),response:Fa}),Bc=m({type:g("response.function_call_arguments.delta"),event_id:c(),item_id:c(),call_id:c(),delta:c(),output_index:A(),response_id:c()}),Gc=m({type:g("response.function_call_arguments.done"),event_id:c(),item_id:c(),call_id:c(),arguments:c(),output_index:A(),response_id:c()}),zc=m({type:g("response.output_item.added"),event_id:c(),item:At,output_index:A(),response_id:c()}),Vc=m({type:g("response.output_item.done"),event_id:c(),item:At,output_index:A(),response_id:c()}),Hc=m({type:g("response.output_text.delta"),event_id:c(),item_id:c(),content_index:A(),delta:c(),output_index:A(),response_id:c()}),Wc=m({type:g("response.output_text.done"),event_id:c(),item_id:c(),content_index:A(),text:c(),output_index:A(),response_id:c()}),Kc=m({type:g("session.created"),event_id:c(),session:U()}),Yc=m({type:g("session.updated"),event_id:c(),session:U()}),Xc=m({type:g("response.cancel"),event_id:c().optional(),response_id:c().optional()}),Qc=m({type:g("response.create"),event_id:c().optional(),response:U().optional()}),ed=m({type:g("session.update"),event_id:c().optional(),session:U()}),td=m({type:g("mcp_list_tools.in_progress"),event_id:c().optional(),item_id:c().optional()}),nd=m({type:g("mcp_list_tools.completed"),event_id:c().optional(),item_id:c().optional()}),rd=m({type:g("response.mcp_call_arguments.delta"),event_id:c(),response_id:c(),item_id:c(),output_index:A(),delta:c(),obfuscation:c()}),sd=m({type:g("response.mcp_call_arguments.done"),event_id:c(),response_id:c(),item_id:c(),output_index:A(),arguments:c()}),ad=m({type:g("response.mcp_call.in_progress"),event_id:c(),output_index:A(),item_id:c()}),id=m({type:g("response.mcp_call.completed"),event_id:c(),output_index:A(),item_id:c()}),od=m({type:g("mcp_list_tools.failed"),event_id:c().optional(),item_id:c().optional()}),ud=m({type:c(),event_id:c().optional().nullable()}).passthrough(),cd=fe("type",[pc,fc,hc,mc,gc,_c,yc,vc,wc,Ic,kc,Oc,Rc,Nc,Dc,Pc,Mc,jc,$c,Fc,Lc,Zc,Uc,qc,Jc,La,Bc,Gc,zc,Vc,Hc,Wc,Kc,Yc,td,nd,od,rd,sd,ad,id]);fe("type",[bc,xc,Sc,Tc,Ac,Cc,Ec,Xc,Qc,ed]);function Lr(n){const e=JSON.parse(n.data.toString()),t=cd.safeParse(e);if(!t.success){const r=ud.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const Za="gpt-realtime",Ie={outputModalities:["audio"],audio:{input:{format:{type:"audio/pcm",rate:24e3},transcription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"},noiseReduction:null},output:{format:{type:"audio/pcm",rate:24e3},speed:1}}},qr=class qr extends Ar{constructor(t={}){super();T(this,gt);T(this,hn);T(this,pe,null);T(this,mn,null);_(this,"eventEmitter",new Jn);y(this,gt,t.model??Za),y(this,hn,t.apiKey)}get currentModel(){return o(this,gt)}set currentModel(t){y(this,gt,t)}get _rawSessionConfig(){return o(this,mn)??null}async _getApiKey(t){const r=t.apiKey??o(this,hn);return typeof r=="function"?await r():r}_onMessage(t){var a,i,u,d,l,p;const{data:r,isGeneric:s}=Lr(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="session.updated"&&y(this,mn,r.session),r.type==="response.done"){const f=La.safeParse(r);if(!f.success){xe.error("Error parsing response done event",f.error);return}const h=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,w=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,v=h+w,b=new Hn({inputTokens:h,inputTokensDetails:((u=f.data.response.usage)==null?void 0:u.input_tokens_details)??{},outputTokens:w,outputTokensDetails:((d=f.data.response.usage)==null?void 0:d.output_tokens_details)??{},totalTokens:v});this.emit("usage_update",b),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:h,inputTokensDetails:((l=f.data.response.usage)==null?void 0:l.input_tokens_details)??{},outputTokens:w,outputTokensDetails:((p=f.data.response.usage)==null?void 0:p.output_tokens_details)??{},totalTokens:v}}});return}if(r.type==="response.output_audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.output_text.delta"||r.type==="response.output_audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.output_audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if(r.type==="conversation.item.added"||r.type==="conversation.item.done"||r.type==="conversation.item.retrieved"){if(r.item.type==="mcp_list_tools"&&r.type==="conversation.item.done"){const f=r.item.server_label??"",h=r.item.tools??[];try{this.emit("mcp_tools_listed",{serverLabel:f,tools:h})}catch(w){xe.error("Error emitting mcp_tools_listed",w,r.item)}return}if(r.item.type==="message"){const f=r.type==="conversation.item.added"||r.type==="conversation.item.done"?r.previous_item_id:null,h=Ma.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",h);return}if(r.item.type==="mcp_approval_request"&&r.type==="conversation.item.done"){const f=r.item,h=dc.parse({itemId:f.id,type:f.type,serverLabel:f.server_label,name:f.name,arguments:JSON.parse(f.arguments||"{}"),approved:f.approved});this.emit("item_update",h),this.emit("mcp_approval_request",h);return}if(r.item.type==="mcp_tool_call"||r.item.type==="mcp_call"){const f=r.type==="conversation.item.done"?"completed":"in_progress",h=$a.parse({itemId:r.item.id,type:r.item.type,status:f,arguments:r.item.arguments,name:r.item.name,output:r.item.output});this.emit("item_update",h),r.type==="conversation.item.done"&&this.emit("mcp_tool_call_completed",h);return}}if(r.type==="response.mcp_call.in_progress"){const f=r;this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="mcp_list_tools.in_progress"){const f=r;f.item_id&&this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const h=ja.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",h),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="mcp_tool_call"||f.type==="mcp_call"){const h=$a.parse({itemId:f.id,type:f.type,status:r.type==="response.output_item.done"?"completed":"in_progress",arguments:f.arguments,name:f.name,output:f.output});this.emit("item_update",h);return}if(f.type==="message"){const h=Ma.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:r.type==="response.output_item.done"?f.status??"completed":f.status??"in_progress"});this.emit("item_update",h);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r,{triggerResponse:s=!0}={}){const a=typeof t=="string"?[{type:"input_text",text:t}]:t.content.map(i=>i.type==="input_image"?{type:"input_image",image_url:i.image,...i.providerData??{}}:i);this.sendEvent({type:"conversation.item.create",item:{type:"message",role:"user",content:a},...r}),s&&this.sendEvent({type:"response.create"})}addImage(t,{triggerResponse:r=!0}={}){this.sendMessage({type:"message",role:"user",content:[{type:"input_image",image:t}]},{},{triggerResponse:r})}_getMergedSessionConfig(t){var a,i,u,d,l,p,f,h,w,v,b,O,R,$,H,q,z,X,ye,Jt,In,nr,Ga,za,Va,Ha,Wa,Ka;const r=cc(t),s={type:"realtime",instructions:r.instructions,model:r.model??o(this,gt),output_modalities:r.outputModalities??Ie.outputModalities,audio:{input:{format:((i=(a=r.audio)==null?void 0:a.input)==null?void 0:i.format)??((d=(u=Ie.audio)==null?void 0:u.input)==null?void 0:d.format),noise_reduction:((p=(l=r.audio)==null?void 0:l.input)==null?void 0:p.noiseReduction)??((h=(f=Ie.audio)==null?void 0:f.input)==null?void 0:h.noiseReduction),transcription:((v=(w=r.audio)==null?void 0:w.input)==null?void 0:v.transcription)??((O=(b=Ie.audio)==null?void 0:b.input)==null?void 0:O.transcription),turn_detection:qr.buildTurnDetectionConfig(($=(R=r.audio)==null?void 0:R.input)==null?void 0:$.turnDetection)??((q=(H=Ie.audio)==null?void 0:H.input)==null?void 0:q.turnDetection)},output:{format:((X=(z=r.audio)==null?void 0:z.output)==null?void 0:X.format)??((Jt=(ye=Ie.audio)==null?void 0:ye.output)==null?void 0:Jt.format),voice:((nr=(In=r.audio)==null?void 0:In.output)==null?void 0:nr.voice)??((za=(Ga=Ie.audio)==null?void 0:Ga.output)==null?void 0:za.voice),speed:((Ha=(Va=r.audio)==null?void 0:Va.output)==null?void 0:Ha.speed)??((Ka=(Wa=Ie.audio)==null?void 0:Wa.output)==null?void 0:Ka.speed)}},tool_choice:r.toolChoice??Ie.toolChoice,...r.providerData??{}};return r.prompt&&(s.prompt={id:r.prompt.promptId,version:r.prompt.version,variables:r.prompt.variables}),r.tools&&r.tools.length>0&&(s.tools=r.tools.map(_d=>({..._d,strict:void 0}))),s}static buildTurnDetectionConfig(t){if(typeof t>"u")return;const{type:r,createResponse:s,create_response:a,eagerness:i,interruptResponse:u,interrupt_response:d,prefixPaddingMs:l,prefix_padding_ms:p,silenceDurationMs:f,silence_duration_ms:h,threshold:w,idleTimeoutMs:v,idle_timeout_ms:b,...O}=t,R={type:r,create_response:s||a,eagerness:i,interrupt_response:u||d,prefix_padding_ms:l||p,silence_duration_ms:f||h,idle_timeout_ms:v||b,threshold:w,...O};return Object.keys(R).forEach($=>{R[$]===void 0&&delete R[$]}),Object.keys(R).length>0?R:void 0}set _tracingConfig(t){y(this,pe,t)}_updateTracingConfig(t){var r,s,a;if(typeof o(this,pe)>"u"&&y(this,pe,null),t==="auto"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:"auto"}});return}if(o(this,pe)!==null&&typeof o(this,pe)!="string"&&typeof t!="string"){xe.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){xe.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{type:"realtime",tracing:null}});return}if(o(this,pe)===null||typeof o(this,pe)=="string"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=o(this,pe))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=o(this,pe))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=o(this,pe))==null?void 0:a.workflow_name)){xe.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(o(this,pe)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=ja.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){xe.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Ea(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=ec(t,r),u=new Set(s.map(l=>l.itemId));for(const l of i)u.add(l.itemId);if(u.size>0)for(const l of u)this.sendEvent({type:"conversation.item.delete",item_id:l});const d=[...a,...i];for(const l of d)if(l.type==="message"){const p={type:"message",role:l.role,content:l.content,id:l.itemId};l.role!=="system"&&l.status&&(p.status=l.status),this.sendEvent({type:"conversation.item.create",item:p})}else l.type==="function_call"&&xe.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}sendMcpResponse(t,r){this.sendEvent({type:"conversation.item.create",previous_item_id:t.itemId,item:{type:"mcp_approval_response",approval_request_id:t.itemId,approve:r}})}};gt=new WeakMap,hn=new WeakMap,pe=new WeakMap,mn=new WeakMap;let nn=qr;class Ua extends nn{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");T(this,gn);T(this,K,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0});T(this,_n);T(this,_t,!1);T(this,yn,!1);this.options=t,y(this,gn,t.baseUrl??"https://api.openai.com/v1/realtime/calls"),y(this,_n,t.useInsecureApiKey??!1)}get callId(){return o(this,K).callId}get status(){return o(this,K).status}get connectionState(){return o(this,K)}get muted(){return o(this,yn)}async connect(t){if(o(this,K).status==="connected")return;o(this,K).status==="connecting"&&xe.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??o(this,gn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!o(this,_n)&&!i)throw new re("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");return new Promise(async(u,d)=>{var l,p;try{const f={...t.initialSessionConfig||{},model:this.currentModel},h=new URL(s);let w=new RTCPeerConnection;const v=w.createDataChannel("oai-events");let b;y(this,K,{status:"connecting",peerConnection:w,dataChannel:v,callId:b}),this.emit("connection_change",o(this,K).status),v.addEventListener("open",()=>{y(this,K,{status:"connected",peerConnection:w,dataChannel:v,callId:b}),this.updateSessionConfig(f),this.emit("connection_change",o(this,K).status),this._onOpen(),u()}),v.addEventListener("error",z=>{this.close(),this._onError(z),d(z)}),v.addEventListener("message",z=>{this._onMessage(z);const{data:X,isGeneric:ye}=Lr(z);!X||ye||(X.type==="response.created"?y(this,_t,!0):X.type==="response.done"&&y(this,_t,!1),X.type==="session.created"&&(this._tracingConfig=X.session.tracing,this._updateTracingConfig(f.tracing??"auto")))});const O=this.options.audioElement??document.createElement("audio");O.autoplay=!0,w.ontrack=z=>{O.srcObject=z.streams[0]};const R=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});w.addTrack(R.getAudioTracks()[0]),this.options.changePeerConnection&&(w=await this.options.changePeerConnection(w),y(this,K,{...o(this,K),peerConnection:w}));const $=await w.createOffer();if(await w.setLocalDescription($),!$.sdp)throw new Error("Failed to create offer");const H=await fetch(h,{method:"POST",body:$.sdp,headers:{"Content-Type":"application/sdp",Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":Da["X-OpenAI-Agents-SDK"]}});b=(p=(l=H.headers)==null?void 0:l.get("Location"))==null?void 0:p.split("/").pop(),y(this,K,{...o(this,K),callId:b});const q={type:"answer",sdp:await H.text()};await w.setRemoteDescription(q)}catch(f){this.close(),this._onError(f),d(f)}})}sendEvent(t){if(!o(this,K).dataChannel||o(this,K).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");o(this,K).dataChannel.send(JSON.stringify(t))}mute(t){y(this,yn,t),o(this,K).peerConnection&&o(this,K).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(o(this,K).dataChannel&&o(this,K).dataChannel.close(),o(this,K).peerConnection){const t=o(this,K).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}o(this,K).status!=="disconnected"&&(y(this,K,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0}),this.emit("connection_change",o(this,K).status),this._onClose())}interrupt(){o(this,_t)&&(this.sendEvent({type:"response.cancel"}),y(this,_t,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}gn=new WeakMap,K=new WeakMap,_n=new WeakMap,_t=new WeakMap,yn=new WeakMap;const dd=globalThis.WebSocket;class qa extends nn{constructor(t={}){super(t);T(this,tr);T(this,Ke);T(this,Ye);T(this,ae,{status:"disconnected",websocket:void 0});T(this,vn);T(this,Le);T(this,yt);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);T(this,vt,!1);T(this,$t);T(this,wn);y(this,Ye,t.url),y(this,vn,t.useInsecureApiKey??!1),y(this,$t,t.createWebSocket),y(this,wn,t.skipOpenEventListeners??!1)}getCommonRequestHeaders(){return Da}get status(){return o(this,ae).status}get connectionState(){return o(this,ae)}get muted(){return null}get currentItemId(){return o(this,Le)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,y(this,Ke,await this._getApiKey(t));const s=t.url??o(this,Ye)??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`;y(this,Ye,s);const a={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((i,u)=>{L(this,tr,ei).call(this,i,u,a).catch(u)}),await this.updateSessionConfig(a)}sendEvent(t){if(!o(this,ae).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");o(this,ae).websocket.send(JSON.stringify(t))}close(){var t;(t=o(this,ae).websocket)==null||t.close(),y(this,Le,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,yt,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){o(this,ae).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){o(this,vt)&&(this.sendEvent({type:"response.cancel"}),y(this,vt,!1))}_interrupt(t,r=!0){if(t<0)return;r&&this._cancelResponse();const s=this._audioLengthMs??Number.POSITIVE_INFINITY,a=Math.max(0,Math.floor(Math.min(t,s)));this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:o(this,Le),content_index:o(this,yt),audio_end_ms:a})}interrupt(t=!0){if(!o(this,Le)||typeof this._firstAudioTimestamp!="number")return;const r=Date.now()-this._firstAudioTimestamp;r>=0&&this._interrupt(r,t),y(this,Le,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,yt,void 0)}}Ke=new WeakMap,Ye=new WeakMap,ae=new WeakMap,vn=new WeakMap,Le=new WeakMap,yt=new WeakMap,vt=new WeakMap,$t=new WeakMap,wn=new WeakMap,tr=new WeakSet,ei=async function(t,r,s){if(o(this,ae).websocket){t();return}if(!o(this,Ke))throw new re("API key is not set. Please call `connect()` with an API key first.");if(!o(this,Ke).startsWith("ek_")&&!o(this,vn))throw new re("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");let a=null;if(o(this,$t))a=await o(this,$t).call(this,{url:o(this,Ye),apiKey:o(this,Ke)});else{const u=["realtime","openai-insecure-api-key."+o(this,Ke),nc];a=new dd(o(this,Ye),u)}y(this,ae,{status:"connecting",websocket:a}),this.emit("connection_change",o(this,ae).status);const i=()=>{y(this,ae,{status:"connected",websocket:a}),this.emit("connection_change",o(this,ae).status),this._onOpen(),t()};o(this,wn)===!0?i():a.addEventListener("open",i),a.addEventListener("error",u=>{this._onError(u),y(this,ae,{status:"disconnected",websocket:void 0}),this.emit("connection_change",o(this,ae).status),r(u)}),a.addEventListener("message",u=>{var p,f,h,w,v,b,O;this._onMessage(u);const{data:d,isGeneric:l}=Lr(u);if(!(!d||l))if(d.type==="response.output_audio.delta"){y(this,yt,d.content_index),y(this,Le,d.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const R=Ca(d.delta),$=(h=(f=(p=this._rawSessionConfig)==null?void 0:p.audio)==null?void 0:f.output)==null?void 0:h.format;if($&&typeof $=="object"){const q=$.type;if(q==="audio/pcmu"||q==="audio/pcma")this._audioLengthMs+=R.byteLength/8;else if(q==="audio/pcm"){const z=$.rate??24e3;this._audioLengthMs+=R.byteLength/2/z*1e3}else this._audioLengthMs+=R.byteLength/24/2}else typeof $=="string"?$.startsWith("g711_")?this._audioLengthMs+=R.byteLength/8:this._audioLengthMs+=R.byteLength/24/2:this._audioLengthMs+=R.byteLength/24/2;const H={type:"audio",data:R,responseId:d.response_id};this._onAudio(H)}else if(d.type==="input_audio_buffer.speech_started"){const R=((O=(b=(v=(w=this._rawSessionConfig)==null?void 0:w.audio)==null?void 0:v.input)==null?void 0:b.turn_detection)==null?void 0:O.interrupt_response)??!1;this.interrupt(!R)}else d.type==="response.created"?y(this,vt,!0):d.type==="response.done"?y(this,vt,!1):d.type==="session.created"&&(this._tracingConfig=d.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),a.addEventListener("close",()=>{y(this,ae,{status:"disconnected",websocket:void 0}),this.emit("connection_change",o(this,ae).status),this._onClose()})};const Ja=Symbol("backgroundResult");function ld(n){return{[Ja]:!0,content:n}}function Ba(n){return typeof n=="object"&&n!==null&&Ja in n}function pd(n){return n.type==="function"||n.type==="hosted_tool"&&n.name==="hosted_mcp"}function fd(n){if(n.type==="function")return n;if(n.type==="hosted_tool"&&n.name==="hosted_mcp"){const e=n.providerData.server_url&&n.providerData.server_url.length>0?n.providerData.server_url:void 0;return{type:"mcp",server_label:n.providerData.server_label,server_url:e,headers:n.providerData.headers,allowed_tools:n.providerData.allowed_tools,require_approval:n.providerData.require_approval}}throw new re(`Invalid tool type: ${n}`)}function hd(){return JSON.parse(JSON.stringify(Ie))}class md extends Jn{constructor(t,r={}){super();T(this,Y);_(this,"initialAgent");_(this,"options");T(this,F);T(this,D);T(this,Ft);T(this,P);T(this,Lt,[]);T(this,Zt);T(this,bn,{});T(this,Q,[]);T(this,Ut);T(this,qt,{});T(this,Re,!1);T(this,xn,new Map);T(this,wt,[]);T(this,Sn,hd());T(this,Tn,!0);this.initialAgent=t,this.options=r,typeof r.transport>"u"&&tc()||r.transport==="webrtc"?y(this,F,new Ua):r.transport==="websocket"||typeof r.transport>"u"?y(this,F,new qa):y(this,F,r.transport),y(this,D,t),y(this,P,new It({...r.context??{},history:o(this,Q)})),y(this,Lt,(r.outputGuardrails??[]).map(ic)),y(this,Zt,ac(r.outputGuardrailSettings??{})),y(this,Ut,r.historyStoreAudio??!1),y(this,Tn,r.automaticallyTriggerResponseForMcpToolCalls??!0)}get transport(){return o(this,F)}get currentAgent(){return o(this,D)}get usage(){return o(this,P).usage}get context(){return o(this,P)}get muted(){return o(this,F).muted}get history(){return o(this,Q)}get availableMcpTools(){return o(this,wt)}async updateAgent(t){return o(this,D).emit("agent_handoff",o(this,P),t),this.emit("agent_handoff",o(this,P),o(this,D),t),await L(this,Y,rr).call(this,t),await o(this,F).updateSessionConfig(await L(this,Y,sr).call(this)),t}async connect(t){await L(this,Y,rr).call(this,this.initialAgent),L(this,Y,ri).call(this),await o(this,F).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,url:t.url,initialSessionConfig:await L(this,Y,sr).call(this,this.options.config)}),y(this,Q,[]),this.emit("history_updated",o(this,Q))}updateHistory(t){let r;typeof t=="function"?r=t(o(this,Q)):r=t,o(this,F).resetHistory(o(this,Q),r)}sendMessage(t,r={}){o(this,F).sendMessage(t,r)}addImage(t,{triggerResponse:r=!0}={}){o(this,F).addImage(t,{triggerResponse:r})}mute(t){o(this,F).mute(t)}close(){y(this,qt,{}),o(this,F).close()}sendAudio(t,r={}){o(this,F).sendAudio(t,r)}interrupt(){o(this,F).interrupt()}async approve(t,r={alwaysApprove:!1}){o(this,P).approveTool(t,r);const s=o(this,D).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,Y,ar).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysApprove&&xe.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");const a=Pa(t);o(this,F).sendMcpResponse(a,!0)}else throw new he(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){o(this,P).rejectTool(t,r);const s=o(this,D).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,Y,ar).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysReject&&xe.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");const a=Pa(t);o(this,F).sendMcpResponse(a,!1)}else throw new he(`Tool ${t.rawItem.name} not found`)}}F=new WeakMap,D=new WeakMap,Ft=new WeakMap,P=new WeakMap,Lt=new WeakMap,Zt=new WeakMap,bn=new WeakMap,Q=new WeakMap,Ut=new WeakMap,qt=new WeakMap,Re=new WeakMap,xn=new WeakMap,wt=new WeakMap,Sn=new WeakMap,Tn=new WeakMap,Y=new WeakSet,rr=async function(t){y(this,D,t);const r=await o(this,D).getEnabledHandoffs(o(this,P)),s=r.map(d=>d.getHandoffAsFunctionTool()),a=(await o(this,D).getAllTools(o(this,P))).filter(pd).map(fd),i=typeof o(this,D).tools<"u"||typeof o(this,D).mcpServers<"u",u=r.length>0;y(this,Ft,i||u?[...a,...s]:void 0),L(this,Y,Yr).call(this)},sr=async function(t={}){const r=await o(this,D).getSystemPrompt(o(this,P)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&xe.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");const i={...{...o(this,Sn)??{},...this.options.config??{},...t??{}},instructions:r,voice:o(this,D).voice,model:this.options.model,tools:o(this,Ft),tracing:s,prompt:typeof o(this,D).prompt=="function"?await o(this,D).prompt(o(this,P),o(this,D)):o(this,D).prompt};return y(this,Sn,i),i},ti=async function(t,r){const s=await r.onInvokeHandoff(o(this,P),t.arguments);o(this,D).emit("agent_handoff",o(this,P),s),this.emit("agent_handoff",o(this,P),o(this,D),s),await L(this,Y,rr).call(this,s),await o(this,F).updateSessionConfig(await L(this,Y,sr).call(this));const a=Gs(s);return o(this,F).sendFunctionCallOutput(t,a,!0),s},ar=async function(t,r){o(this,P).context.history=JSON.parse(JSON.stringify(o(this,Q)));let s=t.arguments;if(r.parameters&&(st(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(o(this,P),s,t.callId)){const d=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(d===!1){this.emit("agent_tool_start",o(this,P),o(this,D),r,{toolCall:t}),o(this,D).emit("agent_tool_start",o(this,P),r,{toolCall:t});const l="Tool execution was not approved.";o(this,F).sendFunctionCallOutput(t,l,!0),this.emit("agent_tool_end",o(this,P),o(this,D),r,l,{toolCall:t}),o(this,D).emit("agent_tool_end",o(this,P),r,l,{toolCall:t});return}else if(typeof d>"u"){this.emit("tool_approval_requested",o(this,P),o(this,D),{type:"function_approval",tool:r,approvalItem:new we(t,o(this,D))});return}}this.emit("agent_tool_start",o(this,P),o(this,D),r,{toolCall:t}),o(this,D).emit("agent_tool_start",o(this,P),r,{toolCall:t}),o(this,P).context.history=JSON.parse(JSON.stringify(o(this,Q)));const i=await r.invoke(o(this,P),t.arguments,{toolCall:t});let u;Ba(i)?(u=Je(i.content),o(this,F).sendFunctionCallOutput(t,u,!1)):(u=Je(i),o(this,F).sendFunctionCallOutput(t,u,!0)),this.emit("agent_tool_end",o(this,P),o(this,D),r,u,{toolCall:t}),o(this,D).emit("agent_tool_end",o(this,P),r,u,{toolCall:t})},ni=async function(t){const r=await o(this,D).getEnabledHandoffs(o(this,P)),s=new Map(r.map(d=>[d.toolName,d])),a=await o(this,D).getAllTools(o(this,P)),i=new Map(a.map(d=>[d.name,d])),u=s.get(t.name);if(u)await L(this,Y,ti).call(this,t,u);else{const d=i.get(t.name);if(d&&d.type==="function")await L(this,Y,ar).call(this,t,d);else throw new he(`Tool ${t.name} not found`)}},Kr=async function(t,r,s){if(o(this,Lt).length===0)return;const a={agent:o(this,D),agentOutput:t,context:o(this,P)},u=(await Promise.all(o(this,Lt).map(d=>d.run(a)))).find(d=>d.output.tripwireTriggered);if(u){if(o(this,qt)[r])return;o(this,qt)[r]=!0;const d=new Ln(`Output guardrail triggered: ${JSON.stringify(u.output.outputInfo)}`,u);this.emit("guardrail_tripped",o(this,P),o(this,D),d,{itemId:s}),this.interrupt();const l=oc(u);this.sendMessage(l);return}},ri=function(){o(this,F).on("*",s=>{if(this.emit("transport_event",s),s.type==="conversation.item.input_audio_transcription.completed")try{const a=s;y(this,Q,Na(o(this,Q),a,o(this,Ut))),o(this,P).context.history=o(this,Q),this.emit("history_updated",o(this,Q))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,F).on("mcp_tools_listed",({serverLabel:s,tools:a})=>{try{o(this,xn).set(s,a??[]),L(this,Y,Yr).call(this)}catch(i){this.emit("error",{type:"error",error:i})}}),o(this,F).on("audio",s=>{o(this,Re)||(y(this,Re,!0),this.emit("audio_start",o(this,P),o(this,D))),this.emit("audio",s)}),o(this,F).on("turn_started",()=>{y(this,Re,!1),this.emit("agent_start",o(this,P),o(this,D)),o(this,D).emit("agent_start",o(this,P),o(this,D))}),o(this,F).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Oa(a)??"",u=(a==null?void 0:a.id)??"";this.emit("agent_end",o(this,P),o(this,D),i),o(this,D).emit("agent_end",o(this,P),i),L(this,Y,Kr).call(this,i,s.response.id,u)}),o(this,F).on("audio_done",()=>{o(this,Re)&&y(this,Re,!1),this.emit("audio_stopped",o(this,P),o(this,D))});let t=0,r;o(this,F).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,u=s.responseId;r!==i&&(r=i,t=0);const l=(o(this,bn)[i]??"")+a;if(o(this,bn)[i]=l,o(this,Zt).debounceTextLength<0)return;const p=Math.floor(l.length/o(this,Zt).debounceTextLength);p>t&&(t=p,L(this,Y,Kr).call(this,l,u,i))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,F).on("item_update",s=>{try{const a=!o(this,Q).some(i=>i.itemId===s.itemId);if(y(this,Q,Na(o(this,Q),s,o(this,Ut))),o(this,P).context.history=o(this,Q),a){const i=o(this,Q).find(u=>u.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",o(this,Q))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,F).on("item_deleted",s=>{try{y(this,Q,o(this,Q).filter(a=>a.itemId!==s.itemId)),o(this,P).context.history=o(this,Q),this.emit("history_updated",o(this,Q))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,F).on("function_call",async s=>{try{await L(this,Y,ni).call(this,s)}catch(a){xe.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),o(this,F).on("usage_update",s=>{o(this,P).usage.add(s)}),o(this,F).on("audio_interrupted",()=>{o(this,Re)&&y(this,Re,!1),this.emit("audio_interrupted",o(this,P),o(this,D))}),o(this,F).on("error",s=>{this.emit("error",s)}),o(this,F).on("mcp_tool_call_completed",s=>{this.emit("mcp_tool_call_completed",o(this,P),o(this,D),s),o(this,Tn)&&o(this,F).sendEvent({type:"response.create"})}),o(this,F).on("mcp_approval_request",s=>{this.emit("tool_approval_requested",o(this,P),o(this,D),{type:"mcp_approval_request",approvalItem:rc(o(this,D),s)})})},Yr=function(){var d;const t=(d=o(this,Ft))==null?void 0:d.filter(l=>l.type==="mcp"),r=l=>{const p=l.allowed_tools;if(p){if(Array.isArray(p))return p;if(p&&Array.isArray(p.tool_names))return p.tool_names}},s=new Map;for(const l of t){const p=o(this,xn).get(l.server_label)??[],f=r(l);for(const h of p)f&&!f.includes(h.name)||s.has(h.name)||s.set(h.name,h)}const a=Array.from(s.values()),i=o(this,wt);(i.length!==a.length||JSON.stringify(i.map(l=>l.name).sort())!==JSON.stringify(a.map(l=>l.name).sort()))&&(y(this,wt,a),this.emit("mcp_tools_changed",o(this,wt)))};const gd={base64ToArrayBuffer:Ca,arrayBufferToBase64:Ea,getLastTextFromAudioOutputMessage:Oa};M.DEFAULT_OPENAI_REALTIME_MODEL=Za,M.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=Ie,M.ModelBehaviorError=he,M.OpenAIRealtimeBase=nn,M.OpenAIRealtimeWebRTC=Ua,M.OpenAIRealtimeWebSocket=qa,M.OutputGuardrailTripwireTriggered=Ln,M.RealtimeAgent=sc,M.RealtimeSession=md,M.UserError=re,M.backgroundResult=ld,M.isBackgroundResult=Ba,M.tool=qn,M.utils=gd,Object.defineProperty(M,Symbol.toStringTag,{value:"Module"})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
