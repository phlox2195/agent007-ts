var Qa = Object.defineProperty;
var ns = (n) => {
  throw TypeError(n);
};
var ei = (n, e, t) => e in n ? Qa(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var _ = (n, e, t) => ei(n, typeof e != "symbol" ? e + "" : e, t), er = (n, e, t) => e.has(n) || ns("Cannot " + t);
var o = (n, e, t) => (er(n, e, "read from private field"), t ? t.call(n) : e.get(n)), T = (n, e, t) => e.has(n) ? ns("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), y = (n, e, t, r) => (er(n, e, "write to private field"), r ? r.call(n, t) : e.set(n, t), t), F = (n, e, t) => (er(n, e, "access private method"), t);
const lr = {
  version: "0.1.8"
};
async function Pr(n) {
  try {
    return [null, await n()];
  } catch (e) {
    return [e, null];
  }
}
function ti(n, e) {
  const t = { ...n };
  return Object.defineProperties(t, {
    $brand: {
      value: "auto-parseable-response-format",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    }
  }), t;
}
const ni = Symbol("Let zodToJsonSchema decide on which parser to use"), rs = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: !1,
  errorMessages: !1,
  markdownDescription: !1,
  patternStrategy: "escape",
  applyRegexFlags: !1,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
}, ri = (n) => typeof n == "string" ? {
  ...rs,
  basePath: ["#"],
  definitions: {},
  name: n
} : {
  ...rs,
  basePath: ["#"],
  definitions: {},
  ...n
}, pr = (n) => "_def" in n ? n._def : n;
function si(n) {
  if (!n)
    return !0;
  for (const e in n)
    return !1;
  return !0;
}
const ai = (n) => {
  const e = ri(n), t = e.name !== void 0 ? [...e.basePath, e.definitionPath, e.name] : e.basePath;
  return {
    ...e,
    currentPath: t,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(e.definitions).map(([r, s]) => [
      pr(s),
      {
        def: pr(s),
        path: [...e.basePath, e.definitionPath, r],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};
function Xs(n, e, t, r) {
  r != null && r.errorMessages && t && (n.errorMessage = {
    ...n.errorMessage,
    [e]: t
  });
}
function V(n, e, t, r, s) {
  n[e] = t, Xs(n, e, r, s);
}
var J;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((u) => typeof s[s[u]] != "number"), i = {};
    for (const u of a)
      i[u] = s[u];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(J || (J = {}));
var ss;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(ss || (ss = {}));
const k = J.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), Fe = (n) => {
  switch (typeof n) {
    case "undefined":
      return k.undefined;
    case "string":
      return k.string;
    case "number":
      return Number.isNaN(n) ? k.nan : k.number;
    case "boolean":
      return k.boolean;
    case "function":
      return k.function;
    case "bigint":
      return k.bigint;
    case "symbol":
      return k.symbol;
    case "object":
      return Array.isArray(n) ? k.array : n === null ? k.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? k.promise : typeof Map < "u" && n instanceof Map ? k.map : typeof Set < "u" && n instanceof Set ? k.set : typeof Date < "u" && n instanceof Date ? k.date : k.object;
    default:
      return k.unknown;
  }
}, x = J.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
class je extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let u = r, d = 0;
          for (; d < i.path.length; ) {
            const l = i.path[d];
            d === i.path.length - 1 ? (u[l] = u[l] || { _errors: [] }, u[l]._errors.push(t(i))) : u[l] = u[l] || { _errors: [] }, u = u[l], d++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof je))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, J.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
}
je.create = (n) => new je(n);
const fr = (n, e) => {
  let t;
  switch (n.code) {
    case x.invalid_type:
      n.received === k.undefined ? t = "Required" : t = `Expected ${n.expected}, received ${n.received}`;
      break;
    case x.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(n.expected, J.jsonStringifyReplacer)}`;
      break;
    case x.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${J.joinValues(n.keys, ", ")}`;
      break;
    case x.invalid_union:
      t = "Invalid input";
      break;
    case x.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${J.joinValues(n.options)}`;
      break;
    case x.invalid_enum_value:
      t = `Invalid enum value. Expected ${J.joinValues(n.options)}, received '${n.received}'`;
      break;
    case x.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case x.invalid_return_type:
      t = "Invalid function return type";
      break;
    case x.invalid_date:
      t = "Invalid date";
      break;
    case x.invalid_string:
      typeof n.validation == "object" ? "includes" in n.validation ? (t = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? t = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? t = `Invalid input: must end with "${n.validation.endsWith}"` : J.assertNever(n.validation) : n.validation !== "regex" ? t = `Invalid ${n.validation}` : t = "Invalid";
      break;
    case x.too_small:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : t = "Invalid input";
      break;
    case x.too_big:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? t = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : t = "Invalid input";
      break;
    case x.custom:
      t = "Invalid input";
      break;
    case x.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case x.not_multiple_of:
      t = `Number must be a multiple of ${n.multipleOf}`;
      break;
    case x.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, J.assertNever(n);
  }
  return { message: t };
};
let ii = fr;
function oi() {
  return ii;
}
const ui = (n) => {
  const { data: e, path: t, errorMaps: r, issueData: s } = n, a = [...t, ...s.path || []], i = {
    ...s,
    path: a
  };
  if (s.message !== void 0)
    return {
      ...s,
      path: a,
      message: s.message
    };
  let u = "";
  const d = r.filter((l) => !!l).slice().reverse();
  for (const l of d)
    u = l(i, { data: e, defaultError: u }).message;
  return {
    ...s,
    path: a,
    message: u
  };
};
function I(n, e) {
  const t = oi(), r = ui({
    issueData: e,
    data: n.data,
    path: n.path,
    errorMaps: [
      n.common.contextualErrorMap,
      // contextual error map is first priority
      n.schemaErrorMap,
      // then schema-bound map if available
      t,
      // then global override map
      t === fr ? void 0 : fr
      // then global default map
    ].filter((s) => !!s)
  });
  n.common.issues.push(r);
}
class oe {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    const r = [];
    for (const s of t) {
      if (s.status === "aborted")
        return P;
      s.status === "dirty" && e.dirty(), r.push(s.value);
    }
    return { status: e.value, value: r };
  }
  static async mergeObjectAsync(e, t) {
    const r = [];
    for (const s of t) {
      const a = await s.key, i = await s.value;
      r.push({
        key: a,
        value: i
      });
    }
    return oe.mergeObjectSync(e, r);
  }
  static mergeObjectSync(e, t) {
    const r = {};
    for (const s of t) {
      const { key: a, value: i } = s;
      if (a.status === "aborted" || i.status === "aborted")
        return P;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || s.alwaysSet) && (r[a.value] = i.value);
    }
    return { status: e.value, value: r };
  }
}
const P = Object.freeze({
  status: "aborted"
}), Jt = (n) => ({ status: "dirty", value: n }), ve = (n) => ({ status: "valid", value: n }), as = (n) => n.status === "aborted", is = (n) => n.status === "dirty", Ft = (n) => n.status === "valid", Rn = (n) => typeof Promise < "u" && n instanceof Promise;
var C;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(C || (C = {}));
class ke {
  constructor(e, t, r, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = r, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (Array.isArray(this._key) ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const os = (n, e) => {
  if (Ft(e))
    return { success: !0, data: e.value };
  if (!n.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const t = new je(n.common.issues);
      return this._error = t, this._error;
    }
  };
};
function j(n) {
  if (!n)
    return {};
  const { errorMap: e, invalid_type_error: t, required_error: r, description: s } = n;
  if (e && (t || r))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (i, u) => {
    const { message: d } = n;
    return i.code === "invalid_enum_value" ? { message: d ?? u.defaultError } : typeof u.data > "u" ? { message: d ?? r ?? u.defaultError } : i.code !== "invalid_type" ? { message: u.defaultError } : { message: d ?? t ?? u.defaultError };
  }, description: s };
}
class Z {
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return Fe(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || {
      common: e.parent.common,
      data: e.data,
      parsedType: Fe(e.data),
      schemaErrorMap: this._def.errorMap,
      path: e.path,
      parent: e.parent
    };
  }
  _processInputParams(e) {
    return {
      status: new oe(),
      ctx: {
        common: e.parent.common,
        data: e.data,
        parsedType: Fe(e.data),
        schemaErrorMap: this._def.errorMap,
        path: e.path,
        parent: e.parent
      }
    };
  }
  _parseSync(e) {
    const t = this._parse(e);
    if (Rn(t))
      throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    const t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    const r = this.safeParse(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  safeParse(e, t) {
    const r = {
      common: {
        issues: [],
        async: (t == null ? void 0 : t.async) ?? !1,
        contextualErrorMap: t == null ? void 0 : t.errorMap
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Fe(e)
    }, s = this._parseSync({ data: e, path: r.path, parent: r });
    return os(r, s);
  }
  "~validate"(e) {
    var r, s;
    const t = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Fe(e)
    };
    if (!this["~standard"].async)
      try {
        const a = this._parseSync({ data: e, path: [], parent: t });
        return Ft(a) ? {
          value: a.value
        } : {
          issues: t.common.issues
        };
      } catch (a) {
        (s = (r = a == null ? void 0 : a.message) == null ? void 0 : r.toLowerCase()) != null && s.includes("encountered") && (this["~standard"].async = !0), t.common = {
          issues: [],
          async: !0
        };
      }
    return this._parseAsync({ data: e, path: [], parent: t }).then((a) => Ft(a) ? {
      value: a.value
    } : {
      issues: t.common.issues
    });
  }
  async parseAsync(e, t) {
    const r = await this.safeParseAsync(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  async safeParseAsync(e, t) {
    const r = {
      common: {
        issues: [],
        contextualErrorMap: t == null ? void 0 : t.errorMap,
        async: !0
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Fe(e)
    }, s = this._parse({ data: e, path: r.path, parent: r }), a = await (Rn(s) ? s : Promise.resolve(s));
    return os(r, a);
  }
  refine(e, t) {
    const r = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, a) => {
      const i = e(s), u = () => a.addIssue({
        code: x.custom,
        ...r(s)
      });
      return typeof Promise < "u" && i instanceof Promise ? i.then((d) => d ? !0 : (u(), !1)) : i ? !0 : (u(), !1);
    });
  }
  refinement(e, t) {
    return this._refinement((r, s) => e(r) ? !0 : (s.addIssue(typeof t == "function" ? t(r, s) : t), !1));
  }
  _refinement(e) {
    return new pt({
      schema: this,
      typeName: S.ZodEffects,
      effect: { type: "refinement", refinement: e }
    });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (t) => this["~validate"](t)
    };
  }
  optional() {
    return Me.create(this, this._def);
  }
  nullable() {
    return ft.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return Ie.create(this);
  }
  promise() {
    return Fn.create(this, this._def);
  }
  or(e) {
    return Dn.create([this, e], this._def);
  }
  and(e) {
    return Pn.create(this, e, this._def);
  }
  transform(e) {
    return new pt({
      ...j(this._def),
      schema: this,
      typeName: S.ZodEffects,
      effect: { type: "transform", transform: e }
    });
  }
  default(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Ln({
      ...j(this._def),
      innerType: this,
      defaultValue: t,
      typeName: S.ZodDefault
    });
  }
  brand() {
    return new na({
      typeName: S.ZodBranded,
      type: this,
      ...j(this._def)
    });
  }
  catch(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Zn({
      ...j(this._def),
      innerType: this,
      catchValue: t,
      typeName: S.ZodCatch
    });
  }
  describe(e) {
    const t = this.constructor;
    return new t({
      ...this._def,
      description: e
    });
  }
  pipe(e) {
    return jr.create(this, e);
  }
  readonly() {
    return Un.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const ci = /^c[^\s-]{8,}$/i, di = /^[0-9a-z]+$/, li = /^[0-9A-HJKMNP-TV-Z]{26}$/i, pi = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, fi = /^[a-z0-9_-]{21}$/i, hi = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/, mi = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, gi = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, _i = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
let tr;
const yi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, vi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/, wi = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, bi = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, xi = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, Si = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, Qs = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", Ti = new RegExp(`^${Qs}$`);
function ea(n) {
  let e = "[0-5]\\d";
  n.precision ? e = `${e}\\.\\d{${n.precision}}` : n.precision == null && (e = `${e}(\\.\\d+)?`);
  const t = n.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`;
}
function Ii(n) {
  return new RegExp(`^${ea(n)}$`);
}
function ki(n) {
  let e = `${Qs}T${ea(n)}`;
  const t = [];
  return t.push(n.local ? "Z?" : "Z"), n.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function Ai(n, e) {
  return !!((e === "v4" || !e) && yi.test(n) || (e === "v6" || !e) && wi.test(n));
}
function Ci(n, e) {
  if (!hi.test(n))
    return !1;
  try {
    const [t] = n.split("."), r = t.replace(/-/g, "+").replace(/_/g, "/").padEnd(t.length + (4 - t.length % 4) % 4, "="), s = JSON.parse(atob(r));
    return !(typeof s != "object" || s === null || "typ" in s && (s == null ? void 0 : s.typ) !== "JWT" || !s.alg || e && s.alg !== e);
  } catch {
    return !1;
  }
}
function Ei(n, e) {
  return !!((e === "v4" || !e) && vi.test(n) || (e === "v6" || !e) && bi.test(n));
}
class Pe extends Z {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== k.string) {
      const a = this._getOrReturnCtx(e);
      return I(a, {
        code: x.invalid_type,
        expected: k.string,
        received: a.parsedType
      }), P;
    }
    const r = new oe();
    let s;
    for (const a of this._def.checks)
      if (a.kind === "min")
        e.data.length < a.value && (s = this._getOrReturnCtx(e, s), I(s, {
          code: x.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "max")
        e.data.length > a.value && (s = this._getOrReturnCtx(e, s), I(s, {
          code: x.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "length") {
        const i = e.data.length > a.value, u = e.data.length < a.value;
        (i || u) && (s = this._getOrReturnCtx(e, s), i ? I(s, {
          code: x.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }) : u && I(s, {
          code: x.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }), r.dirty());
      } else if (a.kind === "email")
        gi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "email",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "emoji")
        tr || (tr = new RegExp(_i, "u")), tr.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "emoji",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "uuid")
        pi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "uuid",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "nanoid")
        fi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "nanoid",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid")
        ci.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "cuid",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid2")
        di.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "cuid2",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "ulid")
        li.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
          validation: "ulid",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "url")
        try {
          new URL(e.data);
        } catch {
          s = this._getOrReturnCtx(e, s), I(s, {
            validation: "url",
            code: x.invalid_string,
            message: a.message
          }), r.dirty();
        }
      else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "regex",
        code: x.invalid_string,
        message: a.message
      }), r.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: x.invalid_string,
        validation: { includes: a.value, position: a.position },
        message: a.message
      }), r.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: x.invalid_string,
        validation: { startsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: x.invalid_string,
        validation: { endsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "datetime" ? ki(a).test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: x.invalid_string,
        validation: "datetime",
        message: a.message
      }), r.dirty()) : a.kind === "date" ? Ti.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: x.invalid_string,
        validation: "date",
        message: a.message
      }), r.dirty()) : a.kind === "time" ? Ii(a).test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        code: x.invalid_string,
        validation: "time",
        message: a.message
      }), r.dirty()) : a.kind === "duration" ? mi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "duration",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "ip" ? Ai(e.data, a.version) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "ip",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "jwt" ? Ci(e.data, a.alg) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "jwt",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "cidr" ? Ei(e.data, a.version) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "cidr",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64" ? xi.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "base64",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64url" ? Si.test(e.data) || (s = this._getOrReturnCtx(e, s), I(s, {
        validation: "base64url",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : J.assertNever(a);
    return { status: r.value, value: e.data };
  }
  _regex(e, t, r) {
    return this.refinement((s) => e.test(s), {
      validation: t,
      code: x.invalid_string,
      ...C.errToObj(r)
    });
  }
  _addCheck(e) {
    return new Pe({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...C.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...C.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...C.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...C.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...C.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...C.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...C.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...C.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...C.errToObj(e) });
  }
  base64url(e) {
    return this._addCheck({
      kind: "base64url",
      ...C.errToObj(e)
    });
  }
  jwt(e) {
    return this._addCheck({ kind: "jwt", ...C.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...C.errToObj(e) });
  }
  cidr(e) {
    return this._addCheck({ kind: "cidr", ...C.errToObj(e) });
  }
  datetime(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      local: !1,
      message: e
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      offset: (e == null ? void 0 : e.offset) ?? !1,
      local: (e == null ? void 0 : e.local) ?? !1,
      ...C.errToObj(e == null ? void 0 : e.message)
    });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "time",
      precision: null,
      message: e
    }) : this._addCheck({
      kind: "time",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      ...C.errToObj(e == null ? void 0 : e.message)
    });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...C.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({
      kind: "regex",
      regex: e,
      ...C.errToObj(t)
    });
  }
  includes(e, t) {
    return this._addCheck({
      kind: "includes",
      value: e,
      position: t == null ? void 0 : t.position,
      ...C.errToObj(t == null ? void 0 : t.message)
    });
  }
  startsWith(e, t) {
    return this._addCheck({
      kind: "startsWith",
      value: e,
      ...C.errToObj(t)
    });
  }
  endsWith(e, t) {
    return this._addCheck({
      kind: "endsWith",
      value: e,
      ...C.errToObj(t)
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e,
      ...C.errToObj(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e,
      ...C.errToObj(t)
    });
  }
  length(e, t) {
    return this._addCheck({
      kind: "length",
      value: e,
      ...C.errToObj(t)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(e) {
    return this.min(1, C.errToObj(e));
  }
  trim() {
    return new Pe({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new Pe({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new Pe({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((e) => e.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((e) => e.kind === "base64url");
  }
  get minLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Pe.create = (n) => new Pe({
  checks: [],
  typeName: S.ZodString,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...j(n)
});
function Oi(n, e) {
  const t = (n.toString().split(".")[1] || "").length, r = (e.toString().split(".")[1] || "").length, s = t > r ? t : r, a = Number.parseInt(n.toFixed(s).replace(".", "")), i = Number.parseInt(e.toFixed(s).replace(".", ""));
  return a % i / 10 ** s;
}
class Lt extends Z {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== k.number) {
      const a = this._getOrReturnCtx(e);
      return I(a, {
        code: x.invalid_type,
        expected: k.number,
        received: a.parsedType
      }), P;
    }
    let r;
    const s = new oe();
    for (const a of this._def.checks)
      a.kind === "int" ? J.isInteger(e.data) || (r = this._getOrReturnCtx(e, r), I(r, {
        code: x.invalid_type,
        expected: "integer",
        received: "float",
        message: a.message
      }), s.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: x.too_small,
        minimum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: x.too_big,
        maximum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? Oi(e.data, a.value) !== 0 && (r = this._getOrReturnCtx(e, r), I(r, {
        code: x.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (r = this._getOrReturnCtx(e, r), I(r, {
        code: x.not_finite,
        message: a.message
      }), s.dirty()) : J.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, C.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, C.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, C.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, C.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Lt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: C.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Lt({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  int(e) {
    return this._addCheck({
      kind: "int",
      message: C.toString(e)
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: C.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: C.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: C.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: C.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: C.toString(t)
    });
  }
  finite(e) {
    return this._addCheck({
      kind: "finite",
      message: C.toString(e)
    });
  }
  safe(e) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: C.toString(e)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: C.toString(e)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && J.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (const r of this._def.checks) {
      if (r.kind === "finite" || r.kind === "int" || r.kind === "multipleOf")
        return !0;
      r.kind === "min" ? (t === null || r.value > t) && (t = r.value) : r.kind === "max" && (e === null || r.value < e) && (e = r.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
}
Lt.create = (n) => new Lt({
  checks: [],
  typeName: S.ZodNumber,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...j(n)
});
class Gt extends Z {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce)
      try {
        e.data = BigInt(e.data);
      } catch {
        return this._getInvalidInput(e);
      }
    if (this._getType(e) !== k.bigint)
      return this._getInvalidInput(e);
    let r;
    const s = new oe();
    for (const a of this._def.checks)
      a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: x.too_small,
        type: "bigint",
        minimum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: x.too_big,
        type: "bigint",
        maximum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (r = this._getOrReturnCtx(e, r), I(r, {
        code: x.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : J.assertNever(a);
    return { status: s.value, value: e.data };
  }
  _getInvalidInput(e) {
    const t = this._getOrReturnCtx(e);
    return I(t, {
      code: x.invalid_type,
      expected: k.bigint,
      received: t.parsedType
    }), P;
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, C.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, C.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, C.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, C.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Gt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: C.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Gt({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: C.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: C.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: C.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: C.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: C.toString(t)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Gt.create = (n) => new Gt({
  checks: [],
  typeName: S.ZodBigInt,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...j(n)
});
class hr extends Z {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== k.boolean) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: x.invalid_type,
        expected: k.boolean,
        received: r.parsedType
      }), P;
    }
    return ve(e.data);
  }
}
hr.create = (n) => new hr({
  typeName: S.ZodBoolean,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...j(n)
});
class Nn extends Z {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== k.date) {
      const a = this._getOrReturnCtx(e);
      return I(a, {
        code: x.invalid_type,
        expected: k.date,
        received: a.parsedType
      }), P;
    }
    if (Number.isNaN(e.data.getTime())) {
      const a = this._getOrReturnCtx(e);
      return I(a, {
        code: x.invalid_date
      }), P;
    }
    const r = new oe();
    let s;
    for (const a of this._def.checks)
      a.kind === "min" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), I(s, {
        code: x.too_small,
        message: a.message,
        inclusive: !0,
        exact: !1,
        minimum: a.value,
        type: "date"
      }), r.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), I(s, {
        code: x.too_big,
        message: a.message,
        inclusive: !0,
        exact: !1,
        maximum: a.value,
        type: "date"
      }), r.dirty()) : J.assertNever(a);
    return {
      status: r.value,
      value: new Date(e.data.getTime())
    };
  }
  _addCheck(e) {
    return new Nn({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e.getTime(),
      message: C.toString(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e.getTime(),
      message: C.toString(t)
    });
  }
  get minDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
}
Nn.create = (n) => new Nn({
  checks: [],
  coerce: (n == null ? void 0 : n.coerce) || !1,
  typeName: S.ZodDate,
  ...j(n)
});
class us extends Z {
  _parse(e) {
    if (this._getType(e) !== k.symbol) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: x.invalid_type,
        expected: k.symbol,
        received: r.parsedType
      }), P;
    }
    return ve(e.data);
  }
}
us.create = (n) => new us({
  typeName: S.ZodSymbol,
  ...j(n)
});
class mr extends Z {
  _parse(e) {
    if (this._getType(e) !== k.undefined) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: x.invalid_type,
        expected: k.undefined,
        received: r.parsedType
      }), P;
    }
    return ve(e.data);
  }
}
mr.create = (n) => new mr({
  typeName: S.ZodUndefined,
  ...j(n)
});
class gr extends Z {
  _parse(e) {
    if (this._getType(e) !== k.null) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: x.invalid_type,
        expected: k.null,
        received: r.parsedType
      }), P;
    }
    return ve(e.data);
  }
}
gr.create = (n) => new gr({
  typeName: S.ZodNull,
  ...j(n)
});
class _r extends Z {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(e) {
    return ve(e.data);
  }
}
_r.create = (n) => new _r({
  typeName: S.ZodAny,
  ...j(n)
});
class cs extends Z {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(e) {
    return ve(e.data);
  }
}
cs.create = (n) => new cs({
  typeName: S.ZodUnknown,
  ...j(n)
});
class ze extends Z {
  _parse(e) {
    const t = this._getOrReturnCtx(e);
    return I(t, {
      code: x.invalid_type,
      expected: k.never,
      received: t.parsedType
    }), P;
  }
}
ze.create = (n) => new ze({
  typeName: S.ZodNever,
  ...j(n)
});
class ds extends Z {
  _parse(e) {
    if (this._getType(e) !== k.undefined) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: x.invalid_type,
        expected: k.void,
        received: r.parsedType
      }), P;
    }
    return ve(e.data);
  }
}
ds.create = (n) => new ds({
  typeName: S.ZodVoid,
  ...j(n)
});
class Ie extends Z {
  _parse(e) {
    const { ctx: t, status: r } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== k.array)
      return I(t, {
        code: x.invalid_type,
        expected: k.array,
        received: t.parsedType
      }), P;
    if (s.exactLength !== null) {
      const i = t.data.length > s.exactLength.value, u = t.data.length < s.exactLength.value;
      (i || u) && (I(t, {
        code: i ? x.too_big : x.too_small,
        minimum: u ? s.exactLength.value : void 0,
        maximum: i ? s.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: s.exactLength.message
      }), r.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (I(t, {
      code: x.too_small,
      minimum: s.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.minLength.message
    }), r.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (I(t, {
      code: x.too_big,
      maximum: s.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.maxLength.message
    }), r.dirty()), t.common.async)
      return Promise.all([...t.data].map((i, u) => s.type._parseAsync(new ke(t, i, t.path, u)))).then((i) => oe.mergeArray(r, i));
    const a = [...t.data].map((i, u) => s.type._parseSync(new ke(t, i, t.path, u)));
    return oe.mergeArray(r, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new Ie({
      ...this._def,
      minLength: { value: e, message: C.toString(t) }
    });
  }
  max(e, t) {
    return new Ie({
      ...this._def,
      maxLength: { value: e, message: C.toString(t) }
    });
  }
  length(e, t) {
    return new Ie({
      ...this._def,
      exactLength: { value: e, message: C.toString(t) }
    });
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Ie.create = (n, e) => new Ie({
  type: n,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: S.ZodArray,
  ...j(e)
});
function vt(n) {
  if (n instanceof X) {
    const e = {};
    for (const t in n.shape) {
      const r = n.shape[t];
      e[t] = Me.create(vt(r));
    }
    return new X({
      ...n._def,
      shape: () => e
    });
  } else return n instanceof Ie ? new Ie({
    ...n._def,
    type: vt(n.element)
  }) : n instanceof Me ? Me.create(vt(n.unwrap())) : n instanceof ft ? ft.create(vt(n.unwrap())) : n instanceof dt ? dt.create(n.items.map((e) => vt(e))) : n;
}
class X extends Z {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const e = this._def.shape(), t = J.objectKeys(e);
    return this._cached = { shape: e, keys: t }, this._cached;
  }
  _parse(e) {
    if (this._getType(e) !== k.object) {
      const l = this._getOrReturnCtx(e);
      return I(l, {
        code: x.invalid_type,
        expected: k.object,
        received: l.parsedType
      }), P;
    }
    const { status: r, ctx: s } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), u = [];
    if (!(this._def.catchall instanceof ze && this._def.unknownKeys === "strip"))
      for (const l in s.data)
        i.includes(l) || u.push(l);
    const d = [];
    for (const l of i) {
      const p = a[l], f = s.data[l];
      d.push({
        key: { status: "valid", value: l },
        value: p._parse(new ke(s, f, s.path, l)),
        alwaysSet: l in s.data
      });
    }
    if (this._def.catchall instanceof ze) {
      const l = this._def.unknownKeys;
      if (l === "passthrough")
        for (const p of u)
          d.push({
            key: { status: "valid", value: p },
            value: { status: "valid", value: s.data[p] }
          });
      else if (l === "strict")
        u.length > 0 && (I(s, {
          code: x.unrecognized_keys,
          keys: u
        }), r.dirty());
      else if (l !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const l = this._def.catchall;
      for (const p of u) {
        const f = s.data[p];
        d.push({
          key: { status: "valid", value: p },
          value: l._parse(
            new ke(s, f, s.path, p)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: p in s.data
        });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      const l = [];
      for (const p of d) {
        const f = await p.key, h = await p.value;
        l.push({
          key: f,
          value: h,
          alwaysSet: p.alwaysSet
        });
      }
      return l;
    }).then((l) => oe.mergeObjectSync(r, l)) : oe.mergeObjectSync(r, d);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return C.errToObj, new X({
      ...this._def,
      unknownKeys: "strict",
      ...e !== void 0 ? {
        errorMap: (t, r) => {
          var a, i;
          const s = ((i = (a = this._def).errorMap) == null ? void 0 : i.call(a, t, r).message) ?? r.defaultError;
          return t.code === "unrecognized_keys" ? {
            message: C.errToObj(e).message ?? s
          } : {
            message: s
          };
        }
      } : {}
    });
  }
  strip() {
    return new X({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new X({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(e) {
    return new X({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...e
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(e) {
    return new X({
      unknownKeys: e._def.unknownKeys,
      catchall: e._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...e._def.shape()
      }),
      typeName: S.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(e) {
    return new X({
      ...this._def,
      catchall: e
    });
  }
  pick(e) {
    const t = {};
    for (const r of J.objectKeys(e))
      e[r] && this.shape[r] && (t[r] = this.shape[r]);
    return new X({
      ...this._def,
      shape: () => t
    });
  }
  omit(e) {
    const t = {};
    for (const r of J.objectKeys(this.shape))
      e[r] || (t[r] = this.shape[r]);
    return new X({
      ...this._def,
      shape: () => t
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return vt(this);
  }
  partial(e) {
    const t = {};
    for (const r of J.objectKeys(this.shape)) {
      const s = this.shape[r];
      e && !e[r] ? t[r] = s : t[r] = s.optional();
    }
    return new X({
      ...this._def,
      shape: () => t
    });
  }
  required(e) {
    const t = {};
    for (const r of J.objectKeys(this.shape))
      if (e && !e[r])
        t[r] = this.shape[r];
      else {
        let a = this.shape[r];
        for (; a instanceof Me; )
          a = a._def.innerType;
        t[r] = a;
      }
    return new X({
      ...this._def,
      shape: () => t
    });
  }
  keyof() {
    return ta(J.objectKeys(this.shape));
  }
}
X.create = (n, e) => new X({
  shape: () => n,
  unknownKeys: "strip",
  catchall: ze.create(),
  typeName: S.ZodObject,
  ...j(e)
});
X.strictCreate = (n, e) => new X({
  shape: () => n,
  unknownKeys: "strict",
  catchall: ze.create(),
  typeName: S.ZodObject,
  ...j(e)
});
X.lazycreate = (n, e) => new X({
  shape: n,
  unknownKeys: "strip",
  catchall: ze.create(),
  typeName: S.ZodObject,
  ...j(e)
});
class Dn extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = this._def.options;
    function s(a) {
      for (const u of a)
        if (u.result.status === "valid")
          return u.result;
      for (const u of a)
        if (u.result.status === "dirty")
          return t.common.issues.push(...u.ctx.common.issues), u.result;
      const i = a.map((u) => new je(u.ctx.common.issues));
      return I(t, {
        code: x.invalid_union,
        unionErrors: i
      }), P;
    }
    if (t.common.async)
      return Promise.all(r.map(async (a) => {
        const i = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await a._parseAsync({
            data: t.data,
            path: t.path,
            parent: i
          }),
          ctx: i
        };
      })).then(s);
    {
      let a;
      const i = [];
      for (const d of r) {
        const l = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        }, p = d._parseSync({
          data: t.data,
          path: t.path,
          parent: l
        });
        if (p.status === "valid")
          return p;
        p.status === "dirty" && !a && (a = { result: p, ctx: l }), l.common.issues.length && i.push(l.common.issues);
      }
      if (a)
        return t.common.issues.push(...a.ctx.common.issues), a.result;
      const u = i.map((d) => new je(d));
      return I(t, {
        code: x.invalid_union,
        unionErrors: u
      }), P;
    }
  }
  get options() {
    return this._def.options;
  }
}
Dn.create = (n, e) => new Dn({
  options: n,
  typeName: S.ZodUnion,
  ...j(e)
});
const Ee = (n) => n instanceof jn ? Ee(n.schema) : n instanceof pt ? Ee(n.innerType()) : n instanceof $n ? [n.value] : n instanceof lt ? n.options : n instanceof vr ? J.objectValues(n.enum) : n instanceof Ln ? Ee(n._def.innerType) : n instanceof mr ? [void 0] : n instanceof gr ? [null] : n instanceof Me ? [void 0, ...Ee(n.unwrap())] : n instanceof ft ? [null, ...Ee(n.unwrap())] : n instanceof na || n instanceof Un ? Ee(n.unwrap()) : n instanceof Zn ? Ee(n._def.innerType) : [];
class Mr extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== k.object)
      return I(t, {
        code: x.invalid_type,
        expected: k.object,
        received: t.parsedType
      }), P;
    const r = this.discriminator, s = t.data[r], a = this.optionsMap.get(s);
    return a ? t.common.async ? a._parseAsync({
      data: t.data,
      path: t.path,
      parent: t
    }) : a._parseSync({
      data: t.data,
      path: t.path,
      parent: t
    }) : (I(t, {
      code: x.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [r]
    }), P);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(e, t, r) {
    const s = /* @__PURE__ */ new Map();
    for (const a of t) {
      const i = Ee(a.shape[e]);
      if (!i.length)
        throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (const u of i) {
        if (s.has(u))
          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(u)}`);
        s.set(u, a);
      }
    }
    return new Mr({
      typeName: S.ZodDiscriminatedUnion,
      discriminator: e,
      options: t,
      optionsMap: s,
      ...j(r)
    });
  }
}
function yr(n, e) {
  const t = Fe(n), r = Fe(e);
  if (n === e)
    return { valid: !0, data: n };
  if (t === k.object && r === k.object) {
    const s = J.objectKeys(e), a = J.objectKeys(n).filter((u) => s.indexOf(u) !== -1), i = { ...n, ...e };
    for (const u of a) {
      const d = yr(n[u], e[u]);
      if (!d.valid)
        return { valid: !1 };
      i[u] = d.data;
    }
    return { valid: !0, data: i };
  } else if (t === k.array && r === k.array) {
    if (n.length !== e.length)
      return { valid: !1 };
    const s = [];
    for (let a = 0; a < n.length; a++) {
      const i = n[a], u = e[a], d = yr(i, u);
      if (!d.valid)
        return { valid: !1 };
      s.push(d.data);
    }
    return { valid: !0, data: s };
  } else return t === k.date && r === k.date && +n == +e ? { valid: !0, data: n } : { valid: !1 };
}
class Pn extends Z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = (a, i) => {
      if (as(a) || as(i))
        return P;
      const u = yr(a.value, i.value);
      return u.valid ? ((is(a) || is(i)) && t.dirty(), { status: t.value, value: u.data }) : (I(r, {
        code: x.invalid_intersection_types
      }), P);
    };
    return r.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      }),
      this._def.right._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      })
    ]).then(([a, i]) => s(a, i)) : s(this._def.left._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }), this._def.right._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }));
  }
}
Pn.create = (n, e, t) => new Pn({
  left: n,
  right: e,
  typeName: S.ZodIntersection,
  ...j(t)
});
class dt extends Z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.array)
      return I(r, {
        code: x.invalid_type,
        expected: k.array,
        received: r.parsedType
      }), P;
    if (r.data.length < this._def.items.length)
      return I(r, {
        code: x.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), P;
    !this._def.rest && r.data.length > this._def.items.length && (I(r, {
      code: x.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), t.dirty());
    const a = [...r.data].map((i, u) => {
      const d = this._def.items[u] || this._def.rest;
      return d ? d._parse(new ke(r, i, r.path, u)) : null;
    }).filter((i) => !!i);
    return r.common.async ? Promise.all(a).then((i) => oe.mergeArray(t, i)) : oe.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new dt({
      ...this._def,
      rest: e
    });
  }
}
dt.create = (n, e) => {
  if (!Array.isArray(n))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new dt({
    items: n,
    typeName: S.ZodTuple,
    rest: null,
    ...j(e)
  });
};
class Mn extends Z {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.object)
      return I(r, {
        code: x.invalid_type,
        expected: k.object,
        received: r.parsedType
      }), P;
    const s = [], a = this._def.keyType, i = this._def.valueType;
    for (const u in r.data)
      s.push({
        key: a._parse(new ke(r, u, r.path, u)),
        value: i._parse(new ke(r, r.data[u], r.path, u)),
        alwaysSet: u in r.data
      });
    return r.common.async ? oe.mergeObjectAsync(t, s) : oe.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, r) {
    return t instanceof Z ? new Mn({
      keyType: e,
      valueType: t,
      typeName: S.ZodRecord,
      ...j(r)
    }) : new Mn({
      keyType: Pe.create(),
      valueType: e,
      typeName: S.ZodRecord,
      ...j(t)
    });
  }
}
class ls extends Z {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.map)
      return I(r, {
        code: x.invalid_type,
        expected: k.map,
        received: r.parsedType
      }), P;
    const s = this._def.keyType, a = this._def.valueType, i = [...r.data.entries()].map(([u, d], l) => ({
      key: s._parse(new ke(r, u, r.path, [l, "key"])),
      value: a._parse(new ke(r, d, r.path, [l, "value"]))
    }));
    if (r.common.async) {
      const u = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const d of i) {
          const l = await d.key, p = await d.value;
          if (l.status === "aborted" || p.status === "aborted")
            return P;
          (l.status === "dirty" || p.status === "dirty") && t.dirty(), u.set(l.value, p.value);
        }
        return { status: t.value, value: u };
      });
    } else {
      const u = /* @__PURE__ */ new Map();
      for (const d of i) {
        const l = d.key, p = d.value;
        if (l.status === "aborted" || p.status === "aborted")
          return P;
        (l.status === "dirty" || p.status === "dirty") && t.dirty(), u.set(l.value, p.value);
      }
      return { status: t.value, value: u };
    }
  }
}
ls.create = (n, e, t) => new ls({
  valueType: e,
  keyType: n,
  typeName: S.ZodMap,
  ...j(t)
});
class zt extends Z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.set)
      return I(r, {
        code: x.invalid_type,
        expected: k.set,
        received: r.parsedType
      }), P;
    const s = this._def;
    s.minSize !== null && r.data.size < s.minSize.value && (I(r, {
      code: x.too_small,
      minimum: s.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.minSize.message
    }), t.dirty()), s.maxSize !== null && r.data.size > s.maxSize.value && (I(r, {
      code: x.too_big,
      maximum: s.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.maxSize.message
    }), t.dirty());
    const a = this._def.valueType;
    function i(d) {
      const l = /* @__PURE__ */ new Set();
      for (const p of d) {
        if (p.status === "aborted")
          return P;
        p.status === "dirty" && t.dirty(), l.add(p.value);
      }
      return { status: t.value, value: l };
    }
    const u = [...r.data.values()].map((d, l) => a._parse(new ke(r, d, r.path, l)));
    return r.common.async ? Promise.all(u).then((d) => i(d)) : i(u);
  }
  min(e, t) {
    return new zt({
      ...this._def,
      minSize: { value: e, message: C.toString(t) }
    });
  }
  max(e, t) {
    return new zt({
      ...this._def,
      maxSize: { value: e, message: C.toString(t) }
    });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
zt.create = (n, e) => new zt({
  valueType: n,
  minSize: null,
  maxSize: null,
  typeName: S.ZodSet,
  ...j(e)
});
class jn extends Z {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
}
jn.create = (n, e) => new jn({
  getter: n,
  typeName: S.ZodLazy,
  ...j(e)
});
class $n extends Z {
  _parse(e) {
    if (e.data !== this._def.value) {
      const t = this._getOrReturnCtx(e);
      return I(t, {
        received: t.data,
        code: x.invalid_literal,
        expected: this._def.value
      }), P;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
}
$n.create = (n, e) => new $n({
  value: n,
  typeName: S.ZodLiteral,
  ...j(e)
});
function ta(n, e) {
  return new lt({
    values: n,
    typeName: S.ZodEnum,
    ...j(e)
  });
}
class lt extends Z {
  _parse(e) {
    if (typeof e.data != "string") {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return I(t, {
        expected: J.joinValues(r),
        received: t.parsedType,
        code: x.invalid_type
      }), P;
    }
    if (this._cache || (this._cache = new Set(this._def.values)), !this._cache.has(e.data)) {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return I(t, {
        received: t.data,
        code: x.invalid_enum_value,
        options: r
      }), P;
    }
    return ve(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Values() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return lt.create(e, {
      ...this._def,
      ...t
    });
  }
  exclude(e, t = this._def) {
    return lt.create(this.options.filter((r) => !e.includes(r)), {
      ...this._def,
      ...t
    });
  }
}
lt.create = ta;
class vr extends Z {
  _parse(e) {
    const t = J.getValidEnumValues(this._def.values), r = this._getOrReturnCtx(e);
    if (r.parsedType !== k.string && r.parsedType !== k.number) {
      const s = J.objectValues(t);
      return I(r, {
        expected: J.joinValues(s),
        received: r.parsedType,
        code: x.invalid_type
      }), P;
    }
    if (this._cache || (this._cache = new Set(J.getValidEnumValues(this._def.values))), !this._cache.has(e.data)) {
      const s = J.objectValues(t);
      return I(r, {
        received: r.data,
        code: x.invalid_enum_value,
        options: s
      }), P;
    }
    return ve(e.data);
  }
  get enum() {
    return this._def.values;
  }
}
vr.create = (n, e) => new vr({
  values: n,
  typeName: S.ZodNativeEnum,
  ...j(e)
});
class Fn extends Z {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== k.promise && t.common.async === !1)
      return I(t, {
        code: x.invalid_type,
        expected: k.promise,
        received: t.parsedType
      }), P;
    const r = t.parsedType === k.promise ? t.data : Promise.resolve(t.data);
    return ve(r.then((s) => this._def.type.parseAsync(s, {
      path: t.path,
      errorMap: t.common.contextualErrorMap
    })));
  }
}
Fn.create = (n, e) => new Fn({
  type: n,
  typeName: S.ZodPromise,
  ...j(e)
});
class pt extends Z {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === S.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = this._def.effect || null, a = {
      addIssue: (i) => {
        I(r, i), i.fatal ? t.abort() : t.dirty();
      },
      get path() {
        return r.path;
      }
    };
    if (a.addIssue = a.addIssue.bind(a), s.type === "preprocess") {
      const i = s.transform(r.data, a);
      if (r.common.async)
        return Promise.resolve(i).then(async (u) => {
          if (t.value === "aborted")
            return P;
          const d = await this._def.schema._parseAsync({
            data: u,
            path: r.path,
            parent: r
          });
          return d.status === "aborted" ? P : d.status === "dirty" || t.value === "dirty" ? Jt(d.value) : d;
        });
      {
        if (t.value === "aborted")
          return P;
        const u = this._def.schema._parseSync({
          data: i,
          path: r.path,
          parent: r
        });
        return u.status === "aborted" ? P : u.status === "dirty" || t.value === "dirty" ? Jt(u.value) : u;
      }
    }
    if (s.type === "refinement") {
      const i = (u) => {
        const d = s.refinement(u, a);
        if (r.common.async)
          return Promise.resolve(d);
        if (d instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return u;
      };
      if (r.common.async === !1) {
        const u = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return u.status === "aborted" ? P : (u.status === "dirty" && t.dirty(), i(u.value), { status: t.value, value: u.value });
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((u) => u.status === "aborted" ? P : (u.status === "dirty" && t.dirty(), i(u.value).then(() => ({ status: t.value, value: u.value }))));
    }
    if (s.type === "transform")
      if (r.common.async === !1) {
        const i = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        if (!Ft(i))
          return P;
        const u = s.transform(i.value, a);
        if (u instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: t.value, value: u };
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((i) => Ft(i) ? Promise.resolve(s.transform(i.value, a)).then((u) => ({
          status: t.value,
          value: u
        })) : P);
    J.assertNever(s);
  }
}
pt.create = (n, e, t) => new pt({
  schema: n,
  typeName: S.ZodEffects,
  effect: e,
  ...j(t)
});
pt.createWithPreprocess = (n, e, t) => new pt({
  schema: e,
  effect: { type: "preprocess", transform: n },
  typeName: S.ZodEffects,
  ...j(t)
});
class Me extends Z {
  _parse(e) {
    return this._getType(e) === k.undefined ? ve(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Me.create = (n, e) => new Me({
  innerType: n,
  typeName: S.ZodOptional,
  ...j(e)
});
class ft extends Z {
  _parse(e) {
    return this._getType(e) === k.null ? ve(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ft.create = (n, e) => new ft({
  innerType: n,
  typeName: S.ZodNullable,
  ...j(e)
});
class Ln extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    let r = t.data;
    return t.parsedType === k.undefined && (r = this._def.defaultValue()), this._def.innerType._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
Ln.create = (n, e) => new Ln({
  innerType: n,
  typeName: S.ZodDefault,
  defaultValue: typeof e.default == "function" ? e.default : () => e.default,
  ...j(e)
});
class Zn extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = {
      ...t,
      common: {
        ...t.common,
        issues: []
      }
    }, s = this._def.innerType._parse({
      data: r.data,
      path: r.path,
      parent: {
        ...r
      }
    });
    return Rn(s) ? s.then((a) => ({
      status: "valid",
      value: a.status === "valid" ? a.value : this._def.catchValue({
        get error() {
          return new je(r.common.issues);
        },
        input: r.data
      })
    })) : {
      status: "valid",
      value: s.status === "valid" ? s.value : this._def.catchValue({
        get error() {
          return new je(r.common.issues);
        },
        input: r.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Zn.create = (n, e) => new Zn({
  innerType: n,
  typeName: S.ZodCatch,
  catchValue: typeof e.catch == "function" ? e.catch : () => e.catch,
  ...j(e)
});
class ps extends Z {
  _parse(e) {
    if (this._getType(e) !== k.nan) {
      const r = this._getOrReturnCtx(e);
      return I(r, {
        code: x.invalid_type,
        expected: k.nan,
        received: r.parsedType
      }), P;
    }
    return { status: "valid", value: e.data };
  }
}
ps.create = (n) => new ps({
  typeName: S.ZodNaN,
  ...j(n)
});
class na extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = t.data;
    return this._def.type._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class jr extends Z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.common.async)
      return (async () => {
        const a = await this._def.in._parseAsync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? P : a.status === "dirty" ? (t.dirty(), Jt(a.value)) : this._def.out._parseAsync({
          data: a.value,
          path: r.path,
          parent: r
        });
      })();
    {
      const s = this._def.in._parseSync({
        data: r.data,
        path: r.path,
        parent: r
      });
      return s.status === "aborted" ? P : s.status === "dirty" ? (t.dirty(), {
        status: "dirty",
        value: s.value
      }) : this._def.out._parseSync({
        data: s.value,
        path: r.path,
        parent: r
      });
    }
  }
  static create(e, t) {
    return new jr({
      in: e,
      out: t,
      typeName: S.ZodPipeline
    });
  }
}
class Un extends Z {
  _parse(e) {
    const t = this._def.innerType._parse(e), r = (s) => (Ft(s) && (s.value = Object.freeze(s.value)), s);
    return Rn(t) ? t.then((s) => r(s)) : r(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Un.create = (n, e) => new Un({
  innerType: n,
  typeName: S.ZodReadonly,
  ...j(e)
});
var S;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(S || (S = {}));
const c = Pe.create, A = Lt.create, ut = hr.create, L = _r.create;
ze.create;
const q = Ie.create, m = X.create, ra = Dn.create, he = Mr.create;
Pn.create;
dt.create;
const Q = Mn.create, Ri = jn.create, g = $n.create, se = lt.create;
Fn.create;
Me.create;
ft.create;
function Ni() {
  return {};
}
function Di(n, e) {
  var r, s;
  const t = {
    type: "array"
  };
  return ((s = (r = n.type) == null ? void 0 : r._def) == null ? void 0 : s.typeName) !== S.ZodAny && (t.items = G(n.type._def, {
    ...e,
    currentPath: [...e.currentPath, "items"]
  })), n.minLength && V(t, "minItems", n.minLength.value, n.minLength.message, e), n.maxLength && V(t, "maxItems", n.maxLength.value, n.maxLength.message, e), n.exactLength && (V(t, "minItems", n.exactLength.value, n.exactLength.message, e), V(t, "maxItems", n.exactLength.value, n.exactLength.message, e)), t;
}
function Pi(n, e) {
  const t = {
    type: "integer",
    format: "int64"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? V(t, "minimum", r.value, r.message, e) : V(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), V(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? V(t, "maximum", r.value, r.message, e) : V(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), V(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        V(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function Mi() {
  return {
    type: "boolean"
  };
}
function ji(n, e) {
  return G(n.type._def, e);
}
const $i = (n, e) => G(n.innerType._def, e);
function sa(n, e, t) {
  const r = t ?? e.dateStrategy;
  if (Array.isArray(r))
    return {
      anyOf: r.map((s, a) => sa(n, e, s))
    };
  switch (r) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return Fi(n, e);
  }
}
const Fi = (n, e) => {
  const t = {
    type: "integer",
    format: "unix-time"
  };
  if (e.target === "openApi3")
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        V(
          t,
          "minimum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
      case "max":
        V(
          t,
          "maximum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
    }
  return t;
};
function Li(n, e) {
  return {
    ...G(n.innerType._def, e),
    default: n.defaultValue()
  };
}
function Zi(n, e, t) {
  return e.effectStrategy === "input" ? G(n.schema._def, e, t) : {};
}
function Ui(n) {
  return {
    type: "string",
    enum: [...n.values]
  };
}
const qi = (n) => "type" in n && n.type === "string" ? !1 : "allOf" in n;
function Ji(n, e) {
  const t = [
    G(n.left._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "0"]
    }),
    G(n.right._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "1"]
    })
  ].filter((a) => !!a);
  let r = e.target === "jsonSchema2019-09" ? { unevaluatedProperties: !1 } : void 0;
  const s = [];
  return t.forEach((a) => {
    if (qi(a))
      s.push(...a.allOf), a.unevaluatedProperties === void 0 && (r = void 0);
    else {
      let i = a;
      if ("additionalProperties" in a && a.additionalProperties === !1) {
        const { additionalProperties: u, ...d } = a;
        i = d;
      } else
        r = void 0;
      s.push(i);
    }
  }), s.length ? {
    allOf: s,
    ...r
  } : void 0;
}
function Bi(n, e) {
  const t = typeof n.value;
  return t !== "bigint" && t !== "number" && t !== "boolean" && t !== "string" ? {
    type: Array.isArray(n.value) ? "array" : "object"
  } : e.target === "openApi3" ? {
    type: t === "bigint" ? "integer" : t,
    enum: [n.value]
  } : {
    type: t === "bigint" ? "integer" : t,
    const: n.value
  };
}
let nr;
const We = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => (nr === void 0 && (nr = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u")), nr),
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function aa(n, e) {
  const t = {
    type: "string"
  };
  function r(s) {
    return e.patternStrategy === "escape" ? Gi(s) : s;
  }
  if (n.checks)
    for (const s of n.checks)
      switch (s.kind) {
        case "min":
          V(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e);
          break;
        case "max":
          V(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "email":
          switch (e.emailStrategy) {
            case "format:email":
              we(t, "email", s.message, e);
              break;
            case "format:idn-email":
              we(t, "idn-email", s.message, e);
              break;
            case "pattern:zod":
              be(t, We.email, s.message, e);
              break;
          }
          break;
        case "url":
          we(t, "uri", s.message, e);
          break;
        case "uuid":
          we(t, "uuid", s.message, e);
          break;
        case "regex":
          be(t, s.regex, s.message, e);
          break;
        case "cuid":
          be(t, We.cuid, s.message, e);
          break;
        case "cuid2":
          be(t, We.cuid2, s.message, e);
          break;
        case "startsWith":
          be(t, RegExp(`^${r(s.value)}`), s.message, e);
          break;
        case "endsWith":
          be(t, RegExp(`${r(s.value)}$`), s.message, e);
          break;
        case "datetime":
          we(t, "date-time", s.message, e);
          break;
        case "date":
          we(t, "date", s.message, e);
          break;
        case "time":
          we(t, "time", s.message, e);
          break;
        case "duration":
          we(t, "duration", s.message, e);
          break;
        case "length":
          V(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e), V(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "includes": {
          be(t, RegExp(r(s.value)), s.message, e);
          break;
        }
        case "ip": {
          s.version !== "v6" && we(t, "ipv4", s.message, e), s.version !== "v4" && we(t, "ipv6", s.message, e);
          break;
        }
        case "emoji":
          be(t, We.emoji, s.message, e);
          break;
        case "ulid": {
          be(t, We.ulid, s.message, e);
          break;
        }
        case "base64": {
          switch (e.base64Strategy) {
            case "format:binary": {
              we(t, "binary", s.message, e);
              break;
            }
            case "contentEncoding:base64": {
              V(t, "contentEncoding", "base64", s.message, e);
              break;
            }
            case "pattern:zod": {
              be(t, We.base64, s.message, e);
              break;
            }
          }
          break;
        }
        case "nanoid":
          be(t, We.nanoid, s.message, e);
      }
  return t;
}
const Gi = (n) => Array.from(n).map((e) => /[a-zA-Z0-9]/.test(e) ? e : `\\${e}`).join(""), we = (n, e, t, r) => {
  var s;
  n.format || (s = n.anyOf) != null && s.some((a) => a.format) ? (n.anyOf || (n.anyOf = []), n.format && (n.anyOf.push({
    format: n.format,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { format: n.errorMessage.format }
    }
  }), delete n.format, n.errorMessage && (delete n.errorMessage.format, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.anyOf.push({
    format: e,
    ...t && r.errorMessages && { errorMessage: { format: t } }
  })) : V(n, "format", e, t, r);
}, be = (n, e, t, r) => {
  var s;
  n.pattern || (s = n.allOf) != null && s.some((a) => a.pattern) ? (n.allOf || (n.allOf = []), n.pattern && (n.allOf.push({
    pattern: n.pattern,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { pattern: n.errorMessage.pattern }
    }
  }), delete n.pattern, n.errorMessage && (delete n.errorMessage.pattern, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.allOf.push({
    pattern: fs(e, r),
    ...t && r.errorMessages && { errorMessage: { pattern: t } }
  })) : V(n, "pattern", fs(e, r), t, r);
}, fs = (n, e) => {
  var l;
  const t = typeof n == "function" ? n() : n;
  if (!e.applyRegexFlags || !t.flags)
    return t.source;
  const r = {
    i: t.flags.includes("i"),
    // Case-insensitive
    m: t.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: t.flags.includes("s")
    // `.` matches newlines
  }, s = r.i ? t.source.toLowerCase() : t.source;
  let a = "", i = !1, u = !1, d = !1;
  for (let p = 0; p < s.length; p++) {
    if (i) {
      a += s[p], i = !1;
      continue;
    }
    if (r.i) {
      if (u) {
        if (s[p].match(/[a-z]/)) {
          d ? (a += s[p], a += `${s[p - 2]}-${s[p]}`.toUpperCase(), d = !1) : s[p + 1] === "-" && ((l = s[p + 2]) != null && l.match(/[a-z]/)) ? (a += s[p], d = !0) : a += `${s[p]}${s[p].toUpperCase()}`;
          continue;
        }
      } else if (s[p].match(/[a-z]/)) {
        a += `[${s[p]}${s[p].toUpperCase()}]`;
        continue;
      }
    }
    if (r.m) {
      if (s[p] === "^") {
        a += `(^|(?<=[\r
]))`;
        continue;
      } else if (s[p] === "$") {
        a += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (r.s && s[p] === ".") {
      a += u ? `${s[p]}\r
` : `[${s[p]}\r
]`;
      continue;
    }
    a += s[p], s[p] === "\\" ? i = !0 : u && s[p] === "]" ? u = !1 : !u && s[p] === "[" && (u = !0);
  }
  try {
    const p = new RegExp(a);
  } catch {
    return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`), t.source;
  }
  return a;
};
function ia(n, e) {
  var r, s, a, i;
  if (e.target === "openApi3" && ((r = n.keyType) == null ? void 0 : r._def.typeName) === S.ZodEnum)
    return {
      type: "object",
      required: n.keyType._def.values,
      properties: n.keyType._def.values.reduce((u, d) => ({
        ...u,
        [d]: G(n.valueType._def, {
          ...e,
          currentPath: [...e.currentPath, "properties", d]
        }) ?? {}
      }), {}),
      additionalProperties: !1
    };
  const t = {
    type: "object",
    additionalProperties: G(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (e.target === "openApi3")
    return t;
  if (((s = n.keyType) == null ? void 0 : s._def.typeName) === S.ZodString && ((a = n.keyType._def.checks) != null && a.length)) {
    const u = Object.entries(aa(n.keyType._def, e)).reduce((d, [l, p]) => l === "type" ? d : { ...d, [l]: p }, {});
    return {
      ...t,
      propertyNames: u
    };
  } else if (((i = n.keyType) == null ? void 0 : i._def.typeName) === S.ZodEnum)
    return {
      ...t,
      propertyNames: {
        enum: n.keyType._def.values
      }
    };
  return t;
}
function zi(n, e) {
  if (e.mapStrategy === "record")
    return ia(n, e);
  const t = G(n.keyType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "0"]
  }) || {}, r = G(n.valueType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [t, r],
      minItems: 2,
      maxItems: 2
    }
  };
}
function Vi(n) {
  const e = n.values, r = Object.keys(n.values).filter((a) => typeof e[e[a]] != "number").map((a) => e[a]), s = Array.from(new Set(r.map((a) => typeof a)));
  return {
    type: s.length === 1 ? s[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: r
  };
}
function Hi() {
  return {
    not: {}
  };
}
function Wi(n) {
  return n.target === "openApi3" ? {
    enum: ["null"],
    nullable: !0
  } : {
    type: "null"
  };
}
const qn = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function Ki(n, e) {
  if (e.target === "openApi3")
    return hs(n, e);
  const t = n.options instanceof Map ? Array.from(n.options.values()) : n.options;
  if (t.every((r) => r._def.typeName in qn && (!r._def.checks || !r._def.checks.length))) {
    const r = t.reduce((s, a) => {
      const i = qn[a._def.typeName];
      return i && !s.includes(i) ? [...s, i] : s;
    }, []);
    return {
      type: r.length > 1 ? r : r[0]
    };
  } else if (t.every((r) => r._def.typeName === "ZodLiteral" && !r.description)) {
    const r = t.reduce((s, a) => {
      const i = typeof a._def.value;
      switch (i) {
        case "string":
        case "number":
        case "boolean":
          return [...s, i];
        case "bigint":
          return [...s, "integer"];
        case "object":
          if (a._def.value === null)
            return [...s, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return s;
      }
    }, []);
    if (r.length === t.length) {
      const s = r.filter((a, i, u) => u.indexOf(a) === i);
      return {
        type: s.length > 1 ? s : s[0],
        enum: t.reduce((a, i) => a.includes(i._def.value) ? a : [...a, i._def.value], [])
      };
    }
  } else if (t.every((r) => r._def.typeName === "ZodEnum"))
    return {
      type: "string",
      enum: t.reduce((r, s) => [...r, ...s._def.values.filter((a) => !r.includes(a))], [])
    };
  return hs(n, e);
}
const hs = (n, e) => {
  const t = (n.options instanceof Map ? Array.from(n.options.values()) : n.options).map((r, s) => G(r._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", `${s}`]
  })).filter((r) => !!r && (!e.strictUnions || typeof r == "object" && Object.keys(r).length > 0));
  return t.length ? { anyOf: t } : void 0;
};
function Yi(n, e) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(n.innerType._def.typeName) && (!n.innerType._def.checks || !n.innerType._def.checks.length))
    return e.target === "openApi3" || e.nullableStrategy === "property" ? {
      type: qn[n.innerType._def.typeName],
      nullable: !0
    } : {
      type: [qn[n.innerType._def.typeName], "null"]
    };
  if (e.target === "openApi3") {
    const r = G(n.innerType._def, {
      ...e,
      currentPath: [...e.currentPath]
    });
    return r && "$ref" in r ? { allOf: [r], nullable: !0 } : r && { ...r, nullable: !0 };
  }
  const t = G(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "0"]
  });
  return t && { anyOf: [t, { type: "null" }] };
}
function Xi(n, e) {
  const t = {
    type: "number"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "int":
        t.type = "integer", Xs(t, "type", r.message, e);
        break;
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? V(t, "minimum", r.value, r.message, e) : V(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), V(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? V(t, "maximum", r.value, r.message, e) : V(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), V(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        V(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function Qi(n, e) {
  return e.removeAdditionalStrategy === "strict" ? n.catchall._def.typeName === "ZodNever" ? n.unknownKeys !== "strict" : G(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0 : n.catchall._def.typeName === "ZodNever" ? n.unknownKeys === "passthrough" : G(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0;
}
function eo(n, e) {
  const t = {
    type: "object",
    ...Object.entries(n.shape()).reduce((r, [s, a]) => {
      var d;
      if (a === void 0 || a._def === void 0)
        return r;
      const i = [...e.currentPath, "properties", s], u = G(a._def, {
        ...e,
        currentPath: i,
        propertyPath: i
      });
      if (u === void 0)
        return r;
      if (e.openaiStrictMode && a.isOptional() && !a.isNullable() && typeof ((d = a._def) == null ? void 0 : d.defaultValue) > "u")
        throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      return {
        properties: {
          ...r.properties,
          [s]: u
        },
        required: a.isOptional() && !e.openaiStrictMode ? r.required : [...r.required, s]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: Qi(n, e)
  };
  return t.required.length || delete t.required, t;
}
const to = (n, e) => {
  if (e.propertyPath && e.currentPath.slice(0, e.propertyPath.length).toString() === e.propertyPath.toString())
    return G(n.innerType._def, { ...e, currentPath: e.currentPath });
  const t = G(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "1"]
  });
  return t ? {
    anyOf: [
      {
        not: {}
      },
      t
    ]
  } : {};
}, no = (n, e) => {
  if (e.pipeStrategy === "input")
    return G(n.in._def, e);
  if (e.pipeStrategy === "output")
    return G(n.out._def, e);
  const t = G(n.in._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", "0"]
  }), r = G(n.out._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", t ? "1" : "0"]
  });
  return {
    allOf: [t, r].filter((s) => s !== void 0)
  };
};
function ro(n, e) {
  return G(n.type._def, e);
}
function so(n, e) {
  const r = {
    type: "array",
    uniqueItems: !0,
    items: G(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "items"]
    })
  };
  return n.minSize && V(r, "minItems", n.minSize.value, n.minSize.message, e), n.maxSize && V(r, "maxItems", n.maxSize.value, n.maxSize.message, e), r;
}
function ao(n, e) {
  return n.rest ? {
    type: "array",
    minItems: n.items.length,
    items: n.items.map((t, r) => G(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], []),
    additionalItems: G(n.rest._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalItems"]
    })
  } : {
    type: "array",
    minItems: n.items.length,
    maxItems: n.items.length,
    items: n.items.map((t, r) => G(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], [])
  };
}
function io() {
  return {
    not: {}
  };
}
function oo() {
  return {};
}
const uo = (n, e) => G(n.innerType._def, e);
function G(n, e, t = !1) {
  var i;
  const r = e.seen.get(n);
  if (e.override) {
    const u = (i = e.override) == null ? void 0 : i.call(e, n, e, r, t);
    if (u !== ni)
      return u;
  }
  if (r && !t) {
    const u = co(r, e);
    if (u !== void 0)
      return "$ref" in u && e.seenRefs.add(u.$ref), u;
  }
  const s = { def: n, path: e.currentPath, jsonSchema: void 0 };
  e.seen.set(n, s);
  const a = po(n, n.typeName, e, t);
  return a && fo(n, e, a), s.jsonSchema = a, a;
}
const co = (n, e) => {
  switch (e.$refStrategy) {
    case "root":
      return { $ref: n.path.join("/") };
    // this case is needed as OpenAI strict mode doesn't support top-level `$ref`s, i.e.
    // the top-level schema *must* be `{"type": "object", "properties": {...}}` but if we ever
    // need to define a `$ref`, relative `$ref`s aren't supported, so we need to extract
    // the schema to `#/definitions/` and reference that.
    //
    // e.g. if we need to reference a schema at
    // `["#","definitions","contactPerson","properties","person1","properties","name"]`
    // then we'll extract it out to `contactPerson_properties_person1_properties_name`
    case "extract-to-root":
      const t = n.path.slice(e.basePath.length + 1).join("_");
      return t !== e.name && e.nameStrategy === "duplicate-ref" && (e.definitions[t] = n.def), { $ref: [...e.basePath, e.definitionPath, t].join("/") };
    case "relative":
      return { $ref: lo(e.currentPath, n.path) };
    case "none":
    case "seen":
      return n.path.length < e.currentPath.length && n.path.every((r, s) => e.currentPath[s] === r) ? (console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`), {}) : e.$refStrategy === "seen" ? {} : void 0;
  }
}, lo = (n, e) => {
  let t = 0;
  for (; t < n.length && t < e.length && n[t] === e[t]; t++)
    ;
  return [(n.length - t).toString(), ...e.slice(t)].join("/");
}, po = (n, e, t, r) => {
  switch (e) {
    case S.ZodString:
      return aa(n, t);
    case S.ZodNumber:
      return Xi(n, t);
    case S.ZodObject:
      return eo(n, t);
    case S.ZodBigInt:
      return Pi(n, t);
    case S.ZodBoolean:
      return Mi();
    case S.ZodDate:
      return sa(n, t);
    case S.ZodUndefined:
      return io();
    case S.ZodNull:
      return Wi(t);
    case S.ZodArray:
      return Di(n, t);
    case S.ZodUnion:
    case S.ZodDiscriminatedUnion:
      return Ki(n, t);
    case S.ZodIntersection:
      return Ji(n, t);
    case S.ZodTuple:
      return ao(n, t);
    case S.ZodRecord:
      return ia(n, t);
    case S.ZodLiteral:
      return Bi(n, t);
    case S.ZodEnum:
      return Ui(n);
    case S.ZodNativeEnum:
      return Vi(n);
    case S.ZodNullable:
      return Yi(n, t);
    case S.ZodOptional:
      return to(n, t);
    case S.ZodMap:
      return zi(n, t);
    case S.ZodSet:
      return so(n, t);
    case S.ZodLazy:
      return G(n.getter()._def, t);
    case S.ZodPromise:
      return ro(n, t);
    case S.ZodNaN:
    case S.ZodNever:
      return Hi();
    case S.ZodEffects:
      return Zi(n, t, r);
    case S.ZodAny:
      return Ni();
    case S.ZodUnknown:
      return oo();
    case S.ZodDefault:
      return Li(n, t);
    case S.ZodBranded:
      return ji(n, t);
    case S.ZodReadonly:
      return uo(n, t);
    case S.ZodCatch:
      return $i(n, t);
    case S.ZodPipeline:
      return no(n, t);
    case S.ZodFunction:
    case S.ZodVoid:
    case S.ZodSymbol:
      return;
    default:
      return /* @__PURE__ */ ((s) => {
      })();
  }
}, fo = (n, e, t) => (n.description && (t.description = n.description, e.markdownDescription && (t.markdownDescription = n.description)), t), ho = (n, e) => {
  const t = ai(e), r = typeof e == "string" ? e : (e == null ? void 0 : e.nameStrategy) === "title" || e == null ? void 0 : e.name, s = G(n._def, r === void 0 ? t : {
    ...t,
    currentPath: [...t.basePath, t.definitionPath, r]
  }, !1) ?? {}, a = typeof e == "object" && e.name !== void 0 && e.nameStrategy === "title" ? e.name : void 0;
  a !== void 0 && (s.title = a);
  const i = (() => {
    if (si(t.definitions))
      return;
    const d = {}, l = /* @__PURE__ */ new Set();
    for (let p = 0; p < 500; p++) {
      const f = Object.entries(t.definitions).filter(([h]) => !l.has(h));
      if (f.length === 0)
        break;
      for (const [h, w] of f)
        d[h] = G(pr(w), { ...t, currentPath: [...t.basePath, t.definitionPath, h] }, !0) ?? {}, l.add(h);
    }
    return d;
  })(), u = r === void 0 ? i ? {
    ...s,
    [t.definitionPath]: i
  } : s : t.nameStrategy === "duplicate-ref" ? {
    ...s,
    ...i || t.seenRefs.size ? {
      [t.definitionPath]: {
        ...i,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...t.seenRefs.size ? { [r]: s } : void 0
      }
    } : void 0
  } : {
    $ref: [...t.$refStrategy === "relative" ? [] : t.basePath, t.definitionPath, r].join("/"),
    [t.definitionPath]: {
      ...i,
      [r]: s
    }
  };
  return t.target === "jsonSchema7" ? u.$schema = "http://json-schema.org/draft-07/schema#" : t.target === "jsonSchema2019-09" && (u.$schema = "https://json-schema.org/draft/2019-09/schema#"), u;
};
function mo(n, { parser: e, callback: t }) {
  const r = { ...n };
  return Object.defineProperties(r, {
    $brand: {
      value: "auto-parseable-tool",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    },
    $callback: {
      value: t,
      enumerable: !1
    }
  }), r;
}
function oa(n, e) {
  return ho(n, {
    openaiStrictMode: !0,
    name: e.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function go(n, e, t) {
  return ti({
    type: "json_schema",
    ...t,
    name: e,
    strict: !0,
    schema: oa(n, { name: e })
  }, (r) => n.parse(JSON.parse(r)));
}
function _o(n) {
  return mo({
    type: "function",
    name: n.name,
    parameters: oa(n.parameters, { name: n.name }),
    strict: !0
  }, {
    callback: n.function,
    parser: (e) => n.parameters.parse(JSON.parse(e))
  });
}
class He extends Error {
  constructor(t, r) {
    super(t);
    _(this, "state");
    this.state = r;
  }
}
class yo extends He {
}
class ms extends He {
}
class _e extends He {
}
class ee extends He {
}
class gs extends He {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class vo extends He {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class _s extends He {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
class wr extends He {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
function ht(n) {
  return typeof n == "object" && n !== null && "_def" in n && typeof n._def == "object" && n._def !== null && "typeName" in n._def && n._def.typeName === "ZodObject";
}
function wo(n) {
  return typeof n == "object" && n !== null && "input" in n && typeof n.input == "string";
}
function Jn(n) {
  if (n = n.replace(/\s/g, "_"), n = n.replace(/[^a-zA-Z0-9]/g, "_"), n.length === 0)
    throw new Error("Tool name cannot be empty");
  return n;
}
function $r(n, e) {
  const t = (r) => JSON.parse(r);
  if (ht(n)) {
    const r = _o({
      name: e,
      parameters: n,
      function: () => {
      }
    });
    return {
      schema: r.parameters,
      parser: r.$parseRaw
    };
  } else if (typeof n == "object" && n !== null)
    return {
      schema: n,
      parser: t
    };
  throw new ee("Input type is not a ZodObject or a valid JSON schema");
}
function ys(n) {
  if (n === "text")
    return "text";
  if (ht(n)) {
    const e = go(n, "output");
    return {
      type: e.type,
      name: e.name,
      strict: e.strict || !1,
      schema: e.schema
    };
  }
  return n;
}
function bo(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var Sn = { exports: {} }, rr, vs;
function xo() {
  if (vs) return rr;
  vs = 1;
  var n = 1e3, e = n * 60, t = e * 60, r = t * 24, s = r * 7, a = r * 365.25;
  rr = function(p, f) {
    f = f || {};
    var h = typeof p;
    if (h === "string" && p.length > 0)
      return i(p);
    if (h === "number" && isFinite(p))
      return f.long ? d(p) : u(p);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(p)
    );
  };
  function i(p) {
    if (p = String(p), !(p.length > 100)) {
      var f = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        p
      );
      if (f) {
        var h = parseFloat(f[1]), w = (f[2] || "ms").toLowerCase();
        switch (w) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return h * a;
          case "weeks":
          case "week":
          case "w":
            return h * s;
          case "days":
          case "day":
          case "d":
            return h * r;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return h * t;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return h * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return h * n;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return h;
          default:
            return;
        }
      }
    }
  }
  function u(p) {
    var f = Math.abs(p);
    return f >= r ? Math.round(p / r) + "d" : f >= t ? Math.round(p / t) + "h" : f >= e ? Math.round(p / e) + "m" : f >= n ? Math.round(p / n) + "s" : p + "ms";
  }
  function d(p) {
    var f = Math.abs(p);
    return f >= r ? l(p, f, r, "day") : f >= t ? l(p, f, t, "hour") : f >= e ? l(p, f, e, "minute") : f >= n ? l(p, f, n, "second") : p + " ms";
  }
  function l(p, f, h, w) {
    var v = f >= h * 1.5;
    return Math.round(p / h) + " " + w + (v ? "s" : "");
  }
  return rr;
}
var sr, ws;
function So() {
  if (ws) return sr;
  ws = 1;
  function n(e) {
    r.debug = r, r.default = r, r.coerce = l, r.disable = u, r.enable = a, r.enabled = d, r.humanize = xo(), r.destroy = p, Object.keys(e).forEach((f) => {
      r[f] = e[f];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(f) {
      let h = 0;
      for (let w = 0; w < f.length; w++)
        h = (h << 5) - h + f.charCodeAt(w), h |= 0;
      return r.colors[Math.abs(h) % r.colors.length];
    }
    r.selectColor = t;
    function r(f) {
      let h, w = null, v, b;
      function O(...R) {
        if (!O.enabled)
          return;
        const M = O, z = Number(/* @__PURE__ */ new Date()), U = z - (h || z);
        M.diff = U, M.prev = h, M.curr = z, h = z, R[0] = r.coerce(R[0]), typeof R[0] != "string" && R.unshift("%O");
        let B = 0;
        R[0] = R[0].replace(/%([a-zA-Z%])/g, (de, yt) => {
          if (de === "%%")
            return "%";
          B++;
          const qt = r.formatters[yt];
          if (typeof qt == "function") {
            const xn = R[B];
            de = qt.call(M, xn), R.splice(B, 1), B--;
          }
          return de;
        }), r.formatArgs.call(M, R), (M.log || r.log).apply(M, R);
      }
      return O.namespace = f, O.useColors = r.useColors(), O.color = r.selectColor(f), O.extend = s, O.destroy = r.destroy, Object.defineProperty(O, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: () => w !== null ? w : (v !== r.namespaces && (v = r.namespaces, b = r.enabled(f)), b),
        set: (R) => {
          w = R;
        }
      }), typeof r.init == "function" && r.init(O), O;
    }
    function s(f, h) {
      const w = r(this.namespace + (typeof h > "u" ? ":" : h) + f);
      return w.log = this.log, w;
    }
    function a(f) {
      r.save(f), r.namespaces = f, r.names = [], r.skips = [];
      const h = (typeof f == "string" ? f : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const w of h)
        w[0] === "-" ? r.skips.push(w.slice(1)) : r.names.push(w);
    }
    function i(f, h) {
      let w = 0, v = 0, b = -1, O = 0;
      for (; w < f.length; )
        if (v < h.length && (h[v] === f[w] || h[v] === "*"))
          h[v] === "*" ? (b = v, O = w, v++) : (w++, v++);
        else if (b !== -1)
          v = b + 1, O++, w = O;
        else
          return !1;
      for (; v < h.length && h[v] === "*"; )
        v++;
      return v === h.length;
    }
    function u() {
      const f = [
        ...r.names,
        ...r.skips.map((h) => "-" + h)
      ].join(",");
      return r.enable(""), f;
    }
    function d(f) {
      for (const h of r.skips)
        if (i(f, h))
          return !1;
      for (const h of r.names)
        if (i(f, h))
          return !0;
      return !1;
    }
    function l(f) {
      return f instanceof Error ? f.stack || f.message : f;
    }
    function p() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return r.enable(r.load()), r;
  }
  return sr = n, sr;
}
var bs;
function To() {
  return bs || (bs = 1, (function(n, e) {
    e.formatArgs = r, e.save = s, e.load = a, e.useColors = t, e.storage = i(), e.destroy = /* @__PURE__ */ (() => {
      let d = !1;
      return () => {
        d || (d = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })(), e.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function t() {
      if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
        return !0;
      if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
        return !1;
      let d;
      return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator < "u" && navigator.userAgent && (d = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(d[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function r(d) {
      if (d[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + d[0] + (this.useColors ? "%c " : " ") + "+" + n.exports.humanize(this.diff), !this.useColors)
        return;
      const l = "color: " + this.color;
      d.splice(1, 0, l, "color: inherit");
      let p = 0, f = 0;
      d[0].replace(/%[a-zA-Z%]/g, (h) => {
        h !== "%%" && (p++, h === "%c" && (f = p));
      }), d.splice(f, 0, l);
    }
    e.log = console.debug || console.log || (() => {
    });
    function s(d) {
      try {
        d ? e.storage.setItem("debug", d) : e.storage.removeItem("debug");
      } catch {
      }
    }
    function a() {
      let d;
      try {
        d = e.storage.getItem("debug") || e.storage.getItem("DEBUG");
      } catch {
      }
      return !d && typeof process < "u" && "env" in process && (d = process.env.DEBUG), d;
    }
    function i() {
      try {
        return localStorage;
      } catch {
      }
    }
    n.exports = So()(e);
    const { formatters: u } = n.exports;
    u.j = function(d) {
      try {
        return JSON.stringify(d);
      } catch (l) {
        return "[UnexpectedJSONParseError]: " + l.message;
      }
    };
  })(Sn, Sn.exports)), Sn.exports;
}
var Io = To();
const ko = /* @__PURE__ */ bo(Io);
function ua() {
  return Do();
}
function xs(n) {
  const e = ua();
  return typeof e < "u" && (e[n] === "true" || e[n] === "1");
}
const ca = {
  get disabled() {
    return !0;
  }
}, da = {
  get dontLogModelData() {
    return xs("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return xs("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
}, Ao = da.dontLogModelData, Co = da.dontLogToolData;
function la(n = "openai-agents") {
  return {
    namespace: n,
    debug: ko(n),
    error: console.error,
    warn: console.warn,
    dontLogModelData: Ao,
    dontLogToolData: Co
  };
}
const E = la("openai-agents:core");
function Ve(n) {
  if (n == null)
    return String(n);
  if (typeof n == "string")
    return n;
  if (typeof n == "object")
    try {
      return JSON.stringify(n);
    } catch {
      return "[object with circular references]";
    }
  return String(n);
}
function Eo(n, e) {
  return `An error occurred while running the tool. Please try again. Error: ${e instanceof Error ? e.toString() : String(e)}`;
}
function br(n) {
  const e = n.name ? Jn(n.name) : Jn(n.execute.name), t = typeof n.errorFunction > "u" ? Eo : n.errorFunction;
  if (!e)
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  const r = n.strict ?? !0;
  if (!r && ht(n.parameters))
    throw new ee("Strict mode is required for Zod parameters");
  const { parser: s, schema: a } = $r(n.parameters, e);
  async function i(p, f, h) {
    const [w, v] = await Pr(() => s(f));
    if (w !== null)
      throw E.dontLogToolData ? E.debug(`Invalid JSON input for tool ${e}`) : E.debug(`Invalid JSON input for tool ${e}: ${f}`), new _e("Invalid JSON input for tool");
    E.dontLogToolData ? E.debug(`Invoking tool ${e}`) : E.debug(`Invoking tool ${e} with input ${f}`);
    const b = await n.execute(v, p, h), O = Ve(b);
    return E.dontLogToolData ? E.debug(`Tool ${e} completed`) : E.debug(`Tool ${e} returned: ${O}`), b;
  }
  async function u(p, f, h) {
    return i(p, f, h).catch((w) => {
      if (t) {
        const v = Ht();
        return v == null || v.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: e,
            error: w.toString()
          }
        }), t(p, w);
      }
      throw w;
    });
  }
  const d = typeof n.needsApproval == "function" ? n.needsApproval : async () => typeof n.needsApproval == "boolean" ? n.needsApproval : !1, l = typeof n.isEnabled == "function" ? async (p, f) => {
    const h = n.isEnabled;
    return !!await h({ runContext: p, agent: f });
  } : async () => typeof n.isEnabled == "boolean" ? n.isEnabled : !0;
  return {
    type: "function",
    name: e,
    description: n.description,
    parameters: a,
    strict: r,
    invoke: u,
    needsApproval: d,
    isEnabled: l
  };
}
m({
  name: c(),
  description: c().optional(),
  inputSchema: m({
    type: g("object"),
    properties: Q(c(), L()),
    required: q(c()),
    additionalProperties: ut()
  })
});
const ar = {};
async function Oo({ server: n, convertSchemasToStrict: e, runContext: t, agent: r }) {
  return n.cacheToolsList && ar[n.name] ? ar[n.name].map((s) => Ss(s, n, e)) : nu(async (s) => {
    const a = await n.listTools();
    let i = a;
    if (t && r) {
      const d = { runContext: t, agent: r, serverName: n.name }, l = [];
      for (const p of a) {
        const f = n.toolFilter;
        if (f)
          if (typeof f == "function") {
            if (!await f(d, p)) {
              E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);
              continue;
            }
          } else {
            const h = f.allowedToolNames ?? [], w = f.blockedToolNames ?? [];
            if (h.length > 0 || w.length > 0) {
              const v = h.length > 0 ? h.includes(p.name) : !0, b = w.length > 0 ? w.includes(p.name) : !1;
              if (!v || b) {
                b ? E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`) : v || E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);
                continue;
              }
            }
          }
        l.push(p);
      }
      i = l;
    }
    s.spanData.result = i.map((d) => d.name);
    const u = i.map((d) => Ss(d, n, e));
    return n.cacheToolsList && (ar[n.name] = i), u;
  }, { data: { server: n.name } });
}
async function Ro(n, e, t, r = !1) {
  const s = Array.isArray(n) ? {
    mcpServers: n,
    runContext: e,
    agent: t,
    convertSchemasToStrict: r
  } : n, { mcpServers: a, convertSchemasToStrict: i = !1, runContext: u, agent: d } = s, l = [], p = /* @__PURE__ */ new Set();
  for (const f of a) {
    const h = await Oo({
      server: f,
      convertSchemasToStrict: i,
      runContext: u,
      agent: d
    }), v = [...new Set(h.map((b) => b.name))].filter((b) => p.has(b));
    if (v.length > 0)
      throw new ee(`Duplicate tool names found across MCP servers: ${v.join(", ")}`);
    for (const b of h)
      p.add(b.name), l.push(b);
  }
  return l;
}
function Ss(n, e, t) {
  var i, u, d, l;
  async function r(p, f) {
    let h = {};
    typeof p == "string" && p ? h = JSON.parse(p) : typeof p == "object" && p != null && (h = p);
    const w = Ht();
    w && (w.spanData.mcp_data = { server: e.name });
    const v = await e.callTool(n.name, h);
    return v.length === 1 ? v[0] : v;
  }
  const s = {
    ...n.inputSchema,
    type: ((i = n.inputSchema) == null ? void 0 : i.type) ?? "object",
    properties: ((u = n.inputSchema) == null ? void 0 : u.properties) ?? {},
    required: ((d = n.inputSchema) == null ? void 0 : d.required) ?? [],
    additionalProperties: ((l = n.inputSchema) == null ? void 0 : l.additionalProperties) ?? !1
  };
  if (t || s.additionalProperties === !0)
    try {
      const p = No(s);
      return br({
        name: n.name,
        description: n.description || "",
        parameters: p,
        strict: !0,
        execute: r
      });
    } catch (p) {
      E.warn(`Error converting MCP schema to strict mode: ${p}`);
    }
  const a = {
    ...s,
    additionalProperties: !0
  };
  return br({
    name: n.name,
    description: n.description || "",
    parameters: a,
    strict: !1,
    execute: r
  });
}
function No(n) {
  const e = {
    ...n,
    additionalProperties: !1
  };
  return e.required || (e.required = []), e;
}
function Do() {
  return {};
}
var Tt, Xe;
class Hn {
  constructor() {
    T(this, Tt, new EventTarget());
    T(this, Xe, /* @__PURE__ */ new Map());
  }
  on(e, t) {
    const r = e;
    let s = o(this, Xe).get(r);
    s || (s = /* @__PURE__ */ new Map(), o(this, Xe).set(r, s));
    let a = s.get(t);
    a || (a = /* @__PURE__ */ new Set(), s.set(t, a));
    const i = ((u) => t(...u.detail ?? []));
    return a.add(i), o(this, Tt).addEventListener(r, i), this;
  }
  off(e, t) {
    const r = e, s = o(this, Xe).get(r), a = s == null ? void 0 : s.get(t);
    if (a != null && a.size) {
      for (const i of a)
        o(this, Tt).removeEventListener(r, i);
      s == null || s.delete(t), (s == null ? void 0 : s.size) === 0 && o(this, Xe).delete(r);
    }
    return this;
  }
  emit(e, ...t) {
    const r = new CustomEvent(e, { detail: t });
    return o(this, Tt).dispatchEvent(r);
  }
  once(e, t) {
    const r = (...s) => {
      this.off(e, r), t(...s);
    };
    return this.on(e, r), this;
  }
}
Tt = new WeakMap(), Xe = new WeakMap();
const pa = () => typeof crypto < "u" && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(n) {
  const e = Math.random() * 16 | 0;
  return (n === "x" ? e : e & 3 | 8).toString(16);
}), Po = class {
  constructor() {
  }
  pipeTo(e, t) {
  }
  pipeThrough(e, t) {
  }
}, Mo = globalThis.ReadableStream, jo = globalThis.TransformStream;
class $o {
  constructor() {
    _(this, "context", null);
  }
  run(e, t) {
    return this.context = e, t();
  }
  getStore() {
    return this.context;
  }
  enterWith(e) {
    this.context = e;
  }
}
class Fo {
  constructor() {
  }
  setTimeout(e, t) {
    const r = setTimeout(e, t);
    return r.ref = typeof r.ref == "function" ? r.ref : () => r, r.unref = typeof r.unref == "function" ? r.unref : () => r, r.hasRef = typeof r.hasRef == "function" ? r.hasRef : () => !0, r.refresh = typeof r.refresh == "function" ? r.refresh : () => r, r;
  }
  clearTimeout(e) {
    window.clearTimeout(e);
  }
}
const Lo = new Fo();
let Ts;
function Ae() {
  return Ts ?? (Ts = new $o()), Ts;
}
function Vt() {
  const n = Ae().getStore();
  return n != null && n.trace ? n.trace : null;
}
function Ht() {
  const n = Ae().getStore();
  return n != null && n.span ? n.span : null;
}
function fa(n) {
  return async () => {
    const e = Vt();
    if (!e)
      throw new Error("No trace found");
    await e.start();
    const t = await n(e);
    return await e.end(), t;
  };
}
async function Zo(n, e, t = {}) {
  const r = typeof n == "string" ? Ce().createTrace({
    ...t,
    name: n
  }) : n;
  return Ae().run({ trace: r }, fa(e));
}
async function Uo(n, e = {}) {
  if (Vt())
    return await n();
  const r = Ce().createTrace(e);
  return Ae().run({ trace: r }, fa(n));
}
function kn(n) {
  const e = Ae().getStore();
  if (!e)
    throw new Error("No existing trace found");
  e.span && (e.span.previousSpan = e.previousSpan, e.previousSpan = e.span), e.span = n, Ae().enterWith(e);
}
function Bt() {
  var e;
  const n = Ae().getStore();
  n && (n.span = n.previousSpan, n.previousSpan = (e = n.previousSpan) == null ? void 0 : e.previousSpan, Ae().enterWith(n));
}
function St(n) {
  const e = Ht();
  e && e.setError(n);
}
function qo(n) {
  var e, t, r;
  return {
    trace: (e = n.trace) == null ? void 0 : e.clone(),
    span: (t = n.span) == null ? void 0 : t.clone(),
    previousSpan: (r = n.previousSpan) == null ? void 0 : r.clone()
  };
}
function xr(n) {
  const e = Ae().getStore();
  if (!e)
    throw new Error("No existing trace found");
  const t = qo(e);
  return Ae().run(t, n);
}
class Jo {
  async export(e) {
    if (ca.disabled) {
      E.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const t of e)
      t.type === "trace" ? console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId ? ` groupId=${t.groupId}` : ""}`) : console.log(`[Exporter] Export span: ${JSON.stringify(t)}`);
  }
}
var en, It, tn, nn, kt, ae, Oe, Le, Ze, At, ce, Sr, Tr, wt;
class Bo {
  constructor(e, {
    maxQueueSize: t = 1e3,
    maxBatchSize: r = 100,
    scheduleDelay: s = 5e3,
    // 5 seconds
    exportTriggerRatio: a = 0.8
  } = {}) {
    T(this, ce);
    T(this, en);
    T(this, It);
    T(this, tn);
    T(this, nn);
    T(this, kt);
    T(this, ae, []);
    T(this, Oe);
    T(this, Le, null);
    T(this, Ze, !1);
    T(this, At, null);
    y(this, en, t), y(this, It, r), y(this, tn, s), y(this, nn, t * a), y(this, kt, e), y(this, Oe, Lo), E.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.");
  }
  start() {
    y(this, At, new AbortController()), F(this, ce, Tr).call(this);
  }
  async onTraceStart(e) {
    await F(this, ce, Sr).call(this, e);
  }
  async onTraceEnd(e) {
  }
  async onSpanStart(e) {
  }
  async onSpanEnd(e) {
    await F(this, ce, Sr).call(this, e);
  }
  async shutdown(e) {
    var t;
    for (e && o(this, Oe).setTimeout(() => {
      var r;
      (r = o(this, At)) == null || r.abort();
    }, e), E.debug("Shutting down gracefully"); o(this, ae).length > 0; ) {
      if (E.debug(`Waiting for buffer to empty. Items left: ${o(this, ae).length}`), o(this, Ze) || await F(this, ce, wt).call(this, !0), (t = o(this, At)) != null && t.signal.aborted) {
        E.debug("Timeout reached, force flushing"), await F(this, ce, wt).call(this, !0);
        break;
      }
      await new Promise((r) => o(this, Oe).setTimeout(r, 500));
    }
    E.debug("Buffer empty. Exiting"), o(this, Oe) && o(this, Le) && o(this, Oe).clearTimeout(o(this, Le));
  }
  async forceFlush() {
    o(this, ae).length > 0 && await F(this, ce, wt).call(this, !0);
  }
}
en = new WeakMap(), It = new WeakMap(), tn = new WeakMap(), nn = new WeakMap(), kt = new WeakMap(), ae = new WeakMap(), Oe = new WeakMap(), Le = new WeakMap(), Ze = new WeakMap(), At = new WeakMap(), ce = new WeakSet(), Sr = async function(e) {
  if (o(this, ae).length + 1 > o(this, en)) {
    E.error("Dropping trace because buffer is full");
    return;
  }
  o(this, ae).push(e), o(this, ae).length > o(this, nn) && await F(this, ce, wt).call(this);
}, Tr = function() {
  y(this, Le, o(this, Oe).setTimeout(async () => {
    await F(this, ce, wt).call(this), F(this, ce, Tr).call(this);
  }, o(this, tn))), typeof o(this, Le).unref == "function" && o(this, Le).unref();
}, wt = async function(e = !1) {
  if (o(this, ae).length !== 0) {
    if (E.debug(`Exporting batches. Force: ${e}. Buffer size: ${o(this, ae).length}`), e || o(this, ae).length < o(this, It)) {
      const t = [...o(this, ae)];
      y(this, ae, []), y(this, Ze, !0), await o(this, kt).export(t), y(this, Ze, !1);
    } else if (o(this, ae).length > 0) {
      const t = o(this, ae).splice(0, o(this, It));
      y(this, Ze, !0), await o(this, kt).export(t), y(this, Ze, !1);
    }
  }
};
var le;
class Go {
  constructor() {
    T(this, le, []);
  }
  start() {
    for (const e of o(this, le))
      e.start && e.start();
  }
  addTraceProcessor(e) {
    o(this, le).push(e);
  }
  setProcessors(e) {
    E.debug("Shutting down old processors");
    for (const t of o(this, le))
      t.shutdown();
    y(this, le, e);
  }
  async onTraceStart(e) {
    for (const t of o(this, le))
      await t.onTraceStart(e);
  }
  async onTraceEnd(e) {
    for (const t of o(this, le))
      await t.onTraceEnd(e);
  }
  async onSpanStart(e) {
    for (const t of o(this, le))
      await t.onSpanStart(e);
  }
  async onSpanEnd(e) {
    for (const t of o(this, le))
      await t.onSpanEnd(e);
  }
  async shutdown(e) {
    for (const t of o(this, le))
      await t.shutdown(e);
  }
  async forceFlush() {
    for (const e of o(this, le))
      await e.forceFlush();
  }
}
le = new WeakMap();
let ir = null, or = null;
function zo() {
  return ir || (ir = new Jo()), ir;
}
function ha() {
  return or || (or = new Bo(zo())), or;
}
function Is() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function ma() {
  return `trace_${pa().replace(/-/g, "")}`;
}
function Vo() {
  return `span_${pa().replace(/-/g, "").slice(0, 24)}`;
}
function Ho(n) {
  return Object.fromEntries(Object.entries(n).filter(([e]) => !e.startsWith("_")));
}
var rn, sn, an, on, Qe, Ue, qe, et, un;
const Vr = class Vr {
  constructor(e, t) {
    _(this, "type", "trace.span");
    T(this, rn);
    T(this, sn);
    T(this, an);
    T(this, on);
    T(this, Qe);
    T(this, Ue);
    T(this, qe);
    T(this, et);
    T(this, un);
    y(this, sn, e.traceId), y(this, an, e.spanId ?? Vo()), y(this, rn, e.data), y(this, Qe, t), y(this, on, e.parentId ?? null), y(this, et, e.error ?? null), y(this, Ue, e.startedAt ?? null), y(this, qe, e.endedAt ?? null);
  }
  get traceId() {
    return o(this, sn);
  }
  get spanData() {
    return o(this, rn);
  }
  get spanId() {
    return o(this, an);
  }
  get parentId() {
    return o(this, on);
  }
  get previousSpan() {
    return o(this, un);
  }
  set previousSpan(e) {
    y(this, un, e);
  }
  start() {
    if (o(this, Ue)) {
      E.warn("Span already started");
      return;
    }
    y(this, Ue, Is()), o(this, Qe).onSpanStart(this);
  }
  end() {
    if (o(this, qe)) {
      E.debug("Span already finished", this.spanData);
      return;
    }
    y(this, qe, Is()), o(this, Qe).onSpanEnd(this);
  }
  setError(e) {
    y(this, et, e);
  }
  get error() {
    return o(this, et);
  }
  get startedAt() {
    return o(this, Ue);
  }
  get endedAt() {
    return o(this, qe);
  }
  clone() {
    var t;
    const e = new Vr({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: o(this, Ue) ?? void 0,
      endedAt: o(this, qe) ?? void 0,
      error: o(this, et) ?? void 0
    }, o(this, Qe));
    return e.previousSpan = (t = this.previousSpan) == null ? void 0 : t.clone(), e;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: Ho(this.spanData),
      error: this.error
    };
  }
};
rn = new WeakMap(), sn = new WeakMap(), an = new WeakMap(), on = new WeakMap(), Qe = new WeakMap(), Ue = new WeakMap(), qe = new WeakMap(), et = new WeakMap(), un = new WeakMap();
let Wt = Vr;
class $e extends Wt {
  constructor(e, t) {
    super({ traceId: "no-op", spanId: "no-op", data: e }, t);
  }
  start() {
  }
  end() {
  }
  setError() {
  }
  toJSON() {
    return null;
  }
}
var Ct, Re;
const Hr = class Hr {
  constructor(e, t) {
    _(this, "type", "trace");
    _(this, "traceId");
    _(this, "name");
    _(this, "groupId", null);
    _(this, "metadata");
    T(this, Ct);
    T(this, Re);
    this.traceId = e.traceId ?? ma(), this.name = e.name ?? "Agent workflow", this.groupId = e.groupId ?? null, this.metadata = e.metadata ?? {}, y(this, Ct, t ?? ha()), y(this, Re, e.started ?? !1);
  }
  async start() {
    o(this, Re) || (y(this, Re, !0), await o(this, Ct).onTraceStart(this));
  }
  async end() {
    o(this, Re) && (y(this, Re, !1), await o(this, Ct).onTraceEnd(this));
  }
  clone() {
    return new Hr({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: o(this, Re)
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
Ct = new WeakMap(), Re = new WeakMap();
let Kt = Hr;
class ur extends Kt {
  constructor() {
    super({});
  }
  async start() {
  }
  async end() {
  }
  toJSON() {
    return null;
  }
}
var re, tt, zn, ga;
class Wo {
  constructor() {
    T(this, zn);
    T(this, re);
    T(this, tt);
    y(this, re, new Go()), y(this, tt, ca.disabled), F(this, zn, ga).call(this);
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(e) {
    o(this, re).addTraceProcessor(e);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(e) {
    o(this, re).setProcessors(e);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return Vt();
  }
  getCurrentSpan() {
    return Ht();
  }
  setDisabled(e) {
    y(this, tt, e);
  }
  startExportLoop() {
    o(this, re).start();
  }
  createTrace(e) {
    if (o(this, tt))
      return E.debug("Tracing is disabled, Not creating trace %o", e), new ur();
    const t = e.traceId ?? ma(), r = e.name ?? "Agent workflow";
    return E.debug("Creating trace %s with name %s", t, r), new Kt({ ...e, name: r, traceId: t }, o(this, re));
  }
  createSpan(e, t) {
    if (o(this, tt) || e.disabled)
      return E.debug("Tracing is disabled, Not creating span %o", e), new $e(e.data, o(this, re));
    let r, s;
    if (t) {
      if (t instanceof Kt) {
        if (t instanceof ur)
          return E.debug("Parent trace is no-op, returning NoopSpan"), new $e(e.data, o(this, re));
        s = t.traceId;
      } else if (t instanceof Wt) {
        if (t instanceof $e)
          return E.debug("Parent span is no-op, returning NoopSpan"), new $e(e.data, o(this, re));
        r = t.spanId, s = t.traceId;
      }
    } else {
      const a = Vt(), i = Ht();
      if (!a)
        return E.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new $e(e.data, o(this, re));
      if (i instanceof $e || a instanceof ur)
        return E.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`), new $e(e.data, o(this, re));
      s = a.traceId, i ? (E.debug("Using parent span %s", i.spanId), r = i.spanId) : E.debug("No parent span, using current trace %s", a.traceId);
    }
    return s ? (E.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId ?? s}`), new Wt({
      ...e,
      traceId: s,
      parentId: r
    }, o(this, re))) : (E.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new $e(e.data, o(this, re)));
  }
  async shutdown(e) {
    try {
      E.debug("Shutting down tracing provider"), await o(this, re).shutdown(e);
    } catch (t) {
      E.error("Error shutting down tracing provider %o", t);
    }
  }
  async forceFlush() {
    await o(this, re).forceFlush();
  }
}
re = new WeakMap(), tt = new WeakMap(), zn = new WeakSet(), /** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
ga = function() {
  if (typeof process < "u" && typeof process.on == "function") {
    const e = async () => {
      const t = setTimeout(() => {
        console.warn("Cleanup timeout, forcing exit"), process.exit(1);
      }, 5e3);
      try {
        await this.shutdown();
      } finally {
        clearTimeout(t);
      }
    };
    process.on("beforeExit", e), process.on("SIGINT", async () => {
      await e(), ks("SIGINT") || process.exit(130);
    }), process.on("SIGTERM", async () => {
      await e(), ks("SIGTERM") || process.exit(0);
    }), process.on("unhandledRejection", async (t, r) => {
      E.error("Unhandled rejection", t, r), await e(), Ko("unhandledRejection") || process.exit(1);
    });
  }
};
function ks(n) {
  return process.listeners(n).length > 1;
}
function Ko(n) {
  return process.listeners(n).length > 1;
}
let cr;
function Ce() {
  return cr || (cr = new Wo()), cr;
}
function Wn(n) {
  return async (e, ...t) => xr(async () => {
    const r = n(...t);
    kn(r);
    try {
      return r.start(), await e(r);
    } catch (s) {
      throw r.setError({
        message: s.message,
        data: s.data
      }), s;
    } finally {
      r.end(), Bt();
    }
  });
}
function As(n, e) {
  var t;
  return Ce().createSpan({
    ...n,
    data: {
      type: "agent",
      name: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.name) ?? "Agent",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
function Yo(n, e) {
  var t, r;
  return Ce().createSpan({
    ...n,
    data: {
      type: "function",
      input: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.input) ?? "",
      output: ((r = n == null ? void 0 : n.data) == null ? void 0 : r.output) ?? "",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Cs = Wn(Yo);
function Xo(n, e) {
  return Ce().createSpan({
    ...n,
    data: { type: "handoff", ...n == null ? void 0 : n.data }
  }, e);
}
const Qo = Wn(Xo);
function eu(n, e) {
  return Ce().createSpan({
    ...n,
    data: {
      type: "guardrail",
      triggered: !1,
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Es = Wn(eu);
function tu(n, e) {
  return Ce().createSpan({
    ...n,
    data: {
      type: "mcp_tools",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const nu = Wn(tu);
function ru(n) {
  Ce().registerProcessor(n);
}
class Fr {
  on(e, t) {
    return this.eventEmitter.on(e, t), this.eventEmitter;
  }
  off(e, t) {
    return this.eventEmitter.off(e, t), this.eventEmitter;
  }
  emit(e, ...t) {
    return this.eventEmitter.emit(e, ...t);
  }
  once(e, t) {
    return this.eventEmitter.once(e, t), this.eventEmitter;
  }
}
class su extends Fr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Hn());
  }
}
class au extends Fr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Hn());
  }
}
const iu = "OPENAI_DEFAULT_MODEL";
function Kn(n) {
  return n.startsWith("gpt-5-chat") ? !1 : n.startsWith("gpt-5");
}
function _a() {
  return Kn(ya());
}
function ya() {
  var e;
  return ((e = ua()[iu]) == null ? void 0 : e.toLowerCase()) ?? "gpt-4.1";
}
function ou(n) {
  const e = ya();
  return Kn(e) ? {
    // We chose "low" instead of "minimal" because some of the built-in tools
    // (e.g., file search, image generation, etc.) do not support "minimal"
    // If you want to use "minimal" reasoning effort, you can pass your own model settings
    reasoning: { effort: "low" },
    text: { verbosity: "low" }
  } : {};
}
function va(n) {
  return JSON.stringify({ assistant: n.name });
}
function uu(n) {
  return `transfer_to_${Jn(n.name)}`;
}
function cu(n) {
  return `Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription ?? ""}`;
}
class wa {
  constructor(e, t) {
    /**
     * The name of the tool that represents the handoff.
     */
    _(this, "toolName");
    /**
     * The description of the tool that represents the handoff.
     */
    _(this, "toolDescription");
    /**
     * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
     */
    _(this, "inputJsonSchema", {
      type: "object",
      properties: {},
      required: [],
      additionalProperties: !1
    });
    /**
     * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
     * true, as it increases the likelihood of correct JSON input.
     */
    _(this, "strictJsonSchema", !0);
    /**
     * The function that invokes the handoff. The parameters passed are:
     * 1. The handoff run context
     * 2. The arguments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
     *
     * Must return an agent
     */
    _(this, "onInvokeHandoff");
    /**
     * The name of the agent that is being handed off to.
     */
    _(this, "agentName");
    /**
     * A function that filters the inputs that are passed to the next agent. By default, the new agent
     * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
     * remove older inputs, or remove tools from existing inputs.
     *
     * The function will receive the entire conversation hisstory so far, including the input item
     * that triggered the handoff and a tool call output item representing the handoff tool's output.
     *
     * You are free to modify the input history or new items as you see fit. The next agent that runs
     * will receive `handoffInputData.allItems
     */
    _(this, "inputFilter");
    /**
     * The agent that is being handed off to.
     */
    _(this, "agent");
    _(this, "isEnabled", async () => !0);
    this.agentName = e.name, this.onInvokeHandoff = t, this.toolName = uu(e), this.toolDescription = cu(e), this.agent = e;
  }
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
}
function ba(n, e = {}) {
  let t;
  const r = !!e.onHandoff, s = !!e.inputType;
  if (!(r === s))
    throw new ee("You must provide either both `onHandoff` and `inputType` or neither.");
  async function i(d, l) {
    var p;
    if (t) {
      if (!l)
        throw St({
          message: `Handoff function expected non empty input but got: ${l}`,
          data: {
            details: "input is empty"
          }
        }), new _e("Handoff function expected non empty input");
      try {
        const f = await t(l);
        e.onHandoff && await e.onHandoff(d, f);
      } catch (f) {
        throw St({
          message: "Invalid JSON provided",
          data: {}
        }), E.dontLogToolData || E.error(`Invalid JSON when parsing: ${l}. Error: ${f}`), new _e("Invalid JSON provided");
      }
    } else
      await ((p = e.onHandoff) == null ? void 0 : p.call(e, d));
    return n;
  }
  const u = new wa(n, i);
  if (typeof e.isEnabled == "function") {
    const d = e.isEnabled;
    u.isEnabled = async ({ runContext: l, agent: p }) => !!await d({ runContext: l, agent: p });
  } else typeof e.isEnabled == "boolean" && (u.isEnabled = async () => e.isEnabled);
  if (e.inputType) {
    const d = $r(e.inputType, u.toolName);
    u.inputJsonSchema = d.schema, u.strictJsonSchema = !0, t = d.parser;
  }
  return e.toolNameOverride && (u.toolName = e.toolNameOverride), e.toolDescriptionOverride && (u.toolDescription = e.toolDescriptionOverride), e.inputFilter && (u.inputFilter = e.inputFilter), u;
}
function du(n) {
  return n instanceof wa ? n : ba(n);
}
function Os({ name: n, execute: e }) {
  return {
    type: "input",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "input", name: n },
        output: await e(t)
      };
    }
  };
}
function Ir({ name: n, execute: e }) {
  return {
    type: "output",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "output", name: n },
        agent: t.agent,
        agentOutput: t.agentOutput,
        output: await e(t)
      };
    }
  };
}
function lu() {
  throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
}
const ne = m({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: Q(c(), L()).optional()
}), gt = ne.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: c().optional()
}), pu = ne.extend({
  type: g("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: c()
}), fu = ne.extend({
  type: g("output_text"),
  /**
   * The text output from the model.
   */
  text: c()
}), xa = ne.extend({
  type: g("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: c()
}), hu = ne.extend({
  type: g("reasoning_text"),
  /**
   * A text input for example a message from a user
   */
  text: c()
}), mu = ne.extend({
  type: g("input_image"),
  /**
   * The image input to the model. Could be a URL, base64 or an object with a file ID.
   */
  image: c().or(m({
    id: c()
  })).describe("Could be a URL, base64 or an object with a file ID.")
}), gu = ne.extend({
  type: g("input_file"),
  /**
   * The file input to the model. Could be a URL, base64 or an object with a file ID.
   */
  file: c().describe("Either base64 encoded file data or a publicly accessible file URL").or(m({
    id: c().describe("OpenAI file ID")
  })).or(m({
    url: c().describe("Publicly accessible PDF file URL")
  })).describe("Contents of the file or an object with a file ID.")
}), Sa = ne.extend({
  type: g("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: c().or(m({
    id: c()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: c().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: c().nullable().optional()
}), _u = ne.extend({
  type: g("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: c().describe("Base64 encoded image data")
}), yu = ne.extend({
  type: g("text"),
  /**
   * The text output from the model.
   */
  text: c()
}), vu = ne.extend({
  type: g("image"),
  /**
   * The image data. Could be base64 encoded image data or an object with a file ID.
   */
  data: c().describe("Base64 encoded image data"),
  /**
   * The media type of the image.
   */
  mediaType: c().describe("IANA media type of the image")
}), wu = ne.extend({
  type: g("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: c().describe("Base64 encoded image data or URL")
}), bu = he("type", [
  m({ type: g("screenshot") }),
  m({
    type: g("click"),
    x: A(),
    y: A(),
    button: se(["left", "right", "wheel", "back", "forward"])
  }),
  m({
    type: g("double_click"),
    x: A(),
    y: A()
  }),
  m({
    type: g("scroll"),
    x: A(),
    y: A(),
    scroll_x: A(),
    scroll_y: A()
  }),
  m({
    type: g("type"),
    text: c()
  }),
  m({ type: g("wait") }),
  m({
    type: g("move"),
    x: A(),
    y: A()
  }),
  m({
    type: g("keypress"),
    keys: q(c())
  }),
  m({
    type: g("drag"),
    path: q(m({ x: A(), y: A() }))
  })
]), xu = he("type", [
  fu,
  pu,
  Sa,
  _u
]), Lr = gt.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: g("message").optional()
}), Yn = Lr.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: g("assistant"),
  /**
   * The status of the message.
   */
  status: se(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: q(xu)
}), Su = he("type", [
  xa,
  mu,
  gu,
  Sa
]), Ta = Lr.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: g("user"),
  /**
   * The content of the message.
   */
  content: q(Su).or(c())
}), Ia = Lr.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: g("system"),
  /**
   * The content of the message.
   */
  content: c()
});
he("role", [
  Ia,
  Yn,
  Ta
]);
const Yt = gt.extend({
  type: g("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: c().describe("The name of the hosted tool"),
  /**
   * The arguments of the hosted tool call.
   */
  arguments: c().describe("The arguments of the hosted tool call").optional(),
  /**
   * The status of the tool call.
   */
  status: c().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: c().optional()
}), Xt = gt.extend({
  type: g("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: c().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: c().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: se(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: c()
}), kr = gt.extend({
  type: g("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: c().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: c().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: se(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: he("type", [yu, vu])
}), Zr = gt.extend({
  type: g("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: c().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: se(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: bu
}), Tu = gt.extend({
  type: g("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: c().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: wu
}), Iu = he("type", [
  Zr,
  Xt,
  Yt
]), Ur = ne.extend({
  id: c().optional(),
  type: g("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: q(xa),
  /**
   * The raw reasoning text from the model.
   */
  rawContent: q(hu).optional()
}), ka = gt.extend({
  type: g("unknown")
}), qr = he("type", [
  Yn,
  Yt,
  Xt,
  Zr,
  Ur,
  ka
]), ku = ra([
  Ta,
  Yn,
  Ia,
  Yt,
  Xt,
  Zr,
  kr,
  Tu,
  Ur,
  ka
]), Au = m({
  requests: A().optional(),
  inputTokens: A(),
  outputTokens: A(),
  totalTokens: A(),
  inputTokensDetails: Q(c(), A()).optional(),
  outputTokensDetails: Q(c(), A()).optional()
}), Aa = ne.extend({
  type: g("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: c()
}), Cu = ne.extend({
  type: g("response_started")
}), Ca = ne.extend({
  type: g("response_done"),
  /**
   * The response from the model.
   */
  response: ne.extend({
    /**
     * The ID of the response.
     */
    id: c(),
    /**
     * The usage data for the response.
     */
    usage: Au,
    /**
     * The output from the model.
     */
    output: q(qr)
  })
}), Eu = ne.extend({
  type: g("model"),
  event: L().describe("The event from the model")
});
he("type", [
  Aa,
  Ca,
  Cu,
  Eu
]);
class Xn {
  constructor(e) {
    /**
     * The number of requests made to the LLM API.
     */
    _(this, "requests");
    /**
     * The number of input tokens used across all requests.
     */
    _(this, "inputTokens");
    /**
     * The number of output tokens used across all requests.
     */
    _(this, "outputTokens");
    /**
     * The total number of tokens sent and received, across all requests.
     */
    _(this, "totalTokens");
    /**
     * Details about the input tokens used across all requests.
     */
    _(this, "inputTokensDetails", []);
    /**
     * Details about the output tokens used across all requests.
     */
    _(this, "outputTokensDetails", []);
    if (typeof e > "u")
      this.requests = 0, this.inputTokens = 0, this.outputTokens = 0, this.totalTokens = 0, this.inputTokensDetails = [], this.outputTokensDetails = [];
    else {
      this.requests = (e == null ? void 0 : e.requests) ?? 1, this.inputTokens = (e == null ? void 0 : e.inputTokens) ?? (e == null ? void 0 : e.input_tokens) ?? 0, this.outputTokens = (e == null ? void 0 : e.outputTokens) ?? (e == null ? void 0 : e.output_tokens) ?? 0, this.totalTokens = (e == null ? void 0 : e.totalTokens) ?? (e == null ? void 0 : e.total_tokens) ?? 0;
      const t = (e == null ? void 0 : e.inputTokensDetails) ?? (e == null ? void 0 : e.input_tokens_details);
      this.inputTokensDetails = t ? [t] : [];
      const r = (e == null ? void 0 : e.outputTokensDetails) ?? (e == null ? void 0 : e.output_tokens_details);
      this.outputTokensDetails = r ? [r] : [];
    }
  }
  add(e) {
    this.requests += e.requests, this.inputTokens += e.inputTokens, this.outputTokens += e.outputTokens, this.totalTokens += e.totalTokens, e.inputTokensDetails && this.inputTokensDetails.push(...e.inputTokensDetails), e.outputTokensDetails && this.outputTokensDetails.push(...e.outputTokensDetails);
  }
}
var pe;
class bt {
  constructor(e = {}) {
    /**
     * The context object you passed to the `Runner.run()` method.
     */
    _(this, "context");
    /**
     * The usage of the agent run so far. For streamed responses, the usage will be stale until the
     * last chunk of the stream is processed.
     */
    _(this, "usage");
    /**
     * A map of tool names to whether they have been approved.
     */
    T(this, pe);
    this.context = e, this.usage = new Xn(), y(this, pe, /* @__PURE__ */ new Map());
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(e) {
    y(this, pe, new Map(Object.entries(e)));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved({ toolName: e, callId: t }) {
    const r = o(this, pe).get(e);
    if ((r == null ? void 0 : r.approved) === !0 && r.rejected === !0)
      return E.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"), !0;
    if ((r == null ? void 0 : r.approved) === !0)
      return !0;
    if ((r == null ? void 0 : r.rejected) === !0)
      return !1;
    const s = Array.isArray(r == null ? void 0 : r.approved) ? r.approved.includes(t) : !1, a = Array.isArray(r == null ? void 0 : r.rejected) ? r.rejected.includes(t) : !1;
    if (s && a)
      return E.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`), !0;
    if (s)
      return !0;
    if (a)
      return !1;
  }
  /**
   * Approve a tool call.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   */
  approveTool(e, { alwaysApprove: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      o(this, pe).set(r, {
        approved: !0,
        rejected: []
      });
      return;
    }
    const s = o(this, pe).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.approved)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.approved.push(a);
    }
    o(this, pe).set(r, s);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(e, { alwaysReject: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      o(this, pe).set(r, {
        approved: !1,
        rejected: !0
      });
      return;
    }
    const s = o(this, pe).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.rejected)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.rejected.push(a);
    }
    o(this, pe).set(r, s);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(o(this, pe).entries())
    };
  }
}
pe = new WeakMap();
class Ea {
  constructor(e) {
    _(this, "state");
    this.state = e;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Qt(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return Qt([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const e = this.rawResponses;
    return e && e.length > 0 ? e[e.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    var e;
    return ((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_interruption" ? this.state._currentStep.data.interruptions : [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    var e;
    if (((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_final_output")
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    E.warn("Accessed finalOutput before agent run is completed.");
  }
}
class dr extends Ea {
  constructor(e) {
    super(e);
  }
}
var cn, Je, fe, Ne, Et, Ot, dn, nt;
class Ou extends Ea {
  constructor(t = {}) {
    super(t.state);
    /**
     * The current turn number
     */
    _(this, "currentTurn", 0);
    /**
     * The maximum number of turns that can be run
     */
    _(this, "maxTurns");
    T(this, cn, null);
    T(this, Je);
    T(this, fe);
    T(this, Ne);
    T(this, Et);
    T(this, Ot);
    T(this, dn);
    T(this, nt, !1);
    if (y(this, Je, t.signal), y(this, Ne, new Mo({
      start: (r) => {
        y(this, fe, r);
      },
      cancel: () => {
        y(this, nt, !0);
      }
    })), y(this, Et, new Promise((r, s) => {
      y(this, Ot, r), y(this, dn, s);
    })), o(this, Je)) {
      const r = () => {
        var a, i;
        if (o(this, nt))
          return;
        y(this, nt, !0);
        const s = o(this, fe);
        if (y(this, fe, void 0), o(this, Ne).locked) {
          if (s)
            try {
              s.close();
            } catch (u) {
              E.debug(`Failed to close readable stream on abort: ${u}`);
            }
        } else
          o(this, Ne).cancel((a = o(this, Je)) == null ? void 0 : a.reason).catch((u) => {
            E.debug(`Failed to cancel readable stream on abort: ${u}`);
          });
        (i = o(this, Ot)) == null || i.call(this);
      };
      o(this, Je).aborted ? r() : o(this, Je).addEventListener("abort", r, { once: !0 });
    }
  }
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(t) {
    var r;
    this.cancelled || (r = o(this, fe)) == null || r.enqueue(t);
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    var t;
    !this.cancelled && o(this, fe) && (o(this, fe).close(), y(this, fe, void 0), (t = o(this, Ot)) == null || t.call(this));
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(t) {
    var r;
    !this.cancelled && o(this, fe) && (o(this, fe).error(t), y(this, fe, void 0)), y(this, cn, t), (r = o(this, dn)) == null || r.call(this, t), o(this, Et).catch((s) => {
      E.debug(`Resulted in an error: ${s}`);
    });
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return o(this, nt);
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return o(this, Ne);
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return o(this, Et);
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return o(this, cn);
  }
  toTextStream(t = {}) {
    const r = o(this, Ne).pipeThrough(new jo({
      transform(s, a) {
        if (s.type === "raw_model_stream_event" && s.data.type === "output_text_delta") {
          const i = Aa.parse(s.data);
          a.enqueue(i.delta);
        }
      }
    }));
    return t.compatibleWithNodeStreams ? Po.fromWeb(r) : r;
  }
  [Symbol.asyncIterator]() {
    return o(this, Ne)[Symbol.asyncIterator]();
  }
}
cn = new WeakMap(), Je = new WeakMap(), fe = new WeakMap(), Ne = new WeakMap(), Et = new WeakMap(), Ot = new WeakMap(), dn = new WeakMap(), nt = new WeakMap();
function Rs(n) {
  return n.type === "function" ? {
    type: "function",
    name: n.name,
    description: n.description,
    parameters: n.parameters,
    strict: n.strict
  } : n.type === "computer" ? {
    type: "computer",
    name: n.name,
    environment: n.computer.environment,
    dimensions: n.computer.dimensions
  } : {
    type: "hosted_tool",
    name: n.name,
    providerData: n.providerData
  };
}
function Ns(n) {
  return {
    toolName: n.toolName,
    toolDescription: n.toolDescription,
    inputJsonSchema: n.inputJsonSchema,
    strictJsonSchema: n.strictJsonSchema
  };
}
class _t {
  constructor() {
    _(this, "type", "base_item");
    _(this, "rawItem");
  }
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
}
class Qn extends _t {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "message_output_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let t = "";
    for (const r of this.rawItem.content)
      r.type === "output_text" && (t += r.text);
    return t;
  }
}
class ct extends _t {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Zt extends _t {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "output");
    _(this, "type", "tool_call_output_item");
    this.rawItem = t, this.agent = r, this.output = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: Ve(this.output)
    };
  }
}
class Jr extends _t {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "reasoning_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Br extends _t {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "handoff_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Gr extends _t {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "sourceAgent");
    _(this, "targetAgent");
    _(this, "type", "handoff_output_item");
    this.rawItem = t, this.sourceAgent = r, this.targetAgent = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
}
class ye extends _t {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_approval_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
function Oa(n) {
  if (n.type !== "message" || n.role !== "assistant")
    return;
  const e = n.content[n.content.length - 1];
  if (e.type === "output_text")
    return e.text;
}
function Ru(n) {
  return n.output.length === 0 ? "" : Oa(n.output[n.output.length - 1]) || "";
}
class Nu {
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(e) {
    _(this, "data");
    /**
     * The type of the event.
     */
    _(this, "type", "raw_model_stream_event");
    this.data = e;
  }
}
class Du {
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(e, t) {
    _(this, "name");
    _(this, "item");
    _(this, "type", "run_item_stream_event");
    this.name = e, this.item = t;
  }
}
class Pu {
  /**
   * @param agent The new agent
   */
  constructor(e) {
    _(this, "agent");
    _(this, "type", "agent_updated_stream_event");
    this.agent = e;
  }
}
function Ds(n, e, t, r) {
  var v;
  const s = [], a = [], i = [], u = [], d = [], l = [], p = new Map(r.map((b) => [b.toolName, b])), f = new Map(t.filter((b) => b.type === "function").map((b) => [b.name, b])), h = t.find((b) => b.type === "computer"), w = new Map(t.filter((b) => {
    var O;
    return b.type === "hosted_tool" && ((O = b.providerData) == null ? void 0 : O.type) === "mcp";
  }).map((b) => b).map((b) => [b.providerData.server_label, b]));
  for (const b of n.output) {
    if (b.type === "message")
      b.role === "assistant" && s.push(new Qn(b, e));
    else if (b.type === "hosted_tool_call") {
      s.push(new ct(b, e));
      const R = b.name;
      if (l.push(R), ((v = b.providerData) == null ? void 0 : v.type) === "mcp_approval_request" || b.name === "mcp_approval_request") {
        const M = b.providerData, z = M.server_label, U = w.get(z);
        if (typeof U > "u") {
          const W = `MCP server (${z}) not found in Agent (${e.name})`;
          throw St({
            message: W,
            data: { mcp_server_label: z }
          }), new _e(W);
        }
        const B = new ye({
          type: "hosted_tool_call",
          // We must use this name to align with the name sent from the servers
          name: M.name,
          id: M.id,
          status: "in_progress",
          providerData: M
        }, e);
        d.push({
          requestItem: B,
          mcpTool: U
        }), U.providerData.on_approval || s.push(B);
      }
    } else if (b.type === "reasoning")
      s.push(new Jr(b, e));
    else if (b.type === "computer_call") {
      if (s.push(new ct(b, e)), l.push("computer_use"), !h)
        throw St({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: e.name
          }
        }), new _e("Model produced computer action without a computer tool.");
      u.push({
        toolCall: b,
        computer: h
      });
    }
    if (b.type !== "function_call")
      continue;
    l.push(b.name);
    const O = p.get(b.name);
    if (O)
      s.push(new Br(b, e)), a.push({
        toolCall: b,
        handoff: O
      });
    else {
      const R = f.get(b.name);
      if (!R)
        throw St({
          message: `Tool ${b.name} not found in agent ${e.name}.`,
          data: {
            tool_name: b.name,
            agent_name: e.name
          }
        }), new _e(`Tool ${b.name} not found in agent ${e.name}.`);
      s.push(new ct(b, e)), i.push({
        toolCall: b,
        tool: R
      });
    }
  }
  return {
    newItems: s,
    handoffs: a,
    functions: i,
    computerActions: u,
    mcpApprovalRequests: d,
    toolsUsed: l,
    hasToolsOrApprovalsToRun() {
      return a.length > 0 || i.length > 0 || d.length > 0 || u.length > 0;
    }
  };
}
const Mu = he("type", [
  m({
    type: g("next_step_handoff"),
    newAgent: L()
  }),
  m({
    type: g("next_step_final_output"),
    output: c()
  }),
  m({
    type: g("next_step_run_again")
  }),
  m({
    type: g("next_step_interruption"),
    data: Q(c(), L())
  })
]);
class me {
  constructor(e, t, r, s, a) {
    _(this, "originalInput");
    _(this, "modelResponse");
    _(this, "preStepItems");
    _(this, "newStepItems");
    _(this, "nextStep");
    this.originalInput = e, this.modelResponse = t, this.preStepItems = r, this.newStepItems = s, this.nextStep = a;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
}
function Ps(n, e, t) {
  return n.resetToolChoice && e.hasUsedTools(n) ? { ...t, toolChoice: void 0 } : t;
}
async function Ms(n, e, t, r, s, a, i) {
  const u = t.filter((v) => v instanceof ye && "callId" in v.rawItem && v.rawItem.type === "function_call").map((v) => v.rawItem.callId), d = s.functions.filter((v) => u.includes(v.toolCall.callId)), l = await Ra(n, d, a, i), p = l.map((v) => v.runItem), f = s.mcpApprovalRequests.filter((v) => {
    var b;
    return v.requestItem.type === "tool_approval_item" && v.requestItem.rawItem.type === "hosted_tool_call" && ((b = v.requestItem.rawItem.providerData) == null ? void 0 : b.type) === "mcp_approval_request";
  });
  for (const v of f) {
    const b = v.requestItem.rawItem.id, O = i._context.isToolApproved({
      // Since this item name must be the same with the one sent from Responses API server
      toolName: v.requestItem.rawItem.name,
      callId: b
    });
    if (typeof O < "u") {
      const R = {
        approve: O,
        approval_request_id: b,
        reason: void 0
      };
      p.push(new ct({
        type: "hosted_tool_call",
        name: "mcp_approval_response",
        providerData: R
      }, n));
    }
  }
  const h = await Na(n, l, i), w = t.filter((v) => !(v instanceof ye));
  return h.isFinalOutput ? (a.emit("agent_end", i._context, n, h.finalOutput), n.emit("agent_end", i._context, h.finalOutput), new me(e, r, w, p, {
    type: "next_step_final_output",
    output: h.finalOutput
  })) : h.isInterrupted ? new me(e, r, w, p, {
    type: "next_step_interruption",
    data: {
      interruptions: h.interruptions
    }
  }) : new me(e, r, w, p, { type: "next_step_run_again" });
}
async function js(n, e, t, r, s, a, i) {
  var O, R, M, z;
  const u = t;
  let d = s.newItems;
  const [l, p] = await Promise.all([
    Ra(n, s.functions, a, i),
    $u(n, s.computerActions, a, i._context)
  ]);
  if (d = d.concat(l.map((U) => U.runItem)), d = d.concat(p), s.mcpApprovalRequests.length > 0)
    for (const U of s.mcpApprovalRequests) {
      const B = U.mcpTool.providerData, W = U.requestItem.rawItem.providerData;
      if (B.on_approval) {
        const de = await B.on_approval(i._context, U.requestItem), yt = {
          approve: de.approve,
          approval_request_id: W.id,
          reason: de.reason
        };
        d.push(new ct({
          type: "hosted_tool_call",
          name: "mcp_approval_response",
          providerData: yt
        }, n));
      } else {
        d.push(U.requestItem);
        const de = {
          type: "hosted_mcp_tool_approval",
          tool: U.mcpTool,
          runItem: new ye({
            type: "hosted_tool_call",
            name: W.name,
            id: W.id,
            arguments: W.arguments,
            status: "in_progress",
            providerData: W
          }, n)
        };
        l.push(de);
      }
    }
  if (s.handoffs.length > 0)
    return await Fu(n, e, u, d, r, s.handoffs, a, i._context);
  const f = await Na(n, l, i);
  if (f.isFinalOutput)
    return a.emit("agent_end", i._context, n, f.finalOutput), n.emit("agent_end", i._context, f.finalOutput), new me(e, r, u, d, {
      type: "next_step_final_output",
      output: f.finalOutput
    });
  if (f.isInterrupted)
    return new me(e, r, u, d, {
      type: "next_step_interruption",
      data: {
        interruptions: f.interruptions
      }
    });
  if ((((O = s.functions) == null ? void 0 : O.length) ?? 0) > 0 || (((R = s.computerActions) == null ? void 0 : R.length) ?? 0) > 0 || (((M = s.mcpApprovalRequests) == null ? void 0 : M.length) ?? 0) > 0 || (((z = s.handoffs) == null ? void 0 : z.length) ?? 0) > 0)
    return new me(e, r, u, d, { type: "next_step_run_again" });
  const w = d.filter((U) => U instanceof Qn), v = w.length > 0 ? Oa(w[w.length - 1].rawItem) : void 0;
  if (typeof v > "u")
    return new me(e, r, u, d, { type: "next_step_run_again" });
  if (!l.some((U) => U.runItem instanceof ye)) {
    if (n.outputType === "text")
      return new me(e, r, u, d, {
        type: "next_step_final_output",
        output: v
      });
    if (n.outputType !== "text" && v) {
      const { parser: U } = $r(n.outputType, "final_output"), [B] = await Pr(() => U(v));
      if (B)
        throw St({
          message: "Invalid output type",
          data: {
            error: String(B)
          }
        }), new _e("Invalid output type");
      return new me(e, r, u, d, { type: "next_step_final_output", output: v });
    }
  }
  return new me(e, r, u, d, { type: "next_step_run_again" });
}
function Bn(n, e) {
  return {
    type: "function_call_result",
    name: n.name,
    callId: n.callId,
    status: "completed",
    output: {
      type: "text",
      text: Ve(e)
    }
  };
}
async function Ra(n, e, t, r) {
  async function s(a) {
    let i = a.toolCall.arguments;
    if (a.tool.parameters && (ht(a.tool.parameters) ? i = a.tool.parameters.parse(i) : i = JSON.parse(i)), await a.tool.needsApproval(r._context, i, a.toolCall.callId)) {
      const d = r._context.isToolApproved({
        toolName: a.tool.name,
        callId: a.toolCall.callId
      });
      if (d === !1)
        return Cs(async (l) => {
          const p = "Tool execution was not approved.";
          return l.setError({
            message: p,
            data: {
              tool_name: a.tool.name,
              error: `Tool execution for ${a.toolCall.callId} was manually rejected by user.`
            }
          }), l.spanData.output = p, {
            type: "function_output",
            tool: a.tool,
            output: p,
            runItem: new Zt(Bn(a.toolCall, p), n, p)
          };
        }, {
          data: {
            name: a.tool.name
          }
        });
      if (d !== !0)
        return {
          type: "function_approval",
          tool: a.tool,
          runItem: new ye(a.toolCall, n)
        };
    }
    return Cs(async (d) => {
      t.config.traceIncludeSensitiveData && (d.spanData.input = a.toolCall.arguments);
      try {
        t.emit("agent_tool_start", r._context, n, a.tool, {
          toolCall: a.toolCall
        }), n.emit("agent_tool_start", r._context, a.tool, {
          toolCall: a.toolCall
        });
        const l = await a.tool.invoke(r._context, a.toolCall.arguments, { toolCall: a.toolCall }), p = Ve(l);
        t.emit("agent_tool_end", r._context, n, a.tool, p, { toolCall: a.toolCall }), n.emit("agent_tool_end", r._context, a.tool, p, { toolCall: a.toolCall }), t.config.traceIncludeSensitiveData && (d.spanData.output = p);
        const f = {
          type: "function_output",
          tool: a.tool,
          output: l,
          runItem: new Zt(Bn(a.toolCall, l), n, l)
        }, h = Yu(a.toolCall);
        if (h) {
          f.agentRunResult = h;
          const w = h.interruptions;
          w.length > 0 && (f.interruptions = w);
        }
        return f;
      } catch (l) {
        throw d.setError({
          message: "Error running tool",
          data: {
            tool_name: a.tool.name,
            error: String(l)
          }
        }), l;
      }
    }, {
      data: {
        name: a.tool.name
      }
    });
  }
  try {
    return await Promise.all(e.map(s));
  } catch (a) {
    throw new vo(`Failed to run function tools: ${a}`, a, r);
  }
}
async function ju(n, e) {
  const t = e.action;
  let r;
  switch (t.type) {
    case "click":
      await n.click(t.x, t.y, t.button);
      break;
    case "double_click":
      await n.doubleClick(t.x, t.y);
      break;
    case "drag":
      await n.drag(t.path.map((s) => [s.x, s.y]));
      break;
    case "keypress":
      await n.keypress(t.keys);
      break;
    case "move":
      await n.move(t.x, t.y);
      break;
    case "screenshot":
      r = await n.screenshot();
      break;
    case "scroll":
      await n.scroll(t.x, t.y, t.scroll_x, t.scroll_y);
      break;
    case "type":
      await n.type(t.text);
      break;
    case "wait":
      await n.wait();
      break;
  }
  if (typeof r < "u" || typeof n.screenshot == "function" && (r = await n.screenshot(), typeof r < "u"))
    return r;
  throw new Error("Computer does not implement screenshot()");
}
async function $u(n, e, t, r, s = void 0) {
  const a = s ?? E, i = [];
  for (const u of e) {
    const d = u.computer.computer, l = u.toolCall;
    t.emit("agent_tool_start", r, n, u.computer, {
      toolCall: l
    }), typeof n.emit == "function" && n.emit("agent_tool_start", r, u.computer, { toolCall: l });
    let p;
    try {
      p = await ju(d, l);
    } catch (w) {
      a.error("Failed to execute computer action:", w), p = "";
    }
    t.emit("agent_tool_end", r, n, u.computer, p, {
      toolCall: l
    }), typeof n.emit == "function" && n.emit("agent_tool_end", r, u.computer, p, {
      toolCall: l
    });
    const f = p ? `data:image/png;base64,${p}` : "", h = {
      type: "computer_call_result",
      callId: l.callId,
      output: { type: "computer_screenshot", data: f }
    };
    i.push(new Zt(h, n, f));
  }
  return i;
}
async function Fu(n, e, t, r, s, a, i, u) {
  if (r = [...r], a.length === 0)
    return E.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."), new me(e, s, t, r, { type: "next_step_run_again" });
  if (a.length > 1) {
    const l = "Multiple handoffs detected, ignoring this one.";
    for (let p = 1; p < a.length; p++)
      r.push(new Zt(Bn(a[p].toolCall, l), n, l));
  }
  const d = a[0];
  return Qo(async (l) => {
    const p = d.handoff, f = await p.onInvokeHandoff(u, d.toolCall.arguments);
    if (l.spanData.to_agent = f.name, a.length > 1) {
      const w = a.map((v) => v.handoff.agentName);
      l.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: w
        }
      });
    }
    r.push(new Gr(Bn(d.toolCall, va(f)), n, f)), i.emit("agent_handoff", u, n, f), n.emit("agent_handoff", u, f);
    const h = p.inputFilter ?? i.config.handoffInputFilter;
    if (h) {
      E.debug("Filtering inputs for handoff"), typeof h != "function" && l.setError({
        message: "Invalid input filter",
        data: {
          details: "not callable"
        }
      });
      const w = {
        inputHistory: Array.isArray(e) ? [...e] : e,
        preHandoffItems: [...t],
        newItems: [...r],
        runContext: u
      }, v = h(w);
      e = v.inputHistory, t = v.preHandoffItems, r = v.newItems;
    }
    return new me(e, s, t, r, { type: "next_step_handoff", newAgent: f });
  }, {
    data: {
      from_agent: n.name
    }
  });
}
const Tn = {
  isFinalOutput: !1,
  isInterrupted: void 0
};
async function Na(n, e, t) {
  if (e.length === 0)
    return Tn;
  const r = [];
  for (const i of e)
    if (i.runItem instanceof ye && r.push(i.runItem), i.type === "function_output") {
      if (Array.isArray(i.interruptions))
        r.push(...i.interruptions);
      else if (i.agentRunResult) {
        const u = i.agentRunResult.interruptions;
        u.length > 0 && r.push(...u);
      }
    }
  if (r.length > 0)
    return {
      isFinalOutput: !1,
      isInterrupted: !0,
      interruptions: r
    };
  if (n.toolUseBehavior === "run_llm_again")
    return Tn;
  const s = e[0];
  if (n.toolUseBehavior === "stop_on_first_tool")
    return (s == null ? void 0 : s.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: Ve(s.output)
    } : Tn;
  const a = n.toolUseBehavior;
  if (typeof a == "object") {
    const i = e.find((u) => a.stopAtToolNames.includes(u.tool.name));
    return (i == null ? void 0 : i.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: Ve(i.output)
    } : Tn;
  }
  if (typeof a == "function")
    return a(t._context, e);
  throw new ee(`Invalid toolUseBehavior: ${a}`, t);
}
function Lu(n) {
  if (n instanceof Qn)
    return "message_output_created";
  if (n instanceof Br)
    return "handoff_requested";
  if (n instanceof Gr)
    return "handoff_occurred";
  if (n instanceof ct)
    return "tool_called";
  if (n instanceof Zt)
    return "tool_output";
  if (n instanceof Jr)
    return "reasoning_item_created";
  if (n instanceof ye)
    return "tool_approval_requested";
}
function Da(n, e) {
  const t = Lu(e);
  if (!t) {
    E.warn("Unknown item type: ", e);
    return;
  }
  n._addItem(new Du(t, e));
}
function Zu(n, e) {
  for (const t of e)
    Da(n, t);
}
function $s(n, e, t) {
  const r = t == null ? void 0 : t.skipItems;
  for (const s of e.newStepItems)
    r != null && r.has(s) || Da(n, s);
}
var Rt;
class Fs {
  constructor() {
    T(this, Rt, /* @__PURE__ */ new Map());
  }
  addToolUse(e, t) {
    o(this, Rt).set(e, t);
  }
  hasUsedTools(e) {
    return o(this, Rt).has(e);
  }
  toJSON() {
    return Object.fromEntries(Array.from(o(this, Rt).entries()).map(([e, t]) => [e.name, t]));
  }
}
Rt = new WeakMap();
const An = "1.0", Uu = g(An), Se = m({
  name: c()
}), qu = m({
  object: g("trace.span"),
  id: c(),
  trace_id: c(),
  parent_id: c().nullable(),
  started_at: c().nullable(),
  ended_at: c().nullable(),
  error: m({
    message: c(),
    data: Q(c(), L()).optional()
  }).nullable(),
  span_data: Q(c(), L())
}), Pa = qu.extend({
  previous_span: Ri(() => Pa).optional()
}), Ma = m({
  requests: A(),
  inputTokens: A(),
  outputTokens: A(),
  totalTokens: A()
}), Ls = m({
  usage: Ma,
  output: q(qr),
  responseId: c().optional(),
  providerData: Q(c(), L()).optional()
}), ja = he("type", [
  m({
    type: g("message_output_item"),
    rawItem: Yn,
    agent: Se
  }),
  m({
    type: g("tool_call_item"),
    rawItem: Iu.or(Yt),
    agent: Se
  }),
  m({
    type: g("tool_call_output_item"),
    rawItem: kr,
    agent: Se,
    output: c()
  }),
  m({
    type: g("reasoning_item"),
    rawItem: Ur,
    agent: Se
  }),
  m({
    type: g("handoff_call_item"),
    rawItem: Xt,
    agent: Se
  }),
  m({
    type: g("handoff_output_item"),
    rawItem: kr,
    sourceAgent: Se,
    targetAgent: Se
  }),
  m({
    type: g("tool_approval_item"),
    rawItem: Xt.or(Yt),
    agent: Se
  })
]), Ju = m({
  object: g("trace"),
  id: c(),
  workflow_name: c(),
  group_id: c().nullable(),
  metadata: Q(c(), L())
}), Bu = m({
  newItems: q(ja),
  toolsUsed: q(c()),
  handoffs: q(m({
    toolCall: L(),
    handoff: L()
  })),
  functions: q(m({
    toolCall: L(),
    tool: L()
  })),
  computerActions: q(m({
    toolCall: L(),
    computer: L()
  })),
  mcpApprovalRequests: q(m({
    requestItem: m({
      // protocol.HostedToolCallItem
      rawItem: m({
        type: g("hosted_tool_call"),
        name: c(),
        arguments: c().optional(),
        status: c().optional(),
        output: c().optional(),
        // this always exists but marked as optional for early version compatibility; when releasing 1.0, we can remove the nullable and optional
        providerData: Q(c(), L()).nullable().optional()
      })
    }),
    // HostedMCPTool
    mcpTool: m({
      type: g("hosted_tool"),
      name: g("hosted_mcp"),
      providerData: Q(c(), L())
    })
  })).optional()
}), $a = m({
  tripwireTriggered: ut(),
  outputInfo: L()
}), Gu = m({
  guardrail: m({
    type: g("input"),
    name: c()
  }),
  output: $a
}), zu = m({
  guardrail: m({
    type: g("output"),
    name: c()
  }),
  agentOutput: L(),
  agent: Se,
  output: $a
}), Zs = m({
  $schemaVersion: Uu,
  currentTurn: A(),
  currentAgent: Se,
  originalInput: c().or(q(ku)),
  modelResponses: q(Ls),
  context: m({
    usage: Ma,
    approvals: Q(c(), m({
      approved: q(c()).or(ut()),
      rejected: q(c()).or(ut())
    })),
    context: Q(c(), L())
  }),
  toolUseTracker: Q(c(), q(c())),
  maxTurns: A(),
  currentAgentSpan: Pa.nullable().optional(),
  noActiveAgentRun: ut(),
  inputGuardrailResults: q(Gu),
  outputGuardrailResults: q(zu),
  currentStep: Mu.optional(),
  lastModelResponse: Ls.optional(),
  generatedItems: q(ja),
  lastProcessedResponse: Bu.optional(),
  trace: Ju.nullable()
});
class Ye {
  constructor(e, t, r, s) {
    /**
     * Current turn number in the conversation.
     */
    _(this, "_currentTurn", 0);
    /**
     * The agent currently handling the conversation.
     */
    _(this, "_currentAgent");
    /**
     * Original user input prior to any processing.
     */
    _(this, "_originalInput");
    /**
     * Responses from the model so far.
     */
    _(this, "_modelResponses");
    /**
     * Active tracing span for the current agent if tracing is enabled.
     */
    _(this, "_currentAgentSpan");
    /**
     * Run context tracking approvals, usage, and other metadata.
     */
    _(this, "_context");
    /**
     * Tracks what tools each agent has used.
     */
    _(this, "_toolUseTracker");
    /**
     * Items generated by the agent during the run.
     */
    _(this, "_generatedItems");
    /**
     * Maximum allowed turns before forcing termination.
     */
    _(this, "_maxTurns");
    /**
     * Whether the run has an active agent step in progress.
     */
    _(this, "_noActiveAgentRun", !0);
    /**
     * Last model response for the previous turn.
     */
    _(this, "_lastTurnResponse");
    /**
     * Results from input guardrails applied to the run.
     */
    _(this, "_inputGuardrailResults");
    /**
     * Results from output guardrails applied to the run.
     */
    _(this, "_outputGuardrailResults");
    /**
     * Next step computed for the agent to take.
     */
    _(this, "_currentStep");
    /**
     * Parsed model response after applying guardrails and tools.
     */
    _(this, "_lastProcessedResponse");
    /**
     * Trace associated with this run if tracing is enabled.
     */
    _(this, "_trace", null);
    this._context = e, this._originalInput = structuredClone(t), this._modelResponses = [], this._currentAgentSpan = void 0, this._currentAgent = r, this._toolUseTracker = new Fs(), this._generatedItems = [], this._maxTurns = s, this._inputGuardrailResults = [], this._outputGuardrailResults = [], this._trace = Vt();
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during the run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Qt(this._originalInput, this._generatedItems);
  }
  /**
   * Returns all interruptions if the current step is an interruption otherwise returns an empty array.
   */
  getInterruptions() {
    var e;
    return ((e = this._currentStep) == null ? void 0 : e.type) !== "next_step_interruption" ? [] : this._currentStep.data.interruptions;
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(e, t = { alwaysApprove: !1 }) {
    this._context.approveTool(e, t);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(e, t = { alwaysReject: !1 }) {
    this._context.rejectTool(e, t);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    var r;
    const e = {
      $schemaVersion: An,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((s) => ({
        usage: {
          requests: s.usage.requests,
          inputTokens: s.usage.inputTokens,
          outputTokens: s.usage.outputTokens,
          totalTokens: s.usage.totalTokens
        },
        output: s.output,
        responseId: s.responseId,
        providerData: s.providerData
      })),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: (r = this._currentAgentSpan) == null ? void 0 : r.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((s) => ({
        ...s,
        agent: s.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((s) => s.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    }, t = Zs.safeParse(e);
    if (!t.success)
      throw new yo(`Failed to serialize run state. ${t.error.message}`);
    return t.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(e, t) {
    var f, h, w, v, b;
    const [r, s] = await Pr(() => JSON.parse(t));
    if (r)
      throw new ee(`Failed to parse run state. ${r instanceof Error ? r.message : String(r)}`);
    const a = s.$schemaVersion;
    if (!a)
      throw new ee("Run state is missing schema version");
    if (a !== An)
      throw new ee(`Run state schema version ${a} is not supported. Please use version ${An}`);
    const i = Zs.parse(JSON.parse(t)), u = Vu(e), d = new bt(i.context.context);
    d._rebuildApprovals(i.context.approvals);
    const l = u.get(i.currentAgent.name);
    if (!l)
      throw new ee(`Agent ${i.currentAgent.name} not found`);
    const p = new Ye(d, "", l, i.maxTurns);
    p._currentTurn = i.currentTurn, p._toolUseTracker = new Fs();
    for (const [O, R] of Object.entries(i.toolUseTracker))
      p._toolUseTracker.addToolUse(u.get(O), R);
    if (i.currentAgentSpan) {
      i.trace || E.warn("Trace is not set, skipping tracing setup");
      const O = Ce().createTrace({
        traceId: (f = i.trace) == null ? void 0 : f.id,
        name: (h = i.trace) == null ? void 0 : h.workflow_name,
        groupId: ((w = i.trace) == null ? void 0 : w.group_id) ?? void 0,
        metadata: (v = i.trace) == null ? void 0 : v.metadata
      });
      p._currentAgentSpan = Fa(O, i.currentAgentSpan), p._trace = O;
    }
    return p._noActiveAgentRun = i.noActiveAgentRun, p._inputGuardrailResults = i.inputGuardrailResults, p._outputGuardrailResults = i.outputGuardrailResults.map((O) => ({
      ...O,
      agent: u.get(O.agent.name)
    })), p._currentStep = i.currentStep, p._originalInput = i.originalInput, p._modelResponses = i.modelResponses.map(Us), p._lastTurnResponse = i.lastModelResponse ? Us(i.lastModelResponse) : void 0, p._generatedItems = i.generatedItems.map((O) => La(O, u)), p._lastProcessedResponse = i.lastProcessedResponse ? await Hu(u, p._currentAgent, p._context, i.lastProcessedResponse) : void 0, ((b = i.currentStep) == null ? void 0 : b.type) === "next_step_handoff" && (p._currentStep = {
      type: "next_step_handoff",
      newAgent: u.get(i.currentStep.newAgent.name)
    }), p;
  }
}
function Vu(n) {
  const e = /* @__PURE__ */ new Map(), t = [n];
  for (; t.length > 0; ) {
    const r = t.shift();
    if (!e.has(r.name)) {
      e.set(r.name, r);
      for (const s of r.handoffs)
        s instanceof mt ? e.has(s.name) || t.push(s) : s.agent && (e.has(s.agent.name) || t.push(s.agent));
    }
  }
  return e;
}
function Fa(n, e) {
  const t = e.span_data, r = e.previous_span ? Fa(n, e.previous_span) : void 0, s = Ce().createSpan({
    spanId: e.id,
    traceId: e.trace_id,
    parentId: e.parent_id ?? void 0,
    startedAt: e.started_at ?? void 0,
    endedAt: e.ended_at ?? void 0,
    data: t
  }, n);
  return s.previousSpan = r, s;
}
function Us(n) {
  const e = new Xn();
  return e.requests = n.usage.requests, e.inputTokens = n.usage.inputTokens, e.outputTokens = n.usage.outputTokens, e.totalTokens = n.usage.totalTokens, {
    usage: e,
    output: n.output.map((t) => qr.parse(t)),
    responseId: n.responseId,
    providerData: n.providerData
  };
}
function La(n, e) {
  switch (n.type) {
    case "message_output_item":
      return new Qn(n.rawItem, e.get(n.agent.name));
    case "tool_call_item":
      return new ct(n.rawItem, e.get(n.agent.name));
    case "tool_call_output_item":
      return new Zt(n.rawItem, e.get(n.agent.name), n.output);
    case "reasoning_item":
      return new Jr(n.rawItem, e.get(n.agent.name));
    case "handoff_call_item":
      return new Br(n.rawItem, e.get(n.agent.name));
    case "handoff_output_item":
      return new Gr(n.rawItem, e.get(n.sourceAgent.name), e.get(n.targetAgent.name));
    case "tool_approval_item":
      return new ye(n.rawItem, e.get(n.agent.name));
  }
}
async function Hu(n, e, t, r) {
  const s = await e.getAllTools(t), a = new Map(s.filter((l) => l.type === "function").map((l) => [l.name, l])), i = new Map(s.filter((l) => l.type === "computer").map((l) => [l.name, l])), u = new Map(e.handoffs.map((l) => l instanceof mt ? [l.name, ba(l)] : [l.toolName, l])), d = {
    newItems: r.newItems.map((l) => La(l, n)),
    toolsUsed: r.toolsUsed,
    handoffs: r.handoffs.map((l) => {
      if (!u.has(l.handoff.toolName))
        throw new ee(`Handoff ${l.handoff.toolName} not found`);
      return {
        toolCall: l.toolCall,
        handoff: u.get(l.handoff.toolName)
      };
    }),
    functions: await Promise.all(r.functions.map(async (l) => {
      if (!a.has(l.tool.name))
        throw new ee(`Tool ${l.tool.name} not found`);
      return {
        toolCall: l.toolCall,
        tool: a.get(l.tool.name)
      };
    })),
    computerActions: r.computerActions.map((l) => {
      const p = l.computer.name;
      if (!i.has(p))
        throw new ee(`Computer tool ${p} not found`);
      return {
        toolCall: l.toolCall,
        computer: i.get(p)
      };
    }),
    mcpApprovalRequests: (r.mcpApprovalRequests ?? []).map((l) => ({
      requestItem: new ye(l.requestItem.rawItem, e),
      mcpTool: l.mcpTool
    }))
  };
  return {
    ...d,
    hasToolsOrApprovalsToRun() {
      return d.handoffs.length > 0 || d.functions.length > 0 || d.mcpApprovalRequests.length > 0 || d.computerActions.length > 0;
    }
  };
}
const qs = 10;
function Js(n, e) {
  return n ? !1 : e ? !0 : "enabled_without_data";
}
function Qt(n, e) {
  const t = e.filter((r) => r.type !== "tool_approval_item").map((r) => r.rawItem);
  return typeof n == "string" && (n = [{ type: "message", role: "user", content: n }]), [...n, ...t];
}
var ie, Ar, Cr, Er, Za, Or;
class Wu extends au {
  constructor(t = {}) {
    super();
    T(this, ie);
    _(this, "config");
    _(this, "inputGuardrailDefs");
    _(this, "outputGuardrailDefs");
    this.config = {
      modelProvider: t.modelProvider ?? lu(),
      model: t.model,
      modelSettings: t.modelSettings,
      handoffInputFilter: t.handoffInputFilter,
      inputGuardrails: t.inputGuardrails,
      outputGuardrails: t.outputGuardrails,
      tracingDisabled: t.tracingDisabled ?? !1,
      traceIncludeSensitiveData: t.traceIncludeSensitiveData ?? !0,
      workflowName: t.workflowName ?? "Agent workflow",
      traceId: t.traceId,
      groupId: t.groupId,
      traceMetadata: t.traceMetadata
    }, this.inputGuardrailDefs = (t.inputGuardrails ?? []).map(Os), this.outputGuardrailDefs = (t.outputGuardrails ?? []).map(Ir);
  }
  run(t, r, s = {
    stream: !1,
    context: void 0
  }) {
    return r instanceof Ye && r._trace ? Zo(r._trace, async () => (r._currentAgentSpan && kn(r._currentAgentSpan), s != null && s.stream ? F(this, ie, Or).call(this, t, r, s) : F(this, ie, Ar).call(this, t, r, s))) : Uo(async () => s != null && s.stream ? F(this, ie, Or).call(this, t, r, s) : F(this, ie, Ar).call(this, t, r, s), {
      traceId: this.config.traceId,
      name: this.config.workflowName,
      groupId: this.config.groupId,
      metadata: this.config.traceMetadata
    });
  }
}
ie = new WeakSet(), Ar = async function(t, r, s) {
  return xr(async () => {
    var i, u;
    const a = r instanceof Ye ? r : new Ye(s.context instanceof bt ? s.context : new bt(s.context), r, t, s.maxTurns ?? qs);
    try {
      for (; ; ) {
        const d = a._currentAgent.model !== void 0 && a._currentAgent.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let l = Bs(a._currentAgent.model, this.config.model);
        if (typeof l == "string" && (l = await this.config.modelProvider.getModel(l)), a._currentStep = a._currentStep ?? {
          type: "next_step_run_again"
        }, a._currentStep.type === "next_step_interruption") {
          if (E.debug("Continuing from interruption"), !a._lastTurnResponse || !a._lastProcessedResponse)
            throw new ee("No model response found in previous state", a);
          const p = await Ms(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          if (a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = p.originalInput, a._generatedItems = p.generatedItems, a._currentStep = p.nextStep, p.nextStep.type === "next_step_interruption")
            return new dr(a);
          continue;
        }
        if (a._currentStep.type === "next_step_run_again") {
          const p = await a._currentAgent.getEnabledHandoffs(a._context);
          if (!a._currentAgentSpan) {
            const z = p.map((U) => U.agentName);
            a._currentAgentSpan = As({
              data: {
                name: a._currentAgent.name,
                handoffs: z,
                output_type: a._currentAgent.outputSchemaName
              }
            }), a._currentAgentSpan.start(), kn(a._currentAgentSpan);
          }
          const f = await a._currentAgent.getAllTools(a._context), h = f.map((z) => Rs(z)), w = p.map((z) => Ns(z));
          if (a._currentAgentSpan && (a._currentAgentSpan.spanData.tools = f.map((z) => z.name)), a._currentTurn++, a._currentTurn > a._maxTurns)
            throw (i = a._currentAgentSpan) == null || i.setError({
              message: "Max turns exceeded",
              data: { max_turns: a._maxTurns }
            }), new ms(`Max turns (${a._maxTurns}) exceeded`, a);
          E.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`), a._currentTurn === 1 && await F(this, ie, Cr).call(this, a);
          const v = Qt(a._originalInput, a._generatedItems);
          a._noActiveAgentRun && (a._currentAgent.emit("agent_start", a._context, a._currentAgent), this.emit("agent_start", a._context, a._currentAgent));
          let b = {
            ...this.config.modelSettings,
            ...a._currentAgent.modelSettings
          };
          const O = a._currentAgent.modelSettings;
          b = Gs(d, O, l, b), b = Ps(a._currentAgent, a._toolUseTracker, b), a._lastTurnResponse = await l.getResponse({
            systemInstructions: await a._currentAgent.getSystemPrompt(a._context),
            prompt: await a._currentAgent.getPrompt(a._context),
            input: v,
            previousResponseId: s.previousResponseId,
            conversationId: s.conversationId,
            modelSettings: b,
            tools: h,
            outputType: ys(a._currentAgent.outputType),
            handoffs: w,
            tracing: Js(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
            signal: s.signal
          }), a._modelResponses.push(a._lastTurnResponse), a._context.usage.add(a._lastTurnResponse.usage), a._noActiveAgentRun = !1;
          const R = Ds(a._lastTurnResponse, a._currentAgent, f, p);
          a._lastProcessedResponse = R;
          const M = await js(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = M.originalInput, a._generatedItems = M.generatedItems, a._currentStep = M.nextStep;
        }
        if (a._currentStep && a._currentStep.type === "next_step_final_output")
          return await F(this, ie, Er).call(this, a, a._currentStep.output), this.emit("agent_end", a._context, a._currentAgent, a._currentStep.output), a._currentAgent.emit("agent_end", a._context, a._currentStep.output), new dr(a);
        if (a._currentStep && a._currentStep.type === "next_step_handoff")
          a._currentAgent = a._currentStep.newAgent, a._currentAgentSpan && (a._currentAgentSpan.end(), Bt(), a._currentAgentSpan = void 0), a._noActiveAgentRun = !0, a._currentStep = { type: "next_step_run_again" };
        else {
          if (a._currentStep && a._currentStep.type === "next_step_interruption")
            return new dr(a);
          E.debug("Running next loop");
        }
      }
    } catch (d) {
      throw a._currentAgentSpan && a._currentAgentSpan.setError({
        message: "Error in agent run",
        data: { error: String(d) }
      }), d;
    } finally {
      a._currentAgentSpan && (((u = a._currentStep) == null ? void 0 : u.type) !== "next_step_interruption" && a._currentAgentSpan.end(), Bt());
    }
  });
}, Cr = async function(t) {
  const r = this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(Os));
  if (r.length > 0) {
    const s = {
      agent: t._currentAgent,
      input: t._originalInput,
      context: t._context
    };
    try {
      const a = await Promise.all(r.map(async (i) => Es(async (u) => {
        const d = await i.run(s);
        return u.spanData.triggered = d.output.tripwireTriggered, d;
      }, { data: { name: i.name } }, t._currentAgentSpan)));
      for (const i of a)
        if (i.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: i.guardrail.name }
          }), new _s(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`, i, t);
    } catch (a) {
      throw a instanceof _s ? a : (t._currentTurn--, new gs(`Input guardrail failed to complete: ${a}`, a, t));
    }
  }
}, Er = async function(t, r) {
  const s = this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Ir));
  if (s.length > 0) {
    const a = t._currentAgent.processFinalOutput(r), i = {
      agent: t._currentAgent,
      agentOutput: a,
      context: t._context,
      details: { modelResponse: t._lastTurnResponse }
    };
    try {
      const u = await Promise.all(s.map(async (d) => Es(async (l) => {
        const p = await d.run(i);
        return l.spanData.triggered = p.output.tripwireTriggered, p;
      }, { data: { name: d.name } }, t._currentAgentSpan)));
      for (const d of u)
        if (d.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: d.guardrail.name }
          }), new wr(`Output guardrail triggered: ${JSON.stringify(d.output.outputInfo)}`, d, t);
    } catch (u) {
      throw u instanceof wr ? u : new gs(`Output guardrail failed to complete: ${u}`, u, t);
    }
  }
}, Za = async function(t, r) {
  var s, a, i;
  try {
    for (; ; ) {
      const u = t.state._currentAgent, d = await u.getEnabledHandoffs(t.state._context), l = await u.getAllTools(t.state._context), p = l.map((h) => Rs(h)), f = d.map((h) => Ns(h));
      if (t.state._currentStep = t.state._currentStep ?? {
        type: "next_step_run_again"
      }, t.state._currentStep.type === "next_step_interruption") {
        if (E.debug("Continuing from interruption"), !t.state._lastTurnResponse || !t.state._lastProcessedResponse)
          throw new ee("No model response found in previous state", t.state);
        const h = await Ms(t.state._currentAgent, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        if ($s(t, h), t.state._toolUseTracker.addToolUse(t.state._currentAgent, t.state._lastProcessedResponse.toolsUsed), t.state._originalInput = h.originalInput, t.state._generatedItems = h.generatedItems, t.state._currentStep = h.nextStep, h.nextStep.type === "next_step_interruption")
          return;
        continue;
      }
      if (t.state._currentStep.type === "next_step_run_again") {
        if (!t.state._currentAgentSpan) {
          const B = d.map((W) => W.agentName);
          t.state._currentAgentSpan = As({
            data: {
              name: u.name,
              handoffs: B,
              tools: l.map((W) => W.name),
              output_type: u.outputSchemaName
            }
          }), t.state._currentAgentSpan.start(), kn(t.state._currentAgentSpan);
        }
        if (t.state._currentTurn++, t.state._currentTurn > t.state._maxTurns)
          throw (s = t.state._currentAgentSpan) == null || s.setError({
            message: "Max turns exceeded",
            data: { max_turns: t.state._maxTurns }
          }), new ms(`Max turns (${t.state._maxTurns}) exceeded`, t.state);
        E.debug(`Running agent ${u.name} (turn ${t.state._currentTurn})`);
        const h = u.model !== void 0 && u.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let w = Bs(u.model, this.config.model);
        typeof w == "string" && (w = await this.config.modelProvider.getModel(w)), t.state._currentTurn === 1 && await F(this, ie, Cr).call(this, t.state);
        let v = {
          ...this.config.modelSettings,
          ...u.modelSettings
        };
        const b = u.modelSettings;
        v = Gs(h, b, w, v), v = Ps(u, t.state._toolUseTracker, v);
        const O = Qt(t.input, t.newItems);
        t.state._noActiveAgentRun && (u.emit("agent_start", t.state._context, u), this.emit("agent_start", t.state._context, u));
        let R;
        for await (const B of w.getStreamedResponse({
          systemInstructions: await u.getSystemPrompt(t.state._context),
          prompt: await u.getPrompt(t.state._context),
          input: O,
          previousResponseId: r.previousResponseId,
          conversationId: r.conversationId,
          modelSettings: v,
          tools: p,
          handoffs: f,
          outputType: ys(u.outputType),
          tracing: Js(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
          signal: r.signal
        })) {
          if (B.type === "response_done") {
            const W = Ca.parse(B);
            R = {
              usage: new Xn(W.response.usage),
              output: W.response.output,
              responseId: W.response.id
            };
          }
          if (t.cancelled)
            return;
          t._addItem(new Nu(B));
        }
        if (t.state._noActiveAgentRun = !1, !R)
          throw new _e("Model did not produce a final response!", t.state);
        t.state._lastTurnResponse = R, t.state._modelResponses.push(t.state._lastTurnResponse);
        const M = Ds(t.state._lastTurnResponse, u, l, d);
        t.state._lastProcessedResponse = M;
        const z = new Set(M.newItems);
        z.size > 0 && Zu(t, M.newItems);
        const U = await js(u, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        $s(t, U, {
          skipItems: z
        }), t.state._toolUseTracker.addToolUse(u, M.toolsUsed), t.state._originalInput = U.originalInput, t.state._generatedItems = U.generatedItems, t.state._currentStep = U.nextStep;
      }
      if (t.state._currentStep.type === "next_step_final_output") {
        await F(this, ie, Er).call(this, t.state, t.state._currentStep.output), this.emit("agent_end", t.state._context, u, t.state._currentStep.output), u.emit("agent_end", t.state._context, t.state._currentStep.output);
        return;
      } else {
        if (t.state._currentStep.type === "next_step_interruption")
          return;
        t.state._currentStep.type === "next_step_handoff" ? (t.state._currentAgent = (a = t.state._currentStep) == null ? void 0 : a.newAgent, t.state._currentAgentSpan && (t.state._currentAgentSpan.end(), Bt()), t.state._currentAgentSpan = void 0, t._addItem(new Pu(t.state._currentAgent)), t.state._noActiveAgentRun = !0, t.state._currentStep = {
          type: "next_step_run_again"
        }) : E.debug("Running next loop");
      }
    }
  } catch (u) {
    throw t.state._currentAgentSpan && t.state._currentAgentSpan.setError({
      message: "Error in agent run",
      data: { error: String(u) }
    }), u;
  } finally {
    t.state._currentAgentSpan && (((i = t.state._currentStep) == null ? void 0 : i.type) !== "next_step_interruption" && t.state._currentAgentSpan.end(), Bt());
  }
}, Or = async function(t, r, s) {
  return s = s ?? {}, xr(async () => {
    const a = r instanceof Ye ? r : new Ye(s.context instanceof bt ? s.context : new bt(s.context), r, t, s.maxTurns ?? qs), i = new Ou({
      signal: s.signal,
      state: a
    });
    return i.maxTurns = s.maxTurns ?? a._maxTurns, F(this, ie, Za).call(this, i, s).then(() => {
      i._done();
    }, (u) => {
      i._raiseError(u);
    }), i;
  });
};
function Bs(n, e) {
  return typeof n == "string" && n !== mt.DEFAULT_MODEL_PLACEHOLDER || n ? n : e ?? n ?? mt.DEFAULT_MODEL_PLACEHOLDER;
}
function Gs(n, e, t, r) {
  var s, a, i, u, d, l, p, f;
  if (
    // gpt-5 is enabled for the default model for agents
    _a() && // explicitly set model for the agent
    n && // this runner uses a non-gpt-5 model
    (typeof t != "string" || !Kn(t)) && ((s = e.providerData) != null && s.reasoning || (i = (a = e.providerData) == null ? void 0 : a.text) != null && i.verbosity || (u = e.providerData) != null && u.reasoning_effort)
  ) {
    const h = { ...r };
    return (d = h.providerData) == null || delete d.reasoning, (p = (l = h.providerData) == null ? void 0 : l.text) == null || delete p.verbosity, (f = h.providerData) == null || delete f.reasoning_effort, h.reasoning && (delete h.reasoning.effort, delete h.reasoning.summary), h.text && delete h.text.verbosity, h;
  }
  return r;
}
const Rr = /* @__PURE__ */ new WeakMap();
function Ku(n, e) {
  n && Rr.set(n, e);
}
function Yu(n) {
  const e = Rr.get(n);
  return e && Rr.delete(n), e;
}
const Xu = m({ input: c() }), xt = class xt extends su {
  constructor(t) {
    super();
    _(this, "name");
    _(this, "instructions");
    _(this, "prompt");
    _(this, "handoffDescription");
    _(this, "handoffs");
    _(this, "model");
    _(this, "modelSettings");
    _(this, "tools");
    _(this, "mcpServers");
    _(this, "inputGuardrails");
    _(this, "outputGuardrails");
    _(this, "outputType", "text");
    _(this, "toolUseBehavior");
    _(this, "resetToolChoice");
    if (typeof t.name != "string" || t.name.trim() === "")
      throw new ee("Agent must have a name.");
    if (this.name = t.name, this.instructions = t.instructions ?? xt.DEFAULT_MODEL_PLACEHOLDER, this.prompt = t.prompt, this.handoffDescription = t.handoffDescription ?? "", this.handoffs = t.handoffs ?? [], this.model = t.model ?? "", this.modelSettings = t.modelSettings ?? ou(), this.tools = t.tools ?? [], this.mcpServers = t.mcpServers ?? [], this.inputGuardrails = t.inputGuardrails ?? [], this.outputGuardrails = t.outputGuardrails ?? [], t.outputType && (this.outputType = t.outputType), this.toolUseBehavior = t.toolUseBehavior ?? "run_llm_again", this.resetToolChoice = t.resetToolChoice ?? !0, // The user sets a non-default model
    t.model !== void 0 && // The default model is gpt-5
    _a() && // However, the specified model is not a gpt-5 model
    (typeof t.model != "string" || !Kn(t.model)) && // The model settings are not customized for the specified model
    t.modelSettings === void 0 && (this.modelSettings = {}), (t.handoffOutputTypeWarningEnabled === void 0 || t.handoffOutputTypeWarningEnabled) && this.handoffs && this.outputType) {
      const r = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
      for (const s of this.handoffs)
        "outputType" in s && s.outputType ? r.add(JSON.stringify(s.outputType)) : "agent" in s && s.agent.outputType && r.add(JSON.stringify(s.agent.outputType));
      r.size > 1 && E.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
    }
  }
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(t) {
    return new xt({
      ...t,
      handoffs: t.handoffs,
      outputType: t.outputType,
      handoffOutputTypeWarningEnabled: !1
    });
  }
  /**
   * Output schema name.
   */
  get outputSchemaName() {
    if (this.outputType === "text")
      return "text";
    if (ht(this.outputType))
      return "ZodOutput";
    if (typeof this.outputType == "object")
      return this.outputType.name;
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(t) {
    return new xt({
      ...this,
      ...t
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(t) {
    const { toolName: r, toolDescription: s, customOutputExtractor: a, needsApproval: i, runConfig: u, runOptions: d, isEnabled: l } = t;
    return br({
      name: r ?? Jn(this.name),
      description: s ?? "",
      parameters: Xu,
      strict: !0,
      needsApproval: i,
      isEnabled: l,
      execute: async (p, f, h) => {
        if (!wo(p))
          throw new _e("Agent tool called with invalid input");
        const v = await new Wu(u ?? {}).run(this, p.input, {
          context: f,
          ...d ?? {}
        }), b = typeof this.toolUseBehavior == "object" && this.toolUseBehavior !== null && "stopAtToolNames" in this.toolUseBehavior;
        typeof a != "function" && b && E.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);
        const O = typeof a == "function" ? await a(v) : Ru(v.rawResponses[v.rawResponses.length - 1]);
        return h != null && h.toolCall && Ku(h.toolCall, v), O;
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(t) {
    return typeof this.instructions == "function" ? await this.instructions(t, this) : this.instructions;
  }
  /**
   * Returns the prompt template for the agent, if defined.
   *
   * If the agent has a function as its prompt, this function will be called with the
   * runContext and the agent instance.
   */
  async getPrompt(t) {
    return typeof this.prompt == "function" ? await this.prompt(t, this) : this.prompt;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools(t) {
    return this.mcpServers.length > 0 ? Ro({
      mcpServers: this.mcpServers,
      runContext: t,
      agent: this,
      convertSchemasToStrict: !1
    }) : [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools(t) {
    const r = await this.getMcpTools(t), s = [];
    for (const a of this.tools) {
      if (a.type === "function") {
        const i = a.isEnabled;
        if (!(typeof i == "function" ? await i(t, this) : typeof i == "boolean" ? i : !0))
          continue;
      }
      s.push(a);
    }
    return [...r, ...s];
  }
  /**
   * Returns the handoffs that should be exposed to the model for the current run.
   *
   * Handoffs that provide an `isEnabled` function returning `false` are omitted.
   */
  async getEnabledHandoffs(t) {
    var a;
    const r = ((a = this.handoffs) == null ? void 0 : a.map((i) => du(i))) ?? [], s = [];
    for (const i of r)
      await i.isEnabled({ runContext: t, agent: this }) && s.push(i);
    return s;
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(t) {
    if (this.outputType === "text")
      return t;
    if (typeof this.outputType == "object") {
      const r = JSON.parse(t);
      return ht(this.outputType) ? this.outputType.parse(r) : r;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
};
_(xt, "DEFAULT_MODEL_PLACEHOLDER", "");
let mt = xt;
ru(ha());
function Ua(n) {
  const e = atob(n), t = e.length, r = new Uint8Array(t);
  for (let s = 0; s < t; s++)
    r[s] = e.charCodeAt(s);
  return r.buffer;
}
function qa(n) {
  const e = String.fromCharCode(...new Uint8Array(n));
  return btoa(e);
}
function Ja(n) {
  if (typeof n > "u" || n === null || typeof n != "object" || !("type" in n) || typeof n.type != "string" || !n.type || n.type !== "message" || !("content" in n) || !Array.isArray(n.content) || n.content.length < 1)
    return;
  const e = n.content[n.content.length - 1];
  if (!(!("type" in e) || typeof e.type != "string")) {
    if (e.type === "output_text")
      return typeof e.text == "string" ? e.text : void 0;
    if (e.type === "output_audio")
      return typeof e.transcript == "string" ? e.transcript : void 0;
  }
}
function Qu(n, e) {
  const t = n.filter((a) => !e.some((i) => i.itemId === a.itemId)), r = e.filter((a) => !n.some((i) => i.itemId === a.itemId)), s = e.filter((a) => n.some((i) => i.itemId === a.itemId && JSON.stringify(i) !== JSON.stringify(a)));
  return {
    removals: t,
    additions: r,
    updates: s
  };
}
function ec() {
  return typeof window > "u" ? !1 : typeof window.RTCPeerConnection < "u";
}
function zs(n) {
  return n.role === "system" ? n : n.role === "assistant" ? {
    ...n,
    content: n.content.map((e) => e.type === "output_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n.role === "user" ? {
    ...n,
    content: n.content.map((e) => e.type === "input_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n;
}
function Vs(n, e, t) {
  if (e.type === "conversation.item.input_audio_transcription.completed")
    return n.map((a) => {
      if (a.itemId === e.item_id && a.type === "message" && "role" in a && a.role === "user") {
        const i = a.content.map((u) => u.type === "input_audio" ? {
          ...u,
          transcript: e.transcript
        } : u);
        return {
          ...a,
          content: i,
          status: "completed"
        };
      }
      return a;
    });
  const r = !t && e.type === "message" ? zs(e) : e, s = n.findIndex((a) => a.itemId === e.itemId);
  if (s !== -1)
    return n.map((a, i) => i === s ? r : !t && a.type === "message" ? zs(a) : a);
  if (e.previousItemId) {
    const a = n.findIndex((i) => i.itemId === e.previousItemId);
    return a !== -1 ? [
      ...n.slice(0, a + 1),
      r,
      ...n.slice(a + 1)
    ] : [...n, r];
  } else
    return [...n, r];
}
const Ba = {
  "User-Agent": `Agents/JavaScript ${lr.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${lr.version}`
}, tc = `openai-agents-sdk.${lr.version}`;
function nc(n, e) {
  const { name: t, arguments: r, ...s } = e;
  return new ye({
    type: "hosted_tool_call",
    name: t,
    arguments: JSON.stringify(r),
    status: "in_progress",
    providerData: {
      ...s
    }
  }, n);
}
function Hs(n) {
  const { name: e, arguments: t, providerData: r } = n.rawItem, { itemId: s, serverLabel: a, ...i } = r ?? {};
  if (!s || !a)
    throw new Error("Invalid approval item for Realtime MCP approval request");
  return {
    type: "mcp_approval_request",
    itemId: s,
    serverLabel: a,
    ...i,
    name: e,
    arguments: t ? JSON.parse(t) : {},
    approved: null
  };
}
class yd extends mt {
  constructor(t) {
    super(t);
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */
    _(this, "voice");
    this.voice = t.voice;
  }
}
function rc(n) {
  return {
    debounceTextLength: n.debounceTextLength ?? 100
  };
}
function sc({ policyHint: n, ...e }) {
  const t = Ir(e), r = n ?? t.name;
  return {
    ...t,
    policyHint: r,
    run: async (s) => {
      const a = await t.run(s);
      return {
        ...a,
        guardrail: { ...a.guardrail, policyHint: r }
      };
    }
  };
}
function ac(n) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}
function Ke(n, e) {
  return n in e && typeof e[n] < "u";
}
function ic(n) {
  return Ke("modalities", n) || Ke("inputAudioFormat", n) || Ke("outputAudioFormat", n) || Ke("inputAudioTranscription", n) || Ke("turnDetection", n) || Ke("inputAudioNoiseReduction", n) || Ke("speed", n);
}
function oc(n) {
  var e, t, r, s, a, i, u, d;
  if (!ic(n)) {
    const l = (e = n.audio) != null && e.input ? {
      format: In(n.audio.input.format),
      noiseReduction: n.audio.input.noiseReduction ?? null,
      transcription: n.audio.input.transcription,
      turnDetection: n.audio.input.turnDetection
    } : void 0, p = ((r = (t = n.audio) == null ? void 0 : t.output) == null ? void 0 : r.voice) ?? n.voice, f = (s = n.audio) != null && s.output || typeof p < "u" ? {
      format: In((i = (a = n.audio) == null ? void 0 : a.output) == null ? void 0 : i.format),
      voice: p,
      speed: (d = (u = n.audio) == null ? void 0 : u.output) == null ? void 0 : d.speed
    } : void 0;
    return {
      model: n.model,
      instructions: n.instructions,
      toolChoice: n.toolChoice,
      tools: n.tools,
      tracing: n.tracing,
      providerData: n.providerData,
      prompt: n.prompt,
      outputModalities: n.outputModalities,
      audio: l || f ? {
        input: l,
        output: f
      } : void 0
    };
  }
  return {
    model: n.model,
    instructions: n.instructions,
    toolChoice: n.toolChoice,
    tools: n.tools,
    tracing: n.tracing,
    providerData: n.providerData,
    prompt: n.prompt,
    outputModalities: n.modalities,
    audio: {
      input: {
        format: In(n.inputAudioFormat),
        noiseReduction: n.inputAudioNoiseReduction ?? null,
        transcription: n.inputAudioTranscription,
        turnDetection: n.turnDetection
      },
      output: {
        format: In(n.outputAudioFormat),
        voice: n.voice,
        speed: n.speed
      }
    }
  };
}
function In(n) {
  if (!n)
    return;
  if (typeof n == "object")
    return n;
  const e = String(n);
  return e === "pcm16" ? { type: "audio/pcm", rate: 24e3 } : e === "g711_ulaw" ? { type: "audio/pcmu" } : e === "g711_alaw" ? { type: "audio/pcma" } : { type: "audio/pcm", rate: 24e3 };
}
m({
  itemId: c()
});
const Ws = he("role", [
  m({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: g("message"),
    role: g("system"),
    content: q(m({ type: g("input_text"), text: c() }))
  }),
  m({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: g("message"),
    role: g("user"),
    status: se(["in_progress", "completed"]),
    content: q(m({ type: g("input_text"), text: c() }).or(m({
      type: g("input_audio"),
      audio: c().nullable().optional(),
      transcript: c().nullable()
    })))
  }),
  m({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: g("message"),
    role: g("assistant"),
    status: se(["in_progress", "completed", "incomplete"]),
    content: q(m({ type: g("output_text"), text: c() }).or(m({
      type: g("output_audio"),
      audio: c().nullable().optional(),
      transcript: c().nullable().optional()
    })))
  })
]), Ks = m({
  itemId: c(),
  previousItemId: c().nullable().optional(),
  type: g("function_call"),
  status: se(["in_progress", "completed", "incomplete"]),
  arguments: c(),
  name: c(),
  output: c().nullable()
}), Ys = m({
  itemId: c(),
  previousItemId: c().nullable().optional(),
  type: se(["mcp_call", "mcp_tool_call"]),
  status: se(["in_progress", "completed", "incomplete"]),
  arguments: c(),
  name: c(),
  output: c().nullable()
}), uc = m({
  itemId: c(),
  type: g("mcp_approval_request"),
  serverLabel: c(),
  name: c(),
  arguments: Q(c(), L()),
  approved: ut().optional().nullable()
}), ge = la("openai-agents:realtime"), Ga = m({
  id: c().optional().nullable(),
  conversation_id: c().optional().nullable(),
  max_output_tokens: A().or(g("inf")).optional().nullable(),
  metadata: Q(c(), L()).optional().nullable(),
  // GA rename: modalities -> output_modalities
  output_modalities: q(c()).optional().nullable(),
  object: g("realtime.response").optional().nullable(),
  output: q(L()).optional().nullable(),
  // GA grouping: audio.output.{format,voice}
  audio: m({
    output: m({
      format: L().optional().nullable(),
      voice: c().optional().nullable()
    }).optional().nullable()
  }).optional().nullable(),
  status: se(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: Q(c(), L()).optional().nullable(),
  usage: m({
    input_tokens: A().optional(),
    input_tokens_details: Q(c(), L()).optional().nullable(),
    output_tokens: A().optional(),
    output_tokens_details: Q(c(), L()).optional().nullable()
  }).optional().nullable()
}), cc = m({
  id: c().optional(),
  audio: c().nullable().optional(),
  text: c().nullable().optional(),
  transcript: c().nullable().optional(),
  type: ra([
    g("input_text"),
    g("input_audio"),
    g("item_reference"),
    g("output_text"),
    g("output_audio")
  ])
}), Ut = m({
  id: c().optional(),
  arguments: c().optional(),
  call_id: c().optional(),
  content: q(cc).optional(),
  name: c().optional(),
  output: c().nullable().optional(),
  role: se(["user", "assistant", "system"]).optional(),
  status: se(["completed", "incomplete", "in_progress"]).optional(),
  type: se([
    "message",
    "function_call",
    "function_call_output",
    "mcp_list_tools",
    "mcp_tool_call",
    "mcp_call",
    "mcp_approval_request",
    "mcp_approval_response"
  ]).optional(),
  approval_request_id: c().nullable().optional(),
  approve: ut().nullable().optional(),
  reason: c().nullable().optional(),
  server_label: c().optional(),
  error: L().nullable().optional(),
  tools: q(m({
    name: c(),
    description: c(),
    input_schema: Q(L()).optional()
  }).passthrough()).optional()
}).passthrough(), dc = m({
  type: g("conversation.created"),
  event_id: c(),
  conversation: m({
    id: c().optional(),
    object: g("realtime.conversation").optional()
  })
}), lc = m({
  type: g("conversation.item.added"),
  event_id: c(),
  item: Ut,
  previous_item_id: c().nullable().optional()
}), pc = m({
  type: g("conversation.item.done"),
  event_id: c(),
  item: Ut,
  previous_item_id: c().nullable().optional()
}), fc = m({
  type: g("conversation.item.deleted"),
  event_id: c(),
  item_id: c()
}), hc = m({
  type: g("conversation.item.input_audio_transcription.completed"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  transcript: c(),
  logprobs: q(L()).nullable().optional()
}), mc = m({
  type: g("conversation.item.input_audio_transcription.delta"),
  event_id: c(),
  item_id: c(),
  content_index: A().optional(),
  delta: c().optional(),
  logprobs: q(L()).nullable().optional()
}), gc = m({
  type: g("conversation.item.input_audio_transcription.failed"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  error: m({
    code: c().optional(),
    message: c().optional(),
    param: c().optional(),
    type: c().optional()
  })
}), _c = m({
  type: g("conversation.item.retrieved"),
  event_id: c(),
  item: Ut
}), yc = m({
  type: g("conversation.item.truncated"),
  event_id: c(),
  item_id: c(),
  audio_end_ms: A(),
  content_index: A()
}), vc = m({
  type: g("conversation.item.create"),
  item: Ut,
  event_id: c().optional(),
  previous_item_id: c().nullable().optional()
}), wc = m({
  type: g("conversation.item.delete"),
  item_id: c(),
  event_id: c().optional()
}), bc = m({
  type: g("conversation.item.retrieve"),
  item_id: c(),
  event_id: c().optional()
}), xc = m({
  type: g("conversation.item.truncate"),
  item_id: c(),
  audio_end_ms: A(),
  content_index: A(),
  event_id: c().optional()
}), Sc = m({
  type: g("error"),
  event_id: c().optional(),
  error: L().optional()
}), Tc = m({
  type: g("input_audio_buffer.cleared"),
  event_id: c()
}), Ic = m({
  type: g("input_audio_buffer.append"),
  audio: c(),
  event_id: c().optional()
}), kc = m({
  type: g("input_audio_buffer.clear"),
  event_id: c().optional()
}), Ac = m({
  type: g("input_audio_buffer.commit"),
  event_id: c().optional()
}), Cc = m({
  type: g("input_audio_buffer.committed"),
  event_id: c(),
  item_id: c(),
  previous_item_id: c().nullable().optional()
}), Ec = m({
  type: g("input_audio_buffer.speech_started"),
  event_id: c(),
  item_id: c(),
  audio_start_ms: A()
}), Oc = m({
  type: g("input_audio_buffer.speech_stopped"),
  event_id: c(),
  item_id: c(),
  audio_end_ms: A()
}), Rc = m({
  type: g("output_audio_buffer.started"),
  event_id: c()
}).passthrough(), Nc = m({
  type: g("output_audio_buffer.stopped"),
  event_id: c()
}).passthrough(), Dc = m({
  type: g("output_audio_buffer.cleared"),
  event_id: c()
}), Pc = m({
  type: g("rate_limits.updated"),
  event_id: c(),
  rate_limits: q(m({
    limit: A().optional(),
    name: se(["requests", "tokens"]).optional(),
    remaining: A().optional(),
    reset_seconds: A().optional()
  }))
}), Mc = m({
  type: g("response.output_audio.delta"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  delta: c(),
  output_index: A(),
  response_id: c()
}), jc = m({
  type: g("response.output_audio.done"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  output_index: A(),
  response_id: c()
}), $c = m({
  type: g("response.output_audio_transcript.delta"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  delta: c(),
  output_index: A(),
  response_id: c()
}), Fc = m({
  //  GA may introduce response.output_audio_transcript.done
  type: g("response.output_audio_transcript.done"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  transcript: c(),
  output_index: A(),
  response_id: c()
}), Lc = m({
  type: g("response.content_part.added"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  output_index: A(),
  response_id: c(),
  part: m({
    audio: c().optional(),
    text: c().optional(),
    transcript: c().optional(),
    type: se(["text", "audio"]).optional()
  })
}), Zc = m({
  type: g("response.content_part.done"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  output_index: A(),
  response_id: c(),
  part: m({
    audio: c().optional(),
    text: c().optional(),
    transcript: c().optional(),
    type: se(["text", "audio"]).optional()
  })
}), Uc = m({
  type: g("response.created"),
  event_id: c(),
  response: Ga
}), za = m({
  type: g("response.done"),
  event_id: c(),
  response: Ga
}), qc = m({
  type: g("response.function_call_arguments.delta"),
  event_id: c(),
  item_id: c(),
  call_id: c(),
  delta: c(),
  output_index: A(),
  response_id: c()
}), Jc = m({
  type: g("response.function_call_arguments.done"),
  event_id: c(),
  item_id: c(),
  call_id: c(),
  arguments: c(),
  output_index: A(),
  response_id: c()
}), Bc = m({
  type: g("response.output_item.added"),
  event_id: c(),
  item: Ut,
  output_index: A(),
  response_id: c()
}), Gc = m({
  type: g("response.output_item.done"),
  event_id: c(),
  item: Ut,
  output_index: A(),
  response_id: c()
}), zc = m({
  type: g("response.output_text.delta"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  delta: c(),
  output_index: A(),
  response_id: c()
}), Vc = m({
  // No rename specified for done; keep response.text.done
  type: g("response.output_text.done"),
  event_id: c(),
  item_id: c(),
  content_index: A(),
  text: c(),
  output_index: A(),
  response_id: c()
}), Hc = m({
  type: g("session.created"),
  event_id: c(),
  session: L()
}), Wc = m({
  type: g("session.updated"),
  event_id: c(),
  session: L()
}), Kc = m({
  type: g("response.cancel"),
  event_id: c().optional(),
  response_id: c().optional()
}), Yc = m({
  type: g("response.create"),
  event_id: c().optional(),
  response: L().optional()
}), Xc = m({
  type: g("session.update"),
  event_id: c().optional(),
  session: L()
}), Qc = m({
  type: g("mcp_list_tools.in_progress"),
  event_id: c().optional(),
  item_id: c().optional()
}), ed = m({
  type: g("mcp_list_tools.completed"),
  event_id: c().optional(),
  item_id: c().optional()
}), td = m({
  type: g("response.mcp_call_arguments.delta"),
  event_id: c(),
  response_id: c(),
  item_id: c(),
  output_index: A(),
  delta: c(),
  obfuscation: c()
}), nd = m({
  type: g("response.mcp_call_arguments.done"),
  event_id: c(),
  response_id: c(),
  item_id: c(),
  output_index: A(),
  arguments: c()
}), rd = m({
  type: g("response.mcp_call.in_progress"),
  event_id: c(),
  output_index: A(),
  item_id: c()
}), sd = m({
  type: g("response.mcp_call.completed"),
  event_id: c(),
  output_index: A(),
  item_id: c()
}), ad = m({
  type: g("mcp_list_tools.failed"),
  event_id: c().optional(),
  item_id: c().optional()
}), id = m({
  type: c(),
  event_id: c().optional().nullable()
}).passthrough(), od = he("type", [
  dc,
  lc,
  pc,
  fc,
  hc,
  mc,
  gc,
  _c,
  yc,
  Sc,
  Tc,
  Cc,
  Ec,
  Oc,
  Rc,
  Nc,
  Dc,
  Pc,
  Mc,
  jc,
  $c,
  Fc,
  Lc,
  Zc,
  Uc,
  za,
  qc,
  Jc,
  Bc,
  Gc,
  zc,
  Vc,
  Hc,
  Wc,
  Qc,
  ed,
  ad,
  td,
  nd,
  rd,
  sd
]);
he("type", [
  vc,
  wc,
  bc,
  xc,
  Ic,
  kc,
  Ac,
  Kc,
  Yc,
  Xc
]);
function zr(n) {
  const e = JSON.parse(n.data.toString()), t = od.safeParse(e);
  if (!t.success) {
    const r = id.safeParse(e);
    return r.success ? { data: r.data, isGeneric: !0 } : { data: null, isGeneric: !0 };
  }
  return { data: t.data, isGeneric: !1 };
}
const ud = "gpt-realtime", xe = {
  outputModalities: ["audio"],
  audio: {
    input: {
      format: { type: "audio/pcm", rate: 24e3 },
      transcription: { model: "gpt-4o-mini-transcribe" },
      turnDetection: { type: "semantic_vad" },
      noiseReduction: null
    },
    output: {
      format: { type: "audio/pcm", rate: 24e3 },
      speed: 1
    }
  }
};
var rt, ln, ue, pn;
const Wr = class Wr extends Fr {
  constructor(t = {}) {
    super();
    T(this, rt);
    T(this, ln);
    T(this, ue, null);
    T(this, pn, null);
    _(this, "eventEmitter", new Hn());
    y(this, rt, t.model ?? ud), y(this, ln, t.apiKey);
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return o(this, rt);
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(t) {
    y(this, rt, t);
  }
  get _rawSessionConfig() {
    return o(this, pn) ?? null;
  }
  async _getApiKey(t) {
    const r = t.apiKey ?? o(this, ln);
    return typeof r == "function" ? await r() : r;
  }
  _onMessage(t) {
    var a, i, u, d, l, p;
    const { data: r, isGeneric: s } = zr(t);
    if (r !== null && (this.emit("*", r), !s)) {
      if (r.type === "error" ? this.emit("error", { type: "error", error: r }) : this.emit(r.type, r), r.type === "response.created") {
        this.emit("turn_started", {
          type: "response_started",
          providerData: {
            ...r
          }
        });
        return;
      }
      if (r.type === "session.updated" && y(this, pn, r.session), r.type === "response.done") {
        const f = za.safeParse(r);
        if (!f.success) {
          ge.error("Error parsing response done event", f.error);
          return;
        }
        const h = ((a = f.data.response.usage) == null ? void 0 : a.input_tokens) ?? 0, w = ((i = f.data.response.usage) == null ? void 0 : i.output_tokens) ?? 0, v = h + w, b = new Xn({
          inputTokens: h,
          inputTokensDetails: ((u = f.data.response.usage) == null ? void 0 : u.input_tokens_details) ?? {},
          outputTokens: w,
          outputTokensDetails: ((d = f.data.response.usage) == null ? void 0 : d.output_tokens_details) ?? {},
          totalTokens: v
        });
        this.emit("usage_update", b), this.emit("turn_done", {
          type: "response_done",
          response: {
            id: f.data.response.id ?? "",
            output: f.data.response.output ?? [],
            usage: {
              inputTokens: h,
              inputTokensDetails: ((l = f.data.response.usage) == null ? void 0 : l.input_tokens_details) ?? {},
              outputTokens: w,
              outputTokensDetails: ((p = f.data.response.usage) == null ? void 0 : p.output_tokens_details) ?? {},
              totalTokens: v
            }
          }
        });
        return;
      }
      if (r.type === "response.output_audio.done") {
        this.emit("audio_done");
        return;
      }
      if (r.type === "conversation.item.deleted") {
        this.emit("item_deleted", {
          itemId: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.completed" || r.type === "conversation.item.truncated") {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.delta" || r.type === "response.output_text.delta" || r.type === "response.output_audio_transcript.delta" || r.type === "response.function_call_arguments.delta") {
        r.type === "response.output_audio_transcript.delta" && this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: r.delta,
          itemId: r.item_id,
          responseId: r.response_id
        });
        return;
      }
      if (r.type === "conversation.item.added" || r.type === "conversation.item.done" || r.type === "conversation.item.retrieved") {
        if (r.item.type === "mcp_list_tools" && r.type === "conversation.item.done") {
          const f = r.item.server_label ?? "", h = r.item.tools ?? [];
          try {
            this.emit("mcp_tools_listed", {
              serverLabel: f,
              tools: h
            });
          } catch (w) {
            ge.error("Error emitting mcp_tools_listed", w, r.item);
          }
          return;
        }
        if (r.item.type === "message") {
          const f = r.type === "conversation.item.added" || r.type === "conversation.item.done" ? r.previous_item_id : null, h = Ws.parse({
            itemId: r.item.id,
            previousItemId: f,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: r.item.status
          });
          this.emit("item_update", h);
          return;
        }
        if (r.item.type === "mcp_approval_request" && r.type === "conversation.item.done") {
          const f = r.item, h = uc.parse({
            itemId: f.id,
            type: f.type,
            serverLabel: f.server_label,
            name: f.name,
            arguments: JSON.parse(f.arguments || "{}"),
            approved: f.approved
          });
          this.emit("item_update", h), this.emit("mcp_approval_request", h);
          return;
        }
        if (r.item.type === "mcp_tool_call" || r.item.type === "mcp_call") {
          const f = r.type === "conversation.item.done" ? "completed" : "in_progress", h = Ys.parse({
            itemId: r.item.id,
            type: r.item.type,
            status: f,
            arguments: r.item.arguments,
            name: r.item.name,
            output: r.item.output
          });
          this.emit("item_update", h), r.type === "conversation.item.done" && this.emit("mcp_tool_call_completed", h);
          return;
        }
      }
      if (r.type === "response.mcp_call.in_progress") {
        const f = r;
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: f.item_id
        });
        return;
      }
      if (r.type === "mcp_list_tools.in_progress") {
        const f = r;
        f.item_id && this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: f.item_id
        });
        return;
      }
      if (r.type === "response.output_item.done" || r.type === "response.output_item.added") {
        const f = r.item;
        if (f.type === "function_call" && f.status === "completed") {
          const h = Ks.parse({
            itemId: f.id,
            type: f.type,
            status: "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: null
          });
          this.emit("item_update", h), this.emit("function_call", {
            id: f.id,
            type: "function_call",
            callId: f.call_id ?? "",
            arguments: f.arguments ?? "",
            name: f.name ?? ""
          });
          return;
        }
        if (f.type === "mcp_tool_call" || f.type === "mcp_call") {
          const h = Ys.parse({
            itemId: f.id,
            type: f.type,
            status: r.type === "response.output_item.done" ? "completed" : "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: f.output
          });
          this.emit("item_update", h);
          return;
        }
        if (f.type === "message") {
          const h = Ws.parse({
            itemId: r.item.id,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: r.type === "response.output_item.done" ? f.status ?? "completed" : f.status ?? "in_progress"
          });
          this.emit("item_update", h);
          return;
        }
      }
    }
  }
  _onError(t) {
    this.emit("error", {
      type: "error",
      error: t
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r, { triggerResponse: s = !0 } = {}) {
    const a = typeof t == "string" ? [
      {
        type: "input_text",
        text: t
      }
    ] : t.content.map((i) => i.type === "input_image" ? {
      type: "input_image",
      image_url: i.image,
      ...i.providerData ?? {}
    } : i);
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "message",
        role: "user",
        content: a
      },
      ...r
    }), s && this.sendEvent({
      type: "response.create"
    });
  }
  addImage(t, { triggerResponse: r = !0 } = {}) {
    this.sendMessage({
      type: "message",
      role: "user",
      content: [{ type: "input_image", image: t }]
    }, {}, { triggerResponse: r });
  }
  _getMergedSessionConfig(t) {
    var a, i, u, d, l, p, f, h, w, v, b, O, R, M, z, U, B, W, de, yt, qt, xn, Kr, Yr, Xr, Qr, es, ts;
    const r = oc(t), s = {
      type: "realtime",
      instructions: r.instructions,
      model: r.model ?? o(this, rt),
      output_modalities: r.outputModalities ?? xe.outputModalities,
      audio: {
        input: {
          format: ((i = (a = r.audio) == null ? void 0 : a.input) == null ? void 0 : i.format) ?? ((d = (u = xe.audio) == null ? void 0 : u.input) == null ? void 0 : d.format),
          noise_reduction: ((p = (l = r.audio) == null ? void 0 : l.input) == null ? void 0 : p.noiseReduction) ?? ((h = (f = xe.audio) == null ? void 0 : f.input) == null ? void 0 : h.noiseReduction),
          transcription: ((v = (w = r.audio) == null ? void 0 : w.input) == null ? void 0 : v.transcription) ?? ((O = (b = xe.audio) == null ? void 0 : b.input) == null ? void 0 : O.transcription),
          turn_detection: Wr.buildTurnDetectionConfig((M = (R = r.audio) == null ? void 0 : R.input) == null ? void 0 : M.turnDetection) ?? ((U = (z = xe.audio) == null ? void 0 : z.input) == null ? void 0 : U.turnDetection)
        },
        output: {
          format: ((W = (B = r.audio) == null ? void 0 : B.output) == null ? void 0 : W.format) ?? ((yt = (de = xe.audio) == null ? void 0 : de.output) == null ? void 0 : yt.format),
          voice: ((xn = (qt = r.audio) == null ? void 0 : qt.output) == null ? void 0 : xn.voice) ?? ((Yr = (Kr = xe.audio) == null ? void 0 : Kr.output) == null ? void 0 : Yr.voice),
          speed: ((Qr = (Xr = r.audio) == null ? void 0 : Xr.output) == null ? void 0 : Qr.speed) ?? ((ts = (es = xe.audio) == null ? void 0 : es.output) == null ? void 0 : ts.speed)
        }
      },
      tool_choice: r.toolChoice ?? xe.toolChoice,
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...r.providerData ?? {}
    };
    return r.prompt && (s.prompt = {
      id: r.prompt.promptId,
      version: r.prompt.version,
      variables: r.prompt.variables
    }), r.tools && r.tools.length > 0 && (s.tools = r.tools.map((Xa) => ({
      ...Xa,
      strict: void 0
    }))), s;
  }
  static buildTurnDetectionConfig(t) {
    if (typeof t > "u")
      return;
    const { type: r, createResponse: s, create_response: a, eagerness: i, interruptResponse: u, interrupt_response: d, prefixPaddingMs: l, prefix_padding_ms: p, silenceDurationMs: f, silence_duration_ms: h, threshold: w, idleTimeoutMs: v, idle_timeout_ms: b, ...O } = t, R = {
      type: r,
      create_response: s || a,
      eagerness: i,
      interrupt_response: u || d,
      prefix_padding_ms: l || p,
      silence_duration_ms: f || h,
      idle_timeout_ms: v || b,
      threshold: w,
      ...O
    };
    return Object.keys(R).forEach((M) => {
      R[M] === void 0 && delete R[M];
    }), Object.keys(R).length > 0 ? R : void 0;
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(t) {
    y(this, ue, t);
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(t) {
    var r, s, a;
    if (typeof o(this, ue) > "u" && y(this, ue, null), t === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: "auto"
        }
      });
      return;
    }
    if (o(this, ue) !== null && typeof o(this, ue) != "string" && typeof t != "string") {
      ge.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (t === null) {
      ge.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."), this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: null
        }
      });
      return;
    }
    if (o(this, ue) === null || typeof o(this, ue) == "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: t
        }
      });
      return;
    }
    if ((t == null ? void 0 : t.group_id) !== ((r = o(this, ue)) == null ? void 0 : r.group_id) || (t == null ? void 0 : t.metadata) !== ((s = o(this, ue)) == null ? void 0 : s.metadata) || (t == null ? void 0 : t.workflow_name) !== ((a = o(this, ue)) == null ? void 0 : a.workflow_name)) {
      ge.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(o(this, ue)), JSON.stringify(t));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        type: "realtime",
        tracing: t
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(t) {
    const r = this._getMergedSessionConfig(t);
    this.sendEvent({
      type: "session.update",
      session: r
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(t, r, s = !0) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output: r,
        call_id: t.callId
      }
    });
    try {
      const a = Ks.parse({
        itemId: t.id,
        previousItemId: t.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: t.arguments,
        name: t.name,
        output: r
      });
      this.emit("item_update", a);
    } catch (a) {
      ge.error("Error parsing tool call item", a, t);
    }
    s && this.sendEvent({
      type: "response.create"
    });
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, { commit: r = !1 } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: qa(t)
    }), r && this.sendEvent({
      type: "input_audio_buffer.commit"
    });
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(t, r) {
    const { removals: s, additions: a, updates: i } = Qu(t, r), u = new Set(s.map((l) => l.itemId));
    for (const l of i)
      u.add(l.itemId);
    if (u.size > 0)
      for (const l of u)
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: l
        });
    const d = [...a, ...i];
    for (const l of d)
      if (l.type === "message") {
        const p = {
          type: "message",
          role: l.role,
          content: l.content,
          id: l.itemId
        };
        l.role !== "system" && l.status && (p.status = l.status), this.sendEvent({
          type: "conversation.item.create",
          item: p
        });
      } else l.type === "function_call" && ge.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
  }
  sendMcpResponse(t, r) {
    this.sendEvent({
      type: "conversation.item.create",
      previous_item_id: t.itemId,
      item: {
        type: "mcp_approval_response",
        approval_request_id: t.itemId,
        approve: r
      }
    });
  }
};
rt = new WeakMap(), ln = new WeakMap(), ue = new WeakMap(), pn = new WeakMap();
let Gn = Wr;
var fn, H, hn, st, mn;
class cd extends Gn {
  constructor(t = {}) {
    if (typeof RTCPeerConnection > "u")
      throw new Error("WebRTC is not supported in this environment");
    super(t);
    _(this, "options");
    T(this, fn);
    T(this, H, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0,
      callId: void 0
    });
    T(this, hn);
    T(this, st, !1);
    T(this, mn, !1);
    this.options = t, y(this, fn, t.baseUrl ?? "https://api.openai.com/v1/realtime/calls"), y(this, hn, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current call ID of the WebRTC connection.
   */
  get callId() {
    return o(this, H).callId;
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return o(this, H).status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return o(this, H);
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return o(this, mn);
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    if (o(this, H).status === "connected")
      return;
    o(this, H).status === "connecting" && ge.warn("Realtime connection already in progress. Please await original promise");
    const r = t.model ?? this.currentModel;
    this.currentModel = r;
    const s = t.url ?? o(this, fn), a = await this._getApiKey(t), i = typeof a == "string" && a.startsWith("ek_");
    if (!o(this, hn) && !i)
      throw new ee("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");
    return new Promise(async (u, d) => {
      var l, p;
      try {
        const f = {
          ...t.initialSessionConfig || {},
          model: this.currentModel
        }, h = new URL(s);
        let w = new RTCPeerConnection();
        const v = w.createDataChannel("oai-events");
        let b;
        y(this, H, {
          status: "connecting",
          peerConnection: w,
          dataChannel: v,
          callId: b
        }), this.emit("connection_change", o(this, H).status), v.addEventListener("open", () => {
          y(this, H, {
            status: "connected",
            peerConnection: w,
            dataChannel: v,
            callId: b
          }), this.updateSessionConfig(f), this.emit("connection_change", o(this, H).status), this._onOpen(), u();
        }), v.addEventListener("error", (B) => {
          this.close(), this._onError(B), d(B);
        }), v.addEventListener("message", (B) => {
          this._onMessage(B);
          const { data: W, isGeneric: de } = zr(B);
          !W || de || (W.type === "response.created" ? y(this, st, !0) : W.type === "response.done" && y(this, st, !1), W.type === "session.created" && (this._tracingConfig = W.session.tracing, this._updateTracingConfig(f.tracing ?? "auto")));
        });
        const O = this.options.audioElement ?? document.createElement("audio");
        O.autoplay = !0, w.ontrack = (B) => {
          O.srcObject = B.streams[0];
        };
        const R = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: !0
        });
        w.addTrack(R.getAudioTracks()[0]), this.options.changePeerConnection && (w = await this.options.changePeerConnection(w), y(this, H, { ...o(this, H), peerConnection: w }));
        const M = await w.createOffer();
        if (await w.setLocalDescription(M), !M.sdp)
          throw new Error("Failed to create offer");
        const z = await fetch(h, {
          method: "POST",
          body: M.sdp,
          headers: {
            "Content-Type": "application/sdp",
            Authorization: `Bearer ${a}`,
            "X-OpenAI-Agents-SDK": Ba["X-OpenAI-Agents-SDK"]
          }
        });
        b = (p = (l = z.headers) == null ? void 0 : l.get("Location")) == null ? void 0 : p.split("/").pop(), y(this, H, { ...o(this, H), callId: b });
        const U = {
          type: "answer",
          sdp: await z.text()
        };
        await w.setRemoteDescription(U);
      } catch (f) {
        this.close(), this._onError(f), d(f);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!o(this, H).dataChannel || o(this, H).dataChannel.readyState !== "open")
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    o(this, H).dataChannel.send(JSON.stringify(t));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    y(this, mn, t), o(this, H).peerConnection && o(this, H).peerConnection.getSenders().forEach((s) => {
      s.track && (s.track.enabled = !t);
    });
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (o(this, H).dataChannel && o(this, H).dataChannel.close(), o(this, H).peerConnection) {
      const t = o(this, H).peerConnection;
      t.getSenders().forEach((r) => {
        var s;
        (s = r.track) == null || s.stop();
      }), t.close();
    }
    o(this, H).status !== "disconnected" && (y(this, H, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0,
      callId: void 0
    }), this.emit("connection_change", o(this, H).status), this._onClose());
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    o(this, st) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, st, !1)), this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
}
fn = new WeakMap(), H = new WeakMap(), hn = new WeakMap(), st = new WeakMap(), mn = new WeakMap();
const dd = globalThis.WebSocket;
var Be, Ge, te, gn, De, at, it, Nt, _n, Vn, Va;
class ld extends Gn {
  constructor(t = {}) {
    super(t);
    T(this, Vn);
    T(this, Be);
    T(this, Ge);
    T(this, te, {
      status: "disconnected",
      websocket: void 0
    });
    T(this, gn);
    T(this, De);
    T(this, at);
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */
    _(this, "_firstAudioTimestamp");
    _(this, "_audioLengthMs", 0);
    T(this, it, !1);
    T(this, Nt);
    T(this, _n);
    y(this, Ge, t.url), y(this, gn, t.useInsecureApiKey ?? !1), y(this, Nt, t.createWebSocket), y(this, _n, t.skipOpenEventListeners ?? !1);
  }
  getCommonRequestHeaders() {
    return Ba;
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return o(this, te).status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return o(this, te);
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return o(this, De);
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(t) {
    this.emit("audio", t);
  }
  async connect(t) {
    const r = t.model ?? this.currentModel;
    this.currentModel = r, y(this, Be, await this._getApiKey(t));
    const s = t.url ?? o(this, Ge) ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;
    y(this, Ge, s);
    const a = {
      ...t.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((i, u) => {
      F(this, Vn, Va).call(this, i, u, a).catch(u);
    }), await this.updateSessionConfig(a);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!o(this, te).websocket)
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    o(this, te).websocket.send(JSON.stringify(t));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    var t;
    (t = o(this, te).websocket) == null || t.close(), y(this, De, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, at, void 0);
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(t) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, r = {}) {
    o(this, te).status === "connected" && super.sendAudio(t, r);
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    o(this, it) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, it, !1));
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(t, r = !0) {
    if (t < 0)
      return;
    r && this._cancelResponse();
    const s = this._audioLengthMs ?? Number.POSITIVE_INFINITY, a = Math.max(0, Math.floor(Math.min(t, s)));
    this.emit("audio_interrupted"), this.sendEvent({
      type: "conversation.item.truncate",
      item_id: o(this, De),
      content_index: o(this, at),
      audio_end_ms: a
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt(t = !0) {
    if (!o(this, De) || typeof this._firstAudioTimestamp != "number")
      return;
    const r = Date.now() - this._firstAudioTimestamp;
    r >= 0 && this._interrupt(r, t), y(this, De, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, at, void 0);
  }
}
Be = new WeakMap(), Ge = new WeakMap(), te = new WeakMap(), gn = new WeakMap(), De = new WeakMap(), at = new WeakMap(), it = new WeakMap(), Nt = new WeakMap(), _n = new WeakMap(), Vn = new WeakSet(), Va = async function(t, r, s) {
  if (o(this, te).websocket) {
    t();
    return;
  }
  if (!o(this, Be))
    throw new ee("API key is not set. Please call `connect()` with an API key first.");
  if (!o(this, Be).startsWith("ek_") && !o(this, gn))
    throw new ee("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
  let a = null;
  if (o(this, Nt))
    a = await o(this, Nt).call(this, {
      url: o(this, Ge),
      apiKey: o(this, Be)
    });
  else {
    const u = [
      "realtime",
      // Auth
      "openai-insecure-api-key." + o(this, Be),
      // Version header
      tc
    ];
    a = new dd(o(this, Ge), u);
  }
  y(this, te, {
    status: "connecting",
    websocket: a
  }), this.emit("connection_change", o(this, te).status);
  const i = () => {
    y(this, te, {
      status: "connected",
      websocket: a
    }), this.emit("connection_change", o(this, te).status), this._onOpen(), t();
  };
  o(this, _n) === !0 ? i() : a.addEventListener("open", i), a.addEventListener("error", (u) => {
    this._onError(u), y(this, te, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", o(this, te).status), r(u);
  }), a.addEventListener("message", (u) => {
    var p, f, h, w, v, b, O;
    this._onMessage(u);
    const { data: d, isGeneric: l } = zr(u);
    if (!(!d || l))
      if (d.type === "response.output_audio.delta") {
        y(this, at, d.content_index), y(this, De, d.item_id), this._firstAudioTimestamp === void 0 && (this._firstAudioTimestamp = Date.now(), this._audioLengthMs = 0);
        const R = Ua(d.delta), M = (h = (f = (p = this._rawSessionConfig) == null ? void 0 : p.audio) == null ? void 0 : f.output) == null ? void 0 : h.format;
        if (M && typeof M == "object") {
          const U = M.type;
          if (U === "audio/pcmu" || U === "audio/pcma")
            this._audioLengthMs += R.byteLength / 8;
          else if (U === "audio/pcm") {
            const B = M.rate ?? 24e3;
            this._audioLengthMs += R.byteLength / 2 / B * 1e3;
          } else
            this._audioLengthMs += R.byteLength / 24 / 2;
        } else typeof M == "string" ? M.startsWith("g711_") ? this._audioLengthMs += R.byteLength / 8 : this._audioLengthMs += R.byteLength / 24 / 2 : this._audioLengthMs += R.byteLength / 24 / 2;
        const z = {
          type: "audio",
          data: R,
          responseId: d.response_id
        };
        this._onAudio(z);
      } else if (d.type === "input_audio_buffer.speech_started") {
        const R = ((O = (b = (v = (w = this._rawSessionConfig) == null ? void 0 : w.audio) == null ? void 0 : v.input) == null ? void 0 : b.turn_detection) == null ? void 0 : O.interrupt_response) ?? !1;
        this.interrupt(!R);
      } else d.type === "response.created" ? y(this, it, !0) : d.type === "response.done" ? y(this, it, !1) : d.type === "session.created" && (this._tracingConfig = d.session.tracing, this._updateTracingConfig(s.tracing ?? "auto"));
  }), a.addEventListener("close", () => {
    y(this, te, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", o(this, te).status), this._onClose();
  });
};
const Ha = Symbol("backgroundResult");
function vd(n) {
  return {
    [Ha]: !0,
    content: n
  };
}
function pd(n) {
  return typeof n == "object" && n !== null && Ha in n;
}
function fd(n) {
  return n.type === "function" || n.type === "hosted_tool" && n.name === "hosted_mcp";
}
function hd(n) {
  if (n.type === "function")
    return n;
  if (n.type === "hosted_tool" && n.name === "hosted_mcp") {
    const e = n.providerData.server_url && n.providerData.server_url.length > 0 ? n.providerData.server_url : void 0;
    return {
      type: "mcp",
      server_label: n.providerData.server_label,
      server_url: e,
      headers: n.providerData.headers,
      allowed_tools: n.providerData.allowed_tools,
      require_approval: n.providerData.require_approval
    };
  }
  throw new ee(`Invalid tool type: ${n}`);
}
function md() {
  return JSON.parse(JSON.stringify(xe));
}
var $, N, Dt, D, Pt, Mt, yn, Y, jt, $t, Te, vn, ot, wn, bn, K, Cn, En, Wa, On, Ka, Nr, Ya, Dr;
class wd extends Hn {
  constructor(t, r = {}) {
    super();
    T(this, K);
    _(this, "initialAgent");
    _(this, "options");
    T(this, $);
    T(this, N);
    T(this, Dt);
    T(this, D);
    T(this, Pt, []);
    T(this, Mt);
    T(this, yn, {});
    T(this, Y, []);
    T(this, jt);
    T(this, $t, {});
    T(this, Te, !1);
    // Tracks all MCP tools fetched per server label (from mcp_list_tools results).
    T(this, vn, /* @__PURE__ */ new Map());
    // Tracks currently available MCP tools based on the active agent's configured server_labels.
    T(this, ot, []);
    // Keeps track of the last full session config we sent (camelCase keys) so that
    // subsequent updates (e.g. during agent handoffs) preserve properties that are
    // not explicitly recalculated here (such as inputAudioFormat, outputAudioFormat,
    // modalities, speed, toolChoice, turnDetection, etc.). Without this, updating
    // the agent would drop audio format overrides (e.g. g711_ulaw) and revert to
    // transport defaults causing issues for integrations like Twilio.
    T(this, wn, md());
    T(this, bn, !0);
    this.initialAgent = t, this.options = r, typeof r.transport > "u" && ec() || r.transport === "webrtc" ? y(this, $, new cd()) : r.transport === "websocket" || typeof r.transport > "u" ? y(this, $, new ld()) : y(this, $, r.transport), y(this, N, t), y(this, D, new bt({
      ...r.context ?? {},
      history: o(this, Y)
    })), y(this, Pt, (r.outputGuardrails ?? []).map(sc)), y(this, Mt, rc(r.outputGuardrailSettings ?? {})), y(this, jt, r.historyStoreAudio ?? !1), y(this, bn, r.automaticallyTriggerResponseForMcpToolCalls ?? !0);
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return o(this, $);
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return o(this, N);
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return o(this, D).usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return o(this, D);
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return o(this, $).muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return o(this, Y);
  }
  get availableMcpTools() {
    return o(this, ot);
  }
  async updateAgent(t) {
    return o(this, N).emit("agent_handoff", o(this, D), t), this.emit("agent_handoff", o(this, D), o(this, N), t), await F(this, K, Cn).call(this, t), await o(this, $).updateSessionConfig(await F(this, K, En).call(this)), t;
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    await F(this, K, Cn).call(this, this.initialAgent), F(this, K, Ya).call(this), await o(this, $).connect({
      apiKey: t.apiKey ?? this.options.apiKey,
      model: this.options.model,
      url: t.url,
      initialSessionConfig: await F(this, K, En).call(this, this.options.config)
    }), y(this, Y, []), this.emit("history_updated", o(this, Y));
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(t) {
    let r;
    typeof t == "function" ? r = t(o(this, Y)) : r = t, o(this, $).resetHistory(o(this, Y), r);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r = {}) {
    o(this, $).sendMessage(t, r);
  }
  /**
   * Add image to the session
   * @param image - The image to add.
   */
  addImage(t, { triggerResponse: r = !0 } = {}) {
    o(this, $).addImage(t, { triggerResponse: r });
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    o(this, $).mute(t);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    y(this, $t, {}), o(this, $).close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(t, r = {}) {
    o(this, $).sendAudio(t, r);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    o(this, $).interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(t, r = { alwaysApprove: !1 }) {
    o(this, D).approveTool(t, r);
    const s = o(this, N).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await F(this, K, On).call(this, t.rawItem, s);
    else if (t.rawItem.type === "hosted_tool_call") {
      r.alwaysApprove && ge.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");
      const a = Hs(t);
      o(this, $).sendMcpResponse(a, !0);
    } else
      throw new _e(`Tool ${t.rawItem.name} not found`);
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(t, r = { alwaysReject: !1 }) {
    o(this, D).rejectTool(t, r);
    const s = o(this, N).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await F(this, K, On).call(this, t.rawItem, s);
    else if (t.rawItem.type === "hosted_tool_call") {
      r.alwaysReject && ge.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");
      const a = Hs(t);
      o(this, $).sendMcpResponse(a, !1);
    } else
      throw new _e(`Tool ${t.rawItem.name} not found`);
  }
}
$ = new WeakMap(), N = new WeakMap(), Dt = new WeakMap(), D = new WeakMap(), Pt = new WeakMap(), Mt = new WeakMap(), yn = new WeakMap(), Y = new WeakMap(), jt = new WeakMap(), $t = new WeakMap(), Te = new WeakMap(), vn = new WeakMap(), ot = new WeakMap(), wn = new WeakMap(), bn = new WeakMap(), K = new WeakSet(), Cn = async function(t) {
  y(this, N, t);
  const r = await o(this, N).getEnabledHandoffs(o(this, D)), s = r.map((d) => d.getHandoffAsFunctionTool()), a = (await o(this, N).getAllTools(o(this, D))).filter(fd).map(hd), i = typeof o(this, N).tools < "u" || typeof o(this, N).mcpServers < "u", u = r.length > 0;
  y(this, Dt, i || u ? [...a, ...s] : void 0), F(this, K, Dr).call(this);
}, En = async function(t = {}) {
  const r = await o(this, N).getSystemPrompt(o(this, D)), s = this.options.tracingDisabled ? null : this.options.workflowName ? {
    workflow_name: this.options.workflowName
  } : "auto";
  s !== null && s !== "auto" ? (this.options.groupId && (s.group_id = this.options.groupId), this.options.traceMetadata && (s.metadata = this.options.traceMetadata)) : (this.options.groupId || this.options.traceMetadata) && ge.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");
  const i = {
    ...{
      ...o(this, wn) ?? {},
      ...this.options.config ?? {},
      ...t ?? {}
    },
    instructions: r,
    voice: o(this, N).voice,
    model: this.options.model,
    tools: o(this, Dt),
    tracing: s,
    prompt: typeof o(this, N).prompt == "function" ? await o(this, N).prompt(o(this, D), o(this, N)) : o(this, N).prompt
  };
  return y(this, wn, i), i;
}, Wa = async function(t, r) {
  const s = await r.onInvokeHandoff(o(this, D), t.arguments);
  o(this, N).emit("agent_handoff", o(this, D), s), this.emit("agent_handoff", o(this, D), o(this, N), s), await F(this, K, Cn).call(this, s), await o(this, $).updateSessionConfig(await F(this, K, En).call(this));
  const a = va(s);
  return o(this, $).sendFunctionCallOutput(t, a, !0), s;
}, On = async function(t, r) {
  o(this, D).context.history = JSON.parse(JSON.stringify(o(this, Y)));
  let s = t.arguments;
  if (r.parameters && (ht(r.parameters) ? s = r.parameters.parse(s) : s = JSON.parse(s)), await r.needsApproval(o(this, D), s, t.callId)) {
    const d = this.context.isToolApproved({
      toolName: r.name,
      callId: t.callId
    });
    if (d === !1) {
      this.emit("agent_tool_start", o(this, D), o(this, N), r, {
        toolCall: t
      }), o(this, N).emit("agent_tool_start", o(this, D), r, {
        toolCall: t
      });
      const l = "Tool execution was not approved.";
      o(this, $).sendFunctionCallOutput(t, l, !0), this.emit("agent_tool_end", o(this, D), o(this, N), r, l, { toolCall: t }), o(this, N).emit("agent_tool_end", o(this, D), r, l, {
        toolCall: t
      });
      return;
    } else if (typeof d > "u") {
      this.emit("tool_approval_requested", o(this, D), o(this, N), {
        type: "function_approval",
        tool: r,
        approvalItem: new ye(t, o(this, N))
      });
      return;
    }
  }
  this.emit("agent_tool_start", o(this, D), o(this, N), r, {
    toolCall: t
  }), o(this, N).emit("agent_tool_start", o(this, D), r, {
    toolCall: t
  }), o(this, D).context.history = JSON.parse(JSON.stringify(o(this, Y)));
  const i = await r.invoke(o(this, D), t.arguments, {
    toolCall: t
  });
  let u;
  pd(i) ? (u = Ve(i.content), o(this, $).sendFunctionCallOutput(t, u, !1)) : (u = Ve(i), o(this, $).sendFunctionCallOutput(t, u, !0)), this.emit("agent_tool_end", o(this, D), o(this, N), r, u, { toolCall: t }), o(this, N).emit("agent_tool_end", o(this, D), r, u, { toolCall: t });
}, Ka = async function(t) {
  const r = await o(this, N).getEnabledHandoffs(o(this, D)), s = new Map(r.map((d) => [d.toolName, d])), a = await o(this, N).getAllTools(o(this, D)), i = new Map(a.map((d) => [d.name, d])), u = s.get(t.name);
  if (u)
    await F(this, K, Wa).call(this, t, u);
  else {
    const d = i.get(t.name);
    if (d && d.type === "function")
      await F(this, K, On).call(this, t, d);
    else
      throw new _e(`Tool ${t.name} not found`);
  }
}, Nr = async function(t, r, s) {
  if (o(this, Pt).length === 0)
    return;
  const a = {
    agent: o(this, N),
    agentOutput: t,
    context: o(this, D)
  }, u = (await Promise.all(o(this, Pt).map((d) => d.run(a)))).find((d) => d.output.tripwireTriggered);
  if (u) {
    if (o(this, $t)[r])
      return;
    o(this, $t)[r] = !0;
    const d = new wr(`Output guardrail triggered: ${JSON.stringify(u.output.outputInfo)}`, u);
    this.emit("guardrail_tripped", o(this, D), o(this, N), d, {
      itemId: s
    }), this.interrupt();
    const l = ac(u);
    this.sendMessage(l);
    return;
  }
}, Ya = function() {
  o(this, $).on("*", (s) => {
    if (this.emit("transport_event", s), s.type === "conversation.item.input_audio_transcription.completed")
      try {
        const a = s;
        y(this, Y, Vs(o(this, Y), a, o(this, jt))), o(this, D).context.history = o(this, Y), this.emit("history_updated", o(this, Y));
      } catch (a) {
        this.emit("error", {
          type: "error",
          error: a
        });
      }
  }), o(this, $).on("mcp_tools_listed", ({ serverLabel: s, tools: a }) => {
    try {
      o(this, vn).set(s, a ?? []), F(this, K, Dr).call(this);
    } catch (i) {
      this.emit("error", { type: "error", error: i });
    }
  }), o(this, $).on("audio", (s) => {
    o(this, Te) || (y(this, Te, !0), this.emit("audio_start", o(this, D), o(this, N))), this.emit("audio", s);
  }), o(this, $).on("turn_started", () => {
    y(this, Te, !1), this.emit("agent_start", o(this, D), o(this, N)), o(this, N).emit("agent_start", o(this, D), o(this, N));
  }), o(this, $).on("turn_done", (s) => {
    const a = s.response.output[s.response.output.length - 1], i = Ja(a) ?? "", u = (a == null ? void 0 : a.id) ?? "";
    this.emit("agent_end", o(this, D), o(this, N), i), o(this, N).emit("agent_end", o(this, D), i), F(this, K, Nr).call(this, i, s.response.id, u);
  }), o(this, $).on("audio_done", () => {
    o(this, Te) && y(this, Te, !1), this.emit("audio_stopped", o(this, D), o(this, N));
  });
  let t = 0, r;
  o(this, $).on("audio_transcript_delta", (s) => {
    try {
      const a = s.delta, i = s.itemId, u = s.responseId;
      r !== i && (r = i, t = 0);
      const l = (o(this, yn)[i] ?? "") + a;
      if (o(this, yn)[i] = l, o(this, Mt).debounceTextLength < 0)
        return;
      const p = Math.floor(l.length / o(this, Mt).debounceTextLength);
      p > t && (t = p, F(this, K, Nr).call(this, l, u, i));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, $).on("item_update", (s) => {
    try {
      const a = !o(this, Y).some((i) => i.itemId === s.itemId);
      if (y(this, Y, Vs(o(this, Y), s, o(this, jt))), o(this, D).context.history = o(this, Y), a) {
        const i = o(this, Y).find((u) => u.itemId === s.itemId);
        i && this.emit("history_added", i);
      }
      this.emit("history_updated", o(this, Y));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, $).on("item_deleted", (s) => {
    try {
      y(this, Y, o(this, Y).filter((a) => a.itemId !== s.itemId)), o(this, D).context.history = o(this, Y), this.emit("history_updated", o(this, Y));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, $).on("function_call", async (s) => {
    try {
      await F(this, K, Ka).call(this, s);
    } catch (a) {
      ge.error("Error handling function call", a), this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, $).on("usage_update", (s) => {
    o(this, D).usage.add(s);
  }), o(this, $).on("audio_interrupted", () => {
    o(this, Te) && y(this, Te, !1), this.emit("audio_interrupted", o(this, D), o(this, N));
  }), o(this, $).on("error", (s) => {
    this.emit("error", s);
  }), o(this, $).on("mcp_tool_call_completed", (s) => {
    this.emit("mcp_tool_call_completed", o(this, D), o(this, N), s), o(this, bn) && o(this, $).sendEvent({
      type: "response.create"
    });
  }), o(this, $).on("mcp_approval_request", (s) => {
    this.emit("tool_approval_requested", o(this, D), o(this, N), {
      type: "mcp_approval_request",
      approvalItem: nc(o(this, N), s)
    });
  });
}, /**
 * Recomputes the currently available MCP tools based on the current agent's active
 * MCP server configurations and the cached per-server tool listings. Emits
 * `mcp_tools_changed` if the set changed.
 */
Dr = function() {
  var d;
  const t = (d = o(this, Dt)) == null ? void 0 : d.filter((l) => l.type === "mcp"), r = (l) => {
    const p = l.allowed_tools;
    if (p) {
      if (Array.isArray(p))
        return p;
      if (p && Array.isArray(p.tool_names))
        return p.tool_names;
    }
  }, s = /* @__PURE__ */ new Map();
  for (const l of t) {
    const p = o(this, vn).get(l.server_label) ?? [], f = r(l);
    for (const h of p)
      f && !f.includes(h.name) || s.has(h.name) || s.set(h.name, h);
  }
  const a = Array.from(s.values()), i = o(this, ot);
  (i.length !== a.length || JSON.stringify(i.map((l) => l.name).sort()) !== JSON.stringify(a.map((l) => l.name).sort())) && (y(this, ot, a), this.emit("mcp_tools_changed", o(this, ot)));
};
const bd = {
  base64ToArrayBuffer: Ua,
  arrayBufferToBase64: qa,
  getLastTextFromAudioOutputMessage: Ja
};
export {
  ud as DEFAULT_OPENAI_REALTIME_MODEL,
  xe as DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  _e as ModelBehaviorError,
  Gn as OpenAIRealtimeBase,
  cd as OpenAIRealtimeWebRTC,
  ld as OpenAIRealtimeWebSocket,
  wr as OutputGuardrailTripwireTriggered,
  yd as RealtimeAgent,
  wd as RealtimeSession,
  ee as UserError,
  vd as backgroundResult,
  pd as isBackgroundResult,
  br as tool,
  bd as utils
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbmFpLXJlYWx0aW1lLWFnZW50cy5tanMiLCJzb3VyY2VzIjpbIi4uL21ldGFkYXRhLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdXRpbHMvc2FmZUV4ZWN1dGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvcGFyc2VyLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvT3B0aW9ucy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3V0aWwubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9SZWZzLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvZXJyb3JNZXNzYWdlcy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2hlbHBlcnMvdXRpbC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy96b2QvZGlzdC9lc20vdjMvWm9kRXJyb3IuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2xvY2FsZXMvZW4uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2Vycm9ycy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy96b2QvZGlzdC9lc20vdjMvaGVscGVycy9wYXJzZVV0aWwuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3pvZC9kaXN0L2VzbS92My90eXBlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9hbnkubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2FycmF5Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9iaWdpbnQubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2Jvb2xlYW4ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2JyYW5kZWQubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2NhdGNoLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9kYXRlLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9kZWZhdWx0Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9lZmZlY3RzLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9lbnVtLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9pbnRlcnNlY3Rpb24ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2xpdGVyYWwubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3N0cmluZy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcmVjb3JkLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9tYXAubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL25hdGl2ZUVudW0ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL25ldmVyLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9udWxsLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy91bmlvbi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvbnVsbGFibGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL251bWJlci5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvb2JqZWN0Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9vcHRpb25hbC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcGlwZWxpbmUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3Byb21pc2UubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3NldC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvdHVwbGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3VuZGVmaW5lZC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvdW5rbm93bi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcmVhZG9ubHkubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZURlZi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3pvZFRvSnNvblNjaGVtYS5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9SZXNwb25zZXNQYXJzZXIubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9oZWxwZXJzL3pvZC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2Vycm9ycy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3V0aWxzL3R5cGVHdWFyZHMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC91dGlscy90b29scy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvY29uZmlnLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvbG9nZ2VyLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdXRpbHMvc21hcnRTdHJpbmcubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90b29sLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvbWNwLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3Qvc2hpbXMvc2hpbXMtYnJvd3Nlci5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvY29udGV4dC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvcHJvY2Vzc29yLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHJhY2luZy91dGlscy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvc3BhbnMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90cmFjaW5nL3RyYWNlcy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvcHJvdmlkZXIubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90cmFjaW5nL2NyZWF0ZVNwYW5zLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHJhY2luZy9pbmRleC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2xpZmVjeWNsZS5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2RlZmF1bHRNb2RlbC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2hhbmRvZmYubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9ndWFyZHJhaWwubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9wcm92aWRlcnMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90eXBlcy9wcm90b2NvbC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3VzYWdlLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvcnVuQ29udGV4dC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3Jlc3VsdC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3V0aWxzL3NlcmlhbGl6ZS5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2l0ZW1zLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdXRpbHMvbWVzc2FnZXMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9ldmVudHMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9ydW5JbXBsZW1lbnRhdGlvbi5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3J1blN0YXRlLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvcnVuLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvYWdlbnQubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9pbmRleC5tanMiLCIuLi91dGlscy5tanMiLCIuLi9yZWFsdGltZUFnZW50Lm1qcyIsIi4uL2d1YXJkcmFpbC5tanMiLCIuLi9jbGllbnRNZXNzYWdlcy5tanMiLCIuLi9pdGVtcy5tanMiLCIuLi9sb2dnZXIubWpzIiwiLi4vb3BlbmFpUmVhbHRpbWVFdmVudHMubWpzIiwiLi4vb3BlbmFpUmVhbHRpbWVCYXNlLm1qcyIsIi4uL29wZW5haVJlYWx0aW1lV2ViUnRjLm1qcyIsIi4uL3NoaW1zL3NoaW1zLWJyb3dzZXIubWpzIiwiLi4vb3BlbmFpUmVhbHRpbWVXZWJzb2NrZXQubWpzIiwiLi4vdG9vbC5tanMiLCIuLi9yZWFsdGltZVNlc3Npb24ubWpzIiwiLi4vaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZFxuZXhwb3J0IGNvbnN0IE1FVEFEQVRBID0ge1xuICAgIFwibmFtZVwiOiBcIkBvcGVuYWkvYWdlbnRzLXJlYWx0aW1lXCIsXG4gICAgXCJ2ZXJzaW9uXCI6IFwiMC4xLjhcIixcbiAgICBcInZlcnNpb25zXCI6IHtcbiAgICAgICAgXCJAb3BlbmFpL2FnZW50cy1yZWFsdGltZVwiOiBcIjAuMS44XCIsXG4gICAgICAgIFwiQG9wZW5haS9hZ2VudHMtY29yZVwiOiBcIndvcmtzcGFjZToqXCJcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgTUVUQURBVEE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhZGF0YS5tanMubWFwIiwiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVFeGVjdXRlKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFtudWxsLCBhd2FpdCBmbigpXTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBbZXJyb3IsIG51bGxdO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhZmVFeGVjdXRlLm1qcy5tYXAiLCJpbXBvcnQgeyBDb250ZW50RmlsdGVyRmluaXNoUmVhc29uRXJyb3IsIExlbmd0aEZpbmlzaFJlYXNvbkVycm9yLCBPcGVuQUlFcnJvciB9IGZyb20gXCIuLi9lcnJvci5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc0NoYXRDb21wbGV0aW9uRnVuY3Rpb25Ub29sKHRvb2wpIHtcbiAgICByZXR1cm4gdG9vbCAhPT0gdW5kZWZpbmVkICYmICdmdW5jdGlvbicgaW4gdG9vbCAmJiB0b29sLmZ1bmN0aW9uICE9PSB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVBhcnNlYWJsZVJlc3BvbnNlRm9ybWF0KHJlc3BvbnNlX2Zvcm1hdCwgcGFyc2VyKSB7XG4gICAgY29uc3Qgb2JqID0geyAuLi5yZXNwb25zZV9mb3JtYXQgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcbiAgICAgICAgJGJyYW5kOiB7XG4gICAgICAgICAgICB2YWx1ZTogJ2F1dG8tcGFyc2VhYmxlLXJlc3BvbnNlLWZvcm1hdCcsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlUmF3OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VyLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlVGV4dEZvcm1hdChyZXNwb25zZV9mb3JtYXQsIHBhcnNlcikge1xuICAgIGNvbnN0IG9iaiA9IHsgLi4ucmVzcG9uc2VfZm9ybWF0IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCB7XG4gICAgICAgICRicmFuZDoge1xuICAgICAgICAgICAgdmFsdWU6ICdhdXRvLXBhcnNlYWJsZS1yZXNwb25zZS1mb3JtYXQnLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRwYXJzZVJhdzoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlcixcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvUGFyc2FibGVSZXNwb25zZUZvcm1hdChyZXNwb25zZV9mb3JtYXQpIHtcbiAgICByZXR1cm4gcmVzcG9uc2VfZm9ybWF0Py5bJyRicmFuZCddID09PSAnYXV0by1wYXJzZWFibGUtcmVzcG9uc2UtZm9ybWF0Jztcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlVG9vbCh0b29sLCB7IHBhcnNlciwgY2FsbGJhY2ssIH0pIHtcbiAgICBjb25zdCBvYmogPSB7IC4uLnRvb2wgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcbiAgICAgICAgJGJyYW5kOiB7XG4gICAgICAgICAgICB2YWx1ZTogJ2F1dG8tcGFyc2VhYmxlLXRvb2wnLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRwYXJzZVJhdzoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlcixcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICAkY2FsbGJhY2s6IHtcbiAgICAgICAgICAgIHZhbHVlOiBjYWxsYmFjayxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvUGFyc2FibGVUb29sKHRvb2wpIHtcbiAgICByZXR1cm4gdG9vbD8uWyckYnJhbmQnXSA9PT0gJ2F1dG8tcGFyc2VhYmxlLXRvb2wnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlUGFyc2VDaGF0Q29tcGxldGlvbihjb21wbGV0aW9uLCBwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtcyB8fCAhaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbXBsZXRpb24sXG4gICAgICAgICAgICBjaG9pY2VzOiBjb21wbGV0aW9uLmNob2ljZXMubWFwKChjaG9pY2UpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnRUb29sQ2FsbHNBcmVDaGF0Q29tcGxldGlvbkZ1bmN0aW9uVG9vbENhbGxzKGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmNob2ljZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY2hvaWNlLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4oY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sX2NhbGxzOiBjaG9pY2UubWVzc2FnZS50b29sX2NhbGxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VDaGF0Q29tcGxldGlvbihjb21wbGV0aW9uLCBwYXJhbXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ2hhdENvbXBsZXRpb24oY29tcGxldGlvbiwgcGFyYW1zKSB7XG4gICAgY29uc3QgY2hvaWNlcyA9IGNvbXBsZXRpb24uY2hvaWNlcy5tYXAoKGNob2ljZSkgPT4ge1xuICAgICAgICBpZiAoY2hvaWNlLmZpbmlzaF9yZWFzb24gPT09ICdsZW5ndGgnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTGVuZ3RoRmluaXNoUmVhc29uRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hvaWNlLmZpbmlzaF9yZWFzb24gPT09ICdjb250ZW50X2ZpbHRlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb250ZW50RmlsdGVyRmluaXNoUmVhc29uRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRUb29sQ2FsbHNBcmVDaGF0Q29tcGxldGlvbkZ1bmN0aW9uVG9vbENhbGxzKGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uY2hvaWNlLFxuICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgIC4uLmNob2ljZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIC4uLihjaG9pY2UubWVzc2FnZS50b29sX2NhbGxzID9cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbF9jYWxsczogY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscz8ubWFwKCh0b29sQ2FsbCkgPT4gcGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSkgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBwYXJzZWQ6IGNob2ljZS5tZXNzYWdlLmNvbnRlbnQgJiYgIWNob2ljZS5tZXNzYWdlLnJlZnVzYWwgP1xuICAgICAgICAgICAgICAgICAgICBwYXJzZVJlc3BvbnNlRm9ybWF0KHBhcmFtcywgY2hvaWNlLm1lc3NhZ2UuY29udGVudClcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4geyAuLi5jb21wbGV0aW9uLCBjaG9pY2VzIH07XG59XG5mdW5jdGlvbiBwYXJzZVJlc3BvbnNlRm9ybWF0KHBhcmFtcywgY29udGVudCkge1xuICAgIGlmIChwYXJhbXMucmVzcG9uc2VfZm9ybWF0Py50eXBlICE9PSAnanNvbl9zY2hlbWEnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnJlc3BvbnNlX2Zvcm1hdD8udHlwZSA9PT0gJ2pzb25fc2NoZW1hJykge1xuICAgICAgICBpZiAoJyRwYXJzZVJhdycgaW4gcGFyYW1zLnJlc3BvbnNlX2Zvcm1hdCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VfZm9ybWF0ID0gcGFyYW1zLnJlc3BvbnNlX2Zvcm1hdDtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZV9mb3JtYXQuJHBhcnNlUmF3KGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGNvbnRlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHBhcnNlVG9vbENhbGwocGFyYW1zLCB0b29sQ2FsbCkge1xuICAgIGNvbnN0IGlucHV0VG9vbCA9IHBhcmFtcy50b29scz8uZmluZCgoaW5wdXRUb29sKSA9PiBpc0NoYXRDb21wbGV0aW9uRnVuY3Rpb25Ub29sKGlucHV0VG9vbCkgJiYgaW5wdXRUb29sLmZ1bmN0aW9uPy5uYW1lID09PSB0b29sQ2FsbC5mdW5jdGlvbi5uYW1lKTsgLy8gVFMgZG9lc24ndCBuYXJyb3cgYmFzZWQgb24gaXNDaGF0Q29tcGxldGlvblRvb2xcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi50b29sQ2FsbCxcbiAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgIC4uLnRvb2xDYWxsLmZ1bmN0aW9uLFxuICAgICAgICAgICAgcGFyc2VkX2FyZ3VtZW50czogaXNBdXRvUGFyc2FibGVUb29sKGlucHV0VG9vbCkgPyBpbnB1dFRvb2wuJHBhcnNlUmF3KHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICA6IGlucHV0VG9vbD8uZnVuY3Rpb24uc3RyaWN0ID8gSlNPTi5wYXJzZSh0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFBhcnNlVG9vbENhbGwocGFyYW1zLCB0b29sQ2FsbCkge1xuICAgIGlmICghcGFyYW1zIHx8ICEoJ3Rvb2xzJyBpbiBwYXJhbXMpIHx8ICFwYXJhbXMudG9vbHMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dFRvb2wgPSBwYXJhbXMudG9vbHM/LmZpbmQoKGlucHV0VG9vbCkgPT4gaXNDaGF0Q29tcGxldGlvbkZ1bmN0aW9uVG9vbChpbnB1dFRvb2wpICYmIGlucHV0VG9vbC5mdW5jdGlvbj8ubmFtZSA9PT0gdG9vbENhbGwuZnVuY3Rpb24ubmFtZSk7XG4gICAgcmV0dXJuIChpc0NoYXRDb21wbGV0aW9uRnVuY3Rpb25Ub29sKGlucHV0VG9vbCkgJiZcbiAgICAgICAgKGlzQXV0b1BhcnNhYmxlVG9vbChpbnB1dFRvb2wpIHx8IGlucHV0VG9vbD8uZnVuY3Rpb24uc3RyaWN0IHx8IGZhbHNlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtcykge1xuICAgIGlmIChpc0F1dG9QYXJzYWJsZVJlc3BvbnNlRm9ybWF0KHBhcmFtcy5yZXNwb25zZV9mb3JtYXQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gKHBhcmFtcy50b29scz8uc29tZSgodCkgPT4gaXNBdXRvUGFyc2FibGVUb29sKHQpIHx8ICh0LnR5cGUgPT09ICdmdW5jdGlvbicgJiYgdC5mdW5jdGlvbi5zdHJpY3QgPT09IHRydWUpKSA/PyBmYWxzZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VG9vbENhbGxzQXJlQ2hhdENvbXBsZXRpb25GdW5jdGlvblRvb2xDYWxscyh0b29sQ2FsbHMpIHtcbiAgICBmb3IgKGNvbnN0IHRvb2xDYWxsIG9mIHRvb2xDYWxscyB8fCBbXSkge1xuICAgICAgICBpZiAodG9vbENhbGwudHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBDdXJyZW50bHkgb25seSBcXGBmdW5jdGlvblxcYCB0b29sIGNhbGxzIGFyZSBzdXBwb3J0ZWQ7IFJlY2VpdmVkIFxcYCR7dG9vbENhbGwudHlwZX1cXGBgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUlucHV0VG9vbHModG9vbHMpIHtcbiAgICBmb3IgKGNvbnN0IHRvb2wgb2YgdG9vbHMgPz8gW10pIHtcbiAgICAgICAgaWYgKHRvb2wudHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBDdXJyZW50bHkgb25seSBcXGBmdW5jdGlvblxcYCB0b29sIHR5cGVzIHN1cHBvcnQgYXV0by1wYXJzaW5nOyBSZWNlaXZlZCBcXGAke3Rvb2wudHlwZX1cXGBgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9vbC5mdW5jdGlvbi5zdHJpY3QgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgVGhlIFxcYCR7dG9vbC5mdW5jdGlvbi5uYW1lfVxcYCB0b29sIGlzIG5vdCBtYXJrZWQgd2l0aCBcXGBzdHJpY3Q6IHRydWVcXGAuIE9ubHkgc3RyaWN0IGZ1bmN0aW9uIHRvb2xzIGNhbiBiZSBhdXRvLXBhcnNlZGApO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VyLm1qcy5tYXAiLCJleHBvcnQgY29uc3QgaWdub3JlT3ZlcnJpZGUgPSBTeW1ib2woJ0xldCB6b2RUb0pzb25TY2hlbWEgZGVjaWRlIG9uIHdoaWNoIHBhcnNlciB0byB1c2UnKTtcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAkcmVmU3RyYXRlZ3k6ICdyb290JyxcbiAgICBlZmZlY3RTdHJhdGVneTogJ2lucHV0JyxcbiAgICBwaXBlU3RyYXRlZ3k6ICdhbGwnLFxuICAgIGRhdGVTdHJhdGVneTogJ2Zvcm1hdDpkYXRlLXRpbWUnLFxuICAgIG1hcFN0cmF0ZWd5OiAnZW50cmllcycsXG4gICAgbnVsbGFibGVTdHJhdGVneTogJ2Zyb20tdGFyZ2V0JyxcbiAgICByZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3k6ICdwYXNzdGhyb3VnaCcsXG4gICAgZGVmaW5pdGlvblBhdGg6ICdkZWZpbml0aW9ucycsXG4gICAgdGFyZ2V0OiAnanNvblNjaGVtYTcnLFxuICAgIHN0cmljdFVuaW9uczogZmFsc2UsXG4gICAgZXJyb3JNZXNzYWdlczogZmFsc2UsXG4gICAgbWFya2Rvd25EZXNjcmlwdGlvbjogZmFsc2UsXG4gICAgcGF0dGVyblN0cmF0ZWd5OiAnZXNjYXBlJyxcbiAgICBhcHBseVJlZ2V4RmxhZ3M6IGZhbHNlLFxuICAgIGVtYWlsU3RyYXRlZ3k6ICdmb3JtYXQ6ZW1haWwnLFxuICAgIGJhc2U2NFN0cmF0ZWd5OiAnY29udGVudEVuY29kaW5nOmJhc2U2NCcsXG4gICAgbmFtZVN0cmF0ZWd5OiAncmVmJyxcbn07XG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdE9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gYWRkIGBkZWZpbml0aW9uc2AgaGVyZSBhcyB3ZSBtYXkgbXV0YXRlIGl0XG4gICAgcmV0dXJuICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgP1xuICAgICAgICB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgICAgIGJhc2VQYXRoOiBbJyMnXSxcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7fSxcbiAgICAgICAgICAgIG5hbWU6IG9wdGlvbnMsXG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgICAgIGJhc2VQYXRoOiBbJyMnXSxcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7fSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wdGlvbnMubWpzLm1hcCIsImV4cG9ydCBjb25zdCB6b2REZWYgPSAoem9kU2NoZW1hKSA9PiB7XG4gICAgcmV0dXJuICdfZGVmJyBpbiB6b2RTY2hlbWEgPyB6b2RTY2hlbWEuX2RlZiA6IHpvZFNjaGVtYTtcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eU9iaihvYmopIHtcbiAgICBpZiAoIW9iailcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZm9yIChjb25zdCBfayBpbiBvYmopXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwubWpzLm1hcCIsImltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vT3B0aW9ucy5tanNcIjtcbmltcG9ydCB7IHpvZERlZiB9IGZyb20gXCIuL3V0aWwubWpzXCI7XG5leHBvcnQgY29uc3QgZ2V0UmVmcyA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgX29wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IF9vcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgIFsuLi5fb3B0aW9ucy5iYXNlUGF0aCwgX29wdGlvbnMuZGVmaW5pdGlvblBhdGgsIF9vcHRpb25zLm5hbWVdXG4gICAgICAgIDogX29wdGlvbnMuYmFzZVBhdGg7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uX29wdGlvbnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBjdXJyZW50UGF0aCxcbiAgICAgICAgcHJvcGVydHlQYXRoOiB1bmRlZmluZWQsXG4gICAgICAgIHNlZW5SZWZzOiBuZXcgU2V0KCksXG4gICAgICAgIHNlZW46IG5ldyBNYXAoT2JqZWN0LmVudHJpZXMoX29wdGlvbnMuZGVmaW5pdGlvbnMpLm1hcCgoW25hbWUsIGRlZl0pID0+IFtcbiAgICAgICAgICAgIHpvZERlZihkZWYpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRlZjogem9kRGVmKGRlZiksXG4gICAgICAgICAgICAgICAgcGF0aDogWy4uLl9vcHRpb25zLmJhc2VQYXRoLCBfb3B0aW9ucy5kZWZpbml0aW9uUGF0aCwgbmFtZV0sXG4gICAgICAgICAgICAgICAgLy8gUmVzb2x1dGlvbiBvZiByZWZlcmVuY2VzIHdpbGwgYmUgZm9yY2VkIGV2ZW4gdGhvdWdoIHNlZW4sIHNvIGl0J3Mgb2sgdGhhdCB0aGUgc2NoZW1hIGlzIHVuZGVmaW5lZCBoZXJlIGZvciBub3cuXG4gICAgICAgICAgICAgICAganNvblNjaGVtYTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSkpLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVmcy5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZEVycm9yTWVzc2FnZShyZXMsIGtleSwgZXJyb3JNZXNzYWdlLCByZWZzKSB7XG4gICAgaWYgKCFyZWZzPy5lcnJvck1lc3NhZ2VzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgICByZXMuZXJyb3JNZXNzYWdlID0ge1xuICAgICAgICAgICAgLi4ucmVzLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgIFtrZXldOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBrZXksIHZhbHVlLCBlcnJvck1lc3NhZ2UsIHJlZnMpIHtcbiAgICByZXNba2V5XSA9IHZhbHVlO1xuICAgIGFkZEVycm9yTWVzc2FnZShyZXMsIGtleSwgZXJyb3JNZXNzYWdlLCByZWZzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yTWVzc2FnZXMubWpzLm1hcCIsImV4cG9ydCB2YXIgdXRpbDtcbihmdW5jdGlvbiAodXRpbCkge1xuICAgIHV0aWwuYXNzZXJ0RXF1YWwgPSAoXykgPT4geyB9O1xuICAgIGZ1bmN0aW9uIGFzc2VydElzKF9hcmcpIHsgfVxuICAgIHV0aWwuYXNzZXJ0SXMgPSBhc3NlcnRJcztcbiAgICBmdW5jdGlvbiBhc3NlcnROZXZlcihfeCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gICAgdXRpbC5hc3NlcnROZXZlciA9IGFzc2VydE5ldmVyO1xuICAgIHV0aWwuYXJyYXlUb0VudW0gPSAoaXRlbXMpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgb2JqW2l0ZW1dID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgdXRpbC5nZXRWYWxpZEVudW1WYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbGlkS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhvYmopLmZpbHRlcigoaykgPT4gdHlwZW9mIG9ialtvYmpba11dICE9PSBcIm51bWJlclwiKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIHZhbGlkS2V5cykge1xuICAgICAgICAgICAgZmlsdGVyZWRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKGZpbHRlcmVkKTtcbiAgICB9O1xuICAgIHV0aWwub2JqZWN0VmFsdWVzID0gKG9iaikgPT4ge1xuICAgICAgICByZXR1cm4gdXRpbC5vYmplY3RLZXlzKG9iaikubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW2VdO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHV0aWwub2JqZWN0S2V5cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gXCJmdW5jdGlvblwiIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA/IChvYmopID0+IE9iamVjdC5rZXlzKG9iaikgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgIDogKG9iamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgIH07XG4gICAgdXRpbC5maW5kID0gKGFyciwgY2hlY2tlcikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tlcihpdGVtKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgdXRpbC5pc0ludGVnZXIgPSB0eXBlb2YgTnVtYmVyLmlzSW50ZWdlciA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gKHZhbCkgPT4gTnVtYmVyLmlzSW50ZWdlcih2YWwpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA6ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzRmluaXRlKHZhbCkgJiYgTWF0aC5mbG9vcih2YWwpID09PSB2YWw7XG4gICAgZnVuY3Rpb24gam9pblZhbHVlcyhhcnJheSwgc2VwYXJhdG9yID0gXCIgfCBcIikge1xuICAgICAgICByZXR1cm4gYXJyYXkubWFwKCh2YWwpID0+ICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiID8gYCcke3ZhbH0nYCA6IHZhbCkpLmpvaW4oc2VwYXJhdG9yKTtcbiAgICB9XG4gICAgdXRpbC5qb2luVmFsdWVzID0gam9pblZhbHVlcztcbiAgICB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciA9IChfLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbn0pKHV0aWwgfHwgKHV0aWwgPSB7fSkpO1xuZXhwb3J0IHZhciBvYmplY3RVdGlsO1xuKGZ1bmN0aW9uIChvYmplY3RVdGlsKSB7XG4gICAgb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyA9IChmaXJzdCwgc2Vjb25kKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5maXJzdCxcbiAgICAgICAgICAgIC4uLnNlY29uZCwgLy8gc2Vjb25kIG92ZXJ3cml0ZXMgZmlyc3RcbiAgICAgICAgfTtcbiAgICB9O1xufSkob2JqZWN0VXRpbCB8fCAob2JqZWN0VXRpbCA9IHt9KSk7XG5leHBvcnQgY29uc3QgWm9kUGFyc2VkVHlwZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwic3RyaW5nXCIsXG4gICAgXCJuYW5cIixcbiAgICBcIm51bWJlclwiLFxuICAgIFwiaW50ZWdlclwiLFxuICAgIFwiZmxvYXRcIixcbiAgICBcImJvb2xlYW5cIixcbiAgICBcImRhdGVcIixcbiAgICBcImJpZ2ludFwiLFxuICAgIFwic3ltYm9sXCIsXG4gICAgXCJmdW5jdGlvblwiLFxuICAgIFwidW5kZWZpbmVkXCIsXG4gICAgXCJudWxsXCIsXG4gICAgXCJhcnJheVwiLFxuICAgIFwib2JqZWN0XCIsXG4gICAgXCJ1bmtub3duXCIsXG4gICAgXCJwcm9taXNlXCIsXG4gICAgXCJ2b2lkXCIsXG4gICAgXCJuZXZlclwiLFxuICAgIFwibWFwXCIsXG4gICAgXCJzZXRcIixcbl0pO1xuZXhwb3J0IGNvbnN0IGdldFBhcnNlZFR5cGUgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHQgPSB0eXBlb2YgZGF0YTtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zdHJpbmc7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNOYU4oZGF0YSkgPyBab2RQYXJzZWRUeXBlLm5hbiA6IFpvZFBhcnNlZFR5cGUubnVtYmVyO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYm9vbGVhbjtcbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbjtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYmlnaW50O1xuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zeW1ib2w7XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS50aGVuICYmIHR5cGVvZiBkYXRhLnRoZW4gPT09IFwiZnVuY3Rpb25cIiAmJiBkYXRhLmNhdGNoICYmIHR5cGVvZiBkYXRhLmNhdGNoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5wcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm1hcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgU2V0ICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIERhdGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5kYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUub2JqZWN0O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5rbm93bjtcbiAgICB9XG59O1xuIiwiaW1wb3J0IHsgdXRpbCB9IGZyb20gXCIuL2hlbHBlcnMvdXRpbC5qc1wiO1xuZXhwb3J0IGNvbnN0IFpvZElzc3VlQ29kZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwiaW52YWxpZF90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2xpdGVyYWxcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW52YWxpZF91bmlvblwiLFxuICAgIFwiaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yXCIsXG4gICAgXCJpbnZhbGlkX2VudW1fdmFsdWVcIixcbiAgICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gICAgXCJpbnZhbGlkX2FyZ3VtZW50c1wiLFxuICAgIFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiLFxuICAgIFwiaW52YWxpZF9kYXRlXCIsXG4gICAgXCJpbnZhbGlkX3N0cmluZ1wiLFxuICAgIFwidG9vX3NtYWxsXCIsXG4gICAgXCJ0b29fYmlnXCIsXG4gICAgXCJpbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlc1wiLFxuICAgIFwibm90X211bHRpcGxlX29mXCIsXG4gICAgXCJub3RfZmluaXRlXCIsXG5dKTtcbmV4cG9ydCBjb25zdCBxdW90ZWxlc3NKc29uID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpO1xuICAgIHJldHVybiBqc29uLnJlcGxhY2UoL1wiKFteXCJdKylcIjovZywgXCIkMTpcIik7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGdldCBlcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzc3VlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gW107XG4gICAgICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRJc3N1ZXMgPSAoc3VicyA9IFtdKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3VlcywgLi4uc3Vic107XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGFjdHVhbFByb3RvID0gbmV3LnRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYW4vYmFuXG4gICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBhY3R1YWxQcm90bztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gaXNzdWVzO1xuICAgIH1cbiAgICBmb3JtYXQoX21hcHBlcikge1xuICAgICAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoaXNzdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZpZWxkRXJyb3JzID0geyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICBjb25zdCBwcm9jZXNzRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF91bmlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzc3VlLnVuaW9uRXJyb3JzLm1hcChwcm9jZXNzRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfcmV0dXJuX3R5cGVcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUucmV0dXJuVHlwZUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX2FyZ3VtZW50c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFcnJvcihpc3N1ZS5hcmd1bWVudHNFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyID0gZmllbGRFcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBpc3N1ZS5wYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBpc3N1ZS5wYXRoW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBpID09PSBpc3N1ZS5wYXRoLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHR5cGVvZiBlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIGlmICh0eXBlb2YgZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IGVycm9yQXJyYXk6IGFueSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZXJyb3JBcnJheS5fZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IGVycm9yQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0uX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnJbZWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgICAgIHJldHVybiBmaWVsZEVycm9ycztcbiAgICB9XG4gICAgc3RhdGljIGFzc2VydCh2YWx1ZSkge1xuICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFpvZEVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgYSBab2RFcnJvcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgICB9XG4gICAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmlzc3VlcywgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIsIDIpO1xuICAgIH1cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZmxhdHRlbihtYXBwZXIgPSAoaXNzdWUpID0+IGlzc3VlLm1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7fTtcbiAgICAgICAgY29uc3QgZm9ybUVycm9ycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLmlzc3Vlcykge1xuICAgICAgICAgICAgaWYgKHN1Yi5wYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmaWVsZEVycm9yc1tzdWIucGF0aFswXV0gPSBmaWVsZEVycm9yc1tzdWIucGF0aFswXV0gfHwgW107XG4gICAgICAgICAgICAgICAgZmllbGRFcnJvcnNbc3ViLnBhdGhbMF1dLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybUVycm9ycy5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBmb3JtRXJyb3JzLCBmaWVsZEVycm9ycyB9O1xuICAgIH1cbiAgICBnZXQgZm9ybUVycm9ycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhdHRlbigpO1xuICAgIH1cbn1cblpvZEVycm9yLmNyZWF0ZSA9IChpc3N1ZXMpID0+IHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBab2RFcnJvcihpc3N1ZXMpO1xuICAgIHJldHVybiBlcnJvcjtcbn07XG4iLCJpbXBvcnQgeyBab2RJc3N1ZUNvZGUgfSBmcm9tIFwiLi4vWm9kRXJyb3IuanNcIjtcbmltcG9ydCB7IHV0aWwsIFpvZFBhcnNlZFR5cGUgfSBmcm9tIFwiLi4vaGVscGVycy91dGlsLmpzXCI7XG5jb25zdCBlcnJvck1hcCA9IChpc3N1ZSwgX2N0eCkgPT4ge1xuICAgIGxldCBtZXNzYWdlO1xuICAgIHN3aXRjaCAoaXNzdWUuY29kZSkge1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGU6XG4gICAgICAgICAgICBpZiAoaXNzdWUucmVjZWl2ZWQgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiUmVxdWlyZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXhwZWN0ZWQgJHtpc3N1ZS5leHBlY3RlZH0sIHJlY2VpdmVkICR7aXNzdWUucmVjZWl2ZWR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2xpdGVyYWw6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgbGl0ZXJhbCB2YWx1ZSwgZXhwZWN0ZWQgJHtKU09OLnN0cmluZ2lmeShpc3N1ZS5leHBlY3RlZCwgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUudW5yZWNvZ25pemVkX2tleXM6XG4gICAgICAgICAgICBtZXNzYWdlID0gYFVucmVjb2duaXplZCBrZXkocykgaW4gb2JqZWN0OiAke3V0aWwuam9pblZhbHVlcyhpc3N1ZS5rZXlzLCBcIiwgXCIpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbjpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dGA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWUuIEV4cGVjdGVkICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGVudW0gdmFsdWUuIEV4cGVjdGVkICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfSwgcmVjZWl2ZWQgJyR7aXNzdWUucmVjZWl2ZWR9J2A7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9hcmd1bWVudHM6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZnVuY3Rpb24gYXJndW1lbnRzYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3JldHVybl90eXBlOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGZ1bmN0aW9uIHJldHVybiB0eXBlYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2RhdGU6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZGF0ZWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmc6XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlzc3VlLnZhbGlkYXRpb24gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJpbmNsdWRlc1wiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IGluY2x1ZGUgXCIke2lzc3VlLnZhbGlkYXRpb24uaW5jbHVkZXN9XCJgO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlzc3VlLnZhbGlkYXRpb24ucG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBhdCBvbmUgb3IgbW9yZSBwb3NpdGlvbnMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7aXNzdWUudmFsaWRhdGlvbi5wb3NpdGlvbn1gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwic3RhcnRzV2l0aFwiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IHN0YXJ0IHdpdGggXCIke2lzc3VlLnZhbGlkYXRpb24uc3RhcnRzV2l0aH1cImA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwiZW5kc1dpdGhcIiBpbiBpc3N1ZS52YWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dDogbXVzdCBlbmQgd2l0aCBcIiR7aXNzdWUudmFsaWRhdGlvbi5lbmRzV2l0aH1cImA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGlzc3VlLnZhbGlkYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnZhbGlkYXRpb24gIT09IFwicmVnZXhcIikge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCAke2lzc3VlLnZhbGlkYXRpb259YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS50b29fc21hbGw6XG4gICAgICAgICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgQXJyYXkgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBcImV4YWN0bHlcIiA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgbW9yZSB0aGFuYH0gJHtpc3N1ZS5taW5pbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBTdHJpbmcgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBcImV4YWN0bHlcIiA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgb3ZlcmB9ICR7aXNzdWUubWluaW11bX0gY2hhcmFjdGVyKHMpYDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHkgZXF1YWwgdG8gYCA6IGlzc3VlLmluY2x1c2l2ZSA/IGBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYCA6IGBncmVhdGVyIHRoYW4gYH0ke2lzc3VlLm1pbmltdW19YDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRGF0ZSBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseSBlcXVhbCB0byBgIDogaXNzdWUuaW5jbHVzaXZlID8gYGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgIDogYGdyZWF0ZXIgdGhhbiBgfSR7bmV3IERhdGUoTnVtYmVyKGlzc3VlLm1pbmltdW0pKX1gO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS50b29fYmlnOlxuICAgICAgICAgICAgaWYgKGlzc3VlLnR5cGUgPT09IFwiYXJyYXlcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEFycmF5IG11c3QgY29udGFpbiAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYGF0IG1vc3RgIDogYGxlc3MgdGhhbmB9ICR7aXNzdWUubWF4aW11bX0gZWxlbWVudChzKWA7XG4gICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgU3RyaW5nIG11c3QgY29udGFpbiAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYGF0IG1vc3RgIDogYHVuZGVyYH0gJHtpc3N1ZS5tYXhpbXVtfSBjaGFyYWN0ZXIocylgO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgbGVzcyB0aGFuIG9yIGVxdWFsIHRvYCA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19YDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiYmlnaW50XCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBCaWdJbnQgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYGxlc3MgdGhhbiBvciBlcXVhbCB0b2AgOiBgbGVzcyB0aGFuYH0gJHtpc3N1ZS5tYXhpbXVtfWA7XG4gICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcImRhdGVcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYERhdGUgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYHNtYWxsZXIgdGhhbiBvciBlcXVhbCB0b2AgOiBgc21hbGxlciB0aGFuYH0gJHtuZXcgRGF0ZShOdW1iZXIoaXNzdWUubWF4aW11bSkpfWA7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmN1c3RvbTpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dGA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXM6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludGVyc2VjdGlvbiByZXN1bHRzIGNvdWxkIG5vdCBiZSBtZXJnZWRgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLm5vdF9tdWx0aXBsZV9vZjpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgTnVtYmVyIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAke2lzc3VlLm11bHRpcGxlT2Z9YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5ub3RfZmluaXRlOlxuICAgICAgICAgICAgbWVzc2FnZSA9IFwiTnVtYmVyIG11c3QgYmUgZmluaXRlXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBfY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoaXNzdWUpO1xuICAgIH1cbiAgICByZXR1cm4geyBtZXNzYWdlIH07XG59O1xuZXhwb3J0IGRlZmF1bHQgZXJyb3JNYXA7XG4iLCJpbXBvcnQgZGVmYXVsdEVycm9yTWFwIGZyb20gXCIuL2xvY2FsZXMvZW4uanNcIjtcbmxldCBvdmVycmlkZUVycm9yTWFwID0gZGVmYXVsdEVycm9yTWFwO1xuZXhwb3J0IHsgZGVmYXVsdEVycm9yTWFwIH07XG5leHBvcnQgZnVuY3Rpb24gc2V0RXJyb3JNYXAobWFwKSB7XG4gICAgb3ZlcnJpZGVFcnJvck1hcCA9IG1hcDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvck1hcCgpIHtcbiAgICByZXR1cm4gb3ZlcnJpZGVFcnJvck1hcDtcbn1cbiIsImltcG9ydCB7IGdldEVycm9yTWFwIH0gZnJvbSBcIi4uL2Vycm9ycy5qc1wiO1xuaW1wb3J0IGRlZmF1bHRFcnJvck1hcCBmcm9tIFwiLi4vbG9jYWxlcy9lbi5qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VJc3N1ZSA9IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCB7IGRhdGEsIHBhdGgsIGVycm9yTWFwcywgaXNzdWVEYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uKGlzc3VlRGF0YS5wYXRoIHx8IFtdKV07XG4gICAgY29uc3QgZnVsbElzc3VlID0ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgIH07XG4gICAgaWYgKGlzc3VlRGF0YS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICAgICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICAgIGNvbnN0IG1hcHMgPSBlcnJvck1hcHNcbiAgICAgICAgLmZpbHRlcigobSkgPT4gISFtKVxuICAgICAgICAuc2xpY2UoKVxuICAgICAgICAucmV2ZXJzZSgpO1xuICAgIGZvciAoY29uc3QgbWFwIG9mIG1hcHMpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gbWFwKGZ1bGxJc3N1ZSwgeyBkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZSB9KS5tZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgRU1QVFlfUEFUSCA9IFtdO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgaXNzdWVEYXRhKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVNYXAgPSBnZXRFcnJvck1hcCgpO1xuICAgIGNvbnN0IGlzc3VlID0gbWFrZUlzc3VlKHtcbiAgICAgICAgaXNzdWVEYXRhOiBpc3N1ZURhdGEsXG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCwgLy8gY29udGV4dHVhbCBlcnJvciBtYXAgaXMgZmlyc3QgcHJpb3JpdHlcbiAgICAgICAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCwgLy8gdGhlbiBzY2hlbWEtYm91bmQgbWFwIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAsIC8vIHRoZW4gZ2xvYmFsIG92ZXJyaWRlIG1hcFxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAgPT09IGRlZmF1bHRFcnJvck1hcCA/IHVuZGVmaW5lZCA6IGRlZmF1bHRFcnJvck1hcCwgLy8gdGhlbiBnbG9iYWwgZGVmYXVsdCBtYXBcbiAgICAgICAgXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgfSk7XG4gICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaChpc3N1ZSk7XG59XG5leHBvcnQgY2xhc3MgUGFyc2VTdGF0dXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gXCJ2YWxpZFwiO1xuICAgIH1cbiAgICBkaXJ0eSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gICAgfVxuICAgIGFib3J0KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJhYm9ydGVkXCI7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgICAgICBjb25zdCBhcnJheVZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICBhcnJheVZhbHVlLnB1c2gocy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBhcnJheVZhbHVlIH07XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgICAgICBjb25zdCBmaW5hbE9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcGFpcjtcbiAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmIChrZXkudmFsdWUgIT09IFwiX19wcm90b19fXCIgJiYgKHR5cGVvZiB2YWx1ZS52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiB8fCBwYWlyLmFsd2F5c1NldCkpIHtcbiAgICAgICAgICAgICAgICBmaW5hbE9iamVjdFtrZXkudmFsdWVdID0gdmFsdWUudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE9iamVjdCB9O1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBJTlZBTElEID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgc3RhdHVzOiBcImFib3J0ZWRcIixcbn0pO1xuZXhwb3J0IGNvbnN0IERJUlRZID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwiZGlydHlcIiwgdmFsdWUgfSk7XG5leHBvcnQgY29uc3QgT0sgPSAodmFsdWUpID0+ICh7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZSB9KTtcbmV4cG9ydCBjb25zdCBpc0Fib3J0ZWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiO1xuZXhwb3J0IGNvbnN0IGlzRGlydHkgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiZGlydHlcIjtcbmV4cG9ydCBjb25zdCBpc1ZhbGlkID0gKHgpID0+IHguc3RhdHVzID09PSBcInZhbGlkXCI7XG5leHBvcnQgY29uc3QgaXNBc3luYyA9ICh4KSA9PiB0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB4IGluc3RhbmNlb2YgUHJvbWlzZTtcbiIsImV4cG9ydCB2YXIgZXJyb3JVdGlsO1xuKGZ1bmN0aW9uIChlcnJvclV0aWwpIHtcbiAgICBlcnJvclV0aWwuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2UgfSA6IG1lc3NhZ2UgfHwge307XG4gICAgLy8gYmlvbWUtaWdub3JlIGxpbnQ6XG4gICAgZXJyb3JVdGlsLnRvU3RyaW5nID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IG1lc3NhZ2U/Lm1lc3NhZ2U7XG59KShlcnJvclV0aWwgfHwgKGVycm9yVXRpbCA9IHt9KSk7XG4iLCJpbXBvcnQgeyBab2RFcnJvciwgWm9kSXNzdWVDb2RlLCB9IGZyb20gXCIuL1pvZEVycm9yLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0RXJyb3JNYXAsIGdldEVycm9yTWFwIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBlcnJvclV0aWwgfSBmcm9tIFwiLi9oZWxwZXJzL2Vycm9yVXRpbC5qc1wiO1xuaW1wb3J0IHsgRElSVFksIElOVkFMSUQsIE9LLCBQYXJzZVN0YXR1cywgYWRkSXNzdWVUb0NvbnRleHQsIGlzQWJvcnRlZCwgaXNBc3luYywgaXNEaXJ0eSwgaXNWYWxpZCwgbWFrZUlzc3VlLCB9IGZyb20gXCIuL2hlbHBlcnMvcGFyc2VVdGlsLmpzXCI7XG5pbXBvcnQgeyB1dGlsLCBab2RQYXJzZWRUeXBlLCBnZXRQYXJzZWRUeXBlIH0gZnJvbSBcIi4vaGVscGVycy91dGlsLmpzXCI7XG5jbGFzcyBQYXJzZUlucHV0TGF6eVBhdGgge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgdmFsdWUsIHBhdGgsIGtleSkge1xuICAgICAgICB0aGlzLl9jYWNoZWRQYXRoID0gW107XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fcGF0aCA9IHBhdGg7XG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICB9XG4gICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FjaGVkUGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX2tleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRQYXRoLnB1c2goLi4udGhpcy5fcGF0aCwgLi4udGhpcy5fa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZFBhdGgucHVzaCguLi50aGlzLl9wYXRoLCB0aGlzLl9rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRQYXRoO1xuICAgIH1cbn1cbmNvbnN0IGhhbmRsZVJlc3VsdCA9IChjdHgsIHJlc3VsdCkgPT4ge1xuICAgIGlmIChpc1ZhbGlkKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogcmVzdWx0LnZhbHVlIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWN0eC5jb21tb24uaXNzdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWRhdGlvbiBmYWlsZWQgYnV0IG5vIGlzc3VlcyBkZXRlY3RlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0IGVycm9yKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufTtcbmZ1bmN0aW9uIHByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSB7XG4gICAgaWYgKCFwYXJhbXMpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICBjb25zdCB7IGVycm9yTWFwLCBpbnZhbGlkX3R5cGVfZXJyb3IsIHJlcXVpcmVkX2Vycm9yLCBkZXNjcmlwdGlvbiB9ID0gcGFyYW1zO1xuICAgIGlmIChlcnJvck1hcCAmJiAoaW52YWxpZF90eXBlX2Vycm9yIHx8IHJlcXVpcmVkX2Vycm9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHVzZSBcImludmFsaWRfdHlwZV9lcnJvclwiIG9yIFwicmVxdWlyZWRfZXJyb3JcIiBpbiBjb25qdW5jdGlvbiB3aXRoIGN1c3RvbSBlcnJvciBtYXAuYCk7XG4gICAgfVxuICAgIGlmIChlcnJvck1hcClcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JNYXA6IGVycm9yTWFwLCBkZXNjcmlwdGlvbiB9O1xuICAgIGNvbnN0IGN1c3RvbU1hcCA9IChpc3MsIGN0eCkgPT4ge1xuICAgICAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHBhcmFtcztcbiAgICAgICAgaWYgKGlzcy5jb2RlID09PSBcImludmFsaWRfZW51bV92YWx1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBtZXNzYWdlID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGN0eC5kYXRhID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBtZXNzYWdlID8/IHJlcXVpcmVkX2Vycm9yID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNzLmNvZGUgIT09IFwiaW52YWxpZF90eXBlXCIpXG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBjdHguZGVmYXVsdEVycm9yIH07XG4gICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gaW52YWxpZF90eXBlX2Vycm9yID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGVycm9yTWFwOiBjdXN0b21NYXAsIGRlc2NyaXB0aW9uIH07XG59XG5leHBvcnQgY2xhc3MgWm9kVHlwZSB7XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICBfZ2V0VHlwZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKTtcbiAgICB9XG4gICAgX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIChjdHggfHwge1xuICAgICAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgICAgICAgZGF0YTogaW5wdXQuZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGF0aDogaW5wdXQucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDogaW5wdXQucGFyZW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzOiBuZXcgUGFyc2VTdGF0dXMoKSxcbiAgICAgICAgICAgIGN0eDoge1xuICAgICAgICAgICAgICAgIGNvbW1vbjogaW5wdXQucGFyZW50LmNvbW1vbixcbiAgICAgICAgICAgICAgICBkYXRhOiBpbnB1dC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXG4gICAgICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgICAgICBwYXRoOiBpbnB1dC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogaW5wdXQucGFyZW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3BhcnNlU3luYyhpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIGlmIChpc0FzeW5jKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bmNocm9ub3VzIHBhcnNlIGVuY291bnRlcmVkIHByb21pc2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIF9wYXJzZUFzeW5jKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH1cbiAgICBwYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zYWZlUGFyc2UoZGF0YSwgcGFyYW1zKTtcbiAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgfVxuICAgIHNhZmVQYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBhc3luYzogcGFyYW1zPy5hc3luYyA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcz8uZXJyb3JNYXAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogcGFyYW1zPy5wYXRoIHx8IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZVN5bmMoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICAgIH1cbiAgICBcIn52YWxpZGF0ZVwiKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBhc3luYzogISF0aGlzW1wifnN0YW5kYXJkXCJdLmFzeW5jLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhdGg6IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2VTeW5jKHsgZGF0YSwgcGF0aDogW10sIHBhcmVudDogY3R4IH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkKHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVzOiBjdHguY29tbW9uLmlzc3VlcyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyPy5tZXNzYWdlPy50b0xvd2VyQ2FzZSgpPy5pbmNsdWRlcyhcImVuY291bnRlcmVkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHguY29tbW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJzZUFzeW5jKHsgZGF0YSwgcGF0aDogW10sIHBhcmVudDogY3R4IH0pLnRoZW4oKHJlc3VsdCkgPT4gaXNWYWxpZChyZXN1bHQpXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBjdHguY29tbW9uLmlzc3VlcyxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZUFzeW5jKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNhZmVQYXJzZUFzeW5jKGRhdGEsIHBhcmFtcyk7XG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcylcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgIH1cbiAgICBhc3luYyBzYWZlUGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcz8uZXJyb3JNYXAsXG4gICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogcGFyYW1zPy5wYXRoIHx8IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtYXliZUFzeW5jUmVzdWx0ID0gdGhpcy5fcGFyc2UoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChpc0FzeW5jKG1heWJlQXN5bmNSZXN1bHQpID8gbWF5YmVBc3luY1Jlc3VsdCA6IFByb21pc2UucmVzb2x2ZShtYXliZUFzeW5jUmVzdWx0KSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICAgIH1cbiAgICByZWZpbmUoY2hlY2ssIG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZ2V0SXNzdWVQcm9wZXJ0aWVzID0gKHZhbCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBtZXNzYWdlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbWVzc2FnZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZmluZW1lbnQoKHZhbCwgY3R4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjaGVjayh2YWwpO1xuICAgICAgICAgICAgY29uc3Qgc2V0RXJyb3IgPSAoKSA9PiBjdHguYWRkSXNzdWUoe1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5jdXN0b20sXG4gICAgICAgICAgICAgICAgLi4uZ2V0SXNzdWVQcm9wZXJ0aWVzKHZhbCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHNldEVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWZpbmVtZW50KGNoZWNrLCByZWZpbmVtZW50RGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmICghY2hlY2sodmFsKSkge1xuICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh0eXBlb2YgcmVmaW5lbWVudERhdGEgPT09IFwiZnVuY3Rpb25cIiA/IHJlZmluZW1lbnREYXRhKHZhbCwgY3R4KSA6IHJlZmluZW1lbnREYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9yZWZpbmVtZW50KHJlZmluZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInJlZmluZW1lbnRcIiwgcmVmaW5lbWVudCB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3VwZXJSZWZpbmUocmVmaW5lbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudChyZWZpbmVtZW50KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGVmKSB7XG4gICAgICAgIC8qKiBBbGlhcyBvZiBzYWZlUGFyc2VBc3luYyAqL1xuICAgICAgICB0aGlzLnNwYSA9IHRoaXMuc2FmZVBhcnNlQXN5bmM7XG4gICAgICAgIHRoaXMuX2RlZiA9IGRlZjtcbiAgICAgICAgdGhpcy5wYXJzZSA9IHRoaXMucGFyc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYWZlUGFyc2UgPSB0aGlzLnNhZmVQYXJzZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnBhcnNlQXN5bmMgPSB0aGlzLnBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYWZlUGFyc2VBc3luYyA9IHRoaXMuc2FmZVBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zcGEgPSB0aGlzLnNwYS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlZmluZSA9IHRoaXMucmVmaW5lLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVmaW5lbWVudCA9IHRoaXMucmVmaW5lbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN1cGVyUmVmaW5lID0gdGhpcy5zdXBlclJlZmluZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9wdGlvbmFsID0gdGhpcy5vcHRpb25hbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm51bGxhYmxlID0gdGhpcy5udWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm51bGxpc2ggPSB0aGlzLm51bGxpc2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hcnJheSA9IHRoaXMuYXJyYXkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gdGhpcy5wcm9taXNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub3IgPSB0aGlzLm9yLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYW5kID0gdGhpcy5hbmQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmJyYW5kID0gdGhpcy5icmFuZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSB0aGlzLmRlZmF1bHQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jYXRjaCA9IHRoaXMuY2F0Y2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXNjcmliZSA9IHRoaXMuZGVzY3JpYmUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5waXBlID0gdGhpcy5waXBlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVhZG9ubHkgPSB0aGlzLnJlYWRvbmx5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaXNOdWxsYWJsZSA9IHRoaXMuaXNOdWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmlzT3B0aW9uYWwgPSB0aGlzLmlzT3B0aW9uYWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpc1tcIn5zdGFuZGFyZFwiXSA9IHtcbiAgICAgICAgICAgIHZlcnNpb246IDEsXG4gICAgICAgICAgICB2ZW5kb3I6IFwiem9kXCIsXG4gICAgICAgICAgICB2YWxpZGF0ZTogKGRhdGEpID0+IHRoaXNbXCJ+dmFsaWRhdGVcIl0oZGF0YSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIG9wdGlvbmFsKCkge1xuICAgICAgICByZXR1cm4gWm9kT3B0aW9uYWwuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG51bGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gWm9kTnVsbGFibGUuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG51bGxpc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm51bGxhYmxlKCkub3B0aW9uYWwoKTtcbiAgICB9XG4gICAgYXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBab2RBcnJheS5jcmVhdGUodGhpcyk7XG4gICAgfVxuICAgIHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiBab2RQcm9taXNlLmNyZWF0ZSh0aGlzLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICBvcihvcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIFpvZFVuaW9uLmNyZWF0ZShbdGhpcywgb3B0aW9uXSwgdGhpcy5fZGVmKTtcbiAgICB9XG4gICAgYW5kKGluY29taW5nKSB7XG4gICAgICAgIHJldHVybiBab2RJbnRlcnNlY3Rpb24uY3JlYXRlKHRoaXMsIGluY29taW5nLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgICAgICBlZmZlY3Q6IHsgdHlwZTogXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZWZhdWx0KGRlZikge1xuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xuICAgICAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICAgICAgaW5uZXJUeXBlOiB0aGlzLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWVGdW5jLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnJhbmQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQnJhbmRlZCh7XG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEJyYW5kZWQsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLFxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2goZGVmKSB7XG4gICAgICAgIGNvbnN0IGNhdGNoVmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xuICAgICAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcbiAgICAgICAgICAgIGlubmVyVHlwZTogdGhpcyxcbiAgICAgICAgICAgIGNhdGNoVmFsdWU6IGNhdGNoVmFsdWVGdW5jLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RDYXRjaCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlc2NyaWJlKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnN0IFRoaXMgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gbmV3IFRoaXMoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwaXBlKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gWm9kUGlwZWxpbmUuY3JlYXRlKHRoaXMsIHRhcmdldCk7XG4gICAgfVxuICAgIHJlYWRvbmx5KCkge1xuICAgICAgICByZXR1cm4gWm9kUmVhZG9ubHkuY3JlYXRlKHRoaXMpO1xuICAgIH1cbiAgICBpc09wdGlvbmFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UodW5kZWZpbmVkKS5zdWNjZXNzO1xuICAgIH1cbiAgICBpc051bGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UobnVsbCkuc3VjY2VzcztcbiAgICB9XG59XG5jb25zdCBjdWlkUmVnZXggPSAvXmNbXlxccy1dezgsfSQvaTtcbmNvbnN0IGN1aWQyUmVnZXggPSAvXlswLTlhLXpdKyQvO1xuY29uc3QgdWxpZFJlZ2V4ID0gL15bMC05QS1ISktNTlAtVFYtWl17MjZ9JC9pO1xuLy8gY29uc3QgdXVpZFJlZ2V4ID1cbi8vICAgL14oW2EtZjAtOV17OH0tW2EtZjAtOV17NH0tWzEtNV1bYS1mMC05XXszfS1bYS1mMC05XXs0fS1bYS1mMC05XXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTtcbmNvbnN0IHV1aWRSZWdleCA9IC9eWzAtOWEtZkEtRl17OH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17MTJ9JC9pO1xuY29uc3QgbmFub2lkUmVnZXggPSAvXlthLXowLTlfLV17MjF9JC9pO1xuY29uc3Qgand0UmVnZXggPSAvXltBLVphLXowLTktX10rXFwuW0EtWmEtejAtOS1fXStcXC5bQS1aYS16MC05LV9dKiQvO1xuY29uc3QgZHVyYXRpb25SZWdleCA9IC9eWy0rXT9QKD8hJCkoPzooPzpbLStdP1xcZCtZKXwoPzpbLStdP1xcZCtbLixdXFxkK1kkKSk/KD86KD86Wy0rXT9cXGQrTSl8KD86Wy0rXT9cXGQrWy4sXVxcZCtNJCkpPyg/Oig/OlstK10/XFxkK1cpfCg/OlstK10/XFxkK1suLF1cXGQrVyQpKT8oPzooPzpbLStdP1xcZCtEKXwoPzpbLStdP1xcZCtbLixdXFxkK0QkKSk/KD86VCg/PVtcXGQrLV0pKD86KD86Wy0rXT9cXGQrSCl8KD86Wy0rXT9cXGQrWy4sXVxcZCtIJCkpPyg/Oig/OlstK10/XFxkK00pfCg/OlstK10/XFxkK1suLF1cXGQrTSQpKT8oPzpbLStdP1xcZCsoPzpbLixdXFxkKyk/Uyk/KT8/JC87XG4vLyBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NjE4MS8xNTUwMTU1XG4vLyBvbGQgdmVyc2lvbjogdG9vIHNsb3csIGRpZG4ndCBzdXBwb3J0IHVuaWNvZGVcbi8vIGNvbnN0IGVtYWlsUmVnZXggPSAvXigoKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSsoXFwuKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSspKil8KChcXHgyMikoKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPygoW1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZdfFxceDIxfFtcXHgyMy1cXHg1Yl18W1xceDVkLVxceDdlXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KFxcXFwoW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSkqKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPyhcXHgyMikpKUAoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSkkL2k7XG4vL29sZCBlbWFpbCByZWdleFxuLy8gY29uc3QgZW1haWxSZWdleCA9IC9eKChbXjw+KClbXFxdLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF0uLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoPyEtKShbXjw+KClbXFxdLiw7Olxcc0BcIl0rXFwuKStbXjw+KClbXFxdLiw7Olxcc0BcIl17MSx9KVteLTw+KClbXFxdLiw7Olxcc0BcIl0kL2k7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChcXFsoKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXF0pfChcXFtJUHY2OigoW2EtZjAtOV17MSw0fTopezd9fDo6KFthLWYwLTldezEsNH06KXswLDZ9fChbYS1mMC05XXsxLDR9Oil7MX06KFthLWYwLTldezEsNH06KXswLDV9fChbYS1mMC05XXsxLDR9Oil7Mn06KFthLWYwLTldezEsNH06KXswLDR9fChbYS1mMC05XXsxLDR9Oil7M306KFthLWYwLTldezEsNH06KXswLDN9fChbYS1mMC05XXsxLDR9Oil7NH06KFthLWYwLTldezEsNH06KXswLDJ9fChbYS1mMC05XXsxLDR9Oil7NX06KFthLWYwLTldezEsNH06KXswLDF9KShbYS1mMC05XXsxLDR9fCgoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKSlcXF0pfChbQS1aYS16MC05XShbQS1aYS16MC05LV0qW0EtWmEtejAtOV0pKihcXC5bQS1aYS16XXsyLH0pKykpJC87XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cbi8vICAgL15bYS16QS1aMC05XFwuXFwhXFwjXFwkXFwlXFwmXFwnXFwqXFwrXFwvXFw9XFw/XFxeXFxfXFxgXFx7XFx8XFx9XFx+XFwtXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLztcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXig/OlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSp8XCIoPzpbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHgyMVxceDIzLVxceDViXFx4NWQtXFx4N2ZdfFxcXFxbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGUtXFx4N2ZdKSpcIilAKD86KD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP3xcXFsoPzooPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldP3xbYS16MC05LV0qW2EtejAtOV06KD86W1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4MjEtXFx4NWFcXHg1My1cXHg3Zl18XFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZS1cXHg3Zl0pKylcXF0pJC9pO1xuY29uc3QgZW1haWxSZWdleCA9IC9eKD8hXFwuKSg/IS4qXFwuXFwuKShbQS1aMC05XycrXFwtXFwuXSopW0EtWjAtOV8rLV1AKFtBLVowLTldW0EtWjAtOVxcLV0qXFwuKStbQS1aXXsyLH0kL2k7XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cbi8vICAgL15bYS16MC05LiEjJCUm4oCZKisvPT9eX2B7fH1+LV0rQFthLXowLTktXSsoPzpcXC5bYS16MC05XFwtXSspKiQvaTtcbi8vIGZyb20gaHR0cHM6Ly90aGVrZXZpbnNjb3R0LmNvbS9lbW9qaXMtaW4tamF2YXNjcmlwdC8jd3JpdGluZy1hLXJlZ3VsYXItZXhwcmVzc2lvblxuY29uc3QgX2Vtb2ppUmVnZXggPSBgXihcXFxccHtFeHRlbmRlZF9QaWN0b2dyYXBoaWN9fFxcXFxwe0Vtb2ppX0NvbXBvbmVudH0pKyRgO1xubGV0IGVtb2ppUmVnZXg7XG4vLyBmYXN0ZXIsIHNpbXBsZXIsIHNhZmVyXG5jb25zdCBpcHY0UmVnZXggPSAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKSQvO1xuY29uc3QgaXB2NENpZHJSZWdleCA9IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwvKDNbMC0yXXxbMTJdP1swLTldKSQvO1xuLy8gY29uc3QgaXB2NlJlZ2V4ID1cbi8vIC9eKChbYS1mMC05XXsxLDR9Oil7N318OjooW2EtZjAtOV17MSw0fTopezAsNn18KFthLWYwLTldezEsNH06KXsxfTooW2EtZjAtOV17MSw0fTopezAsNX18KFthLWYwLTldezEsNH06KXsyfTooW2EtZjAtOV17MSw0fTopezAsNH18KFthLWYwLTldezEsNH06KXszfTooW2EtZjAtOV17MSw0fTopezAsM318KFthLWYwLTldezEsNH06KXs0fTooW2EtZjAtOV17MSw0fTopezAsMn18KFthLWYwLTldezEsNH06KXs1fTooW2EtZjAtOV17MSw0fTopezAsMX0pKFthLWYwLTldezEsNH18KCgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpXFwuKXszfSgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpKSQvO1xuY29uc3QgaXB2NlJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpJC87XG5jb25zdCBpcHY2Q2lkclJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpXFwvKDEyWzAtOF18MVswMV1bMC05XXxbMS05XT9bMC05XSkkLztcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc4NjAzOTIvZGV0ZXJtaW5lLWlmLXN0cmluZy1pcy1pbi1iYXNlNjQtdXNpbmctamF2YXNjcmlwdFxuY29uc3QgYmFzZTY0UmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87XG4vLyBodHRwczovL2Jhc2U2NC5ndXJ1L3N0YW5kYXJkcy9iYXNlNjR1cmxcbmNvbnN0IGJhc2U2NHVybFJlZ2V4ID0gL14oWzAtOWEtekEtWi1fXXs0fSkqKChbMC05YS16QS1aLV9dezJ9KD09KT8pfChbMC05YS16QS1aLV9dezN9KD0pPykpPyQvO1xuLy8gc2ltcGxlXG4vLyBjb25zdCBkYXRlUmVnZXhTb3VyY2UgPSBgXFxcXGR7NH0tXFxcXGR7Mn0tXFxcXGR7Mn1gO1xuLy8gbm8gbGVhcCB5ZWFyIHZhbGlkYXRpb25cbi8vIGNvbnN0IGRhdGVSZWdleFNvdXJjZSA9IGBcXFxcZHs0fS0oKDBbMTM1NzhdfDEwfDEyKS0zMXwoMFsxMy05XXwxWzAtMl0pLTMwfCgwWzEtOV18MVswLTJdKS0oMFsxLTldfDFcXFxcZHwyXFxcXGQpKWA7XG4vLyB3aXRoIGxlYXAgeWVhciB2YWxpZGF0aW9uXG5jb25zdCBkYXRlUmVnZXhTb3VyY2UgPSBgKChcXFxcZFxcXFxkWzI0NjhdWzA0OF18XFxcXGRcXFxcZFsxMzU3OV1bMjZdfFxcXFxkXFxcXGQwWzQ4XXxbMDI0NjhdWzA0OF0wMHxbMTM1NzldWzI2XTAwKS0wMi0yOXxcXFxcZHs0fS0oKDBbMTM1NzhdfDFbMDJdKS0oMFsxLTldfFsxMl1cXFxcZHwzWzAxXSl8KDBbNDY5XXwxMSktKDBbMS05XXxbMTJdXFxcXGR8MzApfCgwMiktKDBbMS05XXwxXFxcXGR8MlswLThdKSkpYDtcbmNvbnN0IGRhdGVSZWdleCA9IG5ldyBSZWdFeHAoYF4ke2RhdGVSZWdleFNvdXJjZX0kYCk7XG5mdW5jdGlvbiB0aW1lUmVnZXhTb3VyY2UoYXJncykge1xuICAgIGxldCBzZWNvbmRzUmVnZXhTb3VyY2UgPSBgWzAtNV1cXFxcZGA7XG4gICAgaWYgKGFyZ3MucHJlY2lzaW9uKSB7XG4gICAgICAgIHNlY29uZHNSZWdleFNvdXJjZSA9IGAke3NlY29uZHNSZWdleFNvdXJjZX1cXFxcLlxcXFxkeyR7YXJncy5wcmVjaXNpb259fWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyZ3MucHJlY2lzaW9uID09IG51bGwpIHtcbiAgICAgICAgc2Vjb25kc1JlZ2V4U291cmNlID0gYCR7c2Vjb25kc1JlZ2V4U291cmNlfShcXFxcLlxcXFxkKyk/YDtcbiAgICB9XG4gICAgY29uc3Qgc2Vjb25kc1F1YW50aWZpZXIgPSBhcmdzLnByZWNpc2lvbiA/IFwiK1wiIDogXCI/XCI7IC8vIHJlcXVpcmUgc2Vjb25kcyBpZiBwcmVjaXNpb24gaXMgbm9uemVyb1xuICAgIHJldHVybiBgKFswMV1cXFxcZHwyWzAtM10pOlswLTVdXFxcXGQoOiR7c2Vjb25kc1JlZ2V4U291cmNlfSkke3NlY29uZHNRdWFudGlmaWVyfWA7XG59XG5mdW5jdGlvbiB0aW1lUmVnZXgoYXJncykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKGBeJHt0aW1lUmVnZXhTb3VyY2UoYXJncyl9JGApO1xufVxuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMTQzMjMxXG5leHBvcnQgZnVuY3Rpb24gZGF0ZXRpbWVSZWdleChhcmdzKSB7XG4gICAgbGV0IHJlZ2V4ID0gYCR7ZGF0ZVJlZ2V4U291cmNlfVQke3RpbWVSZWdleFNvdXJjZShhcmdzKX1gO1xuICAgIGNvbnN0IG9wdHMgPSBbXTtcbiAgICBvcHRzLnB1c2goYXJncy5sb2NhbCA/IGBaP2AgOiBgWmApO1xuICAgIGlmIChhcmdzLm9mZnNldClcbiAgICAgICAgb3B0cy5wdXNoKGAoWystXVxcXFxkezJ9Oj9cXFxcZHsyfSlgKTtcbiAgICByZWdleCA9IGAke3JlZ2V4fSgke29wdHMuam9pbihcInxcIil9KWA7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoYF4ke3JlZ2V4fSRgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRJUChpcCwgdmVyc2lvbikge1xuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NFwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY0UmVnZXgudGVzdChpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NlwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY2UmVnZXgudGVzdChpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRKV1Qoand0LCBhbGcpIHtcbiAgICBpZiAoIWp3dFJlZ2V4LnRlc3Qoand0KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFtoZWFkZXJdID0gand0LnNwbGl0KFwiLlwiKTtcbiAgICAgICAgLy8gQ29udmVydCBiYXNlNjR1cmwgdG8gYmFzZTY0XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IGhlYWRlclxuICAgICAgICAgICAgLnJlcGxhY2UoLy0vZywgXCIrXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXy9nLCBcIi9cIilcbiAgICAgICAgICAgIC5wYWRFbmQoaGVhZGVyLmxlbmd0aCArICgoNCAtIChoZWFkZXIubGVuZ3RoICUgNCkpICUgNCksIFwiPVwiKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IEpTT04ucGFyc2UoYXRvYihiYXNlNjQpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNvZGVkICE9PSBcIm9iamVjdFwiIHx8IGRlY29kZWQgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChcInR5cFwiIGluIGRlY29kZWQgJiYgZGVjb2RlZD8udHlwICE9PSBcIkpXVFwiKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWRlY29kZWQuYWxnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYWxnICYmIGRlY29kZWQuYWxnICE9PSBhbGcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1ZhbGlkQ2lkcihpcCwgdmVyc2lvbikge1xuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NFwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY0Q2lkclJlZ2V4LnRlc3QoaXApKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoKHZlcnNpb24gPT09IFwidjZcIiB8fCAhdmVyc2lvbikgJiYgaXB2NkNpZHJSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGNsYXNzIFpvZFN0cmluZyBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IFN0cmluZyhpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zdHJpbmcsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gaW5wdXQuZGF0YS5sZW5ndGggPCBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vQmlnIHx8IHRvb1NtYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vQmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1haWxcIikge1xuICAgICAgICAgICAgICAgIGlmICghZW1haWxSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVtb2ppXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVtb2ppUmVnZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1vamlSZWdleCA9IG5ldyBSZWdFeHAoX2Vtb2ppUmVnZXgsIFwidVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFlbW9qaVJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbW9qaVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidXVpZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dWlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInV1aWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm5hbm9pZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuYW5vaWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwibmFub2lkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1aWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY3VpZDJcIikge1xuICAgICAgICAgICAgICAgIGlmICghY3VpZDJSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVsaWRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdWxpZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1bGlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBVUkwoaW5wdXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInJlZ2V4XCIpIHtcbiAgICAgICAgICAgICAgICBjaGVjay5yZWdleC5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RSZXN1bHQgPSBjaGVjay5yZWdleC50ZXN0KGlucHV0LmRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICghdGVzdFJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInJlZ2V4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0cmltXCIpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gaW5wdXQuZGF0YS50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImluY2x1ZGVzXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmRhdGEuaW5jbHVkZXMoY2hlY2sudmFsdWUsIGNoZWNrLnBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGluY2x1ZGVzOiBjaGVjay52YWx1ZSwgcG9zaXRpb246IGNoZWNrLnBvc2l0aW9uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0b0xvd2VyQ2FzZVwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidG9VcHBlckNhc2VcIikge1xuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInN0YXJ0c1dpdGhcIikge1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5zdGFydHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IHN0YXJ0c1dpdGg6IGNoZWNrLnZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJlbmRzV2l0aFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5kYXRhLmVuZHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGVuZHNXaXRoOiBjaGVjay52YWx1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZGF0ZXRpbWVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gZGF0ZXRpbWVSZWdleChjaGVjayk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImRhdGVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gZGF0ZVJlZ2V4O1xuICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRpbWVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gdGltZVJlZ2V4KGNoZWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ0aW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJkdXJhdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkdXJhdGlvblJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJkdXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiaXBcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZElQKGlucHV0LmRhdGEsIGNoZWNrLnZlcnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiaXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImp3dFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkSldUKGlucHV0LmRhdGEsIGNoZWNrLmFsZykpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJqd3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImNpZHJcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZENpZHIoaW5wdXQuZGF0YSwgY2hlY2sudmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJjaWRyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICAgICAgICAgIGlmICghYmFzZTY0UmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImJhc2U2NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiYmFzZTY0dXJsXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJhc2U2NHVybFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJiYXNlNjR1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGNoZWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgICB9XG4gICAgX3JlZ2V4KHJlZ2V4LCB2YWxpZGF0aW9uLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmluZW1lbnQoKGRhdGEpID0+IHJlZ2V4LnRlc3QoZGF0YSksIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb24sXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZW1haWwobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImVtYWlsXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgdXJsKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1cmxcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBlbW9qaShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZW1vamlcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICB1dWlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1dWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgbmFub2lkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJuYW5vaWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBjdWlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJjdWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgY3VpZDIobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImN1aWQyXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgdWxpZChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwidWxpZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIGJhc2U2NChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiYmFzZTY0XCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgYmFzZTY0dXJsKG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gYmFzZTY0dXJsIGVuY29kaW5nIGlzIGEgbW9kaWZpY2F0aW9uIG9mIGJhc2U2NCB0aGF0IGNhbiBzYWZlbHkgYmUgdXNlZCBpbiBVUkxzIGFuZCBmaWxlbmFtZXNcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwiYmFzZTY0dXJsXCIsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBqd3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImp3dFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGlwKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJpcFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGNpZHIob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImNpZHJcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnMpIH0pO1xuICAgIH1cbiAgICBkYXRldGltZShvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgICAgICBraW5kOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9jYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0eXBlb2Ygb3B0aW9ucz8ucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IG9wdGlvbnM/LnByZWNpc2lvbixcbiAgICAgICAgICAgIG9mZnNldDogb3B0aW9ucz8ub2Zmc2V0ID8/IGZhbHNlLFxuICAgICAgICAgICAgbG9jYWw6IG9wdGlvbnM/LmxvY2FsID8/IGZhbHNlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGF0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZGF0ZVwiLCBtZXNzYWdlIH0pO1xuICAgIH1cbiAgICB0aW1lKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwidGltZVwiLFxuICAgICAgICAgICAgICAgIHByZWNpc2lvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBvcHRpb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwidGltZVwiLFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0eXBlb2Ygb3B0aW9ucz8ucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IG9wdGlvbnM/LnByZWNpc2lvbixcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zPy5tZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGR1cmF0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJkdXJhdGlvblwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIHJlZ2V4KHJlZ2V4LCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcInJlZ2V4XCIsXG4gICAgICAgICAgICByZWdleDogcmVnZXgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbmNsdWRlcyh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJpbmNsdWRlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgcG9zaXRpb246IG9wdGlvbnM/LnBvc2l0aW9uLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhcnRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJzdGFydHNXaXRoXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbmRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJlbmRzV2l0aFwiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBtaW5MZW5ndGgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IG1heExlbmd0aCxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibGVuZ3RoXCIsXG4gICAgICAgICAgICB2YWx1ZTogbGVuLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBgLm1pbigxKWBcbiAgICAgKi9cbiAgICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbigxLCBlcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkpO1xuICAgIH1cbiAgICB0cmltKCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7IGtpbmQ6IFwidHJpbVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9Mb3dlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b0xvd2VyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9VcHBlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b1VwcGVyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGlzRGF0ZXRpbWUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZXRpbWVcIik7XG4gICAgfVxuICAgIGdldCBpc0RhdGUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZVwiKTtcbiAgICB9XG4gICAgZ2V0IGlzVGltZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ0aW1lXCIpO1xuICAgIH1cbiAgICBnZXQgaXNEdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJkdXJhdGlvblwiKTtcbiAgICB9XG4gICAgZ2V0IGlzRW1haWwoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZW1haWxcIik7XG4gICAgfVxuICAgIGdldCBpc1VSTCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1cmxcIik7XG4gICAgfVxuICAgIGdldCBpc0Vtb2ppKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImVtb2ppXCIpO1xuICAgIH1cbiAgICBnZXQgaXNVVUlEKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInV1aWRcIik7XG4gICAgfVxuICAgIGdldCBpc05BTk9JRCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJuYW5vaWRcIik7XG4gICAgfVxuICAgIGdldCBpc0NVSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQ1VJRDIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZDJcIik7XG4gICAgfVxuICAgIGdldCBpc1VMSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidWxpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzSVAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiaXBcIik7XG4gICAgfVxuICAgIGdldCBpc0NJRFIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY2lkclwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0dXJsKCkge1xuICAgICAgICAvLyBiYXNlNjR1cmwgZW5jb2RpbmcgaXMgYSBtb2RpZmljYXRpb24gb2YgYmFzZTY0IHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGluIFVSTHMgYW5kIGZpbGVuYW1lc1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NHVybFwiKTtcbiAgICB9XG4gICAgZ2V0IG1pbkxlbmd0aCgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4TGVuZ3RoKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kU3RyaW5nLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlID8/IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzk2NjQ4NC93aHktZG9lcy1tb2R1bHVzLW9wZXJhdG9yLXJldHVybi1mcmFjdGlvbmFsLW51bWJlci1pbi1qYXZhc2NyaXB0LzMxNzExMDM0IzMxNzExMDM0XG5mdW5jdGlvbiBmbG9hdFNhZmVSZW1haW5kZXIodmFsLCBzdGVwKSB7XG4gICAgY29uc3QgdmFsRGVjQ291bnQgPSAodmFsLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcbiAgICBjb25zdCBzdGVwRGVjQ291bnQgPSAoc3RlcC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGg7XG4gICAgY29uc3QgZGVjQ291bnQgPSB2YWxEZWNDb3VudCA+IHN0ZXBEZWNDb3VudCA/IHZhbERlY0NvdW50IDogc3RlcERlY0NvdW50O1xuICAgIGNvbnN0IHZhbEludCA9IE51bWJlci5wYXJzZUludCh2YWwudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICAgIGNvbnN0IHN0ZXBJbnQgPSBOdW1iZXIucGFyc2VJbnQoc3RlcC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gICAgcmV0dXJuICh2YWxJbnQgJSBzdGVwSW50KSAvIDEwICoqIGRlY0NvdW50O1xufVxuZXhwb3J0IGNsYXNzIFpvZE51bWJlciBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgICAgICB0aGlzLm1heCA9IHRoaXMubHRlO1xuICAgICAgICB0aGlzLnN0ZXAgPSB0aGlzLm11bHRpcGxlT2Y7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IE51bWJlcihpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5udW1iZXIsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJpbnRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ludGVnZXIoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBcImZsb2F0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChmbG9hdFNhZmVSZW1haW5kZXIoaW5wdXQuZGF0YSwgY2hlY2sudmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2YsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImZpbml0ZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9maW5pdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIGd0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtaW5cIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0KHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE51bWJlcih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9kZWYuY2hlY2tzLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGludChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImludFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtdWx0aXBsZU9mKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbml0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImZpbml0ZVwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2FmZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KS5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5WYWx1ZSgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIGxldCBtYXggPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgZ2V0IGlzSW50KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImludFwiIHx8IChjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIiAmJiB1dGlsLmlzSW50ZWdlcihjaC52YWx1ZSkpKTtcbiAgICB9XG4gICAgZ2V0IGlzRmluaXRlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwiZmluaXRlXCIgfHwgY2gua2luZCA9PT0gXCJpbnRcIiB8fCBjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOdW1iZXIuaXNGaW5pdGUobWluKSAmJiBOdW1iZXIuaXNGaW5pdGUobWF4KTtcbiAgICB9XG59XG5ab2ROdW1iZXIuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgY2hlY2tzOiBbXSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdW1iZXIsXG4gICAgICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgfHwgZmFsc2UsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQmlnSW50IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubWluID0gdGhpcy5ndGU7XG4gICAgICAgIHRoaXMubWF4ID0gdGhpcy5sdGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gQmlnSW50KGlucHV0LmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYmlnaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW52YWxpZElucHV0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmlnaW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJpZ2ludFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhICUgY2hlY2sudmFsdWUgIT09IEJpZ0ludCgwKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUubm90X211bHRpcGxlX29mLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIF9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5iaWdpbnQsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgZ3RlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgbHQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQmlnSW50KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogW1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RCaWdJbnQoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbmVnYXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9ucG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgbWluVmFsdWUoKSB7XG4gICAgICAgIGxldCBtaW4gPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgZ2V0IG1heFZhbHVlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kQmlnSW50LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEJpZ0ludCh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQmlnSW50LFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlID8/IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEJvb2xlYW4gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgICAgICAgIGlucHV0LmRhdGEgPSBCb29sZWFuKGlucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYm9vbGVhbikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5ib29sZWFuLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZEJvb2xlYW4uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQm9vbGVhbih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbixcbiAgICAgICAgY29lcmNlOiBwYXJhbXM/LmNvZXJjZSB8fCBmYWxzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2REYXRlIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICAgICAgICBpbnB1dC5kYXRhID0gbmV3IERhdGUoaW5wdXQuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5kYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmRhdGUsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0LmRhdGEuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XG4gICAgICAgIGxldCBjdHggPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YS5nZXRUaW1lKCkgPCBjaGVjay52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEuZ2V0VGltZSgpID4gY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZShpbnB1dC5kYXRhLmdldFRpbWUoKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9hZGRDaGVjayhjaGVjaykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkRhdGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICAgICAgICB2YWx1ZTogbWluRGF0ZS5nZXRUaW1lKCksXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4RGF0ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBtYXhEYXRlLmdldFRpbWUoKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5EYXRlKCkge1xuICAgICAgICBsZXQgbWluID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW4gIT0gbnVsbCA/IG5ldyBEYXRlKG1pbikgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgbWF4RGF0ZSgpIHtcbiAgICAgICAgbGV0IG1heCA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgICAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4ICE9IG51bGwgPyBuZXcgRGF0ZShtYXgpIDogbnVsbDtcbiAgICB9XG59XG5ab2REYXRlLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgICBjaGVja3M6IFtdLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlIHx8IGZhbHNlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERhdGUsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kU3ltYm9sIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3ltYm9sKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnN5bWJvbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RTeW1ib2wuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kU3ltYm9sKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTeW1ib2wsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5kZWZpbmVkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RVbmRlZmluZWQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5kZWZpbmVkKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmRlZmluZWQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTnVsbCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubnVsbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2ROdWxsLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE51bGwoe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQW55IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8vIHRvIHByZXZlbnQgaW5zdGFuY2VzIG9mIG90aGVyIGNsYXNzZXMgZnJvbSBleHRlbmRpbmcgWm9kQW55LiB0aGlzIGNhdXNlcyBpc3N1ZXMgd2l0aCBjYXRjaGFsbCBpbiBab2RPYmplY3QuXG4gICAgICAgIHRoaXMuX2FueSA9IHRydWU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kQW55LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEFueSh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZFVua25vd24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLy8gcmVxdWlyZWRcbiAgICAgICAgdGhpcy5fdW5rbm93biA9IHRydWU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kVW5rbm93bi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RVbmtub3duKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmtub3duLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZE5ldmVyIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmV2ZXIsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG59XG5ab2ROZXZlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROZXZlcih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmV2ZXIsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVm9pZCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS52b2lkLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZFZvaWQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVm9pZCh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVm9pZCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RBcnJheSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCwgc3RhdHVzIH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5hcnJheSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYuZXhhY3RMZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGN0eC5kYXRhLmxlbmd0aCA+IGRlZi5leGFjdExlbmd0aC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY3R4LmRhdGEubGVuZ3RoIDwgZGVmLmV4YWN0TGVuZ3RoLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHRvb0JpZyB8fCB0b29TbWFsbCkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiB0b29CaWcgPyBab2RJc3N1ZUNvZGUudG9vX2JpZyA6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgIG1pbmltdW06ICh0b29TbWFsbCA/IGRlZi5leGFjdExlbmd0aC52YWx1ZSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW06ICh0b29CaWcgPyBkZWYuZXhhY3RMZW5ndGgudmFsdWUgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5leGFjdExlbmd0aC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWluTGVuZ3RoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgZGVmLm1pbkxlbmd0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBkZWYubWluTGVuZ3RoLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWluTGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5tYXhMZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPiBkZWYubWF4TGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBkZWYubWF4TGVuZ3RoLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4TGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VBc3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcbiAgICAgICAgICAgIH0pKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRlZi50eXBlLl9wYXJzZVN5bmMobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGU7XG4gICAgfVxuICAgIG1pbihtaW5MZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtaW5MZW5ndGg6IHsgdmFsdWU6IG1pbkxlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgbWF4TGVuZ3RoOiB7IHZhbHVlOiBtYXhMZW5ndGgsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGVuZ3RoKGxlbiwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGV4YWN0TGVuZ3RoOiB7IHZhbHVlOiBsZW4sIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW4oMSwgbWVzc2FnZSk7XG4gICAgfVxufVxuWm9kQXJyYXkuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgIHR5cGU6IHNjaGVtYSxcbiAgICAgICAgbWluTGVuZ3RoOiBudWxsLFxuICAgICAgICBtYXhMZW5ndGg6IG51bGwsXG4gICAgICAgIGV4YWN0TGVuZ3RoOiBudWxsLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFycmF5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gZGVlcFBhcnRpYWxpZnkoc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9iamVjdCkge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEuc2hhcGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gc2NoZW1hLnNoYXBlW2tleV07XG4gICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gWm9kT3B0aW9uYWwuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KGZpZWxkU2NoZW1hKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4uc2NoZW1hLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RBcnJheSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnNjaGVtYS5fZGVmLFxuICAgICAgICAgICAgdHlwZTogZGVlcFBhcnRpYWxpZnkoc2NoZW1hLmVsZW1lbnQpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgcmV0dXJuIFpvZE9wdGlvbmFsLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZE51bGxhYmxlLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kVHVwbGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZFR1cGxlLmNyZWF0ZShzY2hlbWEuaXRlbXMubWFwKChpdGVtKSA9PiBkZWVwUGFydGlhbGlmeShpdGVtKSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kT2JqZWN0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBJbiBtb3N0IGNhc2VzLCB0aGlzIGlzIG5vIGxvbmdlciBuZWVkZWQgLSB1bmtub3duIHByb3BlcnRpZXMgYXJlIG5vdyBzaWxlbnRseSBzdHJpcHBlZC5cbiAgICAgICAgICogSWYgeW91IHdhbnQgdG8gcGFzcyB0aHJvdWdoIHVua25vd24gcHJvcGVydGllcywgdXNlIGAucGFzc3Rocm91Z2goKWAgaW5zdGVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm9uc3RyaWN0ID0gdGhpcy5wYXNzdGhyb3VnaDtcbiAgICAgICAgLy8gZXh0ZW5kPFxuICAgICAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlLFxuICAgICAgICAvLyAgIE5ld091dHB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBPdXRwdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXG4gICAgICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX291dHB1dFwiXVxuICAgICAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAgICAgLy8gICAgICAgPyBPdXRwdXRba11cbiAgICAgICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAgICAgLy8gICB9PixcbiAgICAgICAgLy8gICBOZXdJbnB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBJbnB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfaW5wdXRcIl1cbiAgICAgICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAgICAgLy8gICAgICAgPyBJbnB1dFtrXVxuICAgICAgICAvLyAgICAgICA6IG5ldmVyO1xuICAgICAgICAvLyAgIH0+XG4gICAgICAgIC8vID4oXG4gICAgICAgIC8vICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gKTogWm9kT2JqZWN0PFxuICAgICAgICAvLyAgIGV4dGVuZFNoYXBlPFQsIEF1Z21lbnRhdGlvbj4sXG4gICAgICAgIC8vICAgVW5rbm93bktleXMsXG4gICAgICAgIC8vICAgQ2F0Y2hhbGwsXG4gICAgICAgIC8vICAgTmV3T3V0cHV0LFxuICAgICAgICAvLyAgIE5ld0lucHV0XG4gICAgICAgIC8vID4ge1xuICAgICAgICAvLyAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgLy8gICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgLy8gICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAvLyAgICAgICAuLi50aGlzLl9kZWYuc2hhcGUoKSxcbiAgICAgICAgLy8gICAgICAgLi4uYXVnbWVudGF0aW9uLFxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vICAgfSkgYXMgYW55O1xuICAgICAgICAvLyB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYC5leHRlbmRgIGluc3RlYWRcbiAgICAgICAgICogICovXG4gICAgICAgIHRoaXMuYXVnbWVudCA9IHRoaXMuZXh0ZW5kO1xuICAgIH1cbiAgICBfZ2V0Q2FjaGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVkICE9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLl9kZWYuc2hhcGUoKTtcbiAgICAgICAgY29uc3Qga2V5cyA9IHV0aWwub2JqZWN0S2V5cyhzaGFwZSk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IHsgc2hhcGUsIGtleXMgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IHsgc2hhcGUsIGtleXM6IHNoYXBlS2V5cyB9ID0gdGhpcy5fZ2V0Q2FjaGVkKCk7XG4gICAgICAgIGNvbnN0IGV4dHJhS2V5cyA9IFtdO1xuICAgICAgICBpZiAoISh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlciAmJiB0aGlzLl9kZWYudW5rbm93bktleXMgPT09IFwic3RyaXBcIikpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGN0eC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFwZUtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBleHRyYUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBzaGFwZUtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleVZhbGlkYXRvciA9IHNoYXBlW2tleV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXkgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZToga2V5VmFsaWRhdG9yLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlcikge1xuICAgICAgICAgICAgY29uc3QgdW5rbm93bktleXMgPSB0aGlzLl9kZWYudW5rbm93bktleXM7XG4gICAgICAgICAgICBpZiAodW5rbm93bktleXMgPT09IFwicGFzc3Rocm91Z2hcIikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICAgICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBjdHguZGF0YVtrZXldIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmljdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnVucmVjb2duaXplZF9rZXlzLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogZXh0cmFLZXlzLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaXBcIikge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlcm5hbCBab2RPYmplY3QgZXJyb3I6IGludmFsaWQgdW5rbm93bktleXMgdmFsdWUuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBydW4gY2F0Y2hhbGwgdmFsaWRhdGlvblxuICAgICAgICAgICAgY29uc3QgY2F0Y2hhbGwgPSB0aGlzLl9kZWYuY2F0Y2hhbGw7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBleHRyYUtleXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgICAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2F0Y2hhbGwuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIGtleSkgLy8sIGN0eC5jaGlsZChrZXkpLCB2YWx1ZSwgZ2V0UGFyc2VkVHlwZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3luY1BhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IHBhaXIuYWx3YXlzU2V0LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bmNQYWlycztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHN5bmNQYWlycykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBzaGFwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zaGFwZSgpO1xuICAgIH1cbiAgICBzdHJpY3QobWVzc2FnZSkge1xuICAgICAgICBlcnJvclV0aWwuZXJyVG9PYmo7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgICAgICAgLi4uKG1lc3NhZ2UgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRFcnJvciA9IHRoaXMuX2RlZi5lcnJvck1hcD8uKGlzc3VlLCBjdHgpLm1lc3NhZ2UgPz8gY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcInVucmVjb2duaXplZF9rZXlzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLm1lc3NhZ2UgPz8gZGVmYXVsdEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZmF1bHRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RyaXAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwYXNzdGhyb3VnaCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgdW5rbm93bktleXM6IFwicGFzc3Rocm91Z2hcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNvbnN0IEF1Z21lbnRGYWN0b3J5ID1cbiAgICAvLyAgIDxEZWYgZXh0ZW5kcyBab2RPYmplY3REZWY+KGRlZjogRGVmKSA9PlxuICAgIC8vICAgPEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlPihcbiAgICAvLyAgICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAvLyAgICk6IFpvZE9iamVjdDxcbiAgICAvLyAgICAgZXh0ZW5kU2hhcGU8UmV0dXJuVHlwZTxEZWZbXCJzaGFwZVwiXT4sIEF1Z21lbnRhdGlvbj4sXG4gICAgLy8gICAgIERlZltcInVua25vd25LZXlzXCJdLFxuICAgIC8vICAgICBEZWZbXCJjYXRjaGFsbFwiXVxuICAgIC8vICAgPiA9PiB7XG4gICAgLy8gICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAvLyAgICAgICAuLi5kZWYsXG4gICAgLy8gICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgLy8gICAgICAgICAuLi5kZWYuc2hhcGUoKSxcbiAgICAvLyAgICAgICAgIC4uLmF1Z21lbnRhdGlvbixcbiAgICAvLyAgICAgICB9KSxcbiAgICAvLyAgICAgfSkgYXMgYW55O1xuICAgIC8vICAgfTtcbiAgICBleHRlbmQoYXVnbWVudGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxuICAgICAgICAgICAgICAgIC4uLmF1Z21lbnRhdGlvbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJpb3IgdG8gem9kQDEuMC4xMiB0aGVyZSB3YXMgYSBidWcgaW4gdGhlXG4gICAgICogaW5mZXJyZWQgdHlwZSBvZiBtZXJnZWQgb2JqZWN0cy4gUGxlYXNlXG4gICAgICogdXBncmFkZSBpZiB5b3UgYXJlIGV4cGVyaWVuY2luZyBpc3N1ZXMuXG4gICAgICovXG4gICAgbWVyZ2UobWVyZ2luZykge1xuICAgICAgICBjb25zdCBtZXJnZWQgPSBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgICAgICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICAgICAgLi4ubWVyZ2luZy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICB9XG4gICAgLy8gbWVyZ2U8XG4gICAgLy8gICBJbmNvbWluZyBleHRlbmRzIEFueVpvZE9iamVjdCxcbiAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIEluY29taW5nW1wic2hhcGVcIl0sXG4gICAgLy8gICBOZXdPdXRwdXQgZXh0ZW5kcyB7XG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIE91dHB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAvLyAgICAgICA/IEF1Z21lbnRhdGlvbltrXVtcIl9vdXRwdXRcIl1cbiAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAvLyAgICAgICA/IE91dHB1dFtrXVxuICAgIC8vICAgICAgIDogbmV2ZXI7XG4gICAgLy8gICB9LFxuICAgIC8vICAgTmV3SW5wdXQgZXh0ZW5kcyB7XG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIElucHV0XTogayBleHRlbmRzIGtleW9mIEF1Z21lbnRhdGlvblxuICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX2lucHV0XCJdXG4gICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAvLyAgICAgICA/IElucHV0W2tdXG4gICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAvLyAgIH1cbiAgICAvLyA+KFxuICAgIC8vICAgbWVyZ2luZzogSW5jb21pbmdcbiAgICAvLyApOiBab2RPYmplY3Q8XG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdLFxuICAgIC8vICAgTmV3T3V0cHV0LFxuICAgIC8vICAgTmV3SW5wdXRcbiAgICAvLyA+IHtcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxuICAgIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLy8gICB9KSBhcyBhbnk7XG4gICAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAgIC8vIH1cbiAgICBzZXRLZXkoa2V5LCBzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVnbWVudCh7IFtrZXldOiBzY2hlbWEgfSk7XG4gICAgfVxuICAgIC8vIG1lcmdlPEluY29taW5nIGV4dGVuZHMgQW55Wm9kT2JqZWN0PihcbiAgICAvLyAgIG1lcmdpbmc6IEluY29taW5nXG4gICAgLy8gKTogLy9ab2RPYmplY3Q8VCAmIEluY29taW5nW1wiX3NoYXBlXCJdLCBVbmtub3duS2V5cywgQ2F0Y2hhbGw+ID0gKG1lcmdpbmcpID0+IHtcbiAgICAvLyBab2RPYmplY3Q8XG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdXG4gICAgLy8gPiB7XG4gICAgLy8gICAvLyBjb25zdCBtZXJnZWRTaGFwZSA9IG9iamVjdFV0aWwubWVyZ2VTaGFwZXMoXG4gICAgLy8gICAvLyAgIHRoaXMuX2RlZi5zaGFwZSgpLFxuICAgIC8vICAgLy8gICBtZXJnaW5nLl9kZWYuc2hhcGUoKVxuICAgIC8vICAgLy8gKTtcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxuICAgIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLy8gICB9KSBhcyBhbnk7XG4gICAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAgIC8vIH1cbiAgICBjYXRjaGFsbChpbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjYXRjaGFsbDogaW5kZXgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwaWNrKG1hc2spIHtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdXRpbC5vYmplY3RLZXlzKG1hc2spKSB7XG4gICAgICAgICAgICBpZiAobWFza1trZXldICYmIHRoaXMuc2hhcGVba2V5XSkge1xuICAgICAgICAgICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb21pdChtYXNrKSB7XG4gICAgICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgaWYgKCFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgZGVlcFBhcnRpYWwoKSB7XG4gICAgICAgIHJldHVybiBkZWVwUGFydGlhbGlmeSh0aGlzKTtcbiAgICB9XG4gICAgcGFydGlhbChtYXNrKSB7XG4gICAgICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICBpZiAobWFzayAmJiAhbWFza1trZXldKSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hLm9wdGlvbmFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVxdWlyZWQobWFzaykge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpIHtcbiAgICAgICAgICAgIGlmIChtYXNrICYmICFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICAgICAgbGV0IG5ld0ZpZWxkID0gZmllbGRTY2hlbWE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5ld0ZpZWxkIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQgPSBuZXdGaWVsZC5fZGVmLmlubmVyVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IG5ld0ZpZWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGtleW9mKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlWm9kRW51bSh1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpO1xuICAgIH1cbn1cblpvZE9iamVjdC5jcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB1bmtub3duS2V5czogXCJzdHJpcFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kT2JqZWN0LnN0cmljdENyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kT2JqZWN0LmxhenljcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIGNhdGNoYWxsOiBab2ROZXZlci5jcmVhdGUoKSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5pb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9kZWYub3B0aW9ucztcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVzdWx0cyhyZXN1bHRzKSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gZmlyc3QgaXNzdWUtZnJlZSB2YWxpZGF0aW9uIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaXNzdWVzIGZyb20gZGlydHkgb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goLi4ucmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmV0dXJuIGludmFsaWRcbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gcmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4gbmV3IFpvZEVycm9yKHJlc3VsdC5jdHguY29tbW9uLmlzc3VlcykpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb24sXG4gICAgICAgICAgICAgICAgdW5pb25FcnJvcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwob3B0aW9ucy5tYXAoYXN5bmMgKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogYXdhaXQgb3B0aW9uLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgY3R4OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpLnRoZW4oaGFuZGxlUmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZGlydHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBpc3N1ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEN0eCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIiAmJiAhZGlydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB7IHJlc3VsdCwgY3R4OiBjaGlsZEN0eCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRDdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVzLnB1c2goY2hpbGRDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgICAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5kaXJ0eS5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpcnR5LnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gaXNzdWVzLm1hcCgoaXNzdWVzKSA9PiBuZXcgWm9kRXJyb3IoaXNzdWVzKSk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbixcbiAgICAgICAgICAgICAgICB1bmlvbkVycm9ycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG59XG5ab2RVbmlvbi5jcmVhdGUgPSAodHlwZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5pb24oe1xuICAgICAgICBvcHRpb25zOiB0eXBlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmlvbixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy9cbi8vLy8vLy8vLy8gICAgICBab2REaXNjcmltaW5hdGVkVW5pb24gICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBnZXREaXNjcmltaW5hdG9yID0gKHR5cGUpID0+IHtcbiAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExhenkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS5zY2hlbWEpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRWZmZWN0cykge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLmlubmVyVHlwZSgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExpdGVyYWwpIHtcbiAgICAgICAgcmV0dXJuIFt0eXBlLnZhbHVlXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHR5cGUub3B0aW9ucztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE5hdGl2ZUVudW0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKHR5cGUuZW51bSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2REZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuX2RlZi5pbm5lclR5cGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kVW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtudWxsXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE9wdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkLCAuLi5nZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGxhYmxlKSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgLi4uZ2V0RGlzY3JpbWluYXRvcih0eXBlLnVud3JhcCgpKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RCcmFuZGVkKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kUmVhZG9ubHkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RDYXRjaCkge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLl9kZWYuaW5uZXJUeXBlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuZXhwb3J0IGNsYXNzIFpvZERpc2NyaW1pbmF0ZWRVbmlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5vYmplY3QsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yID0gdGhpcy5kaXNjcmltaW5hdG9yO1xuICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWUgPSBjdHguZGF0YVtkaXNjcmltaW5hdG9yXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25zTWFwLmdldChkaXNjcmltaW5hdG9yVmFsdWUpO1xuICAgICAgICBpZiAoIW9wdGlvbikge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBBcnJheS5mcm9tKHRoaXMub3B0aW9uc01hcC5rZXlzKCkpLFxuICAgICAgICAgICAgICAgIHBhdGg6IFtkaXNjcmltaW5hdG9yXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpc2NyaW1pbmF0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuZGlzY3JpbWluYXRvcjtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnNNYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9uc01hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBkaXNjcmltaW5hdGVkIHVuaW9uIHNjaGVtYS4gSXRzIGJlaGF2aW91ciBpcyB2ZXJ5IHNpbWlsYXIgdG8gdGhhdCBvZiB0aGUgbm9ybWFsIHoudW5pb24oKSBjb25zdHJ1Y3Rvci5cbiAgICAgKiBIb3dldmVyLCBpdCBvbmx5IGFsbG93cyBhIHVuaW9uIG9mIG9iamVjdHMsIGFsbCBvZiB3aGljaCBuZWVkIHRvIHNoYXJlIGEgZGlzY3JpbWluYXRvciBwcm9wZXJ0eS4gVGhpcyBwcm9wZXJ0eSBtdXN0XG4gICAgICogaGF2ZSBhIGRpZmZlcmVudCB2YWx1ZSBmb3IgZWFjaCBvYmplY3QgaW4gdGhlIHVuaW9uLlxuICAgICAqIEBwYXJhbSBkaXNjcmltaW5hdG9yIHRoZSBuYW1lIG9mIHRoZSBkaXNjcmltaW5hdG9yIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHR5cGVzIGFuIGFycmF5IG9mIG9iamVjdCBzY2hlbWFzXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGUoZGlzY3JpbWluYXRvciwgb3B0aW9ucywgcGFyYW1zKSB7XG4gICAgICAgIC8vIEdldCBhbGwgdGhlIHZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWVzXG4gICAgICAgIGNvbnN0IG9wdGlvbnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIHRyeSB7XG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWVzID0gZ2V0RGlzY3JpbWluYXRvcih0eXBlLnNoYXBlW2Rpc2NyaW1pbmF0b3JdKTtcbiAgICAgICAgICAgIGlmICghZGlzY3JpbWluYXRvclZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgZGlzY3JpbWluYXRvciB2YWx1ZSBmb3Iga2V5IFxcYCR7ZGlzY3JpbWluYXRvcn1cXGAgY291bGQgbm90IGJlIGV4dHJhY3RlZCBmcm9tIGFsbCBzY2hlbWEgb3B0aW9uc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkaXNjcmltaW5hdG9yVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNNYXAuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERpc2NyaW1pbmF0b3IgcHJvcGVydHkgJHtTdHJpbmcoZGlzY3JpbWluYXRvcil9IGhhcyBkdXBsaWNhdGUgdmFsdWUgJHtTdHJpbmcodmFsdWUpfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2REaXNjcmltaW5hdGVkVW5pb24oe1xuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REaXNjcmltaW5hdGVkVW5pb24sXG4gICAgICAgICAgICBkaXNjcmltaW5hdG9yLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnNNYXAsXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlVmFsdWVzKGEsIGIpIHtcbiAgICBjb25zdCBhVHlwZSA9IGdldFBhcnNlZFR5cGUoYSk7XG4gICAgY29uc3QgYlR5cGUgPSBnZXRQYXJzZWRUeXBlKGIpO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBkYXRhOiBhIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgICAgY29uc3QgYktleXMgPSB1dGlsLm9iamVjdEtleXMoYik7XG4gICAgICAgIGNvbnN0IHNoYXJlZEtleXMgPSB1dGlsLm9iamVjdEtleXMoYSkuZmlsdGVyKChrZXkpID0+IGJLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpO1xuICAgICAgICBjb25zdCBuZXdPYmogPSB7IC4uLmEsIC4uLmIgfTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcmVkS2V5cykge1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhhW2tleV0sIGJba2V5XSk7XG4gICAgICAgICAgICBpZiAoIXNoYXJlZFZhbHVlLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IHNoYXJlZFZhbHVlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IG5ld09iaiB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1BID0gYVtpbmRleF07XG4gICAgICAgICAgICBjb25zdCBpdGVtQiA9IGJbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhpdGVtQSwgaXRlbUIpO1xuICAgICAgICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3QXJyYXkucHVzaChzaGFyZWRWYWx1ZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogbmV3QXJyYXkgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUuZGF0ZSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmICthID09PSArYikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogYSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFpvZEludGVyc2VjdGlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBoYW5kbGVQYXJzZWQgPSAocGFyc2VkTGVmdCwgcGFyc2VkUmlnaHQpID0+IHtcbiAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQocGFyc2VkTGVmdCkgfHwgaXNBYm9ydGVkKHBhcnNlZFJpZ2h0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VWYWx1ZXMocGFyc2VkTGVmdC52YWx1ZSwgcGFyc2VkUmlnaHQudmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFtZXJnZWQudmFsaWQpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGlydHkocGFyc2VkTGVmdCkgfHwgaXNEaXJ0eShwYXJzZWRSaWdodCkpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogbWVyZ2VkLmRhdGEgfTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmLmxlZnQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZi5yaWdodC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKS50aGVuKChbbGVmdCwgcmlnaHRdKSA9PiBoYW5kbGVQYXJzZWQobGVmdCwgcmlnaHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVQYXJzZWQodGhpcy5fZGVmLmxlZnQuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KSwgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZSA9IChsZWZ0LCByaWdodCwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RJbnRlcnNlY3Rpb24oe1xuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kSW50ZXJzZWN0aW9uLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8gdHlwZSBab2RUdXBsZUl0ZW1zID0gW1pvZFR5cGVBbnksIC4uLlpvZFR5cGVBbnlbXV07XG5leHBvcnQgY2xhc3MgWm9kVHVwbGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmFycmF5LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA8IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgbWluaW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdCA9IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgICBpZiAoIXJlc3QgJiYgY3R4LmRhdGEubGVuZ3RoID4gdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgbWF4aW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSBbLi4uY3R4LmRhdGFdXG4gICAgICAgICAgICAubWFwKChpdGVtLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuX2RlZi5pdGVtc1tpdGVtSW5kZXhdIHx8IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgICAgICAgaWYgKCFzY2hlbWEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGl0ZW1JbmRleCkpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcigoeCkgPT4gISF4KTsgLy8gZmlsdGVyIG51bGxzXG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaXRlbXMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIGl0ZW1zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaXRlbXM7XG4gICAgfVxuICAgIHJlc3QocmVzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFR1cGxlKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHJlc3QsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblpvZFR1cGxlLmNyZWF0ZSA9IChzY2hlbWFzLCBwYXJhbXMpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhbiBhcnJheSBvZiBzY2hlbWFzIHRvIHoudHVwbGUoWyAuLi4gXSlcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kVHVwbGUoe1xuICAgICAgICBpdGVtczogc2NoZW1hcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RUdXBsZSxcbiAgICAgICAgcmVzdDogbnVsbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RSZWNvcmQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBnZXQga2V5U2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgfVxuICAgIGdldCB2YWx1ZVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgICAgIGNvbnN0IGtleVR5cGUgPSB0aGlzLl9kZWYua2V5VHlwZTtcbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3R4LmRhdGEpIHtcbiAgICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBjdHguZGF0YVtrZXldLCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0QXN5bmMoc3RhdHVzLCBwYWlycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShmaXJzdCwgc2Vjb25kLCB0aGlyZCkge1xuICAgICAgICBpZiAoc2Vjb25kIGluc3RhbmNlb2YgWm9kVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xuICAgICAgICAgICAgICAgIGtleVR5cGU6IGZpcnN0LFxuICAgICAgICAgICAgICAgIHZhbHVlVHlwZTogc2Vjb25kLFxuICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcmQpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xuICAgICAgICAgICAga2V5VHlwZTogWm9kU3RyaW5nLmNyZWF0ZSgpLFxuICAgICAgICAgICAgdmFsdWVUeXBlOiBmaXJzdCxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhzZWNvbmQpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kTWFwIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IGtleVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgIH1cbiAgICBnZXQgdmFsdWVTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm1hcCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5tYXAsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gWy4uLmN0eC5kYXRhLmVudHJpZXMoKV0ubWFwKChba2V5LCB2YWx1ZV0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIFtpbmRleCwgXCJrZXlcIl0pKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBbaW5kZXgsIFwidmFsdWVcIl0pKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwYWlyLmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsTWFwLnNldChrZXkudmFsdWUsIHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblpvZE1hcC5jcmVhdGUgPSAoa2V5VHlwZSwgdmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE1hcCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAga2V5VHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RNYXAsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kU2V0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zZXQpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuc2V0LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xuICAgICAgICBpZiAoZGVmLm1pblNpemUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5zaXplIDwgZGVmLm1pblNpemUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgbWluaW11bTogZGVmLm1pblNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWluU2l6ZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWF4U2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLnNpemUgPiBkZWYubWF4U2l6ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogZGVmLm1heFNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4U2l6ZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGZ1bmN0aW9uIGZpbmFsaXplU2V0KGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgcGFyc2VkU2V0LmFkZChlbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogcGFyc2VkU2V0IH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbLi4uY3R4LmRhdGEudmFsdWVzKCldLm1hcCgoaXRlbSwgaSkgPT4gdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKSk7XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZWxlbWVudHMpLnRoZW4oKGVsZW1lbnRzKSA9PiBmaW5hbGl6ZVNldChlbGVtZW50cykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmFsaXplU2V0KGVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtaW4obWluU2l6ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtaW5TaXplOiB7IHZhbHVlOiBtaW5TaXplLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1heChtYXhTaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIG1heFNpemU6IHsgdmFsdWU6IG1heFNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2l6ZShzaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbihzaXplLCBtZXNzYWdlKS5tYXgoc2l6ZSwgbWVzc2FnZSk7XG4gICAgfVxuICAgIG5vbmVtcHR5KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICAgIH1cbn1cblpvZFNldC5jcmVhdGUgPSAodmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAgbWluU2l6ZTogbnVsbCxcbiAgICAgICAgbWF4U2l6ZTogbnVsbCxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTZXQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kRnVuY3Rpb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZSA9IHRoaXMuaW1wbGVtZW50O1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbikge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5mdW5jdGlvbixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VBcmdzSXNzdWUoYXJncywgZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXBzOiBbY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsIGN0eC5zY2hlbWFFcnJvck1hcCwgZ2V0RXJyb3JNYXAoKSwgZGVmYXVsdEVycm9yTWFwXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgICAgICAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2FyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzRXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYWtlUmV0dXJuc0lzc3VlKHJldHVybnMsIGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUlzc3VlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiByZXR1cm5zLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIGVycm9yTWFwczogW2N0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLCBjdHguc2NoZW1hRXJyb3JNYXAsIGdldEVycm9yTWFwKCksIGRlZmF1bHRFcnJvck1hcF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgICAgICAgICAgIGlzc3VlRGF0YToge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9yZXR1cm5fdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZUVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyYW1zID0geyBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAgfTtcbiAgICAgICAgY29uc3QgZm4gPSBjdHguZGF0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5yZXR1cm5zIGluc3RhbmNlb2YgWm9kUHJvbWlzZSkge1xuICAgICAgICAgICAgLy8gV291bGQgbG92ZSBhIHdheSB0byBhdm9pZCBkaXNhYmxpbmcgdGhpcyBydWxlLCBidXQgd2UgbmVlZFxuICAgICAgICAgICAgLy8gYW4gYWxpYXMgKHVzaW5nIGFuIGFycm93IGZ1bmN0aW9uIHdhcyB3aGF0IGNhdXNlZCAyNjUxKS5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIE9LKGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoW10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBhd2FpdCBtZS5fZGVmLmFyZ3MucGFyc2VBc3luYyhhcmdzLCBwYXJhbXMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VBcmdzSXNzdWUoYXJncywgZSkpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRSZXR1cm5zID0gYXdhaXQgbWUuX2RlZi5yZXR1cm5zLl9kZWYudHlwZVxuICAgICAgICAgICAgICAgICAgICAucGFyc2VBc3luYyhyZXN1bHQsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBlKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRSZXR1cm5zO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXb3VsZCBsb3ZlIGEgd2F5IHRvIGF2b2lkIGRpc2FibGluZyB0aGlzIHJ1bGUsIGJ1dCB3ZSBuZWVkXG4gICAgICAgICAgICAvLyBhbiBhbGlhcyAodXNpbmcgYW4gYXJyb3cgZnVuY3Rpb24gd2FzIHdoYXQgY2F1c2VkIDI2NTEpLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gT0soZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gbWUuX2RlZi5hcmdzLnNhZmVQYXJzZShhcmdzLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkQXJncy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZUFyZ3NJc3N1ZShhcmdzLCBwYXJzZWRBcmdzLmVycm9yKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzLmRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSBtZS5fZGVmLnJldHVybnMuc2FmZVBhcnNlKHJlc3VsdCwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZFJldHVybnMuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgWm9kRXJyb3IoW21ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBwYXJzZWRSZXR1cm5zLmVycm9yKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkUmV0dXJucy5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5hcmdzO1xuICAgIH1cbiAgICByZXR1cm5UeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnJldHVybnM7XG4gICAgfVxuICAgIGFyZ3MoLi4uaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBhcmdzOiBab2RUdXBsZS5jcmVhdGUoaXRlbXMpLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm5zKHJldHVyblR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICByZXR1cm5zOiByZXR1cm5UeXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW1wbGVtZW50KGZ1bmMpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkRnVuYyA9IHRoaXMucGFyc2UoZnVuYyk7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZWRGdW5jO1xuICAgIH1cbiAgICBzdHJpY3RJbXBsZW1lbnQoZnVuYykge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUoYXJncywgcmV0dXJucywgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRnVuY3Rpb24oe1xuICAgICAgICAgICAgYXJnczogKGFyZ3MgPyBhcmdzIDogWm9kVHVwbGUuY3JlYXRlKFtdKS5yZXN0KFpvZFVua25vd24uY3JlYXRlKCkpKSxcbiAgICAgICAgICAgIHJldHVybnM6IHJldHVybnMgfHwgWm9kVW5rbm93bi5jcmVhdGUoKSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRnVuY3Rpb24sXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RMYXp5IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IHNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5nZXR0ZXIoKTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBsYXp5U2NoZW1hID0gdGhpcy5fZGVmLmdldHRlcigpO1xuICAgICAgICByZXR1cm4gbGF6eVNjaGVtYS5fcGFyc2UoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pO1xuICAgIH1cbn1cblpvZExhenkuY3JlYXRlID0gKGdldHRlciwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RMYXp5KHtcbiAgICAgICAgZ2V0dGVyOiBnZXR0ZXIsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGF6eSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RMaXRlcmFsIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhICE9PSB0aGlzLl9kZWYudmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9saXRlcmFsLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB0aGlzLl9kZWYudmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWU7XG4gICAgfVxufVxuWm9kTGl0ZXJhbC5jcmVhdGUgPSAodmFsdWUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTGl0ZXJhbCh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMaXRlcmFsLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gY3JlYXRlWm9kRW51bSh2YWx1ZXMsIHBhcmFtcykge1xuICAgIHJldHVybiBuZXcgWm9kRW51bSh7XG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59XG5leHBvcnQgY2xhc3MgWm9kRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0LmRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB1dGlsLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZSA9IG5ldyBTZXQodGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZS5oYXMoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgICB9XG4gICAgZ2V0IGVudW0oKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBnZXQgVmFsdWVzKCkge1xuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgICAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgICB9XG4gICAgZ2V0IEVudW0oKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBleHRyYWN0KHZhbHVlcywgbmV3RGVmID0gdGhpcy5fZGVmKSB7XG4gICAgICAgIHJldHVybiBab2RFbnVtLmNyZWF0ZSh2YWx1ZXMsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIC4uLm5ld0RlZixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGV4Y2x1ZGUodmFsdWVzLCBuZXdEZWYgPSB0aGlzLl9kZWYpIHtcbiAgICAgICAgcmV0dXJuIFpvZEVudW0uY3JlYXRlKHRoaXMub3B0aW9ucy5maWx0ZXIoKG9wdCkgPT4gIXZhbHVlcy5pbmNsdWRlcyhvcHQpKSwge1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgLi4ubmV3RGVmLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5ab2RFbnVtLmNyZWF0ZSA9IGNyZWF0ZVpvZEVudW07XG5leHBvcnQgY2xhc3MgWm9kTmF0aXZlRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBuYXRpdmVFbnVtVmFsdWVzID0gdXRpbC5nZXRWYWxpZEVudW1WYWx1ZXModGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZyAmJiBjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbC5vYmplY3RWYWx1ZXMobmF0aXZlRW51bVZhbHVlcyk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogdXRpbC5qb2luVmFsdWVzKGV4cGVjdGVkVmFsdWVzKSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSBuZXcgU2V0KHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzKHRoaXMuX2RlZi52YWx1ZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlLmhhcyhpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB1dGlsLm9iamVjdFZhbHVlcyhuYXRpdmVFbnVtVmFsdWVzKTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIGdldCBlbnVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgICB9XG59XG5ab2ROYXRpdmVFbnVtLmNyZWF0ZSA9ICh2YWx1ZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTmF0aXZlRW51bSh7XG4gICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hdGl2ZUVudW0sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kUHJvbWlzZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5wcm9taXNlICYmIGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnByb21pc2UsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9taXNpZmllZCA9IGN0eC5wYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLnByb21pc2UgPyBjdHguZGF0YSA6IFByb21pc2UucmVzb2x2ZShjdHguZGF0YSk7XG4gICAgICAgIHJldHVybiBPSyhwcm9taXNpZmllZC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUucGFyc2VBc3luYyhkYXRhLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXA6IGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5ab2RQcm9taXNlLmNyZWF0ZSA9IChzY2hlbWEsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kUHJvbWlzZSh7XG4gICAgICAgIHR5cGU6IHNjaGVtYSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RQcm9taXNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVmZmVjdHMgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBpbm5lclR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBzb3VyY2VUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0c1xuICAgICAgICAgICAgPyB0aGlzLl9kZWYuc2NoZW1hLnNvdXJjZVR5cGUoKVxuICAgICAgICAgICAgOiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gdGhpcy5fZGVmLmVmZmVjdCB8fCBudWxsO1xuICAgICAgICBjb25zdCBjaGVja0N0eCA9IHtcbiAgICAgICAgICAgIGFkZElzc3VlOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCBhcmcpO1xuICAgICAgICAgICAgICAgIGlmIChhcmcuZmF0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5wYXRoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY2hlY2tDdHguYWRkSXNzdWUgPSBjaGVja0N0eC5hZGRJc3N1ZS5iaW5kKGNoZWNrQ3R4KTtcbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInByZXByb2Nlc3NcIikge1xuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gZWZmZWN0LnRyYW5zZm9ybShjdHguZGF0YSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb2Nlc3NlZCkudGhlbihhc3luYyAocHJvY2Vzc2VkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvY2Vzc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBESVJUWShyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJyZWZpbmVtZW50XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGVSZWZpbmVtZW50ID0gKGFjYykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC5yZWZpbmVtZW50KGFjYywgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmMgcmVmaW5lbWVudCBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkXG4gICAgICAgICAgICAgICAgZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChpbm5lcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVSZWZpbmVtZW50KGlubmVyLnZhbHVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlID0gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQoYmFzZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXN5bmNocm9ub3VzIHRyYW5zZm9ybSBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiByZXN1bHQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChiYXNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZChiYXNlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpKS50aGVuKChyZXN1bHQpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGVmZmVjdCk7XG4gICAgfVxufVxuWm9kRWZmZWN0cy5jcmVhdGUgPSAoc2NoZW1hLCBlZmZlY3QsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgICBlZmZlY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5ab2RFZmZlY3RzLmNyZWF0ZVdpdGhQcmVwcm9jZXNzID0gKHByZXByb2Nlc3MsIHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBlZmZlY3Q6IHsgdHlwZTogXCJwcmVwcm9jZXNzXCIsIHRyYW5zZm9ybTogcHJlcHJvY2VzcyB9LFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgeyBab2RFZmZlY3RzIGFzIFpvZFRyYW5zZm9ybWVyIH07XG5leHBvcnQgY2xhc3MgWm9kT3B0aW9uYWwgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBPSyh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kT3B0aW9uYWwuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT3B0aW9uYWwoe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT3B0aW9uYWwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTnVsbGFibGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5udWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gT0sobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdW53cmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgICB9XG59XG5ab2ROdWxsYWJsZS5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROdWxsYWJsZSh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsYWJsZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2REZWZhdWx0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBsZXQgZGF0YSA9IGN0eC5kYXRhO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fZGVmLmRlZmF1bHRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZSh7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZURlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZERlZmF1bHQuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRGVmYXVsdCh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgICAgICBkZWZhdWx0VmFsdWU6IHR5cGVvZiBwYXJhbXMuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLmRlZmF1bHQgOiAoKSA9PiBwYXJhbXMuZGVmYXVsdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RDYXRjaCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgLy8gbmV3Q3R4IGlzIHVzZWQgdG8gbm90IGNvbGxlY3QgaXNzdWVzIGZyb20gaW5uZXIgdHlwZXMgaW4gY3R4XG4gICAgICAgIGNvbnN0IG5ld0N0eCA9IHtcbiAgICAgICAgICAgIC4uLmN0eCxcbiAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKHtcbiAgICAgICAgICAgIGRhdGE6IG5ld0N0eC5kYXRhLFxuICAgICAgICAgICAgcGF0aDogbmV3Q3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IHtcbiAgICAgICAgICAgICAgICAuLi5uZXdDdHgsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlzQXN5bmMocmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwidmFsaWRcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fZGVmLmNhdGNoVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogbmV3Q3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogXCJ2YWxpZFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCJcbiAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IG5ld0N0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlQ2F0Y2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZENhdGNoLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZENhdGNoLFxuICAgICAgICBjYXRjaFZhbHVlOiB0eXBlb2YgcGFyYW1zLmNhdGNoID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMuY2F0Y2ggOiAoKSA9PiBwYXJhbXMuY2F0Y2gsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTmFOIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubmFuKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm5hbixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbn1cblpvZE5hTi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROYU4oe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hTixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBCUkFORCA9IFN5bWJvbChcInpvZF9icmFuZFwiKTtcbmV4cG9ydCBjbGFzcyBab2RCcmFuZGVkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkYXRhID0gY3R4LmRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZS5fcGFyc2Uoe1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kUGlwZWxpbmUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUFzeW5jID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluUmVzdWx0ID0gYXdhaXQgdGhpcy5fZGVmLmluLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkoaW5SZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vdXQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUFzeW5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpblJlc3VsdCA9IHRoaXMuX2RlZi5pbi5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwiZGlydHlcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGluUmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLm91dC5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RQaXBlbGluZSh7XG4gICAgICAgICAgICBpbjogYSxcbiAgICAgICAgICAgIG91dDogYixcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUGlwZWxpbmUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RSZWFkb25seSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIGNvbnN0IGZyZWV6ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZChkYXRhKSkge1xuICAgICAgICAgICAgICAgIGRhdGEudmFsdWUgPSBPYmplY3QuZnJlZXplKGRhdGEudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0FzeW5jKHJlc3VsdCkgPyByZXN1bHQudGhlbigoZGF0YSkgPT4gZnJlZXplKGRhdGEpKSA6IGZyZWV6ZShyZXN1bHQpO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZFJlYWRvbmx5LmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFJlYWRvbmx5KHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlYWRvbmx5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgIHouY3VzdG9tICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gY2xlYW5QYXJhbXMocGFyYW1zLCBkYXRhKSB7XG4gICAgY29uc3QgcCA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyhkYXRhKSA6IHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHBhcmFtcyB9IDogcGFyYW1zO1xuICAgIGNvbnN0IHAyID0gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHAgfSA6IHA7XG4gICAgcmV0dXJuIHAyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbShjaGVjaywgX3BhcmFtcyA9IHt9LCBcbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiBQYXNzIGBmYXRhbGAgaW50byB0aGUgcGFyYW1zIG9iamVjdCBpbnN0ZWFkOlxuICpcbiAqIGBgYHRzXG4gKiB6LnN0cmluZygpLmN1c3RvbSgodmFsKSA9PiB2YWwubGVuZ3RoID4gNSwgeyBmYXRhbDogZmFsc2UgfSlcbiAqIGBgYFxuICpcbiAqL1xuZmF0YWwpIHtcbiAgICBpZiAoY2hlY2spXG4gICAgICAgIHJldHVybiBab2RBbnkuY3JlYXRlKCkuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IGNoZWNrKGRhdGEpO1xuICAgICAgICAgICAgaWYgKHIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIudGhlbigocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgX2ZhdGFsID0gcGFyYW1zLmZhdGFsID8/IGZhdGFsID8/IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYWRkSXNzdWUoeyBjb2RlOiBcImN1c3RvbVwiLCAuLi5wYXJhbXMsIGZhdGFsOiBfZmF0YWwgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IF9mYXRhbCA9IHBhcmFtcy5mYXRhbCA/PyBmYXRhbCA/PyB0cnVlO1xuICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh7IGNvZGU6IFwiY3VzdG9tXCIsIC4uLnBhcmFtcywgZmF0YWw6IF9mYXRhbCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIFpvZEFueS5jcmVhdGUoKTtcbn1cbmV4cG9ydCB7IFpvZFR5cGUgYXMgU2NoZW1hLCBab2RUeXBlIGFzIFpvZFNjaGVtYSB9O1xuZXhwb3J0IGNvbnN0IGxhdGUgPSB7XG4gICAgb2JqZWN0OiBab2RPYmplY3QubGF6eWNyZWF0ZSxcbn07XG5leHBvcnQgdmFyIFpvZEZpcnN0UGFydHlUeXBlS2luZDtcbihmdW5jdGlvbiAoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kKSB7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kU3RyaW5nXCJdID0gXCJab2RTdHJpbmdcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdW1iZXJcIl0gPSBcIlpvZE51bWJlclwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE5hTlwiXSA9IFwiWm9kTmFOXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQmlnSW50XCJdID0gXCJab2RCaWdJbnRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCb29sZWFuXCJdID0gXCJab2RCb29sZWFuXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGF0ZVwiXSA9IFwiWm9kRGF0ZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFN5bWJvbFwiXSA9IFwiWm9kU3ltYm9sXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5kZWZpbmVkXCJdID0gXCJab2RVbmRlZmluZWRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdWxsXCJdID0gXCJab2ROdWxsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQW55XCJdID0gXCJab2RBbnlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RVbmtub3duXCJdID0gXCJab2RVbmtub3duXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTmV2ZXJcIl0gPSBcIlpvZE5ldmVyXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVm9pZFwiXSA9IFwiWm9kVm9pZFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEFycmF5XCJdID0gXCJab2RBcnJheVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE9iamVjdFwiXSA9IFwiWm9kT2JqZWN0XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5pb25cIl0gPSBcIlpvZFVuaW9uXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCJdID0gXCJab2REaXNjcmltaW5hdGVkVW5pb25cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RJbnRlcnNlY3Rpb25cIl0gPSBcIlpvZEludGVyc2VjdGlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFR1cGxlXCJdID0gXCJab2RUdXBsZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFJlY29yZFwiXSA9IFwiWm9kUmVjb3JkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTWFwXCJdID0gXCJab2RNYXBcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RTZXRcIl0gPSBcIlpvZFNldFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEZ1bmN0aW9uXCJdID0gXCJab2RGdW5jdGlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZExhenlcIl0gPSBcIlpvZExhenlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RMaXRlcmFsXCJdID0gXCJab2RMaXRlcmFsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRW51bVwiXSA9IFwiWm9kRW51bVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEVmZmVjdHNcIl0gPSBcIlpvZEVmZmVjdHNcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROYXRpdmVFbnVtXCJdID0gXCJab2ROYXRpdmVFbnVtXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kT3B0aW9uYWxcIl0gPSBcIlpvZE9wdGlvbmFsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTnVsbGFibGVcIl0gPSBcIlpvZE51bGxhYmxlXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGVmYXVsdFwiXSA9IFwiWm9kRGVmYXVsdFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZENhdGNoXCJdID0gXCJab2RDYXRjaFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFByb21pc2VcIl0gPSBcIlpvZFByb21pc2VcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCcmFuZGVkXCJdID0gXCJab2RCcmFuZGVkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUGlwZWxpbmVcIl0gPSBcIlpvZFBpcGVsaW5lXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUmVhZG9ubHlcIl0gPSBcIlpvZFJlYWRvbmx5XCI7XG59KShab2RGaXJzdFBhcnR5VHlwZUtpbmQgfHwgKFpvZEZpcnN0UGFydHlUeXBlS2luZCA9IHt9KSk7XG4vLyByZXF1aXJlcyBUUyA0LjQrXG5jbGFzcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoLi4uXykgeyB9XG59XG5jb25zdCBpbnN0YW5jZU9mVHlwZSA9IChcbi8vIGNvbnN0IGluc3RhbmNlT2ZUeXBlID0gPFQgZXh0ZW5kcyBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxuY2xzLCBwYXJhbXMgPSB7XG4gICAgbWVzc2FnZTogYElucHV0IG5vdCBpbnN0YW5jZSBvZiAke2Nscy5uYW1lfWAsXG59KSA9PiBjdXN0b20oKGRhdGEpID0+IGRhdGEgaW5zdGFuY2VvZiBjbHMsIHBhcmFtcyk7XG5jb25zdCBzdHJpbmdUeXBlID0gWm9kU3RyaW5nLmNyZWF0ZTtcbmNvbnN0IG51bWJlclR5cGUgPSBab2ROdW1iZXIuY3JlYXRlO1xuY29uc3QgbmFuVHlwZSA9IFpvZE5hTi5jcmVhdGU7XG5jb25zdCBiaWdJbnRUeXBlID0gWm9kQmlnSW50LmNyZWF0ZTtcbmNvbnN0IGJvb2xlYW5UeXBlID0gWm9kQm9vbGVhbi5jcmVhdGU7XG5jb25zdCBkYXRlVHlwZSA9IFpvZERhdGUuY3JlYXRlO1xuY29uc3Qgc3ltYm9sVHlwZSA9IFpvZFN5bWJvbC5jcmVhdGU7XG5jb25zdCB1bmRlZmluZWRUeXBlID0gWm9kVW5kZWZpbmVkLmNyZWF0ZTtcbmNvbnN0IG51bGxUeXBlID0gWm9kTnVsbC5jcmVhdGU7XG5jb25zdCBhbnlUeXBlID0gWm9kQW55LmNyZWF0ZTtcbmNvbnN0IHVua25vd25UeXBlID0gWm9kVW5rbm93bi5jcmVhdGU7XG5jb25zdCBuZXZlclR5cGUgPSBab2ROZXZlci5jcmVhdGU7XG5jb25zdCB2b2lkVHlwZSA9IFpvZFZvaWQuY3JlYXRlO1xuY29uc3QgYXJyYXlUeXBlID0gWm9kQXJyYXkuY3JlYXRlO1xuY29uc3Qgb2JqZWN0VHlwZSA9IFpvZE9iamVjdC5jcmVhdGU7XG5jb25zdCBzdHJpY3RPYmplY3RUeXBlID0gWm9kT2JqZWN0LnN0cmljdENyZWF0ZTtcbmNvbnN0IHVuaW9uVHlwZSA9IFpvZFVuaW9uLmNyZWF0ZTtcbmNvbnN0IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUgPSBab2REaXNjcmltaW5hdGVkVW5pb24uY3JlYXRlO1xuY29uc3QgaW50ZXJzZWN0aW9uVHlwZSA9IFpvZEludGVyc2VjdGlvbi5jcmVhdGU7XG5jb25zdCB0dXBsZVR5cGUgPSBab2RUdXBsZS5jcmVhdGU7XG5jb25zdCByZWNvcmRUeXBlID0gWm9kUmVjb3JkLmNyZWF0ZTtcbmNvbnN0IG1hcFR5cGUgPSBab2RNYXAuY3JlYXRlO1xuY29uc3Qgc2V0VHlwZSA9IFpvZFNldC5jcmVhdGU7XG5jb25zdCBmdW5jdGlvblR5cGUgPSBab2RGdW5jdGlvbi5jcmVhdGU7XG5jb25zdCBsYXp5VHlwZSA9IFpvZExhenkuY3JlYXRlO1xuY29uc3QgbGl0ZXJhbFR5cGUgPSBab2RMaXRlcmFsLmNyZWF0ZTtcbmNvbnN0IGVudW1UeXBlID0gWm9kRW51bS5jcmVhdGU7XG5jb25zdCBuYXRpdmVFbnVtVHlwZSA9IFpvZE5hdGl2ZUVudW0uY3JlYXRlO1xuY29uc3QgcHJvbWlzZVR5cGUgPSBab2RQcm9taXNlLmNyZWF0ZTtcbmNvbnN0IGVmZmVjdHNUeXBlID0gWm9kRWZmZWN0cy5jcmVhdGU7XG5jb25zdCBvcHRpb25hbFR5cGUgPSBab2RPcHRpb25hbC5jcmVhdGU7XG5jb25zdCBudWxsYWJsZVR5cGUgPSBab2ROdWxsYWJsZS5jcmVhdGU7XG5jb25zdCBwcmVwcm9jZXNzVHlwZSA9IFpvZEVmZmVjdHMuY3JlYXRlV2l0aFByZXByb2Nlc3M7XG5jb25zdCBwaXBlbGluZVR5cGUgPSBab2RQaXBlbGluZS5jcmVhdGU7XG5jb25zdCBvc3RyaW5nID0gKCkgPT4gc3RyaW5nVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBvbnVtYmVyID0gKCkgPT4gbnVtYmVyVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBvYm9vbGVhbiA9ICgpID0+IGJvb2xlYW5UeXBlKCkub3B0aW9uYWwoKTtcbmV4cG9ydCBjb25zdCBjb2VyY2UgPSB7XG4gICAgc3RyaW5nOiAoKGFyZykgPT4gWm9kU3RyaW5nLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbiAgICBudW1iZXI6ICgoYXJnKSA9PiBab2ROdW1iZXIuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGJvb2xlYW46ICgoYXJnKSA9PiBab2RCb29sZWFuLmNyZWF0ZSh7XG4gICAgICAgIC4uLmFyZyxcbiAgICAgICAgY29lcmNlOiB0cnVlLFxuICAgIH0pKSxcbiAgICBiaWdpbnQ6ICgoYXJnKSA9PiBab2RCaWdJbnQuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGRhdGU6ICgoYXJnKSA9PiBab2REYXRlLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbn07XG5leHBvcnQgeyBhbnlUeXBlIGFzIGFueSwgYXJyYXlUeXBlIGFzIGFycmF5LCBiaWdJbnRUeXBlIGFzIGJpZ2ludCwgYm9vbGVhblR5cGUgYXMgYm9vbGVhbiwgZGF0ZVR5cGUgYXMgZGF0ZSwgZGlzY3JpbWluYXRlZFVuaW9uVHlwZSBhcyBkaXNjcmltaW5hdGVkVW5pb24sIGVmZmVjdHNUeXBlIGFzIGVmZmVjdCwgZW51bVR5cGUgYXMgZW51bSwgZnVuY3Rpb25UeXBlIGFzIGZ1bmN0aW9uLCBpbnN0YW5jZU9mVHlwZSBhcyBpbnN0YW5jZW9mLCBpbnRlcnNlY3Rpb25UeXBlIGFzIGludGVyc2VjdGlvbiwgbGF6eVR5cGUgYXMgbGF6eSwgbGl0ZXJhbFR5cGUgYXMgbGl0ZXJhbCwgbWFwVHlwZSBhcyBtYXAsIG5hblR5cGUgYXMgbmFuLCBuYXRpdmVFbnVtVHlwZSBhcyBuYXRpdmVFbnVtLCBuZXZlclR5cGUgYXMgbmV2ZXIsIG51bGxUeXBlIGFzIG51bGwsIG51bGxhYmxlVHlwZSBhcyBudWxsYWJsZSwgbnVtYmVyVHlwZSBhcyBudW1iZXIsIG9iamVjdFR5cGUgYXMgb2JqZWN0LCBvYm9vbGVhbiwgb251bWJlciwgb3B0aW9uYWxUeXBlIGFzIG9wdGlvbmFsLCBvc3RyaW5nLCBwaXBlbGluZVR5cGUgYXMgcGlwZWxpbmUsIHByZXByb2Nlc3NUeXBlIGFzIHByZXByb2Nlc3MsIHByb21pc2VUeXBlIGFzIHByb21pc2UsIHJlY29yZFR5cGUgYXMgcmVjb3JkLCBzZXRUeXBlIGFzIHNldCwgc3RyaWN0T2JqZWN0VHlwZSBhcyBzdHJpY3RPYmplY3QsIHN0cmluZ1R5cGUgYXMgc3RyaW5nLCBzeW1ib2xUeXBlIGFzIHN5bWJvbCwgZWZmZWN0c1R5cGUgYXMgdHJhbnNmb3JtZXIsIHR1cGxlVHlwZSBhcyB0dXBsZSwgdW5kZWZpbmVkVHlwZSBhcyB1bmRlZmluZWQsIHVuaW9uVHlwZSBhcyB1bmlvbiwgdW5rbm93blR5cGUgYXMgdW5rbm93biwgdm9pZFR5cGUgYXMgdm9pZCwgfTtcbmV4cG9ydCBjb25zdCBORVZFUiA9IElOVkFMSUQ7XG4iLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VBbnlEZWYoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW55Lm1qcy5tYXAiLCJpbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyB9IGZyb20gXCIuLi9lcnJvck1lc3NhZ2VzLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcnJheURlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgfTtcbiAgICBpZiAoZGVmLnR5cGU/Ll9kZWY/LnR5cGVOYW1lICE9PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55KSB7XG4gICAgICAgIHJlcy5pdGVtcyA9IHBhcnNlRGVmKGRlZi50eXBlLl9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcyddLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRlZi5taW5MZW5ndGgpIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5JdGVtcycsIGRlZi5taW5MZW5ndGgudmFsdWUsIGRlZi5taW5MZW5ndGgubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIGlmIChkZWYubWF4TGVuZ3RoKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4SXRlbXMnLCBkZWYubWF4TGVuZ3RoLnZhbHVlLCBkZWYubWF4TGVuZ3RoLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICBpZiAoZGVmLmV4YWN0TGVuZ3RoKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluSXRlbXMnLCBkZWYuZXhhY3RMZW5ndGgudmFsdWUsIGRlZi5leGFjdExlbmd0aC5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhJdGVtcycsIGRlZi5leGFjdExlbmd0aC52YWx1ZSwgZGVmLmV4YWN0TGVuZ3RoLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyYXkubWpzLm1hcCIsImltcG9ydCB7IHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUJpZ2ludERlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgZm9ybWF0OiAnaW50NjQnLFxuICAgIH07XG4gICAgaWYgKCFkZWYuY2hlY2tzKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgICAgICAgICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnanNvblNjaGVtYTcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnZXhjbHVzaXZlTWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5leGNsdXNpdmVNaW5pbXVtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21pbmltdW0nLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09ICdqc29uU2NoZW1hNycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdleGNsdXNpdmVNYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1heGltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4aW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtdWx0aXBsZU9mJzpcbiAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ211bHRpcGxlT2YnLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpZ2ludC5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQm9vbGVhbkRlZigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb2xlYW4ubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQnJhbmRlZERlZihfZGVmLCByZWZzKSB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKF9kZWYudHlwZS5fZGVmLCByZWZzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyYW5kZWQubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlQ2F0Y2hEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2F0Y2gubWpzLm1hcCIsImltcG9ydCB7IHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGVEZWYoZGVmLCByZWZzLCBvdmVycmlkZURhdGVTdHJhdGVneSkge1xuICAgIGNvbnN0IHN0cmF0ZWd5ID0gb3ZlcnJpZGVEYXRlU3RyYXRlZ3kgPz8gcmVmcy5kYXRlU3RyYXRlZ3k7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3RyYXRlZ3kpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbnlPZjogc3RyYXRlZ3kubWFwKChpdGVtLCBpKSA9PiBwYXJzZURhdGVEZWYoZGVmLCByZWZzLCBpdGVtKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN3aXRjaCAoc3RyYXRlZ3kpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgY2FzZSAnZm9ybWF0OmRhdGUtdGltZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogJ2RhdGUtdGltZScsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdmb3JtYXQ6ZGF0ZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogJ2RhdGUnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAnaW50ZWdlcic6XG4gICAgICAgICAgICByZXR1cm4gaW50ZWdlckRhdGVQYXJzZXIoZGVmLCByZWZzKTtcbiAgICB9XG59XG5jb25zdCBpbnRlZ2VyRGF0ZVBhcnNlciA9IChkZWYsIHJlZnMpID0+IHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgZm9ybWF0OiAndW5peC10aW1lJyxcbiAgICB9O1xuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ29wZW5BcGkzJykge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIGRlZi5jaGVja3MpIHtcbiAgICAgICAgc3dpdGNoIChjaGVjay5raW5kKSB7XG4gICAgICAgICAgICBjYXNlICdtaW4nOlxuICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluaW11bScsIGNoZWNrLnZhbHVlLCAvLyBUaGlzIGlzIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21heGltdW0nLCBjaGVjay52YWx1ZSwgLy8gVGhpcyBpcyBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgICAgICBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGUubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGVmYXVsdERlZihfZGVmLCByZWZzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucGFyc2VEZWYoX2RlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyksXG4gICAgICAgIGRlZmF1bHQ6IF9kZWYuZGVmYXVsdFZhbHVlKCksXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRWZmZWN0c0RlZihfZGVmLCByZWZzLCBmb3JjZVJlc29sdXRpb24pIHtcbiAgICByZXR1cm4gcmVmcy5lZmZlY3RTdHJhdGVneSA9PT0gJ2lucHV0JyA/IHBhcnNlRGVmKF9kZWYuc2NoZW1hLl9kZWYsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbikgOiB7fTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVmZmVjdHMubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBwYXJzZUVudW1EZWYoZGVmKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGVudW06IFsuLi5kZWYudmFsdWVzXSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW51bS5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5jb25zdCBpc0pzb25TY2hlbWE3QWxsT2ZUeXBlID0gKHR5cGUpID0+IHtcbiAgICBpZiAoJ3R5cGUnIGluIHR5cGUgJiYgdHlwZS50eXBlID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAnYWxsT2YnIGluIHR5cGU7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW50ZXJzZWN0aW9uRGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IGFsbE9mID0gW1xuICAgICAgICBwYXJzZURlZihkZWYubGVmdC5fZGVmLCB7XG4gICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYWxsT2YnLCAnMCddLFxuICAgICAgICB9KSxcbiAgICAgICAgcGFyc2VEZWYoZGVmLnJpZ2h0Ll9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhbGxPZicsICcxJ10sXG4gICAgICAgIH0pLFxuICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpO1xuICAgIGxldCB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSByZWZzLnRhcmdldCA9PT0gJ2pzb25TY2hlbWEyMDE5LTA5JyA/IHsgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzOiBmYWxzZSB9IDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG1lcmdlZEFsbE9mID0gW107XG4gICAgLy8gSWYgZWl0aGVyIG9mIHRoZSBzY2hlbWFzIGlzIGFuIGFsbE9mLCBtZXJnZSB0aGVtIGludG8gYSBzaW5nbGUgYWxsT2ZcbiAgICBhbGxPZi5mb3JFYWNoKChzY2hlbWEpID0+IHtcbiAgICAgICAgaWYgKGlzSnNvblNjaGVtYTdBbGxPZlR5cGUoc2NoZW1hKSkge1xuICAgICAgICAgICAgbWVyZ2VkQWxsT2YucHVzaCguLi5zY2hlbWEuYWxsT2YpO1xuICAgICAgICAgICAgaWYgKHNjaGVtYS51bmV2YWx1YXRlZFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIElmIG9uZSBvZiB0aGUgc2NoZW1hcyBoYXMgbm8gdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzIHNldCxcbiAgICAgICAgICAgICAgICAvLyB0aGUgbWVyZ2VkIHNjaGVtYSBzaG91bGQgYWxzbyBoYXZlIG5vIHVuZXZhbHVhdGVkUHJvcGVydGllcyBzZXRcbiAgICAgICAgICAgICAgICB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgbmVzdGVkU2NoZW1hID0gc2NoZW1hO1xuICAgICAgICAgICAgaWYgKCdhZGRpdGlvbmFsUHJvcGVydGllcycgaW4gc2NoZW1hICYmIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGFkZGl0aW9uYWxQcm9wZXJ0aWVzLCAuLi5yZXN0IH0gPSBzY2hlbWE7XG4gICAgICAgICAgICAgICAgbmVzdGVkU2NoZW1hID0gcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFzIHNvb24gYXMgb25lIG9mIHRoZSBzY2hlbWFzIGhhcyBhZGRpdGlvbmFsUHJvcGVydGllcyBzZXQgbm90IHRvIGZhbHNlLCB3ZSBhbGxvdyB1bmV2YWx1YXRlZFByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXJnZWRBbGxPZi5wdXNoKG5lc3RlZFNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWVyZ2VkQWxsT2YubGVuZ3RoID9cbiAgICAgICAge1xuICAgICAgICAgICAgYWxsT2Y6IG1lcmdlZEFsbE9mLFxuICAgICAgICAgICAgLi4udW5ldmFsdWF0ZWRQcm9wZXJ0aWVzLFxuICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJzZWN0aW9uLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VMaXRlcmFsRGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0eXBlb2YgZGVmLnZhbHVlO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSAnYmlnaW50JyAmJlxuICAgICAgICBwYXJzZWRUeXBlICE9PSAnbnVtYmVyJyAmJlxuICAgICAgICBwYXJzZWRUeXBlICE9PSAnYm9vbGVhbicgJiZcbiAgICAgICAgcGFyc2VkVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LmlzQXJyYXkoZGVmLnZhbHVlKSA/ICdhcnJheScgOiAnb2JqZWN0JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnb3BlbkFwaTMnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBwYXJzZWRUeXBlID09PSAnYmlnaW50JyA/ICdpbnRlZ2VyJyA6IHBhcnNlZFR5cGUsXG4gICAgICAgICAgICBlbnVtOiBbZGVmLnZhbHVlXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcGFyc2VkVHlwZSA9PT0gJ2JpZ2ludCcgPyAnaW50ZWdlcicgOiBwYXJzZWRUeXBlLFxuICAgICAgICBjb25zdDogZGVmLnZhbHVlLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXRlcmFsLm1qcy5tYXAiLCJpbXBvcnQgeyBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzIH0gZnJvbSBcIi4uL2Vycm9yTWVzc2FnZXMubWpzXCI7XG5sZXQgZW1vamlSZWdleDtcbi8qKlxuICogR2VuZXJhdGVkIGZyb20gdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm91bmQgaGVyZSBhcyBvZiAyMDI0LTA1LTIyOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2NvbGluaGFja3Mvem9kL2Jsb2IvbWFzdGVyL3NyYy90eXBlcy50cy5cbiAqXG4gKiBFeHByZXNzaW9ucyB3aXRoIC9pIGZsYWcgaGF2ZSBiZWVuIGNoYW5nZWQgYWNjb3JkaW5nbHkuXG4gKi9cbmV4cG9ydCBjb25zdCB6b2RQYXR0ZXJucyA9IHtcbiAgICAvKipcbiAgICAgKiBgY2Agd2FzIGNoYW5nZWQgdG8gYFtjQ11gIHRvIHJlcGxpY2F0ZSAvaSBmbGFnXG4gICAgICovXG4gICAgY3VpZDogL15bY0NdW15cXHMtXXs4LH0kLyxcbiAgICBjdWlkMjogL15bMC05YS16XSskLyxcbiAgICB1bGlkOiAvXlswLTlBLUhKS01OUC1UVi1aXXsyNn0kLyxcbiAgICAvKipcbiAgICAgKiBgYS16YCB3YXMgYWRkZWQgdG8gcmVwbGljYXRlIC9pIGZsYWdcbiAgICAgKi9cbiAgICBlbWFpbDogL14oPyFcXC4pKD8hLipcXC5cXC4pKFthLXpBLVowLTlfJytcXC1cXC5dKilbYS16QS1aMC05XystXUAoW2EtekEtWjAtOV1bYS16QS1aMC05XFwtXSpcXC4pK1thLXpBLVpdezIsfSQvLFxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGVkIGEgdmFsaWQgVW5pY29kZSBSZWdFeHBcbiAgICAgKlxuICAgICAqIExhemlseSBpbnN0YW50aWF0ZSBzaW5jZSB0aGlzIHR5cGUgb2YgcmVnZXggaXNuJ3Qgc3VwcG9ydGVkXG4gICAgICogaW4gYWxsIGVudnMgKGUuZy4gUmVhY3QgTmF0aXZlKS5cbiAgICAgKlxuICAgICAqIFNlZTpcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vY29saW5oYWNrcy96b2QvaXNzdWVzLzI0MzNcbiAgICAgKiBGaXggaW4gWm9kOlxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2xpbmhhY2tzL3pvZC9jb21taXQvOTM0MGZkNTFlNDg1NzZhNzVhZGM5MTliZmY2NWRiYzRhNWQ0Yzk5YlxuICAgICAqL1xuICAgIGVtb2ppOiAoKSA9PiB7XG4gICAgICAgIGlmIChlbW9qaVJlZ2V4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVtb2ppUmVnZXggPSBSZWdFeHAoJ14oXFxcXHB7RXh0ZW5kZWRfUGljdG9ncmFwaGljfXxcXFxccHtFbW9qaV9Db21wb25lbnR9KSskJywgJ3UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW1vamlSZWdleDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFVudXNlZFxuICAgICAqL1xuICAgIHV1aWQ6IC9eWzAtOWEtZkEtRl17OH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17MTJ9JC8sXG4gICAgLyoqXG4gICAgICogVW51c2VkXG4gICAgICovXG4gICAgaXB2NDogL14oPzooPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSkkLyxcbiAgICAvKipcbiAgICAgKiBVbnVzZWRcbiAgICAgKi9cbiAgICBpcHY2OiAvXigoW2EtZjAtOV17MSw0fTopezd9fDo6KFthLWYwLTldezEsNH06KXswLDZ9fChbYS1mMC05XXsxLDR9Oil7MX06KFthLWYwLTldezEsNH06KXswLDV9fChbYS1mMC05XXsxLDR9Oil7Mn06KFthLWYwLTldezEsNH06KXswLDR9fChbYS1mMC05XXsxLDR9Oil7M306KFthLWYwLTldezEsNH06KXswLDN9fChbYS1mMC05XXsxLDR9Oil7NH06KFthLWYwLTldezEsNH06KXswLDJ9fChbYS1mMC05XXsxLDR9Oil7NX06KFthLWYwLTldezEsNH06KXswLDF9KShbYS1mMC05XXsxLDR9fCgoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKSkkLyxcbiAgICBiYXNlNjQ6IC9eKFswLTlhLXpBLVorL117NH0pKigoWzAtOWEtekEtWisvXXsyfT09KXwoWzAtOWEtekEtWisvXXszfT0pKT8kLyxcbiAgICBuYW5vaWQ6IC9eW2EtekEtWjAtOV8tXXsyMX0kLyxcbn07XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdHJpbmdEZWYoZGVmLCByZWZzKSB7XG4gICAgY29uc3QgcmVzID0ge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXR0ZXJuKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiByZWZzLnBhdHRlcm5TdHJhdGVneSA9PT0gJ2VzY2FwZScgPyBlc2NhcGVOb25BbHBoYU51bWVyaWModmFsdWUpIDogdmFsdWU7XG4gICAgfVxuICAgIGlmIChkZWYuY2hlY2tzKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgc3dpdGNoIChjaGVjay5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWluJzpcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5MZW5ndGgnLCB0eXBlb2YgcmVzLm1pbkxlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1heChyZXMubWluTGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21heCc6XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4TGVuZ3RoJywgdHlwZW9mIHJlcy5tYXhMZW5ndGggPT09ICdudW1iZXInID8gTWF0aC5taW4ocmVzLm1heExlbmd0aCwgY2hlY2sudmFsdWUpIDogY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmVmcy5lbWFpbFN0cmF0ZWd5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb3JtYXQ6ZW1haWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsICdlbWFpbCcsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9ybWF0Omlkbi1lbWFpbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2lkbi1lbWFpbCcsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGF0dGVybjp6b2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5lbWFpbCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ3VyaScsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1dWlkJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ3V1aWQnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVnZXgnOlxuICAgICAgICAgICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgY2hlY2sucmVnZXgsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjdWlkJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmN1aWQsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjdWlkMic6XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5jdWlkMiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXJ0c1dpdGgnOlxuICAgICAgICAgICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgUmVnRXhwKGBeJHtwcm9jZXNzUGF0dGVybihjaGVjay52YWx1ZSl9YCksIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlbmRzV2l0aCc6XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCBSZWdFeHAoYCR7cHJvY2Vzc1BhdHRlcm4oY2hlY2sudmFsdWUpfSRgKSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGV0aW1lJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2RhdGUtdGltZScsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2RhdGUnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndGltZSc6XG4gICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsICd0aW1lJywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R1cmF0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2R1cmF0aW9uJywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xlbmd0aCc6XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluTGVuZ3RoJywgdHlwZW9mIHJlcy5taW5MZW5ndGggPT09ICdudW1iZXInID8gTWF0aC5tYXgocmVzLm1pbkxlbmd0aCwgY2hlY2sudmFsdWUpIDogY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21heExlbmd0aCcsIHR5cGVvZiByZXMubWF4TGVuZ3RoID09PSAnbnVtYmVyJyA/IE1hdGgubWluKHJlcy5tYXhMZW5ndGgsIGNoZWNrLnZhbHVlKSA6IGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5jbHVkZXMnOiB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCBSZWdFeHAocHJvY2Vzc1BhdHRlcm4oY2hlY2sudmFsdWUpKSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdpcCc6IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLnZlcnNpb24gIT09ICd2NicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsICdpcHY0JywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLnZlcnNpb24gIT09ICd2NCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsICdpcHY2JywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2Vtb2ppJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmVtb2ppLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndWxpZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLnVsaWQsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnYmFzZTY0Jzoge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlZnMuYmFzZTY0U3RyYXRlZ3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Zvcm1hdDpiaW5hcnknOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2JpbmFyeScsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29udGVudEVuY29kaW5nOmJhc2U2NCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ2NvbnRlbnRFbmNvZGluZycsICdiYXNlNjQnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BhdHRlcm46em9kJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5iYXNlNjQsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICduYW5vaWQnOiB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5uYW5vaWQsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICd0b0xvd2VyQ2FzZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndG9VcHBlckNhc2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RyaW0nOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAoKF8pID0+IHsgfSkoY2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5jb25zdCBlc2NhcGVOb25BbHBoYU51bWVyaWMgPSAodmFsdWUpID0+IEFycmF5LmZyb20odmFsdWUpXG4gICAgLm1hcCgoYykgPT4gKC9bYS16QS1aMC05XS8udGVzdChjKSA/IGMgOiBgXFxcXCR7Y31gKSlcbiAgICAuam9pbignJyk7XG5jb25zdCBhZGRGb3JtYXQgPSAoc2NoZW1hLCB2YWx1ZSwgbWVzc2FnZSwgcmVmcykgPT4ge1xuICAgIGlmIChzY2hlbWEuZm9ybWF0IHx8IHNjaGVtYS5hbnlPZj8uc29tZSgoeCkgPT4geC5mb3JtYXQpKSB7XG4gICAgICAgIGlmICghc2NoZW1hLmFueU9mKSB7XG4gICAgICAgICAgICBzY2hlbWEuYW55T2YgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1hLmZvcm1hdCkge1xuICAgICAgICAgICAgc2NoZW1hLmFueU9mLnB1c2goe1xuICAgICAgICAgICAgICAgIGZvcm1hdDogc2NoZW1hLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAuLi4oc2NoZW1hLmVycm9yTWVzc2FnZSAmJlxuICAgICAgICAgICAgICAgICAgICByZWZzLmVycm9yTWVzc2FnZXMgJiYge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IHsgZm9ybWF0OiBzY2hlbWEuZXJyb3JNZXNzYWdlLmZvcm1hdCB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWxldGUgc2NoZW1hLmZvcm1hdDtcbiAgICAgICAgICAgIGlmIChzY2hlbWEuZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2UuZm9ybWF0O1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhzY2hlbWEuZXJyb3JNZXNzYWdlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNjaGVtYS5hbnlPZi5wdXNoKHtcbiAgICAgICAgICAgIGZvcm1hdDogdmFsdWUsXG4gICAgICAgICAgICAuLi4obWVzc2FnZSAmJiByZWZzLmVycm9yTWVzc2FnZXMgJiYgeyBlcnJvck1lc3NhZ2U6IHsgZm9ybWF0OiBtZXNzYWdlIH0gfSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhzY2hlbWEsICdmb3JtYXQnLCB2YWx1ZSwgbWVzc2FnZSwgcmVmcyk7XG4gICAgfVxufTtcbmNvbnN0IGFkZFBhdHRlcm4gPSAoc2NoZW1hLCByZWdleCwgbWVzc2FnZSwgcmVmcykgPT4ge1xuICAgIGlmIChzY2hlbWEucGF0dGVybiB8fCBzY2hlbWEuYWxsT2Y/LnNvbWUoKHgpID0+IHgucGF0dGVybikpIHtcbiAgICAgICAgaWYgKCFzY2hlbWEuYWxsT2YpIHtcbiAgICAgICAgICAgIHNjaGVtYS5hbGxPZiA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEucGF0dGVybikge1xuICAgICAgICAgICAgc2NoZW1hLmFsbE9mLnB1c2goe1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IHNjaGVtYS5wYXR0ZXJuLFxuICAgICAgICAgICAgICAgIC4uLihzY2hlbWEuZXJyb3JNZXNzYWdlICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZnMuZXJyb3JNZXNzYWdlcyAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogeyBwYXR0ZXJuOiBzY2hlbWEuZXJyb3JNZXNzYWdlLnBhdHRlcm4gfSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVsZXRlIHNjaGVtYS5wYXR0ZXJuO1xuICAgICAgICAgICAgaWYgKHNjaGVtYS5lcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2NoZW1hLmVycm9yTWVzc2FnZS5wYXR0ZXJuO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhzY2hlbWEuZXJyb3JNZXNzYWdlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNjaGVtYS5hbGxPZi5wdXNoKHtcbiAgICAgICAgICAgIHBhdHRlcm46IHByb2Nlc3NSZWdFeHAocmVnZXgsIHJlZnMpLFxuICAgICAgICAgICAgLi4uKG1lc3NhZ2UgJiYgcmVmcy5lcnJvck1lc3NhZ2VzICYmIHsgZXJyb3JNZXNzYWdlOiB7IHBhdHRlcm46IG1lc3NhZ2UgfSB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHNjaGVtYSwgJ3BhdHRlcm4nLCBwcm9jZXNzUmVnRXhwKHJlZ2V4LCByZWZzKSwgbWVzc2FnZSwgcmVmcyk7XG4gICAgfVxufTtcbi8vIE11dGF0ZSB6LnN0cmluZy5yZWdleCgpIGluIGEgYmVzdCBhdHRlbXB0IHRvIGFjY29tbW9kYXRlIGZvciByZWdleCBmbGFncyB3aGVuIGFwcGx5UmVnZXhGbGFncyBpcyB0cnVlXG5jb25zdCBwcm9jZXNzUmVnRXhwID0gKHJlZ2V4T3JGdW5jdGlvbiwgcmVmcykgPT4ge1xuICAgIGNvbnN0IHJlZ2V4ID0gdHlwZW9mIHJlZ2V4T3JGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHJlZ2V4T3JGdW5jdGlvbigpIDogcmVnZXhPckZ1bmN0aW9uO1xuICAgIGlmICghcmVmcy5hcHBseVJlZ2V4RmxhZ3MgfHwgIXJlZ2V4LmZsYWdzKVxuICAgICAgICByZXR1cm4gcmVnZXguc291cmNlO1xuICAgIC8vIEN1cnJlbnRseSBoYW5kbGVkIGZsYWdzXG4gICAgY29uc3QgZmxhZ3MgPSB7XG4gICAgICAgIGk6IHJlZ2V4LmZsYWdzLmluY2x1ZGVzKCdpJyksIC8vIENhc2UtaW5zZW5zaXRpdmVcbiAgICAgICAgbTogcmVnZXguZmxhZ3MuaW5jbHVkZXMoJ20nKSwgLy8gYF5gIGFuZCBgJGAgbWF0Y2hlcyBhZGphY2VudCB0byBuZXdsaW5lIGNoYXJhY3RlcnNcbiAgICAgICAgczogcmVnZXguZmxhZ3MuaW5jbHVkZXMoJ3MnKSwgLy8gYC5gIG1hdGNoZXMgbmV3bGluZXNcbiAgICB9O1xuICAgIC8vIFRoZSBnZW5lcmFsIHByaW5jaXBsZSBoZXJlIGlzIHRvIHN0ZXAgdGhyb3VnaCBlYWNoIGNoYXJhY3Rlciwgb25lIGF0IGEgdGltZSwgYXBwbHlpbmcgbXV0YXRpb25zIGFzIGZsYWdzIHJlcXVpcmUuIFdlIGtlZXAgdHJhY2sgd2hlbiB0aGUgY3VycmVudCBjaGFyYWN0ZXIgaXMgZXNjYXBlZCwgYW5kIHdoZW4gaXQncyBpbnNpZGUgYSBncm91cCAvbGlrZSBbdGhpc10vIG9yIChhbHNvKSBhIHJhbmdlIGxpa2UgL1thLXpdLy4gVGhlIGZvbGxvd2luZyBpcyBmYWlybHkgYnJpdHRsZSBpbXBlcmF0aXZlIGNvZGU7IGVkaXQgYXQgeW91ciBwZXJpbCFcbiAgICBjb25zdCBzb3VyY2UgPSBmbGFncy5pID8gcmVnZXguc291cmNlLnRvTG93ZXJDYXNlKCkgOiByZWdleC5zb3VyY2U7XG4gICAgbGV0IHBhdHRlcm4gPSAnJztcbiAgICBsZXQgaXNFc2NhcGVkID0gZmFsc2U7XG4gICAgbGV0IGluQ2hhckdyb3VwID0gZmFsc2U7XG4gICAgbGV0IGluQ2hhclJhbmdlID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzRXNjYXBlZCkge1xuICAgICAgICAgICAgcGF0dGVybiArPSBzb3VyY2VbaV07XG4gICAgICAgICAgICBpc0VzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbGFncy5pKSB7XG4gICAgICAgICAgICBpZiAoaW5DaGFyR3JvdXApIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlW2ldLm1hdGNoKC9bYS16XS8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbkNoYXJSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiArPSBzb3VyY2VbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGAke3NvdXJjZVtpIC0gMl19LSR7c291cmNlW2ldfWAudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluQ2hhclJhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc291cmNlW2kgKyAxXSA9PT0gJy0nICYmIHNvdXJjZVtpICsgMl0/Lm1hdGNoKC9bYS16XS8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluQ2hhclJhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gYCR7c291cmNlW2ldfSR7c291cmNlW2ldLnRvVXBwZXJDYXNlKCl9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzb3VyY2VbaV0ubWF0Y2goL1thLXpdLykpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGBbJHtzb3VyY2VbaV19JHtzb3VyY2VbaV0udG9VcHBlckNhc2UoKX1dYDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxhZ3MubSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZVtpXSA9PT0gJ14nKSB7XG4gICAgICAgICAgICAgICAgcGF0dGVybiArPSBgKF58KD88PVtcXHJcXG5dKSlgO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc291cmNlW2ldID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGAoJHwoPz1bXFxyXFxuXSkpYDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxhZ3MucyAmJiBzb3VyY2VbaV0gPT09ICcuJykge1xuICAgICAgICAgICAgcGF0dGVybiArPSBpbkNoYXJHcm91cCA/IGAke3NvdXJjZVtpXX1cXHJcXG5gIDogYFske3NvdXJjZVtpXX1cXHJcXG5dYDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHBhdHRlcm4gKz0gc291cmNlW2ldO1xuICAgICAgICBpZiAoc291cmNlW2ldID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGlzRXNjYXBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5DaGFyR3JvdXAgJiYgc291cmNlW2ldID09PSAnXScpIHtcbiAgICAgICAgICAgIGluQ2hhckdyb3VwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluQ2hhckdyb3VwICYmIHNvdXJjZVtpXSA9PT0gJ1snKSB7XG4gICAgICAgICAgICBpbkNoYXJHcm91cCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVnZXhUZXN0ID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICBjb25zb2xlLndhcm4oYENvdWxkIG5vdCBjb252ZXJ0IHJlZ2V4IHBhdHRlcm4gYXQgJHtyZWZzLmN1cnJlbnRQYXRoLmpvaW4oJy8nKX0gdG8gYSBmbGFnLWluZGVwZW5kZW50IGZvcm0hIEZhbGxpbmcgYmFjayB0byB0aGUgZmxhZy1pZ25vcmFudCBzb3VyY2VgKTtcbiAgICAgICAgcmV0dXJuIHJlZ2V4LnNvdXJjZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdHRlcm47XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLm1qcy5tYXAiLCJpbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVN0cmluZ0RlZiB9IGZyb20gXCIuL3N0cmluZy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlY29yZERlZihkZWYsIHJlZnMpIHtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycgJiYgZGVmLmtleVR5cGU/Ll9kZWYudHlwZU5hbWUgPT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBkZWYua2V5VHlwZS5fZGVmLnZhbHVlcyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGRlZi5rZXlUeXBlLl9kZWYudmFsdWVzLnJlZHVjZSgoYWNjLCBrZXkpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgICAgIFtrZXldOiBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAncHJvcGVydGllcycsIGtleV0sXG4gICAgICAgICAgICAgICAgfSkgPz8ge30sXG4gICAgICAgICAgICB9KSwge30pLFxuICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYWRkaXRpb25hbFByb3BlcnRpZXMnXSxcbiAgICAgICAgfSkgPz8ge30sXG4gICAgfTtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG4gICAgaWYgKGRlZi5rZXlUeXBlPy5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nICYmIGRlZi5rZXlUeXBlLl9kZWYuY2hlY2tzPy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qga2V5VHlwZSA9IE9iamVjdC5lbnRyaWVzKHBhcnNlU3RyaW5nRGVmKGRlZi5rZXlUeXBlLl9kZWYsIHJlZnMpKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoa2V5ID09PSAndHlwZScgPyBhY2MgOiB7IC4uLmFjYywgW2tleV06IHZhbHVlIH0pLCB7fSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zY2hlbWEsXG4gICAgICAgICAgICBwcm9wZXJ0eU5hbWVzOiBrZXlUeXBlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChkZWYua2V5VHlwZT8uX2RlZi50eXBlTmFtZSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnNjaGVtYSxcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZXM6IHtcbiAgICAgICAgICAgICAgICBlbnVtOiBkZWYua2V5VHlwZS5fZGVmLnZhbHVlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWNvcmQubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VSZWNvcmREZWYgfSBmcm9tIFwiLi9yZWNvcmQubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNYXBEZWYoZGVmLCByZWZzKSB7XG4gICAgaWYgKHJlZnMubWFwU3RyYXRlZ3kgPT09ICdyZWNvcmQnKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVJlY29yZERlZihkZWYsIHJlZnMpO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0gcGFyc2VEZWYoZGVmLmtleVR5cGUuX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcycsICdpdGVtcycsICcwJ10sXG4gICAgfSkgfHwge307XG4gICAgY29uc3QgdmFsdWVzID0gcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2l0ZW1zJywgJ2l0ZW1zJywgJzEnXSxcbiAgICB9KSB8fCB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICBtYXhJdGVtczogMTI1LFxuICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIGl0ZW1zOiBba2V5cywgdmFsdWVzXSxcbiAgICAgICAgICAgIG1pbkl0ZW1zOiAyLFxuICAgICAgICAgICAgbWF4SXRlbXM6IDIsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTmF0aXZlRW51bURlZihkZWYpIHtcbiAgICBjb25zdCBvYmplY3QgPSBkZWYudmFsdWVzO1xuICAgIGNvbnN0IGFjdHVhbEtleXMgPSBPYmplY3Qua2V5cyhkZWYudmFsdWVzKS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iamVjdFtvYmplY3Rba2V5XV0gIT09ICdudW1iZXInO1xuICAgIH0pO1xuICAgIGNvbnN0IGFjdHVhbFZhbHVlcyA9IGFjdHVhbEtleXMubWFwKChrZXkpID0+IG9iamVjdFtrZXldKTtcbiAgICBjb25zdCBwYXJzZWRUeXBlcyA9IEFycmF5LmZyb20obmV3IFNldChhY3R1YWxWYWx1ZXMubWFwKCh2YWx1ZXMpID0+IHR5cGVvZiB2YWx1ZXMpKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcGFyc2VkVHlwZXMubGVuZ3RoID09PSAxID9cbiAgICAgICAgICAgIHBhcnNlZFR5cGVzWzBdID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICAgICAgJ3N0cmluZydcbiAgICAgICAgICAgICAgICA6ICdudW1iZXInXG4gICAgICAgICAgICA6IFsnc3RyaW5nJywgJ251bWJlciddLFxuICAgICAgICBlbnVtOiBhY3R1YWxWYWx1ZXMsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hdGl2ZUVudW0ubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBwYXJzZU5ldmVyRGVmKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vdDoge30sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldmVyLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VOdWxsRGVmKHJlZnMpIHtcbiAgICByZXR1cm4gcmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycgP1xuICAgICAgICB7XG4gICAgICAgICAgICBlbnVtOiBbJ251bGwnXSxcbiAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgdHlwZTogJ251bGwnLFxuICAgICAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVsbC5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgY29uc3QgcHJpbWl0aXZlTWFwcGluZ3MgPSB7XG4gICAgWm9kU3RyaW5nOiAnc3RyaW5nJyxcbiAgICBab2ROdW1iZXI6ICdudW1iZXInLFxuICAgIFpvZEJpZ0ludDogJ2ludGVnZXInLFxuICAgIFpvZEJvb2xlYW46ICdib29sZWFuJyxcbiAgICBab2ROdWxsOiAnbnVsbCcsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5pb25EZWYoZGVmLCByZWZzKSB7XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnb3BlbkFwaTMnKVxuICAgICAgICByZXR1cm4gYXNBbnlPZihkZWYsIHJlZnMpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBkZWYub3B0aW9ucyBpbnN0YW5jZW9mIE1hcCA/IEFycmF5LmZyb20oZGVmLm9wdGlvbnMudmFsdWVzKCkpIDogZGVmLm9wdGlvbnM7XG4gICAgLy8gVGhpcyBibG9ja3MgdHJpZXMgdG8gbG9vayBhaGVhZCBhIGJpdCB0byBwcm9kdWNlIG5pY2VyIGxvb2tpbmcgc2NoZW1hcyB3aXRoIHR5cGUgYXJyYXkgaW5zdGVhZCBvZiBhbnlPZi5cbiAgICBpZiAob3B0aW9ucy5ldmVyeSgoeCkgPT4geC5fZGVmLnR5cGVOYW1lIGluIHByaW1pdGl2ZU1hcHBpbmdzICYmICgheC5fZGVmLmNoZWNrcyB8fCAheC5fZGVmLmNoZWNrcy5sZW5ndGgpKSkge1xuICAgICAgICAvLyBhbGwgdHlwZXMgaW4gdW5pb24gYXJlIHByaW1pdGl2ZSBhbmQgbGFjayBjaGVja3MsIHNvIG1pZ2h0IGFzIHdlbGwgc3F1YXNoIGludG8ge3R5cGU6IFsuLi5dfVxuICAgICAgICBjb25zdCB0eXBlcyA9IG9wdGlvbnMucmVkdWNlKCh0eXBlcywgeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHByaW1pdGl2ZU1hcHBpbmdzW3guX2RlZi50eXBlTmFtZV07IC8vQ2FuIGJlIHNhZmVseSBjYXN0ZWQgZHVlIHRvIHJvdyA0M1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUgJiYgIXR5cGVzLmluY2x1ZGVzKHR5cGUpID8gWy4uLnR5cGVzLCB0eXBlXSA6IHR5cGVzO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlcy5sZW5ndGggPiAxID8gdHlwZXMgOiB0eXBlc1swXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucy5ldmVyeSgoeCkgPT4geC5fZGVmLnR5cGVOYW1lID09PSAnWm9kTGl0ZXJhbCcgJiYgIXguZGVzY3JpcHRpb24pKSB7XG4gICAgICAgIC8vIGFsbCBvcHRpb25zIGxpdGVyYWxzXG4gICAgICAgIGNvbnN0IHR5cGVzID0gb3B0aW9ucy5yZWR1Y2UoKGFjYywgeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB4Ll9kZWYudmFsdWU7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCB0eXBlXTtcbiAgICAgICAgICAgICAgICBjYXNlICdiaWdpbnQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgJ2ludGVnZXInXTtcbiAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoeC5fZGVmLnZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsICdudWxsJ107XG4gICAgICAgICAgICAgICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXSk7XG4gICAgICAgIGlmICh0eXBlcy5sZW5ndGggPT09IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBhbGwgdGhlIGxpdGVyYWxzIGFyZSBwcmltaXRpdmUsIGFzIGZhciBhcyBudWxsIGNhbiBiZSBjb25zaWRlcmVkIHByaW1pdGl2ZVxuICAgICAgICAgICAgY29uc3QgdW5pcXVlVHlwZXMgPSB0eXBlcy5maWx0ZXIoKHgsIGksIGEpID0+IGEuaW5kZXhPZih4KSA9PT0gaSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHVuaXF1ZVR5cGVzLmxlbmd0aCA+IDEgPyB1bmlxdWVUeXBlcyA6IHVuaXF1ZVR5cGVzWzBdLFxuICAgICAgICAgICAgICAgIGVudW06IG9wdGlvbnMucmVkdWNlKChhY2MsIHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYy5pbmNsdWRlcyh4Ll9kZWYudmFsdWUpID8gYWNjIDogWy4uLmFjYywgeC5fZGVmLnZhbHVlXTtcbiAgICAgICAgICAgICAgICB9LCBbXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMuZXZlcnkoKHgpID0+IHguX2RlZi50eXBlTmFtZSA9PT0gJ1pvZEVudW0nKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBlbnVtOiBvcHRpb25zLnJlZHVjZSgoYWNjLCB4KSA9PiBbLi4uYWNjLCAuLi54Ll9kZWYudmFsdWVzLmZpbHRlcigoeCkgPT4gIWFjYy5pbmNsdWRlcyh4KSldLCBbXSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBhc0FueU9mKGRlZiwgcmVmcyk7XG59XG5jb25zdCBhc0FueU9mID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIGNvbnN0IGFueU9mID0gKGRlZi5vcHRpb25zIGluc3RhbmNlb2YgTWFwID8gQXJyYXkuZnJvbShkZWYub3B0aW9ucy52YWx1ZXMoKSkgOiBkZWYub3B0aW9ucylcbiAgICAgICAgLm1hcCgoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FueU9mJywgYCR7aX1gXSxcbiAgICB9KSlcbiAgICAgICAgLmZpbHRlcigoeCkgPT4gISF4ICYmICghcmVmcy5zdHJpY3RVbmlvbnMgfHwgKHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh4KS5sZW5ndGggPiAwKSkpO1xuICAgIHJldHVybiBhbnlPZi5sZW5ndGggPyB7IGFueU9mIH0gOiB1bmRlZmluZWQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pb24ubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuaW1wb3J0IHsgcHJpbWl0aXZlTWFwcGluZ3MgfSBmcm9tIFwiLi91bmlvbi5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bGxhYmxlRGVmKGRlZiwgcmVmcykge1xuICAgIGlmIChbJ1pvZFN0cmluZycsICdab2ROdW1iZXInLCAnWm9kQmlnSW50JywgJ1pvZEJvb2xlYW4nLCAnWm9kTnVsbCddLmluY2x1ZGVzKGRlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZSkgJiZcbiAgICAgICAgKCFkZWYuaW5uZXJUeXBlLl9kZWYuY2hlY2tzIHx8ICFkZWYuaW5uZXJUeXBlLl9kZWYuY2hlY2tzLmxlbmd0aCkpIHtcbiAgICAgICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnb3BlbkFwaTMnIHx8IHJlZnMubnVsbGFibGVTdHJhdGVneSA9PT0gJ3Byb3BlcnR5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBwcmltaXRpdmVNYXBwaW5nc1tkZWYuaW5uZXJUeXBlLl9kZWYudHlwZU5hbWVdLFxuICAgICAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogW3ByaW1pdGl2ZU1hcHBpbmdzW2RlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZV0sICdudWxsJ10sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ29wZW5BcGkzJykge1xuICAgICAgICBjb25zdCBiYXNlID0gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCB7XG4gICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChiYXNlICYmICckcmVmJyBpbiBiYXNlKVxuICAgICAgICAgICAgcmV0dXJuIHsgYWxsT2Y6IFtiYXNlXSwgbnVsbGFibGU6IHRydWUgfTtcbiAgICAgICAgcmV0dXJuIGJhc2UgJiYgeyAuLi5iYXNlLCBudWxsYWJsZTogdHJ1ZSB9O1xuICAgIH1cbiAgICBjb25zdCBiYXNlID0gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FueU9mJywgJzAnXSxcbiAgICB9KTtcbiAgICByZXR1cm4gYmFzZSAmJiB7IGFueU9mOiBbYmFzZSwgeyB0eXBlOiAnbnVsbCcgfV0gfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bGxhYmxlLm1qcy5tYXAiLCJpbXBvcnQgeyBhZGRFcnJvck1lc3NhZ2UsIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bWJlckRlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgIH07XG4gICAgaWYgKCFkZWYuY2hlY2tzKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ludCc6XG4gICAgICAgICAgICAgICAgcmVzLnR5cGUgPSAnaW50ZWdlcic7XG4gICAgICAgICAgICAgICAgYWRkRXJyb3JNZXNzYWdlKHJlcywgJ3R5cGUnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgICAgICAgICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnanNvblNjaGVtYTcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnZXhjbHVzaXZlTWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5leGNsdXNpdmVNaW5pbXVtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21pbmltdW0nLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09ICdqc29uU2NoZW1hNycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdleGNsdXNpdmVNYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1heGltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4aW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtdWx0aXBsZU9mJzpcbiAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ211bHRpcGxlT2YnLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlci5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5mdW5jdGlvbiBkZWNpZGVBZGRpdGlvbmFsUHJvcGVydGllcyhkZWYsIHJlZnMpIHtcbiAgICBpZiAocmVmcy5yZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3kgPT09ICdzdHJpY3QnKSB7XG4gICAgICAgIHJldHVybiBkZWYuY2F0Y2hhbGwuX2RlZi50eXBlTmFtZSA9PT0gJ1pvZE5ldmVyJyA/XG4gICAgICAgICAgICBkZWYudW5rbm93bktleXMgIT09ICdzdHJpY3QnXG4gICAgICAgICAgICA6IHBhcnNlRGVmKGRlZi5jYXRjaGFsbC5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhZGRpdGlvbmFsUHJvcGVydGllcyddLFxuICAgICAgICAgICAgfSkgPz8gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWYuY2F0Y2hhbGwuX2RlZi50eXBlTmFtZSA9PT0gJ1pvZE5ldmVyJyA/XG4gICAgICAgICAgICBkZWYudW5rbm93bktleXMgPT09ICdwYXNzdGhyb3VnaCdcbiAgICAgICAgICAgIDogcGFyc2VEZWYoZGVmLmNhdGNoYWxsLl9kZWYsIHtcbiAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FkZGl0aW9uYWxQcm9wZXJ0aWVzJ10sXG4gICAgICAgICAgICB9KSA/PyB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU9iamVjdERlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAuLi5PYmplY3QuZW50cmllcyhkZWYuc2hhcGUoKSkucmVkdWNlKChhY2MsIFtwcm9wTmFtZSwgcHJvcERlZl0pID0+IHtcbiAgICAgICAgICAgIGlmIChwcm9wRGVmID09PSB1bmRlZmluZWQgfHwgcHJvcERlZi5fZGVmID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5UGF0aCA9IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAncHJvcGVydGllcycsIHByb3BOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZERlZiA9IHBhcnNlRGVmKHByb3BEZWYuX2RlZiwge1xuICAgICAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IHByb3BlcnR5UGF0aCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eVBhdGgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwYXJzZWREZWYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgaWYgKHJlZnMub3BlbmFpU3RyaWN0TW9kZSAmJlxuICAgICAgICAgICAgICAgIHByb3BEZWYuaXNPcHRpb25hbCgpICYmXG4gICAgICAgICAgICAgICAgIXByb3BEZWYuaXNOdWxsYWJsZSgpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHByb3BEZWYuX2RlZj8uZGVmYXVsdFZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWm9kIGZpZWxkIGF0IFxcYCR7cHJvcGVydHlQYXRoLmpvaW4oJy8nKX1cXGAgdXNlcyBcXGAub3B0aW9uYWwoKVxcYCB3aXRob3V0IFxcYC5udWxsYWJsZSgpXFxgIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIEFQSS4gU2VlOiBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RydWN0dXJlZC1vdXRwdXRzP2FwaS1tb2RlPXJlc3BvbnNlcyNhbGwtZmllbGRzLW11c3QtYmUtcmVxdWlyZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgICAuLi5hY2MucHJvcGVydGllcyxcbiAgICAgICAgICAgICAgICAgICAgW3Byb3BOYW1lXTogcGFyc2VkRGVmLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHByb3BEZWYuaXNPcHRpb25hbCgpICYmICFyZWZzLm9wZW5haVN0cmljdE1vZGUgPyBhY2MucmVxdWlyZWQgOiBbLi4uYWNjLnJlcXVpcmVkLCBwcm9wTmFtZV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LCB7IHByb3BlcnRpZXM6IHt9LCByZXF1aXJlZDogW10gfSksXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBkZWNpZGVBZGRpdGlvbmFsUHJvcGVydGllcyhkZWYsIHJlZnMpLFxuICAgIH07XG4gICAgaWYgKCFyZXN1bHQucmVxdWlyZWQubGVuZ3RoKVxuICAgICAgICBkZWxldGUgcmVzdWx0LnJlcXVpcmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3QubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlT3B0aW9uYWxEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgaWYgKHJlZnMucHJvcGVydHlQYXRoICYmXG4gICAgICAgIHJlZnMuY3VycmVudFBhdGguc2xpY2UoMCwgcmVmcy5wcm9wZXJ0eVBhdGgubGVuZ3RoKS50b1N0cmluZygpID09PSByZWZzLnByb3BlcnR5UGF0aC50b1N0cmluZygpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHsgLi4ucmVmcywgY3VycmVudFBhdGg6IHJlZnMuY3VycmVudFBhdGggfSk7XG4gICAgfVxuICAgIGNvbnN0IGlubmVyU2NoZW1hID0gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FueU9mJywgJzEnXSxcbiAgICB9KTtcbiAgICByZXR1cm4gaW5uZXJTY2hlbWEgP1xuICAgICAgICB7XG4gICAgICAgICAgICBhbnlPZjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm90OiB7fSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlubmVyU2NoZW1hLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgICA6IHt9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGlvbmFsLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBjb25zdCBwYXJzZVBpcGVsaW5lRGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIGlmIChyZWZzLnBpcGVTdHJhdGVneSA9PT0gJ2lucHV0Jykge1xuICAgICAgICByZXR1cm4gcGFyc2VEZWYoZGVmLmluLl9kZWYsIHJlZnMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZWZzLnBpcGVTdHJhdGVneSA9PT0gJ291dHB1dCcpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5vdXQuX2RlZiwgcmVmcyk7XG4gICAgfVxuICAgIGNvbnN0IGEgPSBwYXJzZURlZihkZWYuaW4uX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhbGxPZicsICcwJ10sXG4gICAgfSk7XG4gICAgY29uc3QgYiA9IHBhcnNlRGVmKGRlZi5vdXQuX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhbGxPZicsIGEgPyAnMScgOiAnMCddLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFsbE9mOiBbYSwgYl0uZmlsdGVyKCh4KSA9PiB4ICE9PSB1bmRlZmluZWQpLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZWxpbmUubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUHJvbWlzZURlZihkZWYsIHJlZnMpIHtcbiAgICByZXR1cm4gcGFyc2VEZWYoZGVmLnR5cGUuX2RlZiwgcmVmcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlLm1qcy5tYXAiLCJpbXBvcnQgeyBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzIH0gZnJvbSBcIi4uL2Vycm9yTWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNldERlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCBpdGVtcyA9IHBhcnNlRGVmKGRlZi52YWx1ZVR5cGUuX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcyddLFxuICAgIH0pO1xuICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgdW5pcXVlSXRlbXM6IHRydWUsXG4gICAgICAgIGl0ZW1zLFxuICAgIH07XG4gICAgaWYgKGRlZi5taW5TaXplKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMoc2NoZW1hLCAnbWluSXRlbXMnLCBkZWYubWluU2l6ZS52YWx1ZSwgZGVmLm1pblNpemUubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIGlmIChkZWYubWF4U2l6ZSkge1xuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHNjaGVtYSwgJ21heEl0ZW1zJywgZGVmLm1heFNpemUudmFsdWUsIGRlZi5tYXhTaXplLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0Lm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVR1cGxlRGVmKGRlZiwgcmVmcykge1xuICAgIGlmIChkZWYucmVzdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIG1pbkl0ZW1zOiBkZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgaXRlbXM6IGRlZi5pdGVtc1xuICAgICAgICAgICAgICAgIC5tYXAoKHgsIGkpID0+IHBhcnNlRGVmKHguX2RlZiwge1xuICAgICAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnaXRlbXMnLCBgJHtpfWBdLFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgoYWNjLCB4KSA9PiAoeCA9PT0gdW5kZWZpbmVkID8gYWNjIDogWy4uLmFjYywgeF0pLCBbXSksXG4gICAgICAgICAgICBhZGRpdGlvbmFsSXRlbXM6IHBhcnNlRGVmKGRlZi5yZXN0Ll9kZWYsIHtcbiAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FkZGl0aW9uYWxJdGVtcyddLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIG1pbkl0ZW1zOiBkZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgbWF4SXRlbXM6IGRlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBpdGVtczogZGVmLml0ZW1zXG4gICAgICAgICAgICAgICAgLm1hcCgoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcycsIGAke2l9YF0sXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIHgpID0+ICh4ID09PSB1bmRlZmluZWQgPyBhY2MgOiBbLi4uYWNjLCB4XSksIFtdKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10dXBsZS5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5kZWZpbmVkRGVmKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vdDoge30sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuZGVmaW5lZC5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5rbm93bkRlZigpIHtcbiAgICByZXR1cm4ge307XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmtub3duLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBjb25zdCBwYXJzZVJlYWRvbmx5RGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIHJldHVybiBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHJlZnMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWRvbmx5Lm1qcy5tYXAiLCJpbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgcGFyc2VBbnlEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2FueS5tanNcIjtcbmltcG9ydCB7IHBhcnNlQXJyYXlEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2FycmF5Lm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VCaWdpbnREZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2JpZ2ludC5tanNcIjtcbmltcG9ydCB7IHBhcnNlQm9vbGVhbkRlZiB9IGZyb20gXCIuL3BhcnNlcnMvYm9vbGVhbi5tanNcIjtcbmltcG9ydCB7IHBhcnNlQnJhbmRlZERlZiB9IGZyb20gXCIuL3BhcnNlcnMvYnJhbmRlZC5tanNcIjtcbmltcG9ydCB7IHBhcnNlQ2F0Y2hEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2NhdGNoLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VEYXRlRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9kYXRlLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VEZWZhdWx0RGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9kZWZhdWx0Lm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VFZmZlY3RzRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9lZmZlY3RzLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VFbnVtRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9lbnVtLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VJbnRlcnNlY3Rpb25EZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2ludGVyc2VjdGlvbi5tanNcIjtcbmltcG9ydCB7IHBhcnNlTGl0ZXJhbERlZiB9IGZyb20gXCIuL3BhcnNlcnMvbGl0ZXJhbC5tanNcIjtcbmltcG9ydCB7IHBhcnNlTWFwRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9tYXAubWpzXCI7XG5pbXBvcnQgeyBwYXJzZU5hdGl2ZUVudW1EZWYgfSBmcm9tIFwiLi9wYXJzZXJzL25hdGl2ZUVudW0ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZU5ldmVyRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9uZXZlci5tanNcIjtcbmltcG9ydCB7IHBhcnNlTnVsbERlZiB9IGZyb20gXCIuL3BhcnNlcnMvbnVsbC5tanNcIjtcbmltcG9ydCB7IHBhcnNlTnVsbGFibGVEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL251bGxhYmxlLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VOdW1iZXJEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL251bWJlci5tanNcIjtcbmltcG9ydCB7IHBhcnNlT2JqZWN0RGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9vYmplY3QubWpzXCI7XG5pbXBvcnQgeyBwYXJzZU9wdGlvbmFsRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9vcHRpb25hbC5tanNcIjtcbmltcG9ydCB7IHBhcnNlUGlwZWxpbmVEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3BpcGVsaW5lLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VQcm9taXNlRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9wcm9taXNlLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VSZWNvcmREZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3JlY29yZC5tanNcIjtcbmltcG9ydCB7IHBhcnNlU2V0RGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9zZXQubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVN0cmluZ0RlZiB9IGZyb20gXCIuL3BhcnNlcnMvc3RyaW5nLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VUdXBsZURlZiB9IGZyb20gXCIuL3BhcnNlcnMvdHVwbGUubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVVuZGVmaW5lZERlZiB9IGZyb20gXCIuL3BhcnNlcnMvdW5kZWZpbmVkLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VVbmlvbkRlZiB9IGZyb20gXCIuL3BhcnNlcnMvdW5pb24ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVVua25vd25EZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3Vua25vd24ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVJlYWRvbmx5RGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9yZWFkb25seS5tanNcIjtcbmltcG9ydCB7IGlnbm9yZU92ZXJyaWRlIH0gZnJvbSBcIi4vT3B0aW9ucy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURlZihkZWYsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbiA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc2Vlbkl0ZW0gPSByZWZzLnNlZW4uZ2V0KGRlZik7XG4gICAgaWYgKHJlZnMub3ZlcnJpZGUpIHtcbiAgICAgICAgY29uc3Qgb3ZlcnJpZGVSZXN1bHQgPSByZWZzLm92ZXJyaWRlPy4oZGVmLCByZWZzLCBzZWVuSXRlbSwgZm9yY2VSZXNvbHV0aW9uKTtcbiAgICAgICAgaWYgKG92ZXJyaWRlUmVzdWx0ICE9PSBpZ25vcmVPdmVycmlkZSkge1xuICAgICAgICAgICAgcmV0dXJuIG92ZXJyaWRlUmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZWVuSXRlbSAmJiAhZm9yY2VSZXNvbHV0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNlZW5TY2hlbWEgPSBnZXQkcmVmKHNlZW5JdGVtLCByZWZzKTtcbiAgICAgICAgaWYgKHNlZW5TY2hlbWEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCckcmVmJyBpbiBzZWVuU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgcmVmcy5zZWVuUmVmcy5hZGQoc2VlblNjaGVtYS4kcmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWVuU2NoZW1hO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5ld0l0ZW0gPSB7IGRlZiwgcGF0aDogcmVmcy5jdXJyZW50UGF0aCwganNvblNjaGVtYTogdW5kZWZpbmVkIH07XG4gICAgcmVmcy5zZWVuLnNldChkZWYsIG5ld0l0ZW0pO1xuICAgIGNvbnN0IGpzb25TY2hlbWEgPSBzZWxlY3RQYXJzZXIoZGVmLCBkZWYudHlwZU5hbWUsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbik7XG4gICAgaWYgKGpzb25TY2hlbWEpIHtcbiAgICAgICAgYWRkTWV0YShkZWYsIHJlZnMsIGpzb25TY2hlbWEpO1xuICAgIH1cbiAgICBuZXdJdGVtLmpzb25TY2hlbWEgPSBqc29uU2NoZW1hO1xuICAgIHJldHVybiBqc29uU2NoZW1hO1xufVxuY29uc3QgZ2V0JHJlZiA9IChpdGVtLCByZWZzKSA9PiB7XG4gICAgc3dpdGNoIChyZWZzLiRyZWZTdHJhdGVneSkge1xuICAgICAgICBjYXNlICdyb290JzpcbiAgICAgICAgICAgIHJldHVybiB7ICRyZWY6IGl0ZW0ucGF0aC5qb2luKCcvJykgfTtcbiAgICAgICAgLy8gdGhpcyBjYXNlIGlzIG5lZWRlZCBhcyBPcGVuQUkgc3RyaWN0IG1vZGUgZG9lc24ndCBzdXBwb3J0IHRvcC1sZXZlbCBgJHJlZmBzLCBpLmUuXG4gICAgICAgIC8vIHRoZSB0b3AtbGV2ZWwgc2NoZW1hICptdXN0KiBiZSBge1widHlwZVwiOiBcIm9iamVjdFwiLCBcInByb3BlcnRpZXNcIjogey4uLn19YCBidXQgaWYgd2UgZXZlclxuICAgICAgICAvLyBuZWVkIHRvIGRlZmluZSBhIGAkcmVmYCwgcmVsYXRpdmUgYCRyZWZgcyBhcmVuJ3Qgc3VwcG9ydGVkLCBzbyB3ZSBuZWVkIHRvIGV4dHJhY3RcbiAgICAgICAgLy8gdGhlIHNjaGVtYSB0byBgIy9kZWZpbml0aW9ucy9gIGFuZCByZWZlcmVuY2UgdGhhdC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gZS5nLiBpZiB3ZSBuZWVkIHRvIHJlZmVyZW5jZSBhIHNjaGVtYSBhdFxuICAgICAgICAvLyBgW1wiI1wiLFwiZGVmaW5pdGlvbnNcIixcImNvbnRhY3RQZXJzb25cIixcInByb3BlcnRpZXNcIixcInBlcnNvbjFcIixcInByb3BlcnRpZXNcIixcIm5hbWVcIl1gXG4gICAgICAgIC8vIHRoZW4gd2UnbGwgZXh0cmFjdCBpdCBvdXQgdG8gYGNvbnRhY3RQZXJzb25fcHJvcGVydGllc19wZXJzb24xX3Byb3BlcnRpZXNfbmFtZWBcbiAgICAgICAgY2FzZSAnZXh0cmFjdC10by1yb290JzpcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBpdGVtLnBhdGguc2xpY2UocmVmcy5iYXNlUGF0aC5sZW5ndGggKyAxKS5qb2luKCdfJyk7XG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGV4dHJhY3QgdGhlIHJvb3Qgc2NoZW1hIGluIHRoaXMgY2FzZSwgYXMgaXQncyBhbHJlYWR5XG4gICAgICAgICAgICAvLyBiZWVuIGFkZGVkIHRvIHRoZSBkZWZpbml0aW9uc1xuICAgICAgICAgICAgaWYgKG5hbWUgIT09IHJlZnMubmFtZSAmJiByZWZzLm5hbWVTdHJhdGVneSA9PT0gJ2R1cGxpY2F0ZS1yZWYnKSB7XG4gICAgICAgICAgICAgICAgcmVmcy5kZWZpbml0aW9uc1tuYW1lXSA9IGl0ZW0uZGVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgJHJlZjogWy4uLnJlZnMuYmFzZVBhdGgsIHJlZnMuZGVmaW5pdGlvblBhdGgsIG5hbWVdLmpvaW4oJy8nKSB9O1xuICAgICAgICBjYXNlICdyZWxhdGl2ZSc6XG4gICAgICAgICAgICByZXR1cm4geyAkcmVmOiBnZXRSZWxhdGl2ZVBhdGgocmVmcy5jdXJyZW50UGF0aCwgaXRlbS5wYXRoKSB9O1xuICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgY2FzZSAnc2Vlbic6IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnBhdGgubGVuZ3RoIDwgcmVmcy5jdXJyZW50UGF0aC5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBpdGVtLnBhdGguZXZlcnkoKHZhbHVlLCBpbmRleCkgPT4gcmVmcy5jdXJyZW50UGF0aFtpbmRleF0gPT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgUmVjdXJzaXZlIHJlZmVyZW5jZSBkZXRlY3RlZCBhdCAke3JlZnMuY3VycmVudFBhdGguam9pbignLycpfSEgRGVmYXVsdGluZyB0byBhbnlgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVmcy4kcmVmU3RyYXRlZ3kgPT09ICdzZWVuJyA/IHt9IDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGdldFJlbGF0aXZlUGF0aCA9IChwYXRoQSwgcGF0aEIpID0+IHtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBwYXRoQS5sZW5ndGggJiYgaSA8IHBhdGhCLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXRoQVtpXSAhPT0gcGF0aEJbaV0pXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIFsocGF0aEEubGVuZ3RoIC0gaSkudG9TdHJpbmcoKSwgLi4ucGF0aEIuc2xpY2UoaSldLmpvaW4oJy8nKTtcbn07XG5jb25zdCBzZWxlY3RQYXJzZXIgPSAoZGVmLCB0eXBlTmFtZSwgcmVmcywgZm9yY2VSZXNvbHV0aW9uKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlTmFtZSkge1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTdHJpbmc6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmdEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVtYmVyOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlTnVtYmVyRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU9iamVjdERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCaWdJbnQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VCaWdpbnREZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUJvb2xlYW5EZWYoKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGF0ZTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZURhdGVEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5kZWZpbmVkOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVW5kZWZpbmVkRGVmKCk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGw6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOdWxsRGVmKHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBcnJheTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUFycmF5RGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuaW9uOlxuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REaXNjcmltaW5hdGVkVW5pb246XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VVbmlvbkRlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RJbnRlcnNlY3Rpb246XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnRlcnNlY3Rpb25EZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVHVwbGU6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VUdXBsZURlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWNvcmQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VSZWNvcmREZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGl0ZXJhbDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUxpdGVyYWxEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRW51bTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUVudW1EZWYoZGVmKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmF0aXZlRW51bTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU5hdGl2ZUVudW1EZWYoZGVmKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVsbGFibGU6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOdWxsYWJsZURlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPcHRpb25hbDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU9wdGlvbmFsRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE1hcDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU1hcERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTZXQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VTZXREZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGF6eTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZURlZihkZWYuZ2V0dGVyKCkuX2RlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFByb21pc2U6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VQcm9taXNlRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hTjpcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmV2ZXI6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOZXZlckRlZigpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRWZmZWN0c0RlZihkZWYsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbik7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFueTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUFueURlZigpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmtub3duOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVW5rbm93bkRlZigpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRGVmYXVsdERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCcmFuZGVkOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlQnJhbmRlZERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWFkb25seTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVJlYWRvbmx5RGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZENhdGNoOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlQ2F0Y2hEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUGlwZWxpbmU6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VQaXBlbGluZURlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RGdW5jdGlvbjpcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVm9pZDpcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3ltYm9sOlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAoKF8pID0+IHVuZGVmaW5lZCkodHlwZU5hbWUpO1xuICAgIH1cbn07XG5jb25zdCBhZGRNZXRhID0gKGRlZiwgcmVmcywganNvblNjaGVtYSkgPT4ge1xuICAgIGlmIChkZWYuZGVzY3JpcHRpb24pIHtcbiAgICAgICAganNvblNjaGVtYS5kZXNjcmlwdGlvbiA9IGRlZi5kZXNjcmlwdGlvbjtcbiAgICAgICAgaWYgKHJlZnMubWFya2Rvd25EZXNjcmlwdGlvbikge1xuICAgICAgICAgICAganNvblNjaGVtYS5tYXJrZG93bkRlc2NyaXB0aW9uID0gZGVmLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBqc29uU2NoZW1hO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlRGVmLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuL3BhcnNlRGVmLm1qc1wiO1xuaW1wb3J0IHsgZ2V0UmVmcyB9IGZyb20gXCIuL1JlZnMubWpzXCI7XG5pbXBvcnQgeyB6b2REZWYsIGlzRW1wdHlPYmogfSBmcm9tIFwiLi91dGlsLm1qc1wiO1xuY29uc3Qgem9kVG9Kc29uU2NoZW1hID0gKHNjaGVtYSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHJlZnMgPSBnZXRSZWZzKG9wdGlvbnMpO1xuICAgIGNvbnN0IG5hbWUgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgPyBvcHRpb25zXG4gICAgICAgIDogb3B0aW9ucz8ubmFtZVN0cmF0ZWd5ID09PSAndGl0bGUnID8gdW5kZWZpbmVkXG4gICAgICAgICAgICA6IG9wdGlvbnM/Lm5hbWU7XG4gICAgY29uc3QgbWFpbiA9IHBhcnNlRGVmKHNjaGVtYS5fZGVmLCBuYW1lID09PSB1bmRlZmluZWQgPyByZWZzIDogKHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmJhc2VQYXRoLCByZWZzLmRlZmluaXRpb25QYXRoLCBuYW1lXSxcbiAgICB9KSwgZmFsc2UpID8/IHt9O1xuICAgIGNvbnN0IHRpdGxlID0gdHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnICYmIG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMubmFtZVN0cmF0ZWd5ID09PSAndGl0bGUnID9cbiAgICAgICAgb3B0aW9ucy5uYW1lXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGlmICh0aXRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1haW4udGl0bGUgPSB0aXRsZTtcbiAgICB9XG4gICAgY29uc3QgZGVmaW5pdGlvbnMgPSAoKCkgPT4ge1xuICAgICAgICBpZiAoaXNFbXB0eU9iaihyZWZzLmRlZmluaXRpb25zKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IHt9O1xuICAgICAgICBjb25zdCBwcm9jZXNzZWREZWZpbml0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gdGhlIGNhbGwgdG8gYHBhcnNlRGVmKClgIGhlcmUgbWlnaHQgaXRzZWxmIGFkZCBtb3JlIGVudHJpZXMgdG8gYC5kZWZpbml0aW9uc2BcbiAgICAgICAgLy8gc28gd2UgbmVlZCB0byBjb250aW51YWxseSBldmFsdWF0ZSBkZWZpbml0aW9ucyB1bnRpbCB3ZSd2ZSByZXNvbHZlZCBhbGwgb2YgdGhlbVxuICAgICAgICAvL1xuICAgICAgICAvLyB3ZSBoYXZlIGEgZ2VuZXJvdXMgaXRlcmF0aW9uIGxpbWl0IGhlcmUgdG8gYXZvaWQgYmxvd2luZyB1cCB0aGUgc3RhY2sgaWYgdGhlcmVcbiAgICAgICAgLy8gYXJlIGFueSBidWdzIHRoYXQgd291bGQgb3RoZXJ3aXNlIHJlc3VsdCBpbiB1cyBpdGVyYXRpbmcgaW5kZWZpbml0ZWx5XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTAwOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0RlZmluaXRpb25zID0gT2JqZWN0LmVudHJpZXMocmVmcy5kZWZpbml0aW9ucykuZmlsdGVyKChba2V5XSkgPT4gIXByb2Nlc3NlZERlZmluaXRpb25zLmhhcyhrZXkpKTtcbiAgICAgICAgICAgIGlmIChuZXdEZWZpbml0aW9ucy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHNjaGVtYV0gb2YgbmV3RGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uc1trZXldID1cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VEZWYoem9kRGVmKHNjaGVtYSksIHsgLi4ucmVmcywgY3VycmVudFBhdGg6IFsuLi5yZWZzLmJhc2VQYXRoLCByZWZzLmRlZmluaXRpb25QYXRoLCBrZXldIH0sIHRydWUpID8/IHt9O1xuICAgICAgICAgICAgICAgIHByb2Nlc3NlZERlZmluaXRpb25zLmFkZChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9ucztcbiAgICB9KSgpO1xuICAgIGNvbnN0IGNvbWJpbmVkID0gbmFtZSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgZGVmaW5pdGlvbnMgP1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC4uLm1haW4sXG4gICAgICAgICAgICAgICAgW3JlZnMuZGVmaW5pdGlvblBhdGhdOiBkZWZpbml0aW9ucyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbWFpblxuICAgICAgICA6IHJlZnMubmFtZVN0cmF0ZWd5ID09PSAnZHVwbGljYXRlLXJlZicgP1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC4uLm1haW4sXG4gICAgICAgICAgICAgICAgLi4uKGRlZmluaXRpb25zIHx8IHJlZnMuc2VlblJlZnMuc2l6ZSA/XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtyZWZzLmRlZmluaXRpb25QYXRoXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRlZmluaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgYWN0dWFsbHkgZHVwbGljYXRlIHRoZSBzY2hlbWEgZGVmaW5pdGlvbiBpZiBpdCB3YXMgZXZlciByZWZlcmVuY2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBkdXBsaWNhdGlvbiBpcyBjb21wbGV0ZWx5IHBvaW50bGVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihyZWZzLnNlZW5SZWZzLnNpemUgPyB7IFtuYW1lXTogbWFpbiB9IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgJHJlZjogWy4uLihyZWZzLiRyZWZTdHJhdGVneSA9PT0gJ3JlbGF0aXZlJyA/IFtdIDogcmVmcy5iYXNlUGF0aCksIHJlZnMuZGVmaW5pdGlvblBhdGgsIG5hbWVdLmpvaW4oJy8nKSxcbiAgICAgICAgICAgICAgICBbcmVmcy5kZWZpbml0aW9uUGF0aF06IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZGVmaW5pdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIFtuYW1lXTogbWFpbixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09ICdqc29uU2NoZW1hNycpIHtcbiAgICAgICAgY29tYmluZWQuJHNjaGVtYSA9ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSMnO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZWZzLnRhcmdldCA9PT0gJ2pzb25TY2hlbWEyMDE5LTA5Jykge1xuICAgICAgICBjb21iaW5lZC4kc2NoZW1hID0gJ2h0dHBzOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LzIwMTktMDkvc2NoZW1hIyc7XG4gICAgfVxuICAgIHJldHVybiBjb21iaW5lZDtcbn07XG5leHBvcnQgeyB6b2RUb0pzb25TY2hlbWEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXpvZFRvSnNvblNjaGVtYS5tanMubWFwIiwiaW1wb3J0IHsgT3BlbkFJRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IubWpzXCI7XG5pbXBvcnQgeyBpc0F1dG9QYXJzYWJsZVJlc3BvbnNlRm9ybWF0IH0gZnJvbSBcIi4uL2xpYi9wYXJzZXIubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gbWF5YmVQYXJzZVJlc3BvbnNlKHJlc3BvbnNlLCBwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtcyB8fCAhaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgICAgICAgb3V0cHV0X3BhcnNlZDogbnVsbCxcbiAgICAgICAgICAgIG91dHB1dDogcmVzcG9uc2Uub3V0cHV0Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZF9hcmd1bWVudHM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudC5tYXAoKGNvbnRlbnQpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlUmVzcG9uc2UocmVzcG9uc2UsIHBhcmFtcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZXNwb25zZShyZXNwb25zZSwgcGFyYW1zKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gcmVzcG9uc2Uub3V0cHV0Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICBwYXJzZWRfYXJndW1lbnRzOiBwYXJzZVRvb2xDYWxsKHBhcmFtcywgaXRlbSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGl0ZW0uY29udGVudC5tYXAoKGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkOiBwYXJzZVRleHRGb3JtYXQocGFyYW1zLCBjb250ZW50LnRleHQpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuICAgIGNvbnN0IHBhcnNlZCA9IE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLCB7IG91dHB1dCB9KTtcbiAgICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocmVzcG9uc2UsICdvdXRwdXRfdGV4dCcpKSB7XG4gICAgICAgIGFkZE91dHB1dFRleHQocGFyc2VkKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcnNlZCwgJ291dHB1dF9wYXJzZWQnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIHBhcnNlZC5vdXRwdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0LnR5cGUgIT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb250ZW50IG9mIG91dHB1dC5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICdvdXRwdXRfdGV4dCcgJiYgY29udGVudC5wYXJzZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50LnBhcnNlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWQ7XG59XG5mdW5jdGlvbiBwYXJzZVRleHRGb3JtYXQocGFyYW1zLCBjb250ZW50KSB7XG4gICAgaWYgKHBhcmFtcy50ZXh0Py5mb3JtYXQ/LnR5cGUgIT09ICdqc29uX3NjaGVtYScpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICgnJHBhcnNlUmF3JyBpbiBwYXJhbXMudGV4dD8uZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IHRleHRfZm9ybWF0ID0gcGFyYW1zLnRleHQ/LmZvcm1hdDtcbiAgICAgICAgcmV0dXJuIHRleHRfZm9ybWF0LiRwYXJzZVJhdyhjb250ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoY29udGVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtcykge1xuICAgIGlmIChpc0F1dG9QYXJzYWJsZVJlc3BvbnNlRm9ybWF0KHBhcmFtcy50ZXh0Py5mb3JtYXQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVBhcnNlYWJsZVJlc3BvbnNlVG9vbCh0b29sLCB7IHBhcnNlciwgY2FsbGJhY2ssIH0pIHtcbiAgICBjb25zdCBvYmogPSB7IC4uLnRvb2wgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcbiAgICAgICAgJGJyYW5kOiB7XG4gICAgICAgICAgICB2YWx1ZTogJ2F1dG8tcGFyc2VhYmxlLXRvb2wnLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRwYXJzZVJhdzoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlcixcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICAkY2FsbGJhY2s6IHtcbiAgICAgICAgICAgIHZhbHVlOiBjYWxsYmFjayxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvUGFyc2FibGVUb29sKHRvb2wpIHtcbiAgICByZXR1cm4gdG9vbD8uWyckYnJhbmQnXSA9PT0gJ2F1dG8tcGFyc2VhYmxlLXRvb2wnO1xufVxuZnVuY3Rpb24gZ2V0SW5wdXRUb29sQnlOYW1lKGlucHV0X3Rvb2xzLCBuYW1lKSB7XG4gICAgcmV0dXJuIGlucHV0X3Rvb2xzLmZpbmQoKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b29sLm5hbWUgPT09IG5hbWUpO1xufVxuZnVuY3Rpb24gcGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSB7XG4gICAgY29uc3QgaW5wdXRUb29sID0gZ2V0SW5wdXRUb29sQnlOYW1lKHBhcmFtcy50b29scyA/PyBbXSwgdG9vbENhbGwubmFtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4udG9vbENhbGwsXG4gICAgICAgIC4uLnRvb2xDYWxsLFxuICAgICAgICBwYXJzZWRfYXJndW1lbnRzOiBpc0F1dG9QYXJzYWJsZVRvb2woaW5wdXRUb29sKSA/IGlucHV0VG9vbC4kcGFyc2VSYXcodG9vbENhbGwuYXJndW1lbnRzKVxuICAgICAgICAgICAgOiBpbnB1dFRvb2w/LnN0cmljdCA/IEpTT04ucGFyc2UodG9vbENhbGwuYXJndW1lbnRzKVxuICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFBhcnNlVG9vbENhbGwocGFyYW1zLCB0b29sQ2FsbCkge1xuICAgIGlmICghcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRUb29sID0gZ2V0SW5wdXRUb29sQnlOYW1lKHBhcmFtcy50b29scyA/PyBbXSwgdG9vbENhbGwubmFtZSk7XG4gICAgcmV0dXJuIGlzQXV0b1BhcnNhYmxlVG9vbChpbnB1dFRvb2wpIHx8IGlucHV0VG9vbD8uc3RyaWN0IHx8IGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRUb29scyh0b29scykge1xuICAgIGZvciAoY29uc3QgdG9vbCBvZiB0b29scyA/PyBbXSkge1xuICAgICAgICBpZiAodG9vbC50eXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYEN1cnJlbnRseSBvbmx5IFxcYGZ1bmN0aW9uXFxgIHRvb2wgdHlwZXMgc3VwcG9ydCBhdXRvLXBhcnNpbmc7IFJlY2VpdmVkIFxcYCR7dG9vbC50eXBlfVxcYGApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b29sLmZ1bmN0aW9uLnN0cmljdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBUaGUgXFxgJHt0b29sLmZ1bmN0aW9uLm5hbWV9XFxgIHRvb2wgaXMgbm90IG1hcmtlZCB3aXRoIFxcYHN0cmljdDogdHJ1ZVxcYC4gT25seSBzdHJpY3QgZnVuY3Rpb24gdG9vbHMgY2FuIGJlIGF1dG8tcGFyc2VkYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkT3V0cHV0VGV4dChyc3ApIHtcbiAgICBjb25zdCB0ZXh0cyA9IFtdO1xuICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIHJzcC5vdXRwdXQpIHtcbiAgICAgICAgaWYgKG91dHB1dC50eXBlICE9PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgY29udGVudCBvZiBvdXRwdXQuY29udGVudCkge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ291dHB1dF90ZXh0Jykge1xuICAgICAgICAgICAgICAgIHRleHRzLnB1c2goY29udGVudC50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByc3Aub3V0cHV0X3RleHQgPSB0ZXh0cy5qb2luKCcnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlc3BvbnNlc1BhcnNlci5tanMubWFwIiwiaW1wb3J0IHsgbWFrZVBhcnNlYWJsZVJlc3BvbnNlRm9ybWF0LCBtYWtlUGFyc2VhYmxlVGV4dEZvcm1hdCwgbWFrZVBhcnNlYWJsZVRvb2wsIH0gZnJvbSBcIi4uL2xpYi9wYXJzZXIubWpzXCI7XG5pbXBvcnQgeyB6b2RUb0pzb25TY2hlbWEgYXMgX3pvZFRvSnNvblNjaGVtYSB9IGZyb20gXCIuLi9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VQYXJzZWFibGVSZXNwb25zZVRvb2wgfSBmcm9tIFwiLi4vbGliL1Jlc3BvbnNlc1BhcnNlci5tanNcIjtcbmZ1bmN0aW9uIHpvZFRvSnNvblNjaGVtYShzY2hlbWEsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gX3pvZFRvSnNvblNjaGVtYShzY2hlbWEsIHtcbiAgICAgICAgb3BlbmFpU3RyaWN0TW9kZTogdHJ1ZSxcbiAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgICBuYW1lU3RyYXRlZ3k6ICdkdXBsaWNhdGUtcmVmJyxcbiAgICAgICAgJHJlZlN0cmF0ZWd5OiAnZXh0cmFjdC10by1yb290JyxcbiAgICAgICAgbnVsbGFibGVTdHJhdGVneTogJ3Byb3BlcnR5JyxcbiAgICB9KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGNoYXQgY29tcGxldGlvbiBgSlNPTlNjaGVtYWAgcmVzcG9uc2UgZm9ybWF0IG9iamVjdCBmcm9tXG4gKiB0aGUgZ2l2ZW4gWm9kIHNjaGVtYS5cbiAqXG4gKiBJZiB0aGlzIGlzIHBhc3NlZCB0byB0aGUgYC5wYXJzZSgpYCwgYC5zdHJlYW0oKWAgb3IgYC5ydW5Ub29scygpYFxuICogY2hhdCBjb21wbGV0aW9uIG1ldGhvZHMgdGhlbiB0aGUgcmVzcG9uc2UgbWVzc2FnZSB3aWxsIGNvbnRhaW4gYVxuICogYC5wYXJzZWRgIHByb3BlcnR5IHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBwYXJzaW5nIHRoZSBjb250ZW50IHdpdGhcbiAqIHRoZSBnaXZlbiBab2Qgb2JqZWN0LlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBjb21wbGV0aW9uID0gYXdhaXQgY2xpZW50LmNoYXQuY29tcGxldGlvbnMucGFyc2Uoe1xuICogICAgbW9kZWw6ICdncHQtNG8tMjAyNC0wOC0wNicsXG4gKiAgICBtZXNzYWdlczogW1xuICogICAgICB7IHJvbGU6ICdzeXN0ZW0nLCBjb250ZW50OiAnWW91IGFyZSBhIGhlbHBmdWwgbWF0aCB0dXRvci4nIH0sXG4gKiAgICAgIHsgcm9sZTogJ3VzZXInLCBjb250ZW50OiAnc29sdmUgOHggKyAzMSA9IDInIH0sXG4gKiAgICBdLFxuICogICAgcmVzcG9uc2VfZm9ybWF0OiB6b2RSZXNwb25zZUZvcm1hdChcbiAqICAgICAgei5vYmplY3Qoe1xuICogICAgICAgIHN0ZXBzOiB6LmFycmF5KHoub2JqZWN0KHtcbiAqICAgICAgICAgIGV4cGxhbmF0aW9uOiB6LnN0cmluZygpLFxuICogICAgICAgICAgYW5zd2VyOiB6LnN0cmluZygpLFxuICogICAgICAgIH0pKSxcbiAqICAgICAgICBmaW5hbF9hbnN3ZXI6IHouc3RyaW5nKCksXG4gKiAgICAgIH0pLFxuICogICAgICAnbWF0aF9hbnN3ZXInLFxuICogICAgKSxcbiAqICB9KTtcbiAqICBjb25zdCBtZXNzYWdlID0gY29tcGxldGlvbi5jaG9pY2VzWzBdPy5tZXNzYWdlO1xuICogIGlmIChtZXNzYWdlPy5wYXJzZWQpIHtcbiAqICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UucGFyc2VkKTtcbiAqICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UucGFyc2VkLmZpbmFsX2Fuc3dlcik7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGNhbiBiZSBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIGAuY3JlYXRlKClgIG1ldGhvZCBidXQgd2lsbCBub3RcbiAqIHJlc3VsdCBpbiBhbnkgYXV0b21hdGljIHBhcnNpbmcsIHlvdSdsbCBoYXZlIHRvIHBhcnNlIHRoZSByZXNwb25zZSB5b3Vyc2VsZi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHpvZFJlc3BvbnNlRm9ybWF0KHpvZE9iamVjdCwgbmFtZSwgcHJvcHMpIHtcbiAgICByZXR1cm4gbWFrZVBhcnNlYWJsZVJlc3BvbnNlRm9ybWF0KHtcbiAgICAgICAgdHlwZTogJ2pzb25fc2NoZW1hJyxcbiAgICAgICAganNvbl9zY2hlbWE6IHtcbiAgICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIHNjaGVtYTogem9kVG9Kc29uU2NoZW1hKHpvZE9iamVjdCwgeyBuYW1lIH0pLFxuICAgICAgICB9LFxuICAgIH0sIChjb250ZW50KSA9PiB6b2RPYmplY3QucGFyc2UoSlNPTi5wYXJzZShjb250ZW50KSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHpvZFRleHRGb3JtYXQoem9kT2JqZWN0LCBuYW1lLCBwcm9wcykge1xuICAgIHJldHVybiBtYWtlUGFyc2VhYmxlVGV4dEZvcm1hdCh7XG4gICAgICAgIHR5cGU6ICdqc29uX3NjaGVtYScsXG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBuYW1lLFxuICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgIHNjaGVtYTogem9kVG9Kc29uU2NoZW1hKHpvZE9iamVjdCwgeyBuYW1lIH0pLFxuICAgIH0sIChjb250ZW50KSA9PiB6b2RPYmplY3QucGFyc2UoSlNPTi5wYXJzZShjb250ZW50KSkpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgY2hhdCBjb21wbGV0aW9uIGBmdW5jdGlvbmAgdG9vbCB0aGF0IGNhbiBiZSBpbnZva2VkXG4gKiBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBjaGF0IGNvbXBsZXRpb24gYC5ydW5Ub29scygpYCBtZXRob2Qgb3IgYXV0b21hdGljYWxseVxuICogcGFyc2VkIGJ5IGAucGFyc2UoKWAgLyBgLnN0cmVhbSgpYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHpvZEZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE9cbiAgICByZXR1cm4gbWFrZVBhcnNlYWJsZVRvb2woe1xuICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICBmdW5jdGlvbjoge1xuICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogem9kVG9Kc29uU2NoZW1hKG9wdGlvbnMucGFyYW1ldGVycywgeyBuYW1lOiBvcHRpb25zLm5hbWUgfSksXG4gICAgICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgICAgICAuLi4ob3B0aW9ucy5kZXNjcmlwdGlvbiA/IHsgZGVzY3JpcHRpb246IG9wdGlvbnMuZGVzY3JpcHRpb24gfSA6IHVuZGVmaW5lZCksXG4gICAgICAgIH0sXG4gICAgfSwge1xuICAgICAgICBjYWxsYmFjazogb3B0aW9ucy5mdW5jdGlvbixcbiAgICAgICAgcGFyc2VyOiAoYXJncykgPT4gb3B0aW9ucy5wYXJhbWV0ZXJzLnBhcnNlKEpTT04ucGFyc2UoYXJncykpLFxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHpvZFJlc3BvbnNlc0Z1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbWFrZVBhcnNlYWJsZVJlc3BvbnNlVG9vbCh7XG4gICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgICAgcGFyYW1ldGVyczogem9kVG9Kc29uU2NoZW1hKG9wdGlvbnMucGFyYW1ldGVycywgeyBuYW1lOiBvcHRpb25zLm5hbWUgfSksXG4gICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgLi4uKG9wdGlvbnMuZGVzY3JpcHRpb24gPyB7IGRlc2NyaXB0aW9uOiBvcHRpb25zLmRlc2NyaXB0aW9uIH0gOiB1bmRlZmluZWQpLFxuICAgIH0sIHtcbiAgICAgICAgY2FsbGJhY2s6IG9wdGlvbnMuZnVuY3Rpb24sXG4gICAgICAgIHBhcnNlcjogKGFyZ3MpID0+IG9wdGlvbnMucGFyYW1ldGVycy5wYXJzZShKU09OLnBhcnNlKGFyZ3MpKSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXpvZC5tanMubWFwIiwiLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgZXJyb3JzIHRocm93biBieSB0aGUgbGlicmFyeS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFnZW50c0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIHN0YXRlO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgfVxufVxuLyoqXG4gKiBTeXN0ZW0gZXJyb3IgdGhyb3duIHdoZW4gdGhlIGxpYnJhcnkgZW5jb3VudGVycyBhbiBlcnJvciB0aGF0IGlzIG5vdCBjYXVzZWQgYnkgdGhlIHVzZXInc1xuICogbWlzY29uZmlndXJhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFN5c3RlbUVycm9yIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xufVxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiB0aGUgbWF4aW11bSBudW1iZXIgb2YgdHVybnMgaXMgZXhjZWVkZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXhUdXJuc0V4Y2VlZGVkRXJyb3IgZXh0ZW5kcyBBZ2VudHNFcnJvciB7XG59XG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIGEgbW9kZWwgYmVoYXZpb3IgaXMgdW5leHBlY3RlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vZGVsQmVoYXZpb3JFcnJvciBleHRlbmRzIEFnZW50c0Vycm9yIHtcbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gdGhlIGVycm9yIGlzIGNhdXNlZCBieSB0aGUgbGlicmFyeSB1c2VyJ3MgbWlzY29uZmlndXJhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJFcnJvciBleHRlbmRzIEFnZW50c0Vycm9yIHtcbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYSBndWFyZHJhaWwgZXhlY3V0aW9uIGZhaWxzLlxuICovXG5leHBvcnQgY2xhc3MgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IgZXh0ZW5kcyBBZ2VudHNFcnJvciB7XG4gICAgZXJyb3I7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3IsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgIH1cbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYSB0b29sIGNhbGwgZmFpbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29sQ2FsbEVycm9yIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xuICAgIGVycm9yO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGVycm9yLCBzdGF0ZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBzdGF0ZSk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICB9XG59XG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIGFuIGlucHV0IGd1YXJkcmFpbCB0cmlwd2lyZSBpcyB0cmlnZ2VyZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xuICAgIHJlc3VsdDtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCByZXN1bHQsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgfVxufVxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiBhbiBvdXRwdXQgZ3VhcmRyYWlsIHRyaXB3aXJlIGlzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xuICAgIHJlc3VsdDtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCByZXN1bHQsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLm1qcy5tYXAiLCIvKipcbiAqIFZlcmlmaWVzIHRoYXQgYW4gaW5wdXQgaXMgYSBab2RPYmplY3Qgd2l0aG91dCBuZWVkaW5nIHRvIGhhdmUgWm9kIGF0IHJ1bnRpbWUgc2luY2UgaXQncyBhblxuICogb3B0aW9uYWwgZGVwZW5kZW5jeS5cbiAqIEBwYXJhbSBpbnB1dFxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzWm9kT2JqZWN0KGlucHV0KSB7XG4gICAgcmV0dXJuICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGlucHV0ICE9PSBudWxsICYmXG4gICAgICAgICdfZGVmJyBpbiBpbnB1dCAmJlxuICAgICAgICB0eXBlb2YgaW5wdXQuX2RlZiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgaW5wdXQuX2RlZiAhPT0gbnVsbCAmJlxuICAgICAgICAndHlwZU5hbWUnIGluIGlucHV0Ll9kZWYgJiZcbiAgICAgICAgaW5wdXQuX2RlZi50eXBlTmFtZSA9PT0gJ1pvZE9iamVjdCcpO1xufVxuLyoqXG4gKiBWZXJpZmllcyB0aGF0IGFuIGlucHV0IGlzIGFuIG9iamVjdCB3aXRoIGFuIGBpbnB1dGAgcHJvcGVydHkuXG4gKiBAcGFyYW0gaW5wdXRcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FnZW50VG9vbElucHV0KGlucHV0KSB7XG4gICAgcmV0dXJuICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGlucHV0ICE9PSBudWxsICYmXG4gICAgICAgICdpbnB1dCcgaW4gaW5wdXQgJiZcbiAgICAgICAgdHlwZW9mIGlucHV0LmlucHV0ID09PSAnc3RyaW5nJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlR3VhcmRzLm1qcy5tYXAiLCJpbXBvcnQgeyB6b2RSZXNwb25zZXNGdW5jdGlvbiwgem9kVGV4dEZvcm1hdCB9IGZyb20gJ29wZW5haS9oZWxwZXJzL3pvZCc7XG5pbXBvcnQgeyBVc2VyRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzLm1qc1wiO1xuaW1wb3J0IHsgaXNab2RPYmplY3QgfSBmcm9tIFwiLi90eXBlR3VhcmRzLm1qc1wiO1xuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGEgZnVuY3Rpb24gdG9vbCBuYW1lIGJ5IHJlcGxhY2luZyBzcGFjZXMgd2l0aCB1bmRlcnNjb3JlcyBhbmRcbiAqIG5vbi1hbHBoYW51bWVyaWMgY2hhcmFjdGVycyB3aXRoIHVuZGVyc2NvcmVzLlxuICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdG9vbC5cbiAqIEByZXR1cm5zIFRoZSBmdW5jdGlvbiB0b29sIG5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0Z1bmN0aW9uVG9vbE5hbWUobmFtZSkge1xuICAgIC8vIFJlcGxhY2Ugc3BhY2VzIHdpdGggdW5kZXJzY29yZXNcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9cXHMvZywgJ18nKTtcbiAgICAvLyBSZXBsYWNlIG5vbi1hbHBoYW51bWVyaWMgY2hhcmFjdGVycyB3aXRoIHVuZGVyc2NvcmVzXG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW15hLXpBLVowLTldL2csICdfJyk7XG4gICAgLy8gRW5zdXJlIHRoZSBuYW1lIGlzIG5vdCBlbXB0eVxuICAgIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rvb2wgbmFtZSBjYW5ub3QgYmUgZW1wdHknKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG59XG4vKipcbiAqIEdldCB0aGUgc2NoZW1hIGFuZCBwYXJzZXIgZnJvbSBhbiBpbnB1dCB0eXBlLiBJZiB0aGUgaW5wdXQgdHlwZSBpcyBhIFpvZE9iamVjdCwgd2Ugd2lsbCBjb252ZXJ0XG4gKiBpdCBpbnRvIGEgSlNPTiBTY2hlbWEgYW5kIHVzZSBab2QgYXMgcGFyc2VyLiBJZiB0aGUgaW5wdXQgdHlwZSBpcyBhIEpTT04gc2NoZW1hLCB3ZSB1c2UgdGhlXG4gKiBKU09OLnBhcnNlIGZ1bmN0aW9uIHRvIGdldCB0aGUgcGFyc2VyLlxuICogQHBhcmFtIGlucHV0VHlwZSAtIFRoZSBpbnB1dCB0eXBlIHRvIGdldCB0aGUgc2NoZW1hIGFuZCBwYXJzZXIgZnJvbS5cbiAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHRvb2wuXG4gKiBAcmV0dXJucyBUaGUgc2NoZW1hIGFuZCBwYXJzZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2hlbWFBbmRQYXJzZXJGcm9tSW5wdXRUeXBlKGlucHV0VHlwZSwgbmFtZSkge1xuICAgIGNvbnN0IHBhcnNlciA9IChpbnB1dCkgPT4gSlNPTi5wYXJzZShpbnB1dCk7XG4gICAgaWYgKGlzWm9kT2JqZWN0KGlucHV0VHlwZSkpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRnVuY3Rpb24gPSB6b2RSZXNwb25zZXNGdW5jdGlvbih7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogaW5wdXRUeXBlLFxuICAgICAgICAgICAgZnVuY3Rpb246ICgpID0+IHsgfSwgLy8gZW1wdHkgZnVuY3Rpb24gaGVyZSB0byBzYXRpc2Z5IHRoZSBPcGVuQUkgaGVscGVyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NoZW1hOiBmb3JtYXR0ZWRGdW5jdGlvbi5wYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcGFyc2VyOiBmb3JtYXR0ZWRGdW5jdGlvbi4kcGFyc2VSYXcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dFR5cGUgPT09ICdvYmplY3QnICYmIGlucHV0VHlwZSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NoZW1hOiBpbnB1dFR5cGUsXG4gICAgICAgICAgICBwYXJzZXIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ0lucHV0IHR5cGUgaXMgbm90IGEgWm9kT2JqZWN0IG9yIGEgdmFsaWQgSlNPTiBzY2hlbWEnKTtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGFnZW50IG91dHB1dCB0eXBlIHByb3ZpZGVkIHRvIGEgc2VyaWFsaXphYmxlIHZlcnNpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRBZ2VudE91dHB1dFR5cGVUb1NlcmlhbGl6YWJsZShvdXRwdXRUeXBlKSB7XG4gICAgaWYgKG91dHB1dFR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICByZXR1cm4gJ3RleHQnO1xuICAgIH1cbiAgICBpZiAoaXNab2RPYmplY3Qob3V0cHV0VHlwZSkpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gem9kVGV4dEZvcm1hdChvdXRwdXRUeXBlLCAnb3V0cHV0Jyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBvdXRwdXQudHlwZSxcbiAgICAgICAgICAgIG5hbWU6IG91dHB1dC5uYW1lLFxuICAgICAgICAgICAgc3RyaWN0OiBvdXRwdXQuc3RyaWN0IHx8IGZhbHNlLFxuICAgICAgICAgICAgc2NoZW1hOiBvdXRwdXQuc2NoZW1hLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0VHlwZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvb2xzLm1qcy5tYXAiLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cdGNyZWF0ZURlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cdFx0bGV0IGVuYWJsZU92ZXJyaWRlID0gbnVsbDtcblx0XHRsZXQgbmFtZXNwYWNlc0NhY2hlO1xuXHRcdGxldCBlbmFibGVkQ2FjaGU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuICclJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBjcmVhdGVEZWJ1Zy5kZXN0cm95OyAvLyBYWFggVGVtcG9yYXJ5LiBXaWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWJ1ZywgJ2VuYWJsZWQnLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogKCkgPT4ge1xuXHRcdFx0XHRpZiAoZW5hYmxlT3ZlcnJpZGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZW5hYmxlT3ZlcnJpZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5hbWVzcGFjZXNDYWNoZSAhPT0gY3JlYXRlRGVidWcubmFtZXNwYWNlcykge1xuXHRcdFx0XHRcdG5hbWVzcGFjZXNDYWNoZSA9IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXM7XG5cdFx0XHRcdFx0ZW5hYmxlZENhY2hlID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVuYWJsZWRDYWNoZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IHYgPT4ge1xuXHRcdFx0XHRlbmFibGVPdmVycmlkZSA9IHY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBFbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cdFx0Y3JlYXRlRGVidWcubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXFxzKy9nLCAnLCcpXG5cdFx0XHQuc3BsaXQoJywnKVxuXHRcdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRcdGZvciAoY29uc3QgbnMgb2Ygc3BsaXQpIHtcblx0XHRcdGlmIChuc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobnMuc2xpY2UoMSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChucyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gc3RyaW5nIG1hdGNoZXMgYSBuYW1lc3BhY2UgdGVtcGxhdGUsIGhvbm9yaW5nXG5cdCAqIGFzdGVyaXNrcyBhcyB3aWxkY2FyZHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hcblx0ICogQHBhcmFtIHtTdHJpbmd9IHRlbXBsYXRlXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCAqL1xuXHRmdW5jdGlvbiBtYXRjaGVzVGVtcGxhdGUoc2VhcmNoLCB0ZW1wbGF0ZSkge1xuXHRcdGxldCBzZWFyY2hJbmRleCA9IDA7XG5cdFx0bGV0IHRlbXBsYXRlSW5kZXggPSAwO1xuXHRcdGxldCBzdGFySW5kZXggPSAtMTtcblx0XHRsZXQgbWF0Y2hJbmRleCA9IDA7XG5cblx0XHR3aGlsZSAoc2VhcmNoSW5kZXggPCBzZWFyY2gubGVuZ3RoKSB7XG5cdFx0XHRpZiAodGVtcGxhdGVJbmRleCA8IHRlbXBsYXRlLmxlbmd0aCAmJiAodGVtcGxhdGVbdGVtcGxhdGVJbmRleF0gPT09IHNlYXJjaFtzZWFyY2hJbmRleF0gfHwgdGVtcGxhdGVbdGVtcGxhdGVJbmRleF0gPT09ICcqJykpIHtcblx0XHRcdFx0Ly8gTWF0Y2ggY2hhcmFjdGVyIG9yIHByb2NlZWQgd2l0aCB3aWxkY2FyZFxuXHRcdFx0XHRpZiAodGVtcGxhdGVbdGVtcGxhdGVJbmRleF0gPT09ICcqJykge1xuXHRcdFx0XHRcdHN0YXJJbmRleCA9IHRlbXBsYXRlSW5kZXg7XG5cdFx0XHRcdFx0bWF0Y2hJbmRleCA9IHNlYXJjaEluZGV4O1xuXHRcdFx0XHRcdHRlbXBsYXRlSW5kZXgrKzsgLy8gU2tpcCB0aGUgJyonXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VhcmNoSW5kZXgrKztcblx0XHRcdFx0XHR0ZW1wbGF0ZUluZGV4Kys7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoc3RhckluZGV4ICE9PSAtMSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lZ2F0ZWQtY29uZGl0aW9uXG5cdFx0XHRcdC8vIEJhY2t0cmFjayB0byB0aGUgbGFzdCAnKicgYW5kIHRyeSB0byBtYXRjaCBtb3JlIGNoYXJhY3RlcnNcblx0XHRcdFx0dGVtcGxhdGVJbmRleCA9IHN0YXJJbmRleCArIDE7XG5cdFx0XHRcdG1hdGNoSW5kZXgrKztcblx0XHRcdFx0c2VhcmNoSW5kZXggPSBtYXRjaEluZGV4O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBObyBtYXRjaFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSB0cmFpbGluZyAnKicgaW4gdGVtcGxhdGVcblx0XHR3aGlsZSAodGVtcGxhdGVJbmRleCA8IHRlbXBsYXRlLmxlbmd0aCAmJiB0ZW1wbGF0ZVt0ZW1wbGF0ZUluZGV4XSA9PT0gJyonKSB7XG5cdFx0XHR0ZW1wbGF0ZUluZGV4Kys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRlbXBsYXRlSW5kZXggPT09IHRlbXBsYXRlLmxlbmd0aDtcblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMsXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGZvciAoY29uc3Qgc2tpcCBvZiBjcmVhdGVEZWJ1Zy5za2lwcykge1xuXHRcdFx0aWYgKG1hdGNoZXNUZW1wbGF0ZShuYW1lLCBza2lwKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBucyBvZiBjcmVhdGVEZWJ1Zy5uYW1lcykge1xuXHRcdFx0aWYgKG1hdGNoZXNUZW1wbGF0ZShuYW1lLCBucykpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvKipcblx0KiBYWFggRE8gTk9UIFVTRS4gVGhpcyBpcyBhIHRlbXBvcmFyeSBzdHViIGZ1bmN0aW9uLlxuXHQqIFhYWCBJdCBXSUxMIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblx0Ki9cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRsZXQgbTtcblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmV0dXJuLWFzc2lnblxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAobSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pKSAmJiBwYXJzZUludChtWzFdLCAxMCkgPj0gMzEpIHx8XG5cdFx0Ly8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICtcblx0XHR0aGlzLm5hbWVzcGFjZSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICtcblx0XHRhcmdzWzBdICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJykgK1xuXHRcdCcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cblx0aWYgKCF0aGlzLnVzZUNvbG9ycykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuXHRhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTtcblxuXHQvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHQvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG5cdC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgbGFzdEMgPSAwO1xuXHRhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgbWF0Y2ggPT4ge1xuXHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpbmRleCsrO1xuXHRcdGlmIChtYXRjaCA9PT0gJyVjJykge1xuXHRcdFx0Ly8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG5cdFx0XHQvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuXHRcdFx0bGFzdEMgPSBpbmRleDtcblx0XHR9XG5cdH0pO1xuXG5cdGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmRlYnVnKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICogSWYgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhdmFpbGFibGUsIGZhbGxzIGJhY2tcbiAqIHRvIGBjb25zb2xlLmxvZ2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZXhwb3J0cy5sb2cgPSBjb25zb2xlLmRlYnVnIHx8IGNvbnNvbGUubG9nIHx8ICgoKSA9PiB7fSk7XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcblx0dHJ5IHtcblx0XHRpZiAobmFtZXNwYWNlcykge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZCgpIHtcblx0bGV0IHI7XG5cdHRyeSB7XG5cdFx0ciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpIHx8IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdERUJVRycpIDtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsImltcG9ydCB7IGxvYWRFbnYgYXMgX2xvYWRFbnYsIGlzQnJvd3NlckVudmlyb25tZW50LCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbi8qKlxuICogTG9hZHMgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gdGhlIHByb2Nlc3MgZW52aXJvbm1lbnQuXG4gKlxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRFbnYoKSB7XG4gICAgcmV0dXJuIF9sb2FkRW52KCk7XG59XG4vKipcbiAqIENoZWNrcyBpZiBhIGZsYWcgaXMgZW5hYmxlZCBpbiB0aGUgZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIGZsYWdOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZsYWcgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGZsYWcgaXMgZW5hYmxlZCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzRW5hYmxlZChmbGFnTmFtZSkge1xuICAgIGNvbnN0IGVudiA9IGxvYWRFbnYoKTtcbiAgICByZXR1cm4gKHR5cGVvZiBlbnYgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIChlbnZbZmxhZ05hbWVdID09PSAndHJ1ZScgfHwgZW52W2ZsYWdOYW1lXSA9PT0gJzEnKSk7XG59XG4vKipcbiAqIEdsb2JhbCBjb25maWd1cmF0aW9uIGZvciB0cmFjaW5nLlxuICovXG5leHBvcnQgY29uc3QgdHJhY2luZyA9IHtcbiAgICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgICAgIGlmIChpc0Jyb3dzZXJFbnZpcm9ubWVudCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsb2FkRW52KCkuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgICAgICAgLy8gZGlzYWJsaW5nIGJ5IGRlZmF1bHQgaW4gdGVzdHNcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0VuYWJsZWQoJ09QRU5BSV9BR0VOVFNfRElTQUJMRV9UUkFDSU5HJyk7XG4gICAgfSxcbn07XG4vKipcbiAqIEdsb2JhbCBjb25maWd1cmF0aW9uIGZvciBsb2dnaW5nLlxuICovXG5leHBvcnQgY29uc3QgbG9nZ2luZyA9IHtcbiAgICBnZXQgZG9udExvZ01vZGVsRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIGlzRW5hYmxlZCgnT1BFTkFJX0FHRU5UU19ET05UX0xPR19NT0RFTF9EQVRBJyk7XG4gICAgfSxcbiAgICBnZXQgZG9udExvZ1Rvb2xEYXRhKCkge1xuICAgICAgICByZXR1cm4gaXNFbmFibGVkKCdPUEVOQUlfQUdFTlRTX0RPTlRfTE9HX1RPT0xfREFUQScpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLm1qcy5tYXAiLCJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgbG9nZ2luZyB9IGZyb20gXCIuL2NvbmZpZy5tanNcIjtcbi8qKlxuICogQnkgZGVmYXVsdCB3ZSBkb24ndCBsb2cgTExNIGlucHV0cy9vdXRwdXRzLCB0byBwcmV2ZW50IGV4cG9zaW5nIHNlbnNpdGl2ZSBkYXRhLiBTZXQgdGhpcyBmbGFnXG4gKiB0byBlbmFibGUgbG9nZ2luZyB0aGVtLlxuICovXG5jb25zdCBkb250TG9nTW9kZWxEYXRhID0gbG9nZ2luZy5kb250TG9nTW9kZWxEYXRhO1xuLyoqXG4gKiBCeSBkZWZhdWx0IHdlIGRvbid0IGxvZyB0b29sIGlucHV0cy9vdXRwdXRzLCB0byBwcmV2ZW50IGV4cG9zaW5nIHNlbnNpdGl2ZSBkYXRhLiBTZXQgdGhpcyBmbGFnXG4gKiB0byBlbmFibGUgbG9nZ2luZyB0aGVtLlxuICovXG5jb25zdCBkb250TG9nVG9vbERhdGEgPSBsb2dnaW5nLmRvbnRMb2dUb29sRGF0YTtcbi8qKlxuICogR2V0IGEgbG9nZ2VyIGZvciBhIGdpdmVuIHBhY2thZ2UuXG4gKlxuICogQHBhcmFtIG5hbWVzcGFjZSAtIHRoZSBuYW1lc3BhY2UgdG8gdXNlIGZvciB0aGUgbG9nZ2VyLlxuICogQHJldHVybnMgQSBsb2dnZXIgb2JqZWN0IHdpdGggYGRlYnVnYCBhbmQgYGVycm9yYCBtZXRob2RzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKG5hbWVzcGFjZSA9ICdvcGVuYWktYWdlbnRzJykge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgZGVidWc6IGRlYnVnKG5hbWVzcGFjZSksXG4gICAgICAgIGVycm9yOiBjb25zb2xlLmVycm9yLFxuICAgICAgICB3YXJuOiBjb25zb2xlLndhcm4sXG4gICAgICAgIGRvbnRMb2dNb2RlbERhdGEsXG4gICAgICAgIGRvbnRMb2dUb29sRGF0YSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignb3BlbmFpLWFnZW50czpjb3JlJyk7XG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiB0b1NtYXJ0U3RyaW5nKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfZSkge1xuICAgICAgICAgICAgcmV0dXJuICdbb2JqZWN0IHdpdGggY2lyY3VsYXIgcmVmZXJlbmNlc10nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c21hcnRTdHJpbmcubWpzLm1hcCIsImltcG9ydCB7IHNhZmVFeGVjdXRlIH0gZnJvbSBcIi4vdXRpbHMvc2FmZUV4ZWN1dGUubWpzXCI7XG5pbXBvcnQgeyB0b0Z1bmN0aW9uVG9vbE5hbWUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IGlzWm9kT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHMvdHlwZUd1YXJkcy5tanNcIjtcbmltcG9ydCB7IE1vZGVsQmVoYXZpb3JFcnJvciwgVXNlckVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50U3BhbiB9IGZyb20gXCIuL3RyYWNpbmcvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyB0b1NtYXJ0U3RyaW5nIH0gZnJvbSBcIi4vdXRpbHMvc21hcnRTdHJpbmcubWpzXCI7XG4vKipcbiAqIEV4cG9zZXMgYSBjb21wdXRlciB0byB0aGUgYWdlbnQgYXMgYSB0b29sIHRvIGJlIGNhbGxlZFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgdGhlIGNvbXB1dGVyIHRvb2wgbGlrZSBzcGVjaWZ5aW5nIHRoZSBsb2NhdGlvbiBvZiB5b3VyIGFnZW50XG4gKiBAcmV0dXJucyBhIGNvbXB1dGVyIHRvb2wgZGVmaW5pdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZXJUb29sKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnY29tcHV0ZXInLFxuICAgICAgICBuYW1lOiBvcHRpb25zLm5hbWUgPz8gJ2NvbXB1dGVyX3VzZV9wcmV2aWV3JyxcbiAgICAgICAgY29tcHV0ZXI6IG9wdGlvbnMuY29tcHV0ZXIsXG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhvc3RlZCBNQ1AgdG9vbCBkZWZpbml0aW9uLlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXJMYWJlbCAtIFRoZSBsYWJlbCBpZGVudGlmeWluZyB0aGUgTUNQIHNlcnZlci5cbiAqIEBwYXJhbSBzZXJ2ZXJVcmwgLSBUaGUgVVJMIG9mIHRoZSBNQ1Agc2VydmVyLlxuICogQHBhcmFtIHJlcXVpcmVBcHByb3ZhbCAtIFdoZXRoZXIgdG9vbCBjYWxscyByZXF1aXJlIGFwcHJvdmFsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaG9zdGVkTWNwVG9vbChvcHRpb25zKSB7XG4gICAgaWYgKCdzZXJ2ZXJVcmwnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gdGhlIE1DUCBzZXJ2ZXJzIGNvbWFwdGlibGUgd2l0aCB0aGUgc3BlY2lmaWNhdGlvblxuICAgICAgICBjb25zdCBwcm92aWRlckRhdGEgPSB0eXBlb2Ygb3B0aW9ucy5yZXF1aXJlQXBwcm92YWwgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ25ldmVyJ1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ21jcCcsXG4gICAgICAgICAgICAgICAgc2VydmVyX2xhYmVsOiBvcHRpb25zLnNlcnZlckxhYmVsLFxuICAgICAgICAgICAgICAgIHNlcnZlcl91cmw6IG9wdGlvbnMuc2VydmVyVXJsLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVfYXBwcm92YWw6ICduZXZlcicsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF90b29sczogdG9NY3BBbGxvd2VkVG9vbHNGaWx0ZXIob3B0aW9ucy5hbGxvd2VkVG9vbHMpLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdtY3AnLFxuICAgICAgICAgICAgICAgIHNlcnZlcl9sYWJlbDogb3B0aW9ucy5zZXJ2ZXJMYWJlbCxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJfdXJsOiBvcHRpb25zLnNlcnZlclVybCxcbiAgICAgICAgICAgICAgICBhbGxvd2VkX3Rvb2xzOiB0b01jcEFsbG93ZWRUb29sc0ZpbHRlcihvcHRpb25zLmFsbG93ZWRUb29scyksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVfYXBwcm92YWw6IHR5cGVvZiBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyAnYWx3YXlzJ1xuICAgICAgICAgICAgICAgICAgICA6IGJ1aWxkUmVxdWlyZUFwcHJvdmFsKG9wdGlvbnMucmVxdWlyZUFwcHJvdmFsKSxcbiAgICAgICAgICAgICAgICBvbl9hcHByb3ZhbDogb3B0aW9ucy5vbkFwcHJvdmFsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbCcsXG4gICAgICAgICAgICBuYW1lOiAnaG9zdGVkX21jcCcsXG4gICAgICAgICAgICBwcm92aWRlckRhdGEsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKCdjb25uZWN0b3JJZCcgaW4gb3B0aW9ucykge1xuICAgICAgICAvLyBPcGVuQUkncyBjb25uZWN0b3JzXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyRGF0YSA9IHR5cGVvZiBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgIG9wdGlvbnMucmVxdWlyZUFwcHJvdmFsID09PSAnbmV2ZXInXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbWNwJyxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJfbGFiZWw6IG9wdGlvbnMuc2VydmVyTGFiZWwsXG4gICAgICAgICAgICAgICAgY29ubmVjdG9yX2lkOiBvcHRpb25zLmNvbm5lY3RvcklkLFxuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgICAgICAgICByZXF1aXJlX2FwcHJvdmFsOiAnbmV2ZXInLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRfdG9vbHM6IHRvTWNwQWxsb3dlZFRvb2xzRmlsdGVyKG9wdGlvbnMuYWxsb3dlZFRvb2xzKSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBvcHRpb25zLmhlYWRlcnMsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbWNwJyxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJfbGFiZWw6IG9wdGlvbnMuc2VydmVyTGFiZWwsXG4gICAgICAgICAgICAgICAgY29ubmVjdG9yX2lkOiBvcHRpb25zLmNvbm5lY3RvcklkLFxuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IG9wdGlvbnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgICAgICAgICBhbGxvd2VkX3Rvb2xzOiB0b01jcEFsbG93ZWRUb29sc0ZpbHRlcihvcHRpb25zLmFsbG93ZWRUb29scyksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVfYXBwcm92YWw6IHR5cGVvZiBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyAnYWx3YXlzJ1xuICAgICAgICAgICAgICAgICAgICA6IGJ1aWxkUmVxdWlyZUFwcHJvdmFsKG9wdGlvbnMucmVxdWlyZUFwcHJvdmFsKSxcbiAgICAgICAgICAgICAgICBvbl9hcHByb3ZhbDogb3B0aW9ucy5vbkFwcHJvdmFsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbCcsXG4gICAgICAgICAgICBuYW1lOiAnaG9zdGVkX21jcCcsXG4gICAgICAgICAgICBwcm92aWRlckRhdGEsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyB0aGUgTUNQIHNlcnZlcnMgY29tYXB0aWJsZSB3aXRoIHRoZSBzcGVjaWZpY2F0aW9uXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyRGF0YSA9IHR5cGVvZiBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgIG9wdGlvbnMucmVxdWlyZUFwcHJvdmFsID09PSAnbmV2ZXInXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbWNwJyxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJfbGFiZWw6IG9wdGlvbnMuc2VydmVyTGFiZWwsXG4gICAgICAgICAgICAgICAgcmVxdWlyZV9hcHByb3ZhbDogJ25ldmVyJyxcbiAgICAgICAgICAgICAgICBhbGxvd2VkX3Rvb2xzOiB0b01jcEFsbG93ZWRUb29sc0ZpbHRlcihvcHRpb25zLmFsbG93ZWRUb29scyksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbWNwJyxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJfbGFiZWw6IG9wdGlvbnMuc2VydmVyTGFiZWwsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF90b29sczogdG9NY3BBbGxvd2VkVG9vbHNGaWx0ZXIob3B0aW9ucy5hbGxvd2VkVG9vbHMpLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVfYXBwcm92YWw6IHR5cGVvZiBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyAnYWx3YXlzJ1xuICAgICAgICAgICAgICAgICAgICA6IGJ1aWxkUmVxdWlyZUFwcHJvdmFsKG9wdGlvbnMucmVxdWlyZUFwcHJvdmFsKSxcbiAgICAgICAgICAgICAgICBvbl9hcHByb3ZhbDogb3B0aW9ucy5vbkFwcHJvdmFsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbCcsXG4gICAgICAgICAgICBuYW1lOiAnaG9zdGVkX21jcCcsXG4gICAgICAgICAgICBwcm92aWRlckRhdGEsXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgZGVmYXVsdCBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiBhbiBlcnJvciBvY2N1cnMgd2hpbGUgcnVubmluZyB0aGUgdG9vbC5cbiAqXG4gKiBBbHdheXMgcmV0dXJucyBgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcnVubmluZyB0aGUgdG9vbC4gUGxlYXNlIHRyeSBhZ2Fpbi4gRXJyb3I6IDxlcnJvciBkZXRhaWxzPmBcbiAqXG4gKiBAcGFyYW0gY29udGV4dCBBbiBpbnN0YW5jZSBvZiB0aGUgY3VycmVudCBSdW5Db250ZXh0XG4gKiBAcGFyYW0gZXJyb3IgVGhlIGVycm9yIHRoYXQgb2NjdXJyZWRcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdFRvb2xFcnJvckZ1bmN0aW9uKGNvbnRleHQsIGVycm9yKSB7XG4gICAgY29uc3QgZGV0YWlscyA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci50b1N0cmluZygpIDogU3RyaW5nKGVycm9yKTtcbiAgICByZXR1cm4gYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHJ1bm5pbmcgdGhlIHRvb2wuIFBsZWFzZSB0cnkgYWdhaW4uIEVycm9yOiAke2RldGFpbHN9YDtcbn1cbi8qKlxuICogRXhwb3NlcyBhIGZ1bmN0aW9uIHRvIHRoZSBhZ2VudCBhcyBhIHRvb2wgdG8gYmUgY2FsbGVkXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgZm9yIHRoZSB0b29sXG4gKiBAcmV0dXJucyBBIG5ldyB0b29sXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b29sKG9wdGlvbnMpIHtcbiAgICBjb25zdCBuYW1lID0gb3B0aW9ucy5uYW1lXG4gICAgICAgID8gdG9GdW5jdGlvblRvb2xOYW1lKG9wdGlvbnMubmFtZSlcbiAgICAgICAgOiB0b0Z1bmN0aW9uVG9vbE5hbWUob3B0aW9ucy5leGVjdXRlLm5hbWUpO1xuICAgIGNvbnN0IHRvb2xFcnJvckZ1bmN0aW9uID0gdHlwZW9mIG9wdGlvbnMuZXJyb3JGdW5jdGlvbiA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBkZWZhdWx0VG9vbEVycm9yRnVuY3Rpb25cbiAgICAgICAgOiBvcHRpb25zLmVycm9yRnVuY3Rpb247XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVG9vbCBuYW1lIGNhbm5vdCBiZSBlbXB0eS4gRWl0aGVyIG5hbWUgeW91ciBmdW5jdGlvbiBvciBwcm92aWRlIGEgbmFtZSBpbiB0aGUgb3B0aW9ucy4nKTtcbiAgICB9XG4gICAgY29uc3Qgc3RyaWN0TW9kZSA9IG9wdGlvbnMuc3RyaWN0ID8/IHRydWU7XG4gICAgaWYgKCFzdHJpY3RNb2RlICYmIGlzWm9kT2JqZWN0KG9wdGlvbnMucGFyYW1ldGVycykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignU3RyaWN0IG1vZGUgaXMgcmVxdWlyZWQgZm9yIFpvZCBwYXJhbWV0ZXJzJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgcGFyc2VyLCBzY2hlbWE6IHBhcmFtZXRlcnMgfSA9IGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUob3B0aW9ucy5wYXJhbWV0ZXJzLCBuYW1lKTtcbiAgICBhc3luYyBmdW5jdGlvbiBfaW52b2tlKHJ1bkNvbnRleHQsIGlucHV0LCBkZXRhaWxzKSB7XG4gICAgICAgIGNvbnN0IFtlcnJvciwgcGFyc2VkXSA9IGF3YWl0IHNhZmVFeGVjdXRlKCgpID0+IHBhcnNlcihpbnB1dCkpO1xuICAgICAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsb2dnZXIuZG9udExvZ1Rvb2xEYXRhKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBJbnZhbGlkIEpTT04gaW5wdXQgZm9yIHRvb2wgJHtuYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBJbnZhbGlkIEpTT04gaW5wdXQgZm9yIHRvb2wgJHtuYW1lfTogJHtpbnB1dH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IoJ0ludmFsaWQgSlNPTiBpbnB1dCBmb3IgdG9vbCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2dnZXIuZG9udExvZ1Rvb2xEYXRhKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoYEludm9raW5nIHRvb2wgJHtuYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBJbnZva2luZyB0b29sICR7bmFtZX0gd2l0aCBpbnB1dCAke2lucHV0fWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG9wdGlvbnMuZXhlY3V0ZShwYXJzZWQsIHJ1bkNvbnRleHQsIGRldGFpbHMpO1xuICAgICAgICBjb25zdCBzdHJpbmdSZXN1bHQgPSB0b1NtYXJ0U3RyaW5nKHJlc3VsdCk7XG4gICAgICAgIGlmIChsb2dnZXIuZG9udExvZ1Rvb2xEYXRhKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoYFRvb2wgJHtuYW1lfSBjb21wbGV0ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgVG9vbCAke25hbWV9IHJldHVybmVkOiAke3N0cmluZ1Jlc3VsdH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiBpbnZva2UocnVuQ29udGV4dCwgaW5wdXQsIGRldGFpbHMpIHtcbiAgICAgICAgcmV0dXJuIF9pbnZva2UocnVuQ29udGV4dCwgaW5wdXQsIGRldGFpbHMpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgaWYgKHRvb2xFcnJvckZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNwYW4gPSBnZXRDdXJyZW50U3BhbigpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTcGFuPy5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBydW5uaW5nIHRvb2wgKG5vbi1mYXRhbCknLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sX25hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9vbEVycm9yRnVuY3Rpb24ocnVuQ29udGV4dCwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBuZWVkc0FwcHJvdmFsID0gdHlwZW9mIG9wdGlvbnMubmVlZHNBcHByb3ZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9wdGlvbnMubmVlZHNBcHByb3ZhbFxuICAgICAgICA6IGFzeW5jICgpID0+IHR5cGVvZiBvcHRpb25zLm5lZWRzQXBwcm92YWwgPT09ICdib29sZWFuJ1xuICAgICAgICAgICAgPyBvcHRpb25zLm5lZWRzQXBwcm92YWxcbiAgICAgICAgICAgIDogZmFsc2U7XG4gICAgY29uc3QgaXNFbmFibGVkID0gdHlwZW9mIG9wdGlvbnMuaXNFbmFibGVkID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gYXN5bmMgKHJ1bkNvbnRleHQsIGFnZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcmVkaWNhdGUgPSBvcHRpb25zLmlzRW5hYmxlZDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByZWRpY2F0ZSh7IHJ1bkNvbnRleHQsIGFnZW50IH0pO1xuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4ocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICA6IGFzeW5jICgpID0+IHR5cGVvZiBvcHRpb25zLmlzRW5hYmxlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5pc0VuYWJsZWQgOiB0cnVlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBvcHRpb25zLmRlc2NyaXB0aW9uLFxuICAgICAgICBwYXJhbWV0ZXJzLFxuICAgICAgICBzdHJpY3Q6IHN0cmljdE1vZGUsXG4gICAgICAgIGludm9rZSxcbiAgICAgICAgbmVlZHNBcHByb3ZhbCxcbiAgICAgICAgaXNFbmFibGVkLFxuICAgIH07XG59XG5mdW5jdGlvbiBidWlsZFJlcXVpcmVBcHByb3ZhbChyZXF1aXJlQXBwcm92YWwpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBpZiAocmVxdWlyZUFwcHJvdmFsLmFsd2F5cykge1xuICAgICAgICByZXN1bHQuYWx3YXlzID0geyB0b29sX25hbWVzOiByZXF1aXJlQXBwcm92YWwuYWx3YXlzLnRvb2xOYW1lcyB9O1xuICAgIH1cbiAgICBpZiAocmVxdWlyZUFwcHJvdmFsLm5ldmVyKSB7XG4gICAgICAgIHJlc3VsdC5uZXZlciA9IHsgdG9vbF9uYW1lczogcmVxdWlyZUFwcHJvdmFsLm5ldmVyLnRvb2xOYW1lcyB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdG9NY3BBbGxvd2VkVG9vbHNGaWx0ZXIoYWxsb3dlZFRvb2xzKSB7XG4gICAgaWYgKHR5cGVvZiBhbGxvd2VkVG9vbHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGFsbG93ZWRUb29scykpIHtcbiAgICAgICAgcmV0dXJuIHsgdG9vbF9uYW1lczogYWxsb3dlZFRvb2xzIH07XG4gICAgfVxuICAgIHJldHVybiB7IHRvb2xfbmFtZXM6IGFsbG93ZWRUb29scz8udG9vbE5hbWVzID8/IFtdIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b29sLm1qcy5tYXAiLCJpbXBvcnQgeyB0b29sIH0gZnJvbSBcIi4vdG9vbC5tanNcIjtcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gXCIuL2Vycm9ycy5tanNcIjtcbmltcG9ydCB7IE1DUFNlcnZlclN0ZGlvIGFzIFVuZGVybHlpbmdNQ1BTZXJ2ZXJTdGRpbywgTUNQU2VydmVyU3RyZWFtYWJsZUh0dHAgYXMgVW5kZXJseWluZ01DUFNlcnZlclN0cmVhbWFibGVIdHRwLCBNQ1BTZXJ2ZXJTU0UgYXMgVW5kZXJseWluZ01DUFNlcnZlclNTRSwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50U3Bhbiwgd2l0aE1DUExpc3RUb29sc1NwYW4gfSBmcm9tIFwiLi90cmFjaW5nL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbG9nZ2VyIGFzIGdsb2JhbExvZ2dlciwgZ2V0TG9nZ2VyIH0gZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU1RESU9fTUNQX0NMSUVOVF9MT0dHRVJfTkFNRSA9ICdvcGVuYWktYWdlbnRzOnN0ZGlvLW1jcC1jbGllbnQnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU1RSRUFNQUJMRV9IVFRQX01DUF9DTElFTlRfTE9HR0VSX05BTUUgPSAnb3BlbmFpLWFnZW50czpzdHJlYW1hYmxlLWh0dHAtbWNwLWNsaWVudCc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9TU0VfTUNQX0NMSUVOVF9MT0dHRVJfTkFNRSA9ICdvcGVuYWktYWdlbnRzOnNzZS1tY3AtY2xpZW50JztcbmV4cG9ydCBjbGFzcyBCYXNlTUNQU2VydmVyU3RkaW8ge1xuICAgIGNhY2hlVG9vbHNMaXN0O1xuICAgIF9jYWNoZWRUb29scyA9IHVuZGVmaW5lZDtcbiAgICB0b29sRmlsdGVyO1xuICAgIGxvZ2dlcjtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyID1cbiAgICAgICAgICAgIG9wdGlvbnMubG9nZ2VyID8/IGdldExvZ2dlcihERUZBVUxUX1NURElPX01DUF9DTElFTlRfTE9HR0VSX05BTUUpO1xuICAgICAgICB0aGlzLmNhY2hlVG9vbHNMaXN0ID0gb3B0aW9ucy5jYWNoZVRvb2xzTGlzdCA/PyBmYWxzZTtcbiAgICAgICAgdGhpcy50b29sRmlsdGVyID0gb3B0aW9ucy50b29sRmlsdGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2dzIGEgZGVidWcgbWVzc2FnZSB3aGVuIGRlYnVnIGxvZ2dpbmcgaXMgZW5hYmxlZC5cbiAgICAgKiBAcGFyYW0gYnVpbGRNZXNzYWdlIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtZXNzYWdlIHRvIGxvZy5cbiAgICAgKi9cbiAgICBkZWJ1Z0xvZyhidWlsZE1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGRlYnVnLmVuYWJsZWQodGhpcy5sb2dnZXIubmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgLy8gb25seSB3aGVuIHRoaXMgaXMgdHJ1ZSwgdGhlIGZ1bmN0aW9uIHRvIGJ1aWxkIHRoZSBzdHJpbmcgaXMgY2FsbGVkXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhidWlsZE1lc3NhZ2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQmFzZU1DUFNlcnZlclN0cmVhbWFibGVIdHRwIHtcbiAgICBjYWNoZVRvb2xzTGlzdDtcbiAgICBfY2FjaGVkVG9vbHMgPSB1bmRlZmluZWQ7XG4gICAgdG9vbEZpbHRlcjtcbiAgICBsb2dnZXI7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLmxvZ2dlciA9XG4gICAgICAgICAgICBvcHRpb25zLmxvZ2dlciA/P1xuICAgICAgICAgICAgICAgIGdldExvZ2dlcihERUZBVUxUX1NUUkVBTUFCTEVfSFRUUF9NQ1BfQ0xJRU5UX0xPR0dFUl9OQU1FKTtcbiAgICAgICAgdGhpcy5jYWNoZVRvb2xzTGlzdCA9IG9wdGlvbnMuY2FjaGVUb29sc0xpc3QgPz8gZmFsc2U7XG4gICAgICAgIHRoaXMudG9vbEZpbHRlciA9IG9wdGlvbnMudG9vbEZpbHRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9ncyBhIGRlYnVnIG1lc3NhZ2Ugd2hlbiBkZWJ1ZyBsb2dnaW5nIGlzIGVuYWJsZWQuXG4gICAgICogQHBhcmFtIGJ1aWxkTWVzc2FnZSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWVzc2FnZSB0byBsb2cuXG4gICAgICovXG4gICAgZGVidWdMb2coYnVpbGRNZXNzYWdlKSB7XG4gICAgICAgIGlmIChkZWJ1Zy5lbmFibGVkKHRoaXMubG9nZ2VyLm5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgd2hlbiB0aGlzIGlzIHRydWUsIHRoZSBmdW5jdGlvbiB0byBidWlsZCB0aGUgc3RyaW5nIGlzIGNhbGxlZFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYnVpbGRNZXNzYWdlKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJhc2VNQ1BTZXJ2ZXJTU0Uge1xuICAgIGNhY2hlVG9vbHNMaXN0O1xuICAgIF9jYWNoZWRUb29scyA9IHVuZGVmaW5lZDtcbiAgICB0b29sRmlsdGVyO1xuICAgIGxvZ2dlcjtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyID1cbiAgICAgICAgICAgIG9wdGlvbnMubG9nZ2VyID8/IGdldExvZ2dlcihERUZBVUxUX1NTRV9NQ1BfQ0xJRU5UX0xPR0dFUl9OQU1FKTtcbiAgICAgICAgdGhpcy5jYWNoZVRvb2xzTGlzdCA9IG9wdGlvbnMuY2FjaGVUb29sc0xpc3QgPz8gZmFsc2U7XG4gICAgICAgIHRoaXMudG9vbEZpbHRlciA9IG9wdGlvbnMudG9vbEZpbHRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9ncyBhIGRlYnVnIG1lc3NhZ2Ugd2hlbiBkZWJ1ZyBsb2dnaW5nIGlzIGVuYWJsZWQuXG4gICAgICogQHBhcmFtIGJ1aWxkTWVzc2FnZSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWVzc2FnZSB0byBsb2cuXG4gICAgICovXG4gICAgZGVidWdMb2coYnVpbGRNZXNzYWdlKSB7XG4gICAgICAgIGlmIChkZWJ1Zy5lbmFibGVkKHRoaXMubG9nZ2VyLm5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgd2hlbiB0aGlzIGlzIHRydWUsIHRoZSBmdW5jdGlvbiB0byBidWlsZCB0aGUgc3RyaW5nIGlzIGNhbGxlZFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYnVpbGRNZXNzYWdlKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBNaW5pbXVtIE1DUCB0b29sIGRhdGEgZGVmaW5pdGlvbi5cbiAqIFRoaXMgdHlwZSBkZWZpbml0aW9uIGRvZXMgbm90IGludGVuZCB0byBjb3ZlciBhbGwgcG9zc2libGUgcHJvcGVydGllcy5cbiAqIEl0IHN1cHBvcnRzIHRoZSBwcm9wZXJ0aWVzIHRoYXQgYXJlIHVzZWQgaW4gdGhpcyBTREsuXG4gKi9cbmV4cG9ydCBjb25zdCBNQ1BUb29sID0gei5vYmplY3Qoe1xuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBpbnB1dFNjaGVtYTogei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ29iamVjdCcpLFxuICAgICAgICBwcm9wZXJ0aWVzOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKSxcbiAgICAgICAgcmVxdWlyZWQ6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB6LmJvb2xlYW4oKSxcbiAgICB9KSxcbn0pO1xuLyoqXG4gKiBQdWJsaWMgaW50ZXJmYWNlIG9mIGFuIE1DUCBzZXJ2ZXIgdGhhdCBwcm92aWRlcyB0b29scy5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgY2xhc3MgdG8gcGFzcyBNQ1Agc2VydmVyIHNldHRpbmdzIHRvIHlvdXIgYWdlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBNQ1BTZXJ2ZXJTdGRpbyBleHRlbmRzIEJhc2VNQ1BTZXJ2ZXJTdGRpbyB7XG4gICAgdW5kZXJseWluZztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnVuZGVybHlpbmcgPSBuZXcgVW5kZXJseWluZ01DUFNlcnZlclN0ZGlvKG9wdGlvbnMpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5uYW1lO1xuICAgIH1cbiAgICBjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY2xvc2UoKTtcbiAgICB9XG4gICAgYXN5bmMgbGlzdFRvb2xzKCkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZVRvb2xzTGlzdCAmJiB0aGlzLl9jYWNoZWRUb29scykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFRvb2xzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvb2xzID0gYXdhaXQgdGhpcy51bmRlcmx5aW5nLmxpc3RUb29scygpO1xuICAgICAgICBpZiAodGhpcy5jYWNoZVRvb2xzTGlzdCkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkVG9vbHMgPSB0b29scztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9vbHM7XG4gICAgfVxuICAgIGNhbGxUb29sKHRvb2xOYW1lLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY2FsbFRvb2wodG9vbE5hbWUsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlVG9vbHNDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5pbnZhbGlkYXRlVG9vbHNDYWNoZSgpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNQ1BTZXJ2ZXJTdHJlYW1hYmxlSHR0cCBleHRlbmRzIEJhc2VNQ1BTZXJ2ZXJTdHJlYW1hYmxlSHR0cCB7XG4gICAgdW5kZXJseWluZztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnVuZGVybHlpbmcgPSBuZXcgVW5kZXJseWluZ01DUFNlcnZlclN0cmVhbWFibGVIdHRwKG9wdGlvbnMpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5uYW1lO1xuICAgIH1cbiAgICBjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY2xvc2UoKTtcbiAgICB9XG4gICAgYXN5bmMgbGlzdFRvb2xzKCkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZVRvb2xzTGlzdCAmJiB0aGlzLl9jYWNoZWRUb29scykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFRvb2xzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvb2xzID0gYXdhaXQgdGhpcy51bmRlcmx5aW5nLmxpc3RUb29scygpO1xuICAgICAgICBpZiAodGhpcy5jYWNoZVRvb2xzTGlzdCkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkVG9vbHMgPSB0b29scztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9vbHM7XG4gICAgfVxuICAgIGNhbGxUb29sKHRvb2xOYW1lLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY2FsbFRvb2wodG9vbE5hbWUsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlVG9vbHNDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5pbnZhbGlkYXRlVG9vbHNDYWNoZSgpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNQ1BTZXJ2ZXJTU0UgZXh0ZW5kcyBCYXNlTUNQU2VydmVyU1NFIHtcbiAgICB1bmRlcmx5aW5nO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMudW5kZXJseWluZyA9IG5ldyBVbmRlcmx5aW5nTUNQU2VydmVyU1NFKG9wdGlvbnMpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5uYW1lO1xuICAgIH1cbiAgICBjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY2xvc2UoKTtcbiAgICB9XG4gICAgYXN5bmMgbGlzdFRvb2xzKCkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZVRvb2xzTGlzdCAmJiB0aGlzLl9jYWNoZWRUb29scykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFRvb2xzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvb2xzID0gYXdhaXQgdGhpcy51bmRlcmx5aW5nLmxpc3RUb29scygpO1xuICAgICAgICBpZiAodGhpcy5jYWNoZVRvb2xzTGlzdCkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkVG9vbHMgPSB0b29scztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9vbHM7XG4gICAgfVxuICAgIGNhbGxUb29sKHRvb2xOYW1lLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY2FsbFRvb2wodG9vbE5hbWUsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlVG9vbHNDYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5pbnZhbGlkYXRlVG9vbHNDYWNoZSgpO1xuICAgIH1cbn1cbi8qKlxuICogRmV0Y2hlcyBhbmQgZmxhdHRlbnMgYWxsIHRvb2xzIGZyb20gbXVsdGlwbGUgTUNQIHNlcnZlcnMuXG4gKiBMb2dzIGFuZCBza2lwcyBhbnkgc2VydmVycyB0aGF0IGZhaWwgdG8gcmVzcG9uZC5cbiAqL1xuY29uc3QgX2NhY2hlZFRvb2xzID0ge307XG4vKipcbiAqIFJlbW92ZSBjYWNoZWQgdG9vbHMgZm9yIHRoZSBnaXZlbiBzZXJ2ZXIgc28gdGhlIG5leHQgbG9va3VwIGZldGNoZXMgZnJlc2ggZGF0YS5cbiAqXG4gKiBAcGFyYW0gc2VydmVyTmFtZSAtIE5hbWUgb2YgdGhlIE1DUCBzZXJ2ZXIgd2hvc2UgY2FjaGUgc2hvdWxkIGJlIGNsZWFyZWQuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbnZhbGlkYXRlU2VydmVyVG9vbHNDYWNoZShzZXJ2ZXJOYW1lKSB7XG4gICAgZGVsZXRlIF9jYWNoZWRUb29sc1tzZXJ2ZXJOYW1lXTtcbn1cbi8qKlxuICogRmV0Y2hlcyBhbGwgZnVuY3Rpb24gdG9vbHMgZnJvbSBhIHNpbmdsZSBNQ1Agc2VydmVyLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRGdW5jdGlvblRvb2xzRnJvbVNlcnZlcih7IHNlcnZlciwgY29udmVydFNjaGVtYXNUb1N0cmljdCwgcnVuQ29udGV4dCwgYWdlbnQsIH0pIHtcbiAgICBpZiAoc2VydmVyLmNhY2hlVG9vbHNMaXN0ICYmIF9jYWNoZWRUb29sc1tzZXJ2ZXIubmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIF9jYWNoZWRUb29sc1tzZXJ2ZXIubmFtZV0ubWFwKCh0KSA9PiBtY3BUb0Z1bmN0aW9uVG9vbCh0LCBzZXJ2ZXIsIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3QpKTtcbiAgICB9XG4gICAgcmV0dXJuIHdpdGhNQ1BMaXN0VG9vbHNTcGFuKGFzeW5jIChzcGFuKSA9PiB7XG4gICAgICAgIGNvbnN0IGZldGNoZWRNY3BUb29scyA9IGF3YWl0IHNlcnZlci5saXN0VG9vbHMoKTtcbiAgICAgICAgbGV0IG1jcFRvb2xzID0gZmV0Y2hlZE1jcFRvb2xzO1xuICAgICAgICBpZiAocnVuQ29udGV4dCAmJiBhZ2VudCkge1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHsgcnVuQ29udGV4dCwgYWdlbnQsIHNlcnZlck5hbWU6IHNlcnZlci5uYW1lIH07XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZFRvb2xzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRvb2wgb2YgZmV0Y2hlZE1jcFRvb2xzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyID0gc2VydmVyLnRvb2xGaWx0ZXI7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBhd2FpdCBmaWx0ZXIoY29udGV4dCwgdG9vbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTG9nZ2VyLmRlYnVnKGBNQ1AgVG9vbCAoc2VydmVyOiAke3NlcnZlci5uYW1lfSwgdG9vbDogJHt0b29sLm5hbWV9KSBpcyBibG9ja2VkIGJ5IHRoZSBjYWxsYWJsZSBmaWx0ZXIuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxvd2VkVG9vbE5hbWVzID0gZmlsdGVyLmFsbG93ZWRUb29sTmFtZXMgPz8gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ja2VkVG9vbE5hbWVzID0gZmlsdGVyLmJsb2NrZWRUb29sTmFtZXMgPz8gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsb3dlZFRvb2xOYW1lcy5sZW5ndGggPiAwIHx8IGJsb2NrZWRUb29sTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbG93ZWQgPSBhbGxvd2VkVG9vbE5hbWVzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhbGxvd2VkVG9vbE5hbWVzLmluY2x1ZGVzKHRvb2wubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrZWQgPSBibG9ja2VkVG9vbE5hbWVzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBibG9ja2VkVG9vbE5hbWVzLmluY2x1ZGVzKHRvb2wubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbG93ZWQgfHwgYmxvY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTG9nZ2VyLmRlYnVnKGBNQ1AgVG9vbCAoc2VydmVyOiAke3NlcnZlci5uYW1lfSwgdG9vbDogJHt0b29sLm5hbWV9KSBpcyBibG9ja2VkIGJ5IHRoZSBzdGF0aWMgZmlsdGVyLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFhbGxvd2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxMb2dnZXIuZGVidWcoYE1DUCBUb29sIChzZXJ2ZXI6ICR7c2VydmVyLm5hbWV9LCB0b29sOiAke3Rvb2wubmFtZX0pIGlzIG5vdCBhbGxvd2VkIGJ5IHRoZSBzdGF0aWMgZmlsdGVyLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaWx0ZXJlZFRvb2xzLnB1c2godG9vbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtY3BUb29scyA9IGZpbHRlcmVkVG9vbHM7XG4gICAgICAgIH1cbiAgICAgICAgc3Bhbi5zcGFuRGF0YS5yZXN1bHQgPSBtY3BUb29scy5tYXAoKHQpID0+IHQubmFtZSk7XG4gICAgICAgIGNvbnN0IHRvb2xzID0gbWNwVG9vbHMubWFwKCh0KSA9PiBtY3BUb0Z1bmN0aW9uVG9vbCh0LCBzZXJ2ZXIsIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3QpKTtcbiAgICAgICAgaWYgKHNlcnZlci5jYWNoZVRvb2xzTGlzdCkge1xuICAgICAgICAgICAgX2NhY2hlZFRvb2xzW3NlcnZlci5uYW1lXSA9IG1jcFRvb2xzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b29scztcbiAgICB9LCB7IGRhdGE6IHsgc2VydmVyOiBzZXJ2ZXIubmFtZSB9IH0pO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbE1jcFRvb2xzKG1jcFNlcnZlcnNPck9wdHMsIHJ1bkNvbnRleHQsIGFnZW50LCBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0ID0gZmFsc2UpIHtcbiAgICBjb25zdCBvcHRzID0gQXJyYXkuaXNBcnJheShtY3BTZXJ2ZXJzT3JPcHRzKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIG1jcFNlcnZlcnM6IG1jcFNlcnZlcnNPck9wdHMsXG4gICAgICAgICAgICBydW5Db250ZXh0LFxuICAgICAgICAgICAgYWdlbnQsXG4gICAgICAgICAgICBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0LFxuICAgICAgICB9XG4gICAgICAgIDogbWNwU2VydmVyc09yT3B0cztcbiAgICBjb25zdCB7IG1jcFNlcnZlcnMsIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3Q6IGNvbnZlcnRTY2hlbWFzVG9TdHJpY3RGcm9tT3B0cyA9IGZhbHNlLCBydW5Db250ZXh0OiBydW5Db250ZXh0RnJvbU9wdHMsIGFnZW50OiBhZ2VudEZyb21PcHRzLCB9ID0gb3B0cztcbiAgICBjb25zdCBhbGxUb29scyA9IFtdO1xuICAgIGNvbnN0IHRvb2xOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBtY3BTZXJ2ZXJzKSB7XG4gICAgICAgIGNvbnN0IHNlcnZlclRvb2xzID0gYXdhaXQgZ2V0RnVuY3Rpb25Ub29sc0Zyb21TZXJ2ZXIoe1xuICAgICAgICAgICAgc2VydmVyLFxuICAgICAgICAgICAgY29udmVydFNjaGVtYXNUb1N0cmljdDogY29udmVydFNjaGVtYXNUb1N0cmljdEZyb21PcHRzLFxuICAgICAgICAgICAgcnVuQ29udGV4dDogcnVuQ29udGV4dEZyb21PcHRzLFxuICAgICAgICAgICAgYWdlbnQ6IGFnZW50RnJvbU9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzZXJ2ZXJUb29sTmFtZXMgPSBuZXcgU2V0KHNlcnZlclRvb2xzLm1hcCgodCkgPT4gdC5uYW1lKSk7XG4gICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IFsuLi5zZXJ2ZXJUb29sTmFtZXNdLmZpbHRlcigobikgPT4gdG9vbE5hbWVzLmhhcyhuKSk7XG4gICAgICAgIGlmIChpbnRlcnNlY3Rpb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRHVwbGljYXRlIHRvb2wgbmFtZXMgZm91bmQgYWNyb3NzIE1DUCBzZXJ2ZXJzOiAke2ludGVyc2VjdGlvbi5qb2luKCcsICcpfWApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiBzZXJ2ZXJUb29scykge1xuICAgICAgICAgICAgdG9vbE5hbWVzLmFkZCh0Lm5hbWUpO1xuICAgICAgICAgICAgYWxsVG9vbHMucHVzaCh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWxsVG9vbHM7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIE1DUCB0b29sIGRlZmluaXRpb24gdG8gYSBmdW5jdGlvbiB0b29sIGZvciB0aGUgQWdlbnRzIFNESy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1jcFRvRnVuY3Rpb25Ub29sKG1jcFRvb2wsIHNlcnZlciwgY29udmVydFNjaGVtYXNUb1N0cmljdCkge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGludm9rZShpbnB1dCwgX2NvbnRleHQpIHtcbiAgICAgICAgbGV0IGFyZ3MgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgaW5wdXQpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBKU09OLnBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50U3BhbiA9IGdldEN1cnJlbnRTcGFuKCk7XG4gICAgICAgIGlmIChjdXJyZW50U3Bhbikge1xuICAgICAgICAgICAgY3VycmVudFNwYW4uc3BhbkRhdGFbJ21jcF9kYXRhJ10gPSB7IHNlcnZlcjogc2VydmVyLm5hbWUgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgc2VydmVyLmNhbGxUb29sKG1jcFRvb2wubmFtZSwgYXJncyk7XG4gICAgICAgIHJldHVybiBjb250ZW50Lmxlbmd0aCA9PT0gMSA/IGNvbnRlbnRbMF0gOiBjb250ZW50O1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICAgIC4uLm1jcFRvb2wuaW5wdXRTY2hlbWEsXG4gICAgICAgIHR5cGU6IG1jcFRvb2wuaW5wdXRTY2hlbWE/LnR5cGUgPz8gJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IG1jcFRvb2wuaW5wdXRTY2hlbWE/LnByb3BlcnRpZXMgPz8ge30sXG4gICAgICAgIHJlcXVpcmVkOiBtY3BUb29sLmlucHV0U2NoZW1hPy5yZXF1aXJlZCA/PyBbXSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IG1jcFRvb2wuaW5wdXRTY2hlbWE/LmFkZGl0aW9uYWxQcm9wZXJ0aWVzID8/IGZhbHNlLFxuICAgIH07XG4gICAgaWYgKGNvbnZlcnRTY2hlbWFzVG9TdHJpY3QgfHwgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSB0cnVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpY3RTY2hlbWEgPSBlbnN1cmVTdHJpY3RKc29uU2NoZW1hKHNjaGVtYSk7XG4gICAgICAgICAgICByZXR1cm4gdG9vbCh7XG4gICAgICAgICAgICAgICAgbmFtZTogbWNwVG9vbC5uYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtY3BUb29sLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IHN0cmljdFNjaGVtYSxcbiAgICAgICAgICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhlY3V0ZTogaW52b2tlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGdsb2JhbExvZ2dlci53YXJuKGBFcnJvciBjb252ZXJ0aW5nIE1DUCBzY2hlbWEgdG8gc3RyaWN0IG1vZGU6ICR7ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBub25TdHJpY3RTY2hlbWEgPSB7XG4gICAgICAgIC4uLnNjaGVtYSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHRydWUsXG4gICAgfTtcbiAgICByZXR1cm4gdG9vbCh7XG4gICAgICAgIG5hbWU6IG1jcFRvb2wubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IG1jcFRvb2wuZGVzY3JpcHRpb24gfHwgJycsXG4gICAgICAgIHBhcmFtZXRlcnM6IG5vblN0cmljdFNjaGVtYSxcbiAgICAgICAgc3RyaWN0OiBmYWxzZSxcbiAgICAgICAgZXhlY3V0ZTogaW52b2tlLFxuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmVzIHRoZSBnaXZlbiBKU09OIHNjaGVtYSBpcyBzdHJpY3QgKG5vIGFkZGl0aW9uYWwgcHJvcGVydGllcywgcmVxdWlyZWQgZmllbGRzIHNldCkuXG4gKi9cbmZ1bmN0aW9uIGVuc3VyZVN0cmljdEpzb25TY2hlbWEoc2NoZW1hKSB7XG4gICAgY29uc3Qgb3V0ID0ge1xuICAgICAgICAuLi5zY2hlbWEsXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbiAgICB9O1xuICAgIGlmICghb3V0LnJlcXVpcmVkKVxuICAgICAgICBvdXQucmVxdWlyZWQgPSBbXTtcbiAgICByZXR1cm4gb3V0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWNwLm1qcy5tYXAiLCIvLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuLy8gVXNlIGZ1bmN0aW9uIGluc3RlYWQgb2YgZXhwb3J0aW5nIHRoZSB2YWx1ZSB0byBwcmV2ZW50XG4vLyBjaXJjdWxhciBkZXBlbmRlbmN5IHJlc29sdXRpb24gaXNzdWVzIGNhdXNlZCBieSBvdGhlciBleHBvcnRzIGluICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcydcbmV4cG9ydCBmdW5jdGlvbiBsb2FkRW52KCkge1xuICAgIHJldHVybiB7fTtcbn1cbmV4cG9ydCBjbGFzcyBCcm93c2VyRXZlbnRFbWl0dGVyIHtcbiAgICAjdGFyZ2V0ID0gbmV3IEV2ZW50VGFyZ2V0KCk7XG4gICAgI2xpc3RlbmVyV3JhcHBlcnMgPSBuZXcgTWFwKCk7XG4gICAgb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3QgZXZlbnRUeXBlID0gdHlwZTtcbiAgICAgICAgbGV0IGxpc3RlbmVyc0ZvclR5cGUgPSB0aGlzLiNsaXN0ZW5lcldyYXBwZXJzLmdldChldmVudFR5cGUpO1xuICAgICAgICBpZiAoIWxpc3RlbmVyc0ZvclR5cGUpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyc0ZvclR5cGUgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICB0aGlzLiNsaXN0ZW5lcldyYXBwZXJzLnNldChldmVudFR5cGUsIGxpc3RlbmVyc0ZvclR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB3cmFwcGVycyA9IGxpc3RlbmVyc0ZvclR5cGUuZ2V0KGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKCF3cmFwcGVycykge1xuICAgICAgICAgICAgd3JhcHBlcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBsaXN0ZW5lcnNGb3JUeXBlLnNldChsaXN0ZW5lciwgd3JhcHBlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSAoKGV2ZW50KSA9PiBsaXN0ZW5lciguLi4oZXZlbnQuZGV0YWlsID8/IFtdKSkpO1xuICAgICAgICB3cmFwcGVycy5hZGQod3JhcHBlcik7XG4gICAgICAgIHRoaXMuI3RhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgd3JhcHBlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvZmYodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3QgZXZlbnRUeXBlID0gdHlwZTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzRm9yVHlwZSA9IHRoaXMuI2xpc3RlbmVyV3JhcHBlcnMuZ2V0KGV2ZW50VHlwZSk7XG4gICAgICAgIGNvbnN0IHdyYXBwZXJzID0gbGlzdGVuZXJzRm9yVHlwZT8uZ2V0KGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKHdyYXBwZXJzPy5zaXplKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHdyYXBwZXIgb2Ygd3JhcHBlcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiN0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHdyYXBwZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdGVuZXJzRm9yVHlwZT8uZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNGb3JUeXBlPy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jbGlzdGVuZXJXcmFwcGVycy5kZWxldGUoZXZlbnRUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZW1pdCh0eXBlLCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KHR5cGUsIHsgZGV0YWlsOiBhcmdzIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy4jdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgdGhpcy5vZmYodHlwZSwgaGFuZGxlcik7XG4gICAgICAgICAgICBsaXN0ZW5lciguLi5hcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbih0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0IHsgQnJvd3NlckV2ZW50RW1pdHRlciBhcyBSdW50aW1lRXZlbnRFbWl0dGVyIH07XG5leHBvcnQgY29uc3QgcmFuZG9tVVVJRCA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbVVVSUQpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgfVxuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDA7XG4gICAgICAgIGNvbnN0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IFJlYWRhYmxlID0gY2xhc3MgUmVhZGFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gICAgcGlwZVRvKF9kZXN0aW5hdGlvbiwgX29wdGlvbnMpIHsgfVxuICAgIHBpcGVUaHJvdWdoKF90cmFuc2Zvcm0sIF9vcHRpb25zKSB7IH1cbn07XG5leHBvcnQgY29uc3QgUmVhZGFibGVTdHJlYW0gPSBnbG9iYWxUaGlzLlJlYWRhYmxlU3RyZWFtO1xuZXhwb3J0IGNvbnN0IFJlYWRhYmxlU3RyZWFtQ29udHJvbGxlciA9IGdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcjtcbmV4cG9ydCBjb25zdCBUcmFuc2Zvcm1TdHJlYW0gPSBnbG9iYWxUaGlzLlRyYW5zZm9ybVN0cmVhbTtcbmV4cG9ydCBjbGFzcyBBc3luY0xvY2FsU3RvcmFnZSB7XG4gICAgY29udGV4dCA9IG51bGw7XG4gICAgY29uc3RydWN0b3IoKSB7IH1cbiAgICBydW4oY29udGV4dCwgZm4pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfVxuICAgIGdldFN0b3JlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0O1xuICAgIH1cbiAgICBlbnRlcldpdGgoY29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXJFbnZpcm9ubWVudCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RyYWNpbmdMb29wUnVubmluZ0J5RGVmYXVsdCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgeyBNQ1BTZXJ2ZXJTdGRpbywgTUNQU2VydmVyU3RyZWFtYWJsZUh0dHAsIE1DUFNlcnZlclNTRSwgfSBmcm9tIFwiLi9tY3Atc2VydmVyL2Jyb3dzZXIubWpzXCI7XG5jbGFzcyBCcm93c2VyVGltZXIge1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgbXMpIHtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIG1zKTtcbiAgICAgICAgdGltZW91dC5yZWYgPVxuICAgICAgICAgICAgdHlwZW9mIHRpbWVvdXQucmVmID09PSAnZnVuY3Rpb24nID8gdGltZW91dC5yZWYgOiAoKSA9PiB0aW1lb3V0O1xuICAgICAgICB0aW1lb3V0LnVucmVmID1cbiAgICAgICAgICAgIHR5cGVvZiB0aW1lb3V0LnVucmVmID09PSAnZnVuY3Rpb24nID8gdGltZW91dC51bnJlZiA6ICgpID0+IHRpbWVvdXQ7XG4gICAgICAgIHRpbWVvdXQuaGFzUmVmID1cbiAgICAgICAgICAgIHR5cGVvZiB0aW1lb3V0Lmhhc1JlZiA9PT0gJ2Z1bmN0aW9uJyA/IHRpbWVvdXQuaGFzUmVmIDogKCkgPT4gdHJ1ZTtcbiAgICAgICAgdGltZW91dC5yZWZyZXNoID1cbiAgICAgICAgICAgIHR5cGVvZiB0aW1lb3V0LnJlZnJlc2ggPT09ICdmdW5jdGlvbicgPyB0aW1lb3V0LnJlZnJlc2ggOiAoKSA9PiB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gdGltZW91dDtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgfVxufVxuY29uc3QgdGltZXIgPSBuZXcgQnJvd3NlclRpbWVyKCk7XG5leHBvcnQgeyB0aW1lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hpbXMtYnJvd3Nlci5tanMubWFwIiwiaW1wb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2UgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5pbXBvcnQgeyBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXIubWpzXCI7XG5sZXQgX2NvbnRleHRBc3luY0xvY2FsU3RvcmFnZTtcbmZ1bmN0aW9uIGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpIHtcbiAgICBfY29udGV4dEFzeW5jTG9jYWxTdG9yYWdlID8/PSBuZXcgQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgICByZXR1cm4gX2NvbnRleHRBc3luY0xvY2FsU3RvcmFnZTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGdldCB0aGUgY3VycmVudCB0cmFjZSBmcm9tIHRoZSBleGVjdXRpb24gY29udGV4dC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgY3VycmVudCB0cmFjZSBvciBudWxsIGlmIHRoZXJlIGlzIG5vIHRyYWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFRyYWNlKCkge1xuICAgIGNvbnN0IGN1cnJlbnRUcmFjZSA9IGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLmdldFN0b3JlKCk7XG4gICAgaWYgKGN1cnJlbnRUcmFjZT8udHJhY2UpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUcmFjZS50cmFjZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBnZXQgdGhlIGN1cnJlbnQgc3BhbiBmcm9tIHRoZSBleGVjdXRpb24gY29udGV4dC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgY3VycmVudCBzcGFuIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRTcGFuKCkge1xuICAgIGNvbnN0IGN1cnJlbnRTcGFuID0gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZ2V0U3RvcmUoKTtcbiAgICBpZiAoY3VycmVudFNwYW4/LnNwYW4pIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTcGFuLnNwYW47XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBUaGlzIGlzIGFuIEFzeW5jTG9jYWxTdG9yYWdlIGluc3RhbmNlIHRoYXQgc3RvcmVzIHRoZSBjdXJyZW50IHRyYWNlLlxuICogSXQgd2lsbCBhdXRvbWF0aWNhbGx5IGhhbmRsZSB0aGUgZXhlY3V0aW9uIGNvbnRleHQgb2YgZGlmZmVyZW50IGV2ZW50IGxvb3AgZXhlY3V0aW9ucy5cbiAqXG4gKiBUaGUgZnVuY3Rpb25zIGJlbG93IHNob3VsZCBiZSB0aGUgb25seSB3YXkgdGhhdCB0aGlzIGNvbnRleHQgZ2V0cyBpbnRlcmZhY2VkIHdpdGguXG4gKi9cbmZ1bmN0aW9uIF93cmFwRnVuY3Rpb25XaXRoVHJhY2VMaWZlY3ljbGUoZm4pIHtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB0cmFjZSA9IGdldEN1cnJlbnRUcmFjZSgpO1xuICAgICAgICBpZiAoIXRyYWNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRyYWNlIGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdHJhY2Uuc3RhcnQoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4odHJhY2UpO1xuICAgICAgICBhd2FpdCB0cmFjZS5lbmQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIGEgbmV3IHRyYWNlIGFuZCBhc3NpZ24gaXQgdG8gdGhlIGV4ZWN1dGlvbiBjb250ZXh0IG9mIHRoZSBmdW5jdGlvblxuICogcGFzc2VkIHRvIGl0LlxuICpcbiAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiB0byBydW4gYW5kIGFzc2lnbiB0aGUgdHJhY2UgY29udGV4dCB0by5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNyZWF0aW9uIG9mIHRoZSB0cmFjZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2l0aFRyYWNlKHRyYWNlLCBmbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgbmV3VHJhY2UgPSB0eXBlb2YgdHJhY2UgPT09ICdzdHJpbmcnXG4gICAgICAgID8gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVRyYWNlKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBuYW1lOiB0cmFjZSxcbiAgICAgICAgfSlcbiAgICAgICAgOiB0cmFjZTtcbiAgICByZXR1cm4gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkucnVuKHsgdHJhY2U6IG5ld1RyYWNlIH0sIF93cmFwRnVuY3Rpb25XaXRoVHJhY2VMaWZlY3ljbGUoZm4pKTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGNoZWNrIGlmIHRoZXJlIGlzIGFuIGV4aXN0aW5nIGFjdGl2ZSB0cmFjZSBpbiB0aGUgZXhlY3V0aW9uIGNvbnRleHQuIElmIHRoZXJlXG4gKiBpcywgaXQgd2lsbCBydW4gdGhlIGdpdmVuIGZ1bmN0aW9uIHdpdGggdGhlIGV4aXN0aW5nIHRyYWNlLiBJZiB0aGVyZSBpcyBubyB0cmFjZSwgaXQgd2lsbCBjcmVhdGVcbiAqIGEgbmV3IG9uZSBhbmQgYXNzaWduIGl0IHRvIHRoZSBleGVjdXRpb24gY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIGZuIC0gVGhlIGZ6dW5jdGlvbiB0byBydW4gYW5kIGFzc2lnbiB0aGUgdHJhY2UgY29udGV4dCB0by5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNyZWF0aW9uIG9mIHRoZSB0cmFjZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0T3JDcmVhdGVUcmFjZShmbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgY3VycmVudFRyYWNlID0gZ2V0Q3VycmVudFRyYWNlKCk7XG4gICAgaWYgKGN1cnJlbnRUcmFjZSkge1xuICAgICAgICAvLyBpZiB0aGlzIGV4ZWN1dGlvbiBjb250ZXh0IGFscmVhZHkgaGFzIGEgdHJhY2UgaW5zdGFuY2UgaW4gaXQgd2UganVzdCBjb250aW51ZVxuICAgICAgICByZXR1cm4gYXdhaXQgZm4oKTtcbiAgICB9XG4gICAgY29uc3QgbmV3VHJhY2UgPSBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlVHJhY2Uob3B0aW9ucyk7XG4gICAgcmV0dXJuIGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLnJ1bih7IHRyYWNlOiBuZXdUcmFjZSB9LCBfd3JhcEZ1bmN0aW9uV2l0aFRyYWNlTGlmZWN5Y2xlKGZuKSk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBzZXQgdGhlIGN1cnJlbnQgc3BhbiBpbiB0aGUgZXhlY3V0aW9uIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHNwYW4gLSBUaGUgc3BhbiB0byBzZXQgYXMgdGhlIGN1cnJlbnQgc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEN1cnJlbnRTcGFuKHNwYW4pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBleGlzdGluZyB0cmFjZSBmb3VuZCcpO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5zcGFuKSB7XG4gICAgICAgIGNvbnRleHQuc3Bhbi5wcmV2aW91c1NwYW4gPSBjb250ZXh0LnByZXZpb3VzU3BhbjtcbiAgICAgICAgY29udGV4dC5wcmV2aW91c1NwYW4gPSBjb250ZXh0LnNwYW47XG4gICAgfVxuICAgIGNvbnRleHQuc3BhbiA9IHNwYW47XG4gICAgZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZW50ZXJXaXRoKGNvbnRleHQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0Q3VycmVudFNwYW4oKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLmdldFN0b3JlKCk7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zcGFuID0gY29udGV4dC5wcmV2aW91c1NwYW47XG4gICAgICAgIGNvbnRleHQucHJldmlvdXNTcGFuID0gY29udGV4dC5wcmV2aW91c1NwYW4/LnByZXZpb3VzU3BhbjtcbiAgICAgICAgZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZW50ZXJXaXRoKGNvbnRleHQpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGFkZCBhbiBlcnJvciB0byB0aGUgY3VycmVudCBzcGFuLlxuICpcbiAqIEBwYXJhbSBzcGFuRXJyb3IgLSBUaGUgZXJyb3IgdG8gYWRkIHRvIHRoZSBjdXJyZW50IHNwYW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFcnJvclRvQ3VycmVudFNwYW4oc3BhbkVycm9yKSB7XG4gICAgY29uc3QgY3VycmVudFNwYW4gPSBnZXRDdXJyZW50U3BhbigpO1xuICAgIGlmIChjdXJyZW50U3Bhbikge1xuICAgICAgICBjdXJyZW50U3Bhbi5zZXRFcnJvcihzcGFuRXJyb3IpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZSBjdXJyZW50IGNvbnRleHQgYnkgY3JlYXRpbmcgbmV3IGluc3RhbmNlcyBvZiB0aGUgdHJhY2UsIHNwYW4sIGFuZFxuICogcHJldmlvdXMgc3Bhbi5cbiAqXG4gKiBAcGFyYW0gY29udGV4dCAtIFRoZSBjb250ZXh0IHRvIGNsb25lLlxuICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGUgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lQ3VycmVudENvbnRleHQoY29udGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRyYWNlOiBjb250ZXh0LnRyYWNlPy5jbG9uZSgpLFxuICAgICAgICBzcGFuOiBjb250ZXh0LnNwYW4/LmNsb25lKCksXG4gICAgICAgIHByZXZpb3VzU3BhbjogY29udGV4dC5wcmV2aW91c1NwYW4/LmNsb25lKCksXG4gICAgfTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHJ1biB0aGUgZ2l2ZW4gZnVuY3Rpb24gd2l0aCBhIG5ldyBzcGFuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIHJ1biB3aXRoIHRoZSBuZXcgc3BhbiBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aE5ld1NwYW5Db250ZXh0KGZuKSB7XG4gICAgY29uc3QgY3VycmVudENvbnRleHQgPSBnZXRDb250ZXh0QXN5bmNMb2NhbFN0b3JhZ2UoKS5nZXRTdG9yZSgpO1xuICAgIGlmICghY3VycmVudENvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBleGlzdGluZyB0cmFjZSBmb3VuZCcpO1xuICAgIH1cbiAgICBjb25zdCBjb3B5T2ZDb250ZXh0ID0gY2xvbmVDdXJyZW50Q29udGV4dChjdXJyZW50Q29udGV4dCk7XG4gICAgcmV0dXJuIGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLnJ1bihjb3B5T2ZDb250ZXh0LCBmbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0Lm1qcy5tYXAiLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyB0aW1lciBhcyBfdGltZXIsIGlzVHJhY2luZ0xvb3BSdW5uaW5nQnlEZWZhdWx0LCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbmltcG9ydCB7IHRyYWNpbmcgfSBmcm9tIFwiLi4vY29uZmlnLm1qc1wiO1xuLyoqXG4gKiBQcmludHMgdGhlIHRyYWNlcyBhbmQgc3BhbnMgdG8gdGhlIGNvbnNvbGVcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnNvbGVTcGFuRXhwb3J0ZXIge1xuICAgIGFzeW5jIGV4cG9ydChpdGVtcykge1xuICAgICAgICBpZiAodHJhY2luZy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdUcmFjaW5nIGlzIGRpc2FibGVkLiBTa2lwcGluZyBleHBvcnQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICd0cmFjZScpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0V4cG9ydGVyXSBFeHBvcnQgdHJhY2UgdHJhY2VJZD0ke2l0ZW0udHJhY2VJZH0gbmFtZT0ke2l0ZW0ubmFtZX0ke2l0ZW0uZ3JvdXBJZCA/IGAgZ3JvdXBJZD0ke2l0ZW0uZ3JvdXBJZH1gIDogJyd9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0V4cG9ydGVyXSBFeHBvcnQgc3BhbjogJHtKU09OLnN0cmluZ2lmeShpdGVtKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBCYXRjaFRyYWNlUHJvY2Vzc29yIHtcbiAgICAjbWF4UXVldWVTaXplO1xuICAgICNtYXhCYXRjaFNpemU7XG4gICAgI3NjaGVkdWxlRGVsYXk7XG4gICAgI2V4cG9ydFRyaWdnZXJTaXplO1xuICAgICNleHBvcnRlcjtcbiAgICAjYnVmZmVyID0gW107XG4gICAgI3RpbWVyO1xuICAgICN0aW1lb3V0ID0gbnVsbDtcbiAgICAjZXhwb3J0SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICN0aW1lb3V0QWJvcnRDb250cm9sbGVyID0gbnVsbDtcbiAgICBjb25zdHJ1Y3RvcihleHBvcnRlciwgeyBtYXhRdWV1ZVNpemUgPSAxMDAwLCBtYXhCYXRjaFNpemUgPSAxMDAsIHNjaGVkdWxlRGVsYXkgPSA1MDAwLCAvLyA1IHNlY29uZHNcbiAgICBleHBvcnRUcmlnZ2VyUmF0aW8gPSAwLjgsIH0gPSB7fSkge1xuICAgICAgICB0aGlzLiNtYXhRdWV1ZVNpemUgPSBtYXhRdWV1ZVNpemU7XG4gICAgICAgIHRoaXMuI21heEJhdGNoU2l6ZSA9IG1heEJhdGNoU2l6ZTtcbiAgICAgICAgdGhpcy4jc2NoZWR1bGVEZWxheSA9IHNjaGVkdWxlRGVsYXk7XG4gICAgICAgIHRoaXMuI2V4cG9ydFRyaWdnZXJTaXplID0gbWF4UXVldWVTaXplICogZXhwb3J0VHJpZ2dlclJhdGlvO1xuICAgICAgICB0aGlzLiNleHBvcnRlciA9IGV4cG9ydGVyO1xuICAgICAgICB0aGlzLiN0aW1lciA9IF90aW1lcjtcbiAgICAgICAgaWYgKGlzVHJhY2luZ0xvb3BSdW5uaW5nQnlEZWZhdWx0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnQXV0b21hdGljIHRyYWNlIGV4cG9ydCBsb29wIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudC4gWW91IG5lZWQgdG8gbWFudWFsbHkgY2FsbCBgZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmZvcmNlRmx1c2goKWAgdG8gZXhwb3J0IHRyYWNlcy4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy4jdGltZW91dEFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgdGhpcy4jcnVuRXhwb3J0TG9vcCgpO1xuICAgIH1cbiAgICBhc3luYyAjc2FmZUFkZEl0ZW0oaXRlbSkge1xuICAgICAgICBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCArIDEgPiB0aGlzLiNtYXhRdWV1ZVNpemUpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRHJvcHBpbmcgdHJhY2UgYmVjYXVzZSBidWZmZXIgaXMgZnVsbCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCB0aGUgaXRlbSB0byB0aGUgYnVmZmVyXG4gICAgICAgIHRoaXMuI2J1ZmZlci5wdXNoKGl0ZW0pO1xuICAgICAgICBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCA+IHRoaXMuI2V4cG9ydFRyaWdnZXJTaXplKSB7XG4gICAgICAgICAgICAvLyBzdGFydCBleHBvcnRpbmcgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydEJhdGNoZXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAjcnVuRXhwb3J0TG9vcCgpIHtcbiAgICAgICAgdGhpcy4jdGltZW91dCA9IHRoaXMuI3RpbWVyLnNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gc2NoZWR1bGVkIGV4cG9ydFxuICAgICAgICAgICAgYXdhaXQgdGhpcy4jZXhwb3J0QmF0Y2hlcygpO1xuICAgICAgICAgICAgdGhpcy4jcnVuRXhwb3J0TG9vcCgpO1xuICAgICAgICB9LCB0aGlzLiNzY2hlZHVsZURlbGF5KTtcbiAgICAgICAgLy8gV2Ugc2V0IHRoaXMgc28gdGhhdCBOb2RlIG5vIGxvbmdlciBjb25zaWRlcnMgdGhpcyBwYXJ0IG9mIHRoZSBldmVudCBsb29wIGFuZCBrZWVwcyB0aGVcbiAgICAgICAgLy8gcHJvY2VzcyBhbGl2ZSB1bnRpbCB0aGUgdGltZXIgaXMgZG9uZS5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLiN0aW1lb3V0LnVucmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLiN0aW1lb3V0LnVucmVmKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgI2V4cG9ydEJhdGNoZXMoZm9yY2UgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgRXhwb3J0aW5nIGJhdGNoZXMuIEZvcmNlOiAke2ZvcmNlfS4gQnVmZmVyIHNpemU6ICR7dGhpcy4jYnVmZmVyLmxlbmd0aH1gKTtcbiAgICAgICAgaWYgKGZvcmNlIHx8IHRoaXMuI2J1ZmZlci5sZW5ndGggPCB0aGlzLiNtYXhCYXRjaFNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvRXhwb3J0ID0gWy4uLnRoaXMuI2J1ZmZlcl07XG4gICAgICAgICAgICB0aGlzLiNidWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuI2V4cG9ydEluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jZXhwb3J0ZXIuZXhwb3J0KHRvRXhwb3J0KTtcbiAgICAgICAgICAgIHRoaXMuI2V4cG9ydEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLiNidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgYmF0Y2ggPSB0aGlzLiNidWZmZXIuc3BsaWNlKDAsIHRoaXMuI21heEJhdGNoU2l6ZSk7XG4gICAgICAgICAgICB0aGlzLiNleHBvcnRJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydGVyLmV4cG9ydChiYXRjaCk7XG4gICAgICAgICAgICB0aGlzLiNleHBvcnRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25UcmFjZVN0YXJ0KHRyYWNlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuI3NhZmVBZGRJdGVtKHRyYWNlKTtcbiAgICB9XG4gICAgYXN5bmMgb25UcmFjZUVuZChfdHJhY2UpIHtcbiAgICAgICAgLy8gV2UgZG9uJ3Qgc2VuZCB0cmFjZXMgb24gZW5kIGJlY2F1c2Ugd2UgYWxyZWFkeSBzZW5kIHRoZW0gb24gc3RhcnRcbiAgICB9XG4gICAgYXN5bmMgb25TcGFuU3RhcnQoX3NwYW4pIHtcbiAgICAgICAgLy8gV2UgZG9uJ3Qgc2VuZCBzcGFucyBvbiBzdGFydCBiZWNhdXNlIHdlIHNlbmQgdGhlbSBhdCB0aGUgZW5kXG4gICAgfVxuICAgIGFzeW5jIG9uU3BhbkVuZChzcGFuKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuI3NhZmVBZGRJdGVtKHNwYW4pO1xuICAgIH1cbiAgICBhc3luYyBzaHV0ZG93bih0aW1lb3V0KSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLiN0aW1lci5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSBzaHV0ZG93biB0aGUgSFRUUCByZXF1ZXN0XG4gICAgICAgICAgICAgICAgdGhpcy4jdGltZW91dEFib3J0Q29udHJvbGxlcj8uYWJvcnQoKTtcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnU2h1dHRpbmcgZG93biBncmFjZWZ1bGx5Jyk7XG4gICAgICAgIHdoaWxlICh0aGlzLiNidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBXYWl0aW5nIGZvciBidWZmZXIgdG8gZW1wdHkuIEl0ZW1zIGxlZnQ6ICR7dGhpcy4jYnVmZmVyLmxlbmd0aH1gKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4jZXhwb3J0SW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIC8vIG5vIGN1cnJlbnQgZXhwb3J0IGluIHByb2dyZXNzLiBGb3JjaW5nIGFsbCBpdGVtcyB0byBiZSBleHBvcnRlZFxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydEJhdGNoZXModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy4jdGltZW91dEFib3J0Q29udHJvbGxlcj8uc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1RpbWVvdXQgcmVhY2hlZCwgZm9yY2UgZmx1c2hpbmcnKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNleHBvcnRCYXRjaGVzKHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdXNpbmcgc2V0VGltZW91dCB0byBhZGQgdG8gdGhlIGV2ZW50IGxvb3AgYW5kIGtlZXAgdGhpcyBhbGl2ZSB1bnRpbCBkb25lXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gdGhpcy4jdGltZXIuc2V0VGltZW91dChyZXNvbHZlLCA1MDApKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuZGVidWcoJ0J1ZmZlciBlbXB0eS4gRXhpdGluZycpO1xuICAgICAgICBpZiAodGhpcy4jdGltZXIgJiYgdGhpcy4jdGltZW91dCkge1xuICAgICAgICAgICAgLy8gbWFraW5nIHN1cmUgdGhlcmUgYXJlIG5vIG1vcmUgcmVxdWVzdHNcbiAgICAgICAgICAgIHRoaXMuI3RpbWVyLmNsZWFyVGltZW91dCh0aGlzLiN0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmb3JjZUZsdXNoKCkge1xuICAgICAgICBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydEJhdGNoZXModHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTXVsdGlUcmFjaW5nUHJvY2Vzc29yIHtcbiAgICAjcHJvY2Vzc29ycyA9IFtdO1xuICAgIHN0YXJ0KCkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzc29yLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc29yLnN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkVHJhY2VQcm9jZXNzb3IocHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuI3Byb2Nlc3NvcnMucHVzaChwcm9jZXNzb3IpO1xuICAgIH1cbiAgICBzZXRQcm9jZXNzb3JzKHByb2Nlc3NvcnMpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdTaHV0dGluZyBkb3duIG9sZCBwcm9jZXNzb3JzJyk7XG4gICAgICAgIGZvciAoY29uc3QgcHJvY2Vzc29yIG9mIHRoaXMuI3Byb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIHByb2Nlc3Nvci5zaHV0ZG93bigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3Byb2Nlc3NvcnMgPSBwcm9jZXNzb3JzO1xuICAgIH1cbiAgICBhc3luYyBvblRyYWNlU3RhcnQodHJhY2UpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzb3Igb2YgdGhpcy4jcHJvY2Vzc29ycykge1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc29yLm9uVHJhY2VTdGFydCh0cmFjZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25UcmFjZUVuZCh0cmFjZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3Iub25UcmFjZUVuZCh0cmFjZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25TcGFuU3RhcnQoc3Bhbikge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3Iub25TcGFuU3RhcnQoc3Bhbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25TcGFuRW5kKHNwYW4pIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzb3Igb2YgdGhpcy4jcHJvY2Vzc29ycykge1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc29yLm9uU3BhbkVuZChzcGFuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBzaHV0ZG93bih0aW1lb3V0KSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvY2Vzc29yIG9mIHRoaXMuI3Byb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3Nvci5zaHV0ZG93bih0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmb3JjZUZsdXNoKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3IuZm9yY2VGbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxufVxubGV0IF9kZWZhdWx0RXhwb3J0ZXIgPSBudWxsO1xubGV0IF9kZWZhdWx0UHJvY2Vzc29yID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0RXhwb3J0ZXIoKSB7XG4gICAgaWYgKCFfZGVmYXVsdEV4cG9ydGVyKSB7XG4gICAgICAgIF9kZWZhdWx0RXhwb3J0ZXIgPSBuZXcgQ29uc29sZVNwYW5FeHBvcnRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gX2RlZmF1bHRFeHBvcnRlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UHJvY2Vzc29yKCkge1xuICAgIGlmICghX2RlZmF1bHRQcm9jZXNzb3IpIHtcbiAgICAgICAgX2RlZmF1bHRQcm9jZXNzb3IgPSBuZXcgQmF0Y2hUcmFjZVByb2Nlc3NvcihkZWZhdWx0RXhwb3J0ZXIoKSk7XG4gICAgfVxuICAgIHJldHVybiBfZGVmYXVsdFByb2Nlc3Nvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3Nvci5tanMubWFwIiwiaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbi8qKlxuICogR2VuZXJhdGUgYW4gSVNPIDg2MDEgdGltZXN0YW1wIG9mIHRoZSBjdXJyZW50IHRpbWUuXG4gKiBAcmV0dXJucyBBbiBJU08gODYwMSB0aW1lc3RhbXAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lSXNvKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgdHJhY2UgSUQgYnkgY3JlYXRpbmcgYSByYW5kb20gVVVJRCB2NCBhbmQgcmVtb3ZpbmcgdGhlIGRhc2hlcy4gVGhpcyBpcyB0aGUgZXF1aXZhbGVudFxuICogb2YgYHV1aWQ0KCkuaGV4YCBpbiBQeXRob24gYW5kIHByZWZpeGluZyBpdCB3aXRoIGB0cmFjZV9gLlxuICogQHJldHVybnMgQSB0cmFjZSBJRC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVHJhY2VJZCgpIHtcbiAgICByZXR1cm4gYHRyYWNlXyR7cmFuZG9tVVVJRCgpLnJlcGxhY2UoLy0vZywgJycpfWA7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgc3BhbiBJRCBieSBjcmVhdGluZyBhIHJhbmRvbSBVVUlEIHY0IGFuZCByZW1vdmluZyB0aGUgZGFzaGVzLiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50XG4gKiBvZiBgdXVpZDQoKS5oZXhgIGluIFB5dGhvbiBhbmQgcHJlZml4aW5nIGl0IHdpdGggYHNwYW5fYC5cbiAqIEByZXR1cm5zIEEgc3BhbiBJRC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlU3BhbklkKCkge1xuICAgIHJldHVybiBgc3Bhbl8ke3JhbmRvbVVVSUQoKS5yZXBsYWNlKC8tL2csICcnKS5zbGljZSgwLCAyNCl9YDtcbn1cbi8qKlxuICogR2VuZXJhdGUgYSBncm91cCBJRCBieSBjcmVhdGluZyBhIHJhbmRvbSBVVUlEIHY0IGFuZCByZW1vdmluZyB0aGUgZGFzaGVzLiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50XG4gKiBvZiBgdXVpZDQoKS5oZXhgIGluIFB5dGhvbiBhbmQgcHJlZml4aW5nIGl0IHdpdGggYGdyb3VwX2AuXG4gKiBAcmV0dXJucyBBIGdyb3VwIElELlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVHcm91cElkKCkge1xuICAgIHJldHVybiBgZ3JvdXBfJHtyYW5kb21VVUlEKCkucmVwbGFjZSgvLS9nLCAnJykuc2xpY2UoMCwgMjQpfWA7XG59XG4vKipcbiAqIFJlbW92ZSBmaWVsZHMgdGhhdCBzdGFydCB3aXRoIGFuIHVuZGVyc2NvcmUgZnJvbSBhbiBvYmplY3QuXG4gKiBAcGFyYW0gb2JqIC0gVGhlIG9iamVjdCB0byByZW1vdmUgcHJpdmF0ZSBmaWVsZHMgZnJvbS5cbiAqIEByZXR1cm5zIEEgbmV3IG9iamVjdCB3aXRoIHByaXZhdGUgZmllbGRzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVQcml2YXRlRmllbGRzKG9iaikge1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMob2JqKS5maWx0ZXIoKFtrZXldKSA9PiAha2V5LnN0YXJ0c1dpdGgoJ18nKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcCIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IGdlbmVyYXRlU3BhbklkLCByZW1vdmVQcml2YXRlRmllbGRzLCB0aW1lSXNvIH0gZnJvbSBcIi4vdXRpbHMubWpzXCI7XG5leHBvcnQgY2xhc3MgU3BhbiB7XG4gICAgdHlwZSA9ICd0cmFjZS5zcGFuJztcbiAgICAjZGF0YTtcbiAgICAjdHJhY2VJZDtcbiAgICAjc3BhbklkO1xuICAgICNwYXJlbnRJZDtcbiAgICAjcHJvY2Vzc29yO1xuICAgICNzdGFydGVkQXQ7XG4gICAgI2VuZGVkQXQ7XG4gICAgI2Vycm9yO1xuICAgICNwcmV2aW91c1NwYW47XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgcHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuI3RyYWNlSWQgPSBvcHRpb25zLnRyYWNlSWQ7XG4gICAgICAgIHRoaXMuI3NwYW5JZCA9IG9wdGlvbnMuc3BhbklkID8/IGdlbmVyYXRlU3BhbklkKCk7XG4gICAgICAgIHRoaXMuI2RhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgIHRoaXMuI3Byb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICAgICAgdGhpcy4jcGFyZW50SWQgPSBvcHRpb25zLnBhcmVudElkID8/IG51bGw7XG4gICAgICAgIHRoaXMuI2Vycm9yID0gb3B0aW9ucy5lcnJvciA/PyBudWxsO1xuICAgICAgICB0aGlzLiNzdGFydGVkQXQgPSBvcHRpb25zLnN0YXJ0ZWRBdCA/PyBudWxsO1xuICAgICAgICB0aGlzLiNlbmRlZEF0ID0gb3B0aW9ucy5lbmRlZEF0ID8/IG51bGw7XG4gICAgfVxuICAgIGdldCB0cmFjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdHJhY2VJZDtcbiAgICB9XG4gICAgZ2V0IHNwYW5EYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZGF0YTtcbiAgICB9XG4gICAgZ2V0IHNwYW5JZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NwYW5JZDtcbiAgICB9XG4gICAgZ2V0IHBhcmVudElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcGFyZW50SWQ7XG4gICAgfVxuICAgIGdldCBwcmV2aW91c1NwYW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNwcmV2aW91c1NwYW47XG4gICAgfVxuICAgIHNldCBwcmV2aW91c1NwYW4oc3Bhbikge1xuICAgICAgICB0aGlzLiNwcmV2aW91c1NwYW4gPSBzcGFuO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXJ0ZWRBdCkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1NwYW4gYWxyZWFkeSBzdGFydGVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhcnRlZEF0ID0gdGltZUlzbygpO1xuICAgICAgICB0aGlzLiNwcm9jZXNzb3Iub25TcGFuU3RhcnQodGhpcyk7XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI2VuZGVkQXQpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnU3BhbiBhbHJlYWR5IGZpbmlzaGVkJywgdGhpcy5zcGFuRGF0YSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jZW5kZWRBdCA9IHRpbWVJc28oKTtcbiAgICAgICAgdGhpcy4jcHJvY2Vzc29yLm9uU3BhbkVuZCh0aGlzKTtcbiAgICB9XG4gICAgc2V0RXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy4jZXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgZ2V0IGVycm9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZXJyb3I7XG4gICAgfVxuICAgIGdldCBzdGFydGVkQXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNzdGFydGVkQXQ7XG4gICAgfVxuICAgIGdldCBlbmRlZEF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZW5kZWRBdDtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBuZXcgU3Bhbih7XG4gICAgICAgICAgICB0cmFjZUlkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgICAgICBzcGFuSWQ6IHRoaXMuc3BhbklkLFxuICAgICAgICAgICAgcGFyZW50SWQ6IHRoaXMucGFyZW50SWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5zcGFuRGF0YSxcbiAgICAgICAgICAgIHN0YXJ0ZWRBdDogdGhpcy4jc3RhcnRlZEF0ID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVuZGVkQXQ6IHRoaXMuI2VuZGVkQXQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgZXJyb3I6IHRoaXMuI2Vycm9yID8/IHVuZGVmaW5lZCxcbiAgICAgICAgfSwgdGhpcy4jcHJvY2Vzc29yKTtcbiAgICAgICAgc3Bhbi5wcmV2aW91c1NwYW4gPSB0aGlzLnByZXZpb3VzU3Bhbj8uY2xvbmUoKTtcbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9iamVjdDogdGhpcy50eXBlLFxuICAgICAgICAgICAgaWQ6IHRoaXMuc3BhbklkLFxuICAgICAgICAgICAgdHJhY2VfaWQ6IHRoaXMudHJhY2VJZCxcbiAgICAgICAgICAgIHBhcmVudF9pZDogdGhpcy5wYXJlbnRJZCxcbiAgICAgICAgICAgIHN0YXJ0ZWRfYXQ6IHRoaXMuc3RhcnRlZEF0LFxuICAgICAgICAgICAgZW5kZWRfYXQ6IHRoaXMuZW5kZWRBdCxcbiAgICAgICAgICAgIHNwYW5fZGF0YTogcmVtb3ZlUHJpdmF0ZUZpZWxkcyh0aGlzLnNwYW5EYXRhKSxcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLmVycm9yLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOb29wU3BhbiBleHRlbmRzIFNwYW4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHByb2Nlc3Nvcikge1xuICAgICAgICBzdXBlcih7IHRyYWNlSWQ6ICduby1vcCcsIHNwYW5JZDogJ25vLW9wJywgZGF0YSB9LCBwcm9jZXNzb3IpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbmQoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0RXJyb3IoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFucy5tanMubWFwIiwiaW1wb3J0IHsgZGVmYXVsdFByb2Nlc3NvciB9IGZyb20gXCIuL3Byb2Nlc3Nvci5tanNcIjtcbmltcG9ydCB7IGdlbmVyYXRlVHJhY2VJZCB9IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYWNlIHtcbiAgICB0eXBlID0gJ3RyYWNlJztcbiAgICB0cmFjZUlkO1xuICAgIG5hbWU7XG4gICAgZ3JvdXBJZCA9IG51bGw7XG4gICAgbWV0YWRhdGE7XG4gICAgI3Byb2Nlc3NvcjtcbiAgICAjc3RhcnRlZDtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBwcm9jZXNzb3IpIHtcbiAgICAgICAgdGhpcy50cmFjZUlkID0gb3B0aW9ucy50cmFjZUlkID8/IGdlbmVyYXRlVHJhY2VJZCgpO1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgPz8gJ0FnZW50IHdvcmtmbG93JztcbiAgICAgICAgdGhpcy5ncm91cElkID0gb3B0aW9ucy5ncm91cElkID8/IG51bGw7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBvcHRpb25zLm1ldGFkYXRhID8/IHt9O1xuICAgICAgICB0aGlzLiNwcm9jZXNzb3IgPSBwcm9jZXNzb3IgPz8gZGVmYXVsdFByb2Nlc3NvcigpO1xuICAgICAgICB0aGlzLiNzdGFydGVkID0gb3B0aW9ucy5zdGFydGVkID8/IGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgdGhpcy4jcHJvY2Vzc29yLm9uVHJhY2VTdGFydCh0aGlzKTtcbiAgICB9XG4gICAgYXN5bmMgZW5kKCkge1xuICAgICAgICBpZiAoIXRoaXMuI3N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIGF3YWl0IHRoaXMuI3Byb2Nlc3Nvci5vblRyYWNlRW5kKHRoaXMpO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFjZSh7XG4gICAgICAgICAgICB0cmFjZUlkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBncm91cElkOiB0aGlzLmdyb3VwSWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHRoaXMubWV0YWRhdGEsXG4gICAgICAgICAgICBzdGFydGVkOiB0aGlzLiNzdGFydGVkLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnR5cGUsXG4gICAgICAgICAgICBpZDogdGhpcy50cmFjZUlkLFxuICAgICAgICAgICAgd29ya2Zsb3dfbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHRoaXMuZ3JvdXBJZCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB0aGlzLm1ldGFkYXRhLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOb29wVHJhY2UgZXh0ZW5kcyBUcmFjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHt9KTtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXN5bmMgZW5kKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2VzLm1qcy5tYXAiLCJpbXBvcnQgeyBnZXRDdXJyZW50U3BhbiwgZ2V0Q3VycmVudFRyYWNlIH0gZnJvbSBcIi4vY29udGV4dC5tanNcIjtcbmltcG9ydCB7IHRyYWNpbmcgfSBmcm9tIFwiLi4vY29uZmlnLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IHsgTXVsdGlUcmFjaW5nUHJvY2Vzc29yIH0gZnJvbSBcIi4vcHJvY2Vzc29yLm1qc1wiO1xuaW1wb3J0IHsgTm9vcFNwYW4sIFNwYW4gfSBmcm9tIFwiLi9zcGFucy5tanNcIjtcbmltcG9ydCB7IE5vb3BUcmFjZSwgVHJhY2UgfSBmcm9tIFwiLi90cmFjZXMubWpzXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVRyYWNlSWQgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbmV4cG9ydCBjbGFzcyBUcmFjZVByb3ZpZGVyIHtcbiAgICAjbXVsdGlQcm9jZXNzb3I7XG4gICAgI2Rpc2FibGVkO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLiNtdWx0aVByb2Nlc3NvciA9IG5ldyBNdWx0aVRyYWNpbmdQcm9jZXNzb3IoKTtcbiAgICAgICAgdGhpcy4jZGlzYWJsZWQgPSB0cmFjaW5nLmRpc2FibGVkO1xuICAgICAgICB0aGlzLiNhZGRDbGVhbnVwTGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb2Nlc3NvciB0byB0aGUgbGlzdCBvZiBwcm9jZXNzb3JzLiBFYWNoIHByb2Nlc3NvciB3aWxsIHJlY2VpdmUgYWxsIHRyYWNlcy9zcGFucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9jZXNzb3IgLSBUaGUgcHJvY2Vzc29yIHRvIGFkZC5cbiAgICAgKi9cbiAgICByZWdpc3RlclByb2Nlc3Nvcihwcm9jZXNzb3IpIHtcbiAgICAgICAgdGhpcy4jbXVsdGlQcm9jZXNzb3IuYWRkVHJhY2VQcm9jZXNzb3IocHJvY2Vzc29yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsaXN0IG9mIHByb2Nlc3NvcnMuIFRoaXMgd2lsbCByZXBsYWNlIGFueSBleGlzdGluZyBwcm9jZXNzb3JzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb2Nlc3NvcnMgLSBUaGUgbGlzdCBvZiBwcm9jZXNzb3JzIHRvIHNldC5cbiAgICAgKi9cbiAgICBzZXRQcm9jZXNzb3JzKHByb2Nlc3NvcnMpIHtcbiAgICAgICAgdGhpcy4jbXVsdGlQcm9jZXNzb3Iuc2V0UHJvY2Vzc29ycyhwcm9jZXNzb3JzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHRyYWNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgdHJhY2UuXG4gICAgICovXG4gICAgZ2V0Q3VycmVudFRyYWNlKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q3VycmVudFRyYWNlKCk7XG4gICAgfVxuICAgIGdldEN1cnJlbnRTcGFuKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q3VycmVudFNwYW4oKTtcbiAgICB9XG4gICAgc2V0RGlzYWJsZWQoZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy4jZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG4gICAgc3RhcnRFeHBvcnRMb29wKCkge1xuICAgICAgICB0aGlzLiNtdWx0aVByb2Nlc3Nvci5zdGFydCgpO1xuICAgIH1cbiAgICBjcmVhdGVUcmFjZSh0cmFjZU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuI2Rpc2FibGVkKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1RyYWNpbmcgaXMgZGlzYWJsZWQsIE5vdCBjcmVhdGluZyB0cmFjZSAlbycsIHRyYWNlT3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vb3BUcmFjZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYWNlSWQgPSB0cmFjZU9wdGlvbnMudHJhY2VJZCA/PyBnZW5lcmF0ZVRyYWNlSWQoKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRyYWNlT3B0aW9ucy5uYW1lID8/ICdBZ2VudCB3b3JrZmxvdyc7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnQ3JlYXRpbmcgdHJhY2UgJXMgd2l0aCBuYW1lICVzJywgdHJhY2VJZCwgbmFtZSk7XG4gICAgICAgIHJldHVybiBuZXcgVHJhY2UoeyAuLi50cmFjZU9wdGlvbnMsIG5hbWUsIHRyYWNlSWQgfSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgIH1cbiAgICBjcmVhdGVTcGFuKHNwYW5PcHRpb25zLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuI2Rpc2FibGVkIHx8IHNwYW5PcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1RyYWNpbmcgaXMgZGlzYWJsZWQsIE5vdCBjcmVhdGluZyBzcGFuICVvJywgc3Bhbk9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhcmVudElkO1xuICAgICAgICBsZXQgdHJhY2VJZDtcbiAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUcmFjZSA9IGdldEN1cnJlbnRUcmFjZSgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNwYW4gPSBnZXRDdXJyZW50U3BhbigpO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50VHJhY2UpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ05vIGFjdGl2ZSB0cmFjZS4gTWFrZSBzdXJlIHRvIHN0YXJ0IGEgdHJhY2Ugd2l0aCBgd2l0aFRyYWNlKClgIGZpcnN0LiBSZXR1cm5pbmcgTm9vcFNwYW4uJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudFNwYW4gaW5zdGFuY2VvZiBOb29wU3BhbiB8fFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFjZSBpbnN0YW5jZW9mIE5vb3BUcmFjZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgUGFyZW50ICR7Y3VycmVudFNwYW59IG9yICR7Y3VycmVudFRyYWNlfSBpcyBuby1vcCwgcmV0dXJuaW5nIE5vb3BTcGFuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZUlkID0gY3VycmVudFRyYWNlLnRyYWNlSWQ7XG4gICAgICAgICAgICBpZiAoY3VycmVudFNwYW4pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1VzaW5nIHBhcmVudCBzcGFuICVzJywgY3VycmVudFNwYW4uc3BhbklkKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRJZCA9IGN1cnJlbnRTcGFuLnNwYW5JZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnTm8gcGFyZW50IHNwYW4sIHVzaW5nIGN1cnJlbnQgdHJhY2UgJXMnLCBjdXJyZW50VHJhY2UudHJhY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyZW50IGluc3RhbmNlb2YgVHJhY2UpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBOb29wVHJhY2UpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1BhcmVudCB0cmFjZSBpcyBuby1vcCwgcmV0dXJuaW5nIE5vb3BTcGFuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZUlkID0gcGFyZW50LnRyYWNlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyZW50IGluc3RhbmNlb2YgU3Bhbikge1xuICAgICAgICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIE5vb3BTcGFuKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdQYXJlbnQgc3BhbiBpcyBuby1vcCwgcmV0dXJuaW5nIE5vb3BTcGFuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnRJZCA9IHBhcmVudC5zcGFuSWQ7XG4gICAgICAgICAgICB0cmFjZUlkID0gcGFyZW50LnRyYWNlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0cmFjZUlkKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ05vIHRyYWNlSWQgZm91bmQuIE1ha2Ugc3VyZSB0byBzdGFydCBhIHRyYWNlIHdpdGggYHdpdGhUcmFjZSgpYCBmaXJzdC4gUmV0dXJuaW5nIE5vb3BTcGFuLicpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBDcmVhdGluZyBzcGFuICR7SlNPTi5zdHJpbmdpZnkoc3Bhbk9wdGlvbnMuZGF0YSl9IHdpdGggaWQgJHtzcGFuT3B0aW9ucy5zcGFuSWQgPz8gdHJhY2VJZH1gKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTcGFuKHtcbiAgICAgICAgICAgIC4uLnNwYW5PcHRpb25zLFxuICAgICAgICAgICAgdHJhY2VJZCxcbiAgICAgICAgICAgIHBhcmVudElkLFxuICAgICAgICB9LCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgfVxuICAgIGFzeW5jIHNodXRkb3duKHRpbWVvdXQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnU2h1dHRpbmcgZG93biB0cmFjaW5nIHByb3ZpZGVyJyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNtdWx0aVByb2Nlc3Nvci5zaHV0ZG93bih0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3Igc2h1dHRpbmcgZG93biB0cmFjaW5nIHByb3ZpZGVyICVvJywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBBZGRzIGxpc3RlbmVycyB0byBgcHJvY2Vzc2AgdG8gZW5zdXJlIGBzaHV0ZG93bmAgb2NjdXJzIGJlZm9yZSBleGl0LiAqL1xuICAgICNhZGRDbGVhbnVwTGlzdGVuZXJzKCkge1xuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGluZyBOb2RlLmpzIHByb2Nlc3MgdGVybWluYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNsZWFudXAgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NsZWFudXAgdGltZW91dCwgZm9yY2luZyBleGl0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNodXRkb3duKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBub3JtYWwgdGVybWluYXRpb25cbiAgICAgICAgICAgIHByb2Nlc3Mub24oJ2JlZm9yZUV4aXQnLCBjbGVhbnVwKTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBDVFJMK0MgKFNJR0lOVClcbiAgICAgICAgICAgIHByb2Nlc3Mub24oJ1NJR0lOVCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPdGhlckxpc3RlbmVyc0ZvclNpZ25hbHMoJ1NJR0lOVCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgbGlzdGVuZXJzLCBleGl0IHRoZSBwcm9jZXNzIG9uIHRoaXMgU0RLIHNpZGVcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEzMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBIYW5kbGUgdGVybWluYXRpb24gKFNJR1RFUk0pXG4gICAgICAgICAgICBwcm9jZXNzLm9uKCdTSUdURVJNJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc090aGVyTGlzdGVuZXJzRm9yU2lnbmFscygnU0lHVEVSTScpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgbGlzdGVuZXJzLCBleGl0IHRoZSBwcm9jZXNzIG9uIHRoaXMgU0RLIHNpZGVcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgYXN5bmMgKHJlYXNvbiwgcHJvbWlzZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignVW5oYW5kbGVkIHJlamVjdGlvbicsIHJlYXNvbiwgcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzT3RoZXJMaXN0ZW5lcnNGb3JFdmVudHMoJ3VuaGFuZGxlZFJlamVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgbGlzdGVuZXJzLCBleGl0IHRoZSBwcm9jZXNzIG9uIHRoaXMgU0RLIHNpZGVcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGZvcmNlRmx1c2goKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuI211bHRpUHJvY2Vzc29yLmZvcmNlRmx1c2goKTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYXNPdGhlckxpc3RlbmVyc0ZvclNpZ25hbHMoZXZlbnQpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aCA+IDE7XG59XG5mdW5jdGlvbiBoYXNPdGhlckxpc3RlbmVyc0ZvckV2ZW50cyhldmVudCkge1xuICAgIHJldHVybiBwcm9jZXNzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoID4gMTtcbn1cbmxldCBHTE9CQUxfVFJBQ0VfUFJPVklERVIgPSB1bmRlZmluZWQ7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpIHtcbiAgICBpZiAoIUdMT0JBTF9UUkFDRV9QUk9WSURFUikge1xuICAgICAgICBHTE9CQUxfVFJBQ0VfUFJPVklERVIgPSBuZXcgVHJhY2VQcm92aWRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gR0xPQkFMX1RSQUNFX1BST1ZJREVSO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXIubWpzLm1hcCIsImltcG9ydCB7IHJlc2V0Q3VycmVudFNwYW4sIHNldEN1cnJlbnRTcGFuLCB3aXRoTmV3U3BhbkNvbnRleHQsIH0gZnJvbSBcIi4vY29udGV4dC5tanNcIjtcbmltcG9ydCB7IGdldEdsb2JhbFRyYWNlUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci5tanNcIjtcbmZ1bmN0aW9uIF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlU3Bhbikge1xuICAgIHJldHVybiBhc3luYyAoZm4sIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgLy8gQ3JlYXRpbmcgYSBuZXcgc3BhbiBjb250ZXh0IHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBwcmV2aW91cyBzcGFuIGlzIGNvcnJlY3RseSByZXNldFxuICAgICAgICByZXR1cm4gd2l0aE5ld1NwYW5Db250ZXh0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBjcmVhdGVTcGFuKC4uLmFyZ3MpO1xuICAgICAgICAgICAgc2V0Q3VycmVudFNwYW4oc3Bhbik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHNwYW4uc3RhcnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgZm4oc3Bhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZXJyb3IuZGF0YSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgcmVzZXRDdXJyZW50U3BhbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgcmVzcG9uc2Ugc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LCB5b3Ugc2hvdWxkIGVpdGhlclxuICogdXNlIGB3aXRoUmVzcG9uc2VTcGFuKClgIG9yIGNhbGwgYHNwYW4uc3RhcnQoKWAgYW5kIGBzcGFuLmVuZCgpYCBtYW51YWxseS5cbiAqXG4gKiBUaGlzIHNwYW4gY2FwdHVyZXMgdGhlIGRldGFpbHMgb2YgYSBtb2RlbCByZXNwb25zZSwgcHJpbWFyaWx5IHRoZSByZXNwb25zZSBpZGVudGlmaWVyLlxuICogSWYgeW91IG5lZWQgdG8gY2FwdHVyZSBkZXRhaWxlZCBnZW5lcmF0aW9uIGluZm9ybWF0aW9uIHN1Y2ggYXMgaW5wdXQvb3V0cHV0IG1lc3NhZ2VzLFxuICogbW9kZWwgY29uZmlndXJhdGlvbiwgb3IgdXNhZ2UgZGF0YSwgdXNlIGBjcmVhdGVHZW5lcmF0aW9uU3BhbigpYCBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc3BhbiBjcmVhdGlvbiBvcHRpb25zLCBpbmNsdWRpbmcgc3BhbiBkYXRhIGFuZCBpZGVudGlmaWVycy5cbiAqIEBwYXJhbSBwYXJlbnQgLSBUaGUgcGFyZW50IHNwYW4gb3IgdHJhY2UuIElmIG5vdCBwcm92aWRlZCwgdGhlIGN1cnJlbnQgdHJhY2Uvc3BhbiB3aWxsIGJlIHVzZWRcbiAqIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQgcmVzcG9uc2Ugc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICBvcHRpb25zID0ge307XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMuZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgcmVzcG9uc2Ugc3BhbiBhbmQgYXV0b21hdGljYWxseSBzdGFydCBhbmQgZW5kIGl0LlxuICpcbiAqIFRoaXMgc3BhbiBjYXB0dXJlcyB0aGUgZGV0YWlscyBvZiBhIG1vZGVsIHJlc3BvbnNlLCBwcmltYXJpbHkgdGhlIHJlc3BvbnNlIGlkZW50aWZpZXIuXG4gKiBJZiB5b3UgbmVlZCB0byBjYXB0dXJlIGRldGFpbGVkIGdlbmVyYXRpb24gaW5mb3JtYXRpb24gc3VjaCBhcyBpbnB1dC9vdXRwdXQgbWVzc2FnZXMsXG4gKiBtb2RlbCBjb25maWd1cmF0aW9uLCBvciB1c2FnZSBkYXRhLCB1c2UgYGdlbmVyYXRpb25TcGFuKClgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3aXRoUmVzcG9uc2VTcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVSZXNwb25zZVNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgYWdlbnQgc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LCB5b3Ugc2hvdWxkIGVpdGhlclxuICogdXNlIGB3aXRoQWdlbnRTcGFuKClgIG9yIGNhbGwgYHNwYW4uc3RhcnQoKWAgYW5kIGBzcGFuLmVuZCgpYCBtYW51YWxseS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNwYW4gY3JlYXRpb24gb3B0aW9ucywgaW5jbHVkaW5nIHNwYW4gZGF0YSBhbmQgaWRlbnRpZmllcnMuXG4gKiBAcGFyYW0gcGFyZW50IC0gVGhlIHBhcmVudCBzcGFuIG9yIHRyYWNlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBjdXJyZW50IHRyYWNlL3NwYW4gd2lsbCBiZSB1c2VkXG4gKiBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIGFnZW50IHNwYW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBZ2VudFNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ2FnZW50JyxcbiAgICAgICAgICAgIG5hbWU6IG9wdGlvbnM/LmRhdGE/Lm5hbWUgPz8gJ0FnZW50JyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGFnZW50IHNwYW4gYW5kIGF1dG9tYXRpY2FsbHkgc3RhcnQgYW5kIGVuZCBpdC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdpdGhBZ2VudFNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZUFnZW50U3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBmdW5jdGlvbiBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHksIHlvdSBzaG91bGQgZWl0aGVyXG4gKiB1c2UgYHdpdGhGdW5jdGlvblNwYW4oKWAgb3IgY2FsbCBgc3Bhbi5zdGFydCgpYCBhbmQgYHNwYW4uZW5kKClgIG1hbnVhbGx5LlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc3BhbiBjcmVhdGlvbiBvcHRpb25zLCBpbmNsdWRpbmcgc3BhbiBkYXRhIGFuZCBpZGVudGlmaWVycy5cbiAqIEBwYXJhbSBwYXJlbnQgLSBUaGUgcGFyZW50IHNwYW4gb3IgdHJhY2UuIElmIG5vdCBwcm92aWRlZCwgdGhlIGN1cnJlbnQgdHJhY2Uvc3BhbiB3aWxsIGJlIHVzZWRcbiAqIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQgZnVuY3Rpb24gc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgaW5wdXQ6IG9wdGlvbnM/LmRhdGE/LmlucHV0ID8/ICcnLFxuICAgICAgICAgICAgb3V0cHV0OiBvcHRpb25zPy5kYXRhPy5vdXRwdXQgPz8gJycsXG4gICAgICAgICAgICAuLi5vcHRpb25zPy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBmdW5jdGlvbiBzcGFuIGFuZCBhdXRvbWF0aWNhbGx5IHN0YXJ0IGFuZCBlbmQgaXQuXG4gKi9cbmV4cG9ydCBjb25zdCB3aXRoRnVuY3Rpb25TcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVGdW5jdGlvblNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaGFuZG9mZiBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHksIHlvdSBzaG91bGQgZWl0aGVyXG4gKiB1c2UgYHdpdGhIYW5kb2ZmU3BhbigpYCBvciBjYWxsIGBzcGFuLnN0YXJ0KClgIGFuZCBgc3Bhbi5lbmQoKWAgbWFudWFsbHkuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzcGFuIGNyZWF0aW9uIG9wdGlvbnMsIGluY2x1ZGluZyBzcGFuIGRhdGEgYW5kIGlkZW50aWZpZXJzLlxuICogQHBhcmFtIHBhcmVudCAtIFRoZSBwYXJlbnQgc3BhbiBvciB0cmFjZS4gSWYgbm90IHByb3ZpZGVkLCB0aGUgY3VycmVudCB0cmFjZS9zcGFuIHdpbGwgYmUgdXNlZFxuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbmV3bHkgY3JlYXRlZCBoYW5kb2ZmIHNwYW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIYW5kb2ZmU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7IHR5cGU6ICdoYW5kb2ZmJywgLi4ub3B0aW9ucz8uZGF0YSB9LFxuICAgIH0sIHBhcmVudCk7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBoYW5kb2ZmIHNwYW4gYW5kIGF1dG9tYXRpY2FsbHkgc3RhcnQgYW5kIGVuZCBpdC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdpdGhIYW5kb2ZmU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlSGFuZG9mZlNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZ2VuZXJhdGlvbiBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHksIHlvdSBzaG91bGQgZWl0aGVyXG4gKiB1c2UgYHdpdGhHZW5lcmF0aW9uU3BhbigpYCBvciBjYWxsIGBzcGFuLnN0YXJ0KClgIGFuZCBgc3Bhbi5lbmQoKWAgbWFudWFsbHkuXG4gKlxuICogVGhpcyBzcGFuIGNhcHR1cmVzIHRoZSBkZXRhaWxzIG9mIGEgbW9kZWwgZ2VuZXJhdGlvbiwgaW5jbHVkaW5nIGlucHV0L291dHB1dCBtZXNzYWdlXG4gKiBzZXF1ZW5jZXMsIG1vZGVsIGluZm9ybWF0aW9uLCBhbmQgdXNhZ2UgZGF0YS4gSWYgeW91IG9ubHkgbmVlZCB0byBjYXB0dXJlIGEgbW9kZWwgcmVzcG9uc2VcbiAqIGlkZW50aWZpZXIsIGNvbnNpZGVyIHVzaW5nIGBjcmVhdGVSZXNwb25zZVNwYW4oKWAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRpb25TcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdnZW5lcmF0aW9uJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbi8qKiBBdXRvbWF0aWNhbGx5IGNyZWF0ZSBhIGdlbmVyYXRpb24gc3BhbiwgcnVuIGZuIGFuZCBjbG9zZSB0aGUgc3BhbiAqL1xuZXhwb3J0IGNvbnN0IHdpdGhHZW5lcmF0aW9uU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlR2VuZXJhdGlvblNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgY3VzdG9tIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseSwgeW91IHNob3VsZCBlaXRoZXIgdXNlXG4gKiBgd2l0aEN1c3RvbVNwYW4oKWAgb3IgY2FsbCBgc3Bhbi5zdGFydCgpYCBhbmQgYHNwYW4uZW5kKClgIG1hbnVhbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3VzdG9tU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAnY3VzdG9tJyxcbiAgICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgICAgLi4ub3B0aW9ucz8uZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuZXhwb3J0IGNvbnN0IHdpdGhDdXN0b21TcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVDdXN0b21TcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGd1YXJkcmFpbCBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHksIHlvdSBzaG91bGQgZWl0aGVyIHVzZVxuICogYHdpdGhHdWFyZHJhaWxTcGFuKClgIG9yIGNhbGwgYHNwYW4uc3RhcnQoKWAgYW5kIGBzcGFuLmVuZCgpYCBtYW51YWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUd1YXJkcmFpbFNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ2d1YXJkcmFpbCcsXG4gICAgICAgICAgICB0cmlnZ2VyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgLi4ub3B0aW9ucz8uZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuZXhwb3J0IGNvbnN0IHdpdGhHdWFyZHJhaWxTcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVHdWFyZHJhaWxTcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRyYW5zY3JpcHRpb24gc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhbnNjcmlwdGlvblNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ3RyYW5zY3JpcHRpb24nLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG5leHBvcnQgY29uc3Qgd2l0aFRyYW5zY3JpcHRpb25TcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVUcmFuc2NyaXB0aW9uU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzcGVlY2ggc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3BlZWNoU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3BlZWNoJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMuZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuZXhwb3J0IGNvbnN0IHdpdGhTcGVlY2hTcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVTcGVlY2hTcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IHNwZWVjaCBncm91cCBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGVlY2hHcm91cFNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ3NwZWVjaF9ncm91cCcsXG4gICAgICAgICAgICAuLi5vcHRpb25zPy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG5leHBvcnQgY29uc3Qgd2l0aFNwZWVjaEdyb3VwU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlU3BlZWNoR3JvdXBTcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IE1DUCBsaXN0IHRvb2xzIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1DUExpc3RUb29sc1NwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ21jcF90b29scycsXG4gICAgICAgICAgICAuLi5vcHRpb25zPy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG5leHBvcnQgY29uc3Qgd2l0aE1DUExpc3RUb29sc1NwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZU1DUExpc3RUb29sc1NwYW4pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlU3BhbnMubWpzLm1hcCIsImltcG9ydCB7IGdldEdsb2JhbFRyYWNlUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci5tanNcIjtcbmV4cG9ydCB7IGdldEN1cnJlbnRTcGFuLCBnZXRDdXJyZW50VHJhY2UsIGdldE9yQ3JlYXRlVHJhY2UsIHJlc2V0Q3VycmVudFNwYW4sIHNldEN1cnJlbnRTcGFuLCB3aXRoVHJhY2UsIH0gZnJvbSBcIi4vY29udGV4dC5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWF0ZVNwYW5zLm1qc1wiO1xuZXhwb3J0IHsgQmF0Y2hUcmFjZVByb2Nlc3NvciwgQ29uc29sZVNwYW5FeHBvcnRlciwgfSBmcm9tIFwiLi9wcm9jZXNzb3IubWpzXCI7XG5leHBvcnQgeyBOb29wU3BhbiwgU3BhbiB9IGZyb20gXCIuL3NwYW5zLm1qc1wiO1xuZXhwb3J0IHsgTm9vcFRyYWNlLCBUcmFjZSB9IGZyb20gXCIuL3RyYWNlcy5tanNcIjtcbmV4cG9ydCB7IGdlbmVyYXRlR3JvdXBJZCwgZ2VuZXJhdGVTcGFuSWQsIGdlbmVyYXRlVHJhY2VJZCB9IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuLyoqXG4gKiBBZGQgYSBwcm9jZXNzb3IgdG8gdGhlIGxpc3Qgb2YgcHJvY2Vzc29ycy4gRWFjaCBwcm9jZXNzb3Igd2lsbCByZWNlaXZlIGFsbCB0cmFjZXMvc3BhbnMuXG4gKlxuICogQHBhcmFtIHByb2Nlc3NvciAtIFRoZSBwcm9jZXNzb3IgdG8gYWRkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkVHJhY2VQcm9jZXNzb3IocHJvY2Vzc29yKSB7XG4gICAgZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLnJlZ2lzdGVyUHJvY2Vzc29yKHByb2Nlc3Nvcik7XG59XG4vKipcbiAqIFNldCB0aGUgbGlzdCBvZiBwcm9jZXNzb3JzLiBUaGlzIHdpbGwgcmVwbGFjZSBhbnkgZXhpc3RpbmcgcHJvY2Vzc29ycy5cbiAqXG4gKiBAcGFyYW0gcHJvY2Vzc29ycyAtIFRoZSBsaXN0IG9mIHByb2Nlc3NvcnMgdG8gc2V0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VHJhY2VQcm9jZXNzb3JzKHByb2Nlc3NvcnMpIHtcbiAgICBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuc2V0UHJvY2Vzc29ycyhwcm9jZXNzb3JzKTtcbn1cbi8qKlxuICogU2V0IHRoZSBkaXNhYmxlZCBzdGF0ZSBvZiB0aGUgdHJhY2luZyBwcm92aWRlci5cbiAqXG4gKiBAcGFyYW0gZGlzYWJsZWQgLSBXaGV0aGVyIHRvIGRpc2FibGUgdHJhY2luZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFRyYWNpbmdEaXNhYmxlZChkaXNhYmxlZCkge1xuICAgIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5zZXREaXNhYmxlZChkaXNhYmxlZCk7XG59XG4vKipcbiAqIFN0YXJ0IHRoZSB0cmFjZSBleHBvcnQgbG9vcC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VHJhY2VFeHBvcnRMb29wKCkge1xuICAgIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5zdGFydEV4cG9ydExvb3AoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgeyBSdW50aW1lRXZlbnRFbWl0dGVyLCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbmV4cG9ydCBjbGFzcyBFdmVudEVtaXR0ZXJEZWxlZ2F0ZSB7XG4gICAgb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIub24odHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5ldmVudEVtaXR0ZXI7XG4gICAgfVxuICAgIG9mZih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vZmYodHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5ldmVudEVtaXR0ZXI7XG4gICAgfVxuICAgIGVtaXQodHlwZSwgLi4uYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCh0eXBlLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vbmNlKHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRFbWl0dGVyO1xuICAgIH1cbn1cbi8qKlxuICogRXZlbnQgZW1pdHRlciB0aGF0IGV2ZXJ5IEFnZW50IGluc3RhbmNlIGluaGVyaXRzIGZyb20gYW5kIHRoYXQgZW1pdHMgZXZlbnRzIGZvciB0aGUgbGlmZWN5Y2xlXG4gKiBvZiB0aGUgYWdlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBBZ2VudEhvb2tzIGV4dGVuZHMgRXZlbnRFbWl0dGVyRGVsZWdhdGUge1xuICAgIGV2ZW50RW1pdHRlciA9IG5ldyBSdW50aW1lRXZlbnRFbWl0dGVyKCk7XG59XG4vKipcbiAqIEV2ZW50IGVtaXR0ZXIgdGhhdCBldmVyeSBSdW5uZXIgaW5zdGFuY2UgaW5oZXJpdHMgZnJvbSBhbmQgdGhhdCBlbWl0cyBldmVudHMgZm9yIHRoZSBsaWZlY3ljbGVcbiAqIG9mIHRoZSBvdmVyYWxsIHJ1bi5cbiAqL1xuZXhwb3J0IGNsYXNzIFJ1bkhvb2tzIGV4dGVuZHMgRXZlbnRFbWl0dGVyRGVsZWdhdGUge1xuICAgIGV2ZW50RW1pdHRlciA9IG5ldyBSdW50aW1lRXZlbnRFbWl0dGVyKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZlY3ljbGUubWpzLm1hcCIsImltcG9ydCB7IGxvYWRFbnYgfSBmcm9tIFwiLi9jb25maWcubWpzXCI7XG5leHBvcnQgY29uc3QgT1BFTkFJX0RFRkFVTFRfTU9ERUxfRU5WX1ZBUklBQkxFX05BTUUgPSAnT1BFTkFJX0RFRkFVTFRfTU9ERUwnO1xuLyoqXG4gKiBSZXR1cm5zIFRydWUgaWYgdGhlIG1vZGVsIG5hbWUgaXMgYSBHUFQtNSBtb2RlbCBhbmQgcmVhc29uaW5nIHNldHRpbmdzIGFyZSByZXF1aXJlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdwdDVSZWFzb25pbmdTZXR0aW5nc1JlcXVpcmVkKG1vZGVsTmFtZSkge1xuICAgIGlmIChtb2RlbE5hbWUuc3RhcnRzV2l0aCgnZ3B0LTUtY2hhdCcpKSB7XG4gICAgICAgIC8vIGdwdC01LWNoYXQtbGF0ZXN0IGRvZXMgbm90IHJlcXVpcmUgcmVhc29uaW5nIHNldHRpbmdzXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gbWF0Y2hlcyBhbnkgb2YgZ3B0LTUgbW9kZWxzXG4gICAgcmV0dXJuIG1vZGVsTmFtZS5zdGFydHNXaXRoKCdncHQtNScpO1xufVxuLyoqXG4gKiBSZXR1cm5zIFRydWUgaWYgdGhlIGRlZmF1bHQgbW9kZWwgaXMgYSBHUFQtNSBtb2RlbC5cbiAqIFRoaXMgaXMgdXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIGRlZmF1bHQgbW9kZWwgc2V0dGluZ3MgYXJlIGNvbXBhdGlibGUgd2l0aCBHUFQtNSBtb2RlbHMuXG4gKiBJZiB0aGUgZGVmYXVsdCBtb2RlbCBpcyBub3QgYSBHUFQtNSBtb2RlbCwgdGhlIG1vZGVsIHNldHRpbmdzIGFyZSBjb21wYXRpYmxlIHdpdGggb3RoZXIgbW9kZWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNHcHQ1RGVmYXVsdCgpIHtcbiAgICByZXR1cm4gZ3B0NVJlYXNvbmluZ1NldHRpbmdzUmVxdWlyZWQoZ2V0RGVmYXVsdE1vZGVsKCkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IG1vZGVsIG5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0TW9kZWwoKSB7XG4gICAgY29uc3QgZW52ID0gbG9hZEVudigpO1xuICAgIHJldHVybiAoZW52W09QRU5BSV9ERUZBVUxUX01PREVMX0VOVl9WQVJJQUJMRV9OQU1FXT8udG9Mb3dlckNhc2UoKSA/PyAnZ3B0LTQuMScpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IG1vZGVsIHNldHRpbmdzLlxuICogSWYgdGhlIGRlZmF1bHQgbW9kZWwgaXMgYSBHUFQtNSBtb2RlbCwgcmV0dXJucyB0aGUgR1BULTUgZGVmYXVsdCBtb2RlbCBzZXR0aW5ncy5cbiAqIE90aGVyd2lzZSwgcmV0dXJucyB0aGUgbGVnYWN5IGRlZmF1bHQgbW9kZWwgc2V0dGluZ3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0TW9kZWxTZXR0aW5ncyhtb2RlbCkge1xuICAgIGNvbnN0IF9tb2RlbCA9IG1vZGVsID8/IGdldERlZmF1bHRNb2RlbCgpO1xuICAgIGlmIChncHQ1UmVhc29uaW5nU2V0dGluZ3NSZXF1aXJlZChfbW9kZWwpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBXZSBjaG9zZSBcImxvd1wiIGluc3RlYWQgb2YgXCJtaW5pbWFsXCIgYmVjYXVzZSBzb21lIG9mIHRoZSBidWlsdC1pbiB0b29sc1xuICAgICAgICAgICAgLy8gKGUuZy4sIGZpbGUgc2VhcmNoLCBpbWFnZSBnZW5lcmF0aW9uLCBldGMuKSBkbyBub3Qgc3VwcG9ydCBcIm1pbmltYWxcIlxuICAgICAgICAgICAgLy8gSWYgeW91IHdhbnQgdG8gdXNlIFwibWluaW1hbFwiIHJlYXNvbmluZyBlZmZvcnQsIHlvdSBjYW4gcGFzcyB5b3VyIG93biBtb2RlbCBzZXR0aW5nc1xuICAgICAgICAgICAgcmVhc29uaW5nOiB7IGVmZm9ydDogJ2xvdycgfSxcbiAgICAgICAgICAgIHRleHQ6IHsgdmVyYm9zaXR5OiAnbG93JyB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge307XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0TW9kZWwubWpzLm1hcCIsImltcG9ydCB7IE1vZGVsQmVoYXZpb3JFcnJvciwgVXNlckVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLm1qc1wiO1xuaW1wb3J0IHsgdG9GdW5jdGlvblRvb2xOYW1lIH0gZnJvbSBcIi4vdXRpbHMvdG9vbHMubWpzXCI7XG5pbXBvcnQgeyBnZXRTY2hlbWFBbmRQYXJzZXJGcm9tSW5wdXRUeXBlIH0gZnJvbSBcIi4vdXRpbHMvdG9vbHMubWpzXCI7XG5pbXBvcnQgeyBhZGRFcnJvclRvQ3VycmVudFNwYW4gfSBmcm9tIFwiLi90cmFjaW5nL2NvbnRleHQubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbi8qKlxuICogR2VuZXJhdGVzIHRoZSBtZXNzYWdlIHRoYXQgd2lsbCBiZSBnaXZlbiBhcyB0b29sIG91dHB1dCB0byB0aGUgbW9kZWwgdGhhdCByZXF1ZXN0ZWQgdGhlIGhhbmRvZmYuXG4gKlxuICogQHBhcmFtIGFnZW50IFRoZSBhZ2VudCB0byB0cmFuc2ZlciB0b1xuICogQHJldHVybnMgVGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIGdpdmVuIGFzIHRvb2wgb3V0cHV0IHRvIHRoZSBtb2RlbCB0aGF0IHJlcXVlc3RlZCB0aGUgaGFuZG9mZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNmZXJNZXNzYWdlKGFnZW50KSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgYXNzaXN0YW50OiBhZ2VudC5uYW1lIH0pO1xufVxuLyoqXG4gKiBUaGUgZGVmYXVsdCBuYW1lIG9mIHRoZSB0b29sIHRoYXQgcmVwcmVzZW50cyB0aGUgaGFuZG9mZi5cbiAqXG4gKiBAcGFyYW0gYWdlbnQgVGhlIGFnZW50IHRvIHRyYW5zZmVyIHRvXG4gKiBAcmV0dXJucyBUaGUgbmFtZSBvZiB0aGUgdG9vbCB0aGF0IHJlcHJlc2VudHMgdGhlIGhhbmRvZmZcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdEhhbmRvZmZUb29sTmFtZShhZ2VudCkge1xuICAgIHJldHVybiBgdHJhbnNmZXJfdG9fJHt0b0Z1bmN0aW9uVG9vbE5hbWUoYWdlbnQubmFtZSl9YDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgdG9vbCB0aGF0IHJlcHJlc2VudHMgdGhlIGhhbmRvZmYuXG4gKlxuICogQHBhcmFtIGFnZW50IFRoZSBhZ2VudCB0byB0cmFuc2ZlciB0b1xuICogQHJldHVybnMgVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0b29sIHRoYXQgcmVwcmVzZW50cyB0aGUgaGFuZG9mZlxuICovXG5mdW5jdGlvbiBkZWZhdWx0SGFuZG9mZlRvb2xEZXNjcmlwdGlvbihhZ2VudCkge1xuICAgIHJldHVybiBgSGFuZG9mZiB0byB0aGUgJHthZ2VudC5uYW1lfSBhZ2VudCB0byBoYW5kbGUgdGhlIHJlcXVlc3QuICR7YWdlbnQuaGFuZG9mZkRlc2NyaXB0aW9uID8/ICcnfWA7XG59XG5leHBvcnQgY2xhc3MgSGFuZG9mZiB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHRvb2wgdGhhdCByZXByZXNlbnRzIHRoZSBoYW5kb2ZmLlxuICAgICAqL1xuICAgIHRvb2xOYW1lO1xuICAgIC8qKlxuICAgICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgdG9vbCB0aGF0IHJlcHJlc2VudHMgdGhlIGhhbmRvZmYuXG4gICAgICovXG4gICAgdG9vbERlc2NyaXB0aW9uO1xuICAgIC8qKlxuICAgICAqIFRoZSBKU09OIHNjaGVtYSBmb3IgdGhlIGhhbmRvZmYgaW5wdXQuIENhbiBiZSBlbXB0eSBpZiB0aGUgaGFuZG9mZiBkb2VzIG5vdCB0YWtlIGFuIGlucHV0XG4gICAgICovXG4gICAgaW5wdXRKc29uU2NoZW1hID0ge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgIHJlcXVpcmVkOiBbXSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgIH07XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgaW5wdXQgSlNPTiBzY2hlbWEgaXMgaW4gc3RyaWN0IG1vZGUuIFdlICoqc3Ryb25nbHkqKiByZWNvbW1lbmQgc2V0dGluZyB0aGlzIHRvXG4gICAgICogdHJ1ZSwgYXMgaXQgaW5jcmVhc2VzIHRoZSBsaWtlbGlob29kIG9mIGNvcnJlY3QgSlNPTiBpbnB1dC5cbiAgICAgKi9cbiAgICBzdHJpY3RKc29uU2NoZW1hID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBoYW5kb2ZmLiBUaGUgcGFyYW1ldGVycyBwYXNzZWQgYXJlOlxuICAgICAqIDEuIFRoZSBoYW5kb2ZmIHJ1biBjb250ZXh0XG4gICAgICogMi4gVGhlIGFyZ3VtZW50cyBmcm9tIHRoZSBMTE0sIGFzIGEgSlNPTiBzdHJpbmcuIEVtcHR5IHN0cmluZyBpZiBpbnB1dEpzb25TY2hlbWEgaXMgZW1wdHkuXG4gICAgICpcbiAgICAgKiBNdXN0IHJldHVybiBhbiBhZ2VudFxuICAgICAqL1xuICAgIG9uSW52b2tlSGFuZG9mZjtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgYWdlbnQgdGhhdCBpcyBiZWluZyBoYW5kZWQgb2ZmIHRvLlxuICAgICAqL1xuICAgIGFnZW50TmFtZTtcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgZmlsdGVycyB0aGUgaW5wdXRzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgbmV4dCBhZ2VudC4gQnkgZGVmYXVsdCwgdGhlIG5ldyBhZ2VudFxuICAgICAqIHNlZXMgdGhlIGVudGlyZSBjb252ZXJzYXRpb24gaGlzdG9yeS4gSW4gc29tZSBjYXNlcywgeW91IG1heSB3YW50IHRvIGZpbHRlciBpbnB1dHMgZS5nLiB0b1xuICAgICAqIHJlbW92ZSBvbGRlciBpbnB1dHMsIG9yIHJlbW92ZSB0b29scyBmcm9tIGV4aXN0aW5nIGlucHV0cy5cbiAgICAgKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgdGhlIGVudGlyZSBjb252ZXJzYXRpb24gaGlzc3Rvcnkgc28gZmFyLCBpbmNsdWRpbmcgdGhlIGlucHV0IGl0ZW1cbiAgICAgKiB0aGF0IHRyaWdnZXJlZCB0aGUgaGFuZG9mZiBhbmQgYSB0b29sIGNhbGwgb3V0cHV0IGl0ZW0gcmVwcmVzZW50aW5nIHRoZSBoYW5kb2ZmIHRvb2wncyBvdXRwdXQuXG4gICAgICpcbiAgICAgKiBZb3UgYXJlIGZyZWUgdG8gbW9kaWZ5IHRoZSBpbnB1dCBoaXN0b3J5IG9yIG5ldyBpdGVtcyBhcyB5b3Ugc2VlIGZpdC4gVGhlIG5leHQgYWdlbnQgdGhhdCBydW5zXG4gICAgICogd2lsbCByZWNlaXZlIGBoYW5kb2ZmSW5wdXREYXRhLmFsbEl0ZW1zXG4gICAgICovXG4gICAgaW5wdXRGaWx0ZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGFnZW50IHRoYXQgaXMgYmVpbmcgaGFuZGVkIG9mZiB0by5cbiAgICAgKi9cbiAgICBhZ2VudDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG9vbCBkZWZpbml0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW52b2tlIHRoZSBoYW5kb2ZmLlxuICAgICAqL1xuICAgIGdldEhhbmRvZmZBc0Z1bmN0aW9uVG9vbCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgICAgICBuYW1lOiB0aGlzLnRvb2xOYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRoaXMudG9vbERlc2NyaXB0aW9uLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogdGhpcy5pbnB1dEpzb25TY2hlbWEsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuc3RyaWN0SnNvblNjaGVtYSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaXNFbmFibGVkID0gYXN5bmMgKCkgPT4gdHJ1ZTtcbiAgICBjb25zdHJ1Y3RvcihhZ2VudCwgb25JbnZva2VIYW5kb2ZmKSB7XG4gICAgICAgIHRoaXMuYWdlbnROYW1lID0gYWdlbnQubmFtZTtcbiAgICAgICAgdGhpcy5vbkludm9rZUhhbmRvZmYgPSBvbkludm9rZUhhbmRvZmY7XG4gICAgICAgIHRoaXMudG9vbE5hbWUgPSBkZWZhdWx0SGFuZG9mZlRvb2xOYW1lKGFnZW50KTtcbiAgICAgICAgdGhpcy50b29sRGVzY3JpcHRpb24gPSBkZWZhdWx0SGFuZG9mZlRvb2xEZXNjcmlwdGlvbihhZ2VudCk7XG4gICAgICAgIHRoaXMuYWdlbnQgPSBhZ2VudDtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoYW5kb2ZmIGZyb20gYW4gYWdlbnQuIEhhbmRvZmZzIGFyZSBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgd2hlbiB5b3UgcGFzcyBhbiBhZ2VudFxuICogaW50byB0aGUgYGhhbmRvZmZzYCBvcHRpb24gb2YgdGhlIGBBZ2VudGAgY29uc3RydWN0b3IuIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoaXMgZnVuY3Rpb25cbiAqIHRvIGNyZWF0ZSBhIGhhbmRvZmYgbWFudWFsbHksIGdpdmluZyB5b3UgbW9yZSBjb250cm9sIG92ZXIgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgVENvbnRleHQgVGhlIGNvbnRleHQgb2YgdGhlIGhhbmRvZmZcbiAqIEB0ZW1wbGF0ZSBUT3V0cHV0IFRoZSBvdXRwdXQgdHlwZSBvZiB0aGUgaGFuZG9mZlxuICogQHRlbXBsYXRlIFRJbnB1dFR5cGUgVGhlIGlucHV0IHR5cGUgb2YgdGhlIGhhbmRvZmZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRvZmYoYWdlbnQsIGNvbmZpZyA9IHt9KSB7XG4gICAgbGV0IHBhcnNlciA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBoYXNPbkhhbmRvZmYgPSAhIWNvbmZpZy5vbkhhbmRvZmY7XG4gICAgY29uc3QgaGFzSW5wdXRUeXBlID0gISFjb25maWcuaW5wdXRUeXBlO1xuICAgIGNvbnN0IGhhc0JvdGhPck5laXRoZXJIYW5kb2ZmQW5kSW5wdXRUeXBlID0gaGFzT25IYW5kb2ZmID09PSBoYXNJbnB1dFR5cGU7XG4gICAgaWYgKCFoYXNCb3RoT3JOZWl0aGVySGFuZG9mZkFuZElucHV0VHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGVpdGhlciBib3RoIGBvbkhhbmRvZmZgIGFuZCBgaW5wdXRUeXBlYCBvciBuZWl0aGVyLicpO1xuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiBvbkludm9rZUhhbmRvZmYoY29udGV4dCwgaW5wdXRKc29uU3RyaW5nKSB7XG4gICAgICAgIGlmIChwYXJzZXIpIHtcbiAgICAgICAgICAgIGlmICghaW5wdXRKc29uU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgYWRkRXJyb3JUb0N1cnJlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEhhbmRvZmYgZnVuY3Rpb24gZXhwZWN0ZWQgbm9uIGVtcHR5IGlucHV0IGJ1dCBnb3Q6ICR7aW5wdXRKc29uU3RyaW5nfWAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBpbnB1dCBpcyBlbXB0eWAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcignSGFuZG9mZiBmdW5jdGlvbiBleHBlY3RlZCBub24gZW1wdHkgaW5wdXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gdmVyaWZ5IHRoYXQgaXQncyB2YWxpZCBpbnB1dCBidXQgd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gYXdhaXQgcGFyc2VyKGlucHV0SnNvblN0cmluZyk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5vbkhhbmRvZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29uZmlnLm9uSGFuZG9mZihjb250ZXh0LCBwYXJzZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGFkZEVycm9yVG9DdXJyZW50U3Bhbih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIEpTT04gcHJvdmlkZWRgLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWxvZ2dlci5kb250TG9nVG9vbERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBJbnZhbGlkIEpTT04gd2hlbiBwYXJzaW5nOiAke2lucHV0SnNvblN0cmluZ30uIEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdJbnZhbGlkIEpTT04gcHJvdmlkZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IGNvbmZpZy5vbkhhbmRvZmY/Lihjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWdlbnQ7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRvZmYgPSBuZXcgSGFuZG9mZihhZ2VudCwgb25JbnZva2VIYW5kb2ZmKTtcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5pc0VuYWJsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgcHJlZGljYXRlID0gY29uZmlnLmlzRW5hYmxlZDtcbiAgICAgICAgaGFuZG9mZi5pc0VuYWJsZWQgPSBhc3luYyAoeyBydW5Db250ZXh0LCBhZ2VudCB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmVkaWNhdGUoeyBydW5Db250ZXh0LCBhZ2VudCB9KTtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjb25maWcuaXNFbmFibGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgaGFuZG9mZi5pc0VuYWJsZWQgPSBhc3luYyAoKSA9PiBjb25maWcuaXNFbmFibGVkO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLmlucHV0VHlwZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBnZXRTY2hlbWFBbmRQYXJzZXJGcm9tSW5wdXRUeXBlKGNvbmZpZy5pbnB1dFR5cGUsIGhhbmRvZmYudG9vbE5hbWUpO1xuICAgICAgICBoYW5kb2ZmLmlucHV0SnNvblNjaGVtYSA9IHJlc3VsdC5zY2hlbWE7XG4gICAgICAgIGhhbmRvZmYuc3RyaWN0SnNvblNjaGVtYSA9IHRydWU7XG4gICAgICAgIHBhcnNlciA9IHJlc3VsdC5wYXJzZXI7XG4gICAgfVxuICAgIGlmIChjb25maWcudG9vbE5hbWVPdmVycmlkZSkge1xuICAgICAgICBoYW5kb2ZmLnRvb2xOYW1lID0gY29uZmlnLnRvb2xOYW1lT3ZlcnJpZGU7XG4gICAgfVxuICAgIGlmIChjb25maWcudG9vbERlc2NyaXB0aW9uT3ZlcnJpZGUpIHtcbiAgICAgICAgaGFuZG9mZi50b29sRGVzY3JpcHRpb24gPSBjb25maWcudG9vbERlc2NyaXB0aW9uT3ZlcnJpZGU7XG4gICAgfVxuICAgIGlmIChjb25maWcuaW5wdXRGaWx0ZXIpIHtcbiAgICAgICAgaGFuZG9mZi5pbnB1dEZpbHRlciA9IGNvbmZpZy5pbnB1dEZpbHRlcjtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRvZmY7XG59XG4vKipcbiAqIFJldHVybnMgYSBoYW5kb2ZmIGZvciB0aGUgZ2l2ZW4gYWdlbnQuIElmIHRoZSBhZ2VudCBpcyBhbHJlYWR5IHdyYXBwZWQgaW50byBhIGhhbmRvZmYsXG4gKiBpdCB3aWxsIGJlIHJldHVybmVkIGFzIGlzLiBPdGhlcndpc2UsIGEgbmV3IGhhbmRvZmYgaW5zdGFuY2Ugd2lsbCBiZSBjcmVhdGVkLlxuICpcbiAqIEB0ZW1wbGF0ZSBUQ29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgaGFuZG9mZlxuICogQHRlbXBsYXRlIFRPdXRwdXQgVGhlIG91dHB1dCB0eXBlIG9mIHRoZSBoYW5kb2ZmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIYW5kb2ZmKGFnZW50KSB7XG4gICAgaWYgKGFnZW50IGluc3RhbmNlb2YgSGFuZG9mZikge1xuICAgICAgICByZXR1cm4gYWdlbnQ7XG4gICAgfVxuICAgIHJldHVybiBoYW5kb2ZmKGFnZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRvZmYubWpzLm1hcCIsIi8qKlxuICogRGVmaW5lcyBhbiBpbnB1dCBndWFyZHJhaWwgZGVmaW5pdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUlucHV0R3VhcmRyYWlsKHsgbmFtZSwgZXhlY3V0ZSwgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGd1YXJkcmFpbEZ1bmN0aW9uOiBleGVjdXRlLFxuICAgICAgICBhc3luYyBydW4oYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBndWFyZHJhaWw6IHsgdHlwZTogJ2lucHV0JywgbmFtZSB9LFxuICAgICAgICAgICAgICAgIG91dHB1dDogYXdhaXQgZXhlY3V0ZShhcmdzKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBvdXRwdXQgZ3VhcmRyYWlsIGRlZmluaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVPdXRwdXRHdWFyZHJhaWwoeyBuYW1lLCBleGVjdXRlLCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ291dHB1dCcsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGd1YXJkcmFpbEZ1bmN0aW9uOiBleGVjdXRlLFxuICAgICAgICBhc3luYyBydW4oYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBndWFyZHJhaWw6IHsgdHlwZTogJ291dHB1dCcsIG5hbWUgfSxcbiAgICAgICAgICAgICAgICBhZ2VudDogYXJncy5hZ2VudCxcbiAgICAgICAgICAgICAgICBhZ2VudE91dHB1dDogYXJncy5hZ2VudE91dHB1dCxcbiAgICAgICAgICAgICAgICBvdXRwdXQ6IGF3YWl0IGV4ZWN1dGUoYXJncyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ndWFyZHJhaWwubWpzLm1hcCIsImxldCBERUZBVUxUX1BST1ZJREVSO1xuLyoqXG4gKiBTZXQgdGhlIG1vZGVsIHByb3ZpZGVyIHVzZWQgd2hlbiBubyBleHBsaWNpdCBwcm92aWRlciBpcyBzdXBwbGllZC5cbiAqXG4gKiBAcGFyYW0gcHJvdmlkZXIgLSBUaGUgcHJvdmlkZXIgdG8gdXNlIGJ5IGRlZmF1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0TW9kZWxQcm92aWRlcihwcm92aWRlcikge1xuICAgIERFRkFVTFRfUFJPVklERVIgPSBwcm92aWRlcjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZGVmYXVsdCBtb2RlbCBwcm92aWRlci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgZGVmYXVsdCBtb2RlbCBwcm92aWRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRNb2RlbFByb3ZpZGVyKCkge1xuICAgIGlmICh0eXBlb2YgREVGQVVMVF9QUk9WSURFUiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkZWZhdWx0IG1vZGVsIHByb3ZpZGVyIHNldC4gTWFrZSBzdXJlIHRvIHNldCBhIHByb3ZpZGVyIHVzaW5nIHNldERlZmF1bHRNb2RlbFByb3ZpZGVyIGJlZm9yZSBjYWxsaW5nIGdldERlZmF1bHRNb2RlbFByb3ZpZGVyIG9yIHBhc3MgYW4gZXhwbGljaXQgcHJvdmlkZXIuJyk7XG4gICAgfVxuICAgIHJldHVybiBERUZBVUxUX1BST1ZJREVSO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXJzLm1qcy5tYXAiLCJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFNoYXJlZCBiYXNlIHR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKipcbiAqIEV2ZXJ5IGl0ZW0gaW4gdGhlIHByb3RvY29sIHByb3ZpZGVzIGEgYHByb3ZpZGVyRGF0YWAgZmllbGQgdG8gYWNjb21tb2RhdGUgY3VzdG9tIGZ1bmN0aW9uYWxpdHlcbiAqIG9yIG5ldyBmaWVsZHNcbiAqL1xuZXhwb3J0IGNvbnN0IFNoYXJlZEJhc2UgPSB6Lm9iamVjdCh7XG4gICAgLyoqXG4gICAgICogQWRkaXRpb25hbCBvcHRpb25hbCBwcm92aWRlciBzcGVjaWZpYyBkYXRhLiBVc2VkIGZvciBjdXN0b20gZnVuY3Rpb25hbGl0eSBvciBtb2RlbCBwcm92aWRlclxuICAgICAqIHNwZWNpZmljIGZpZWxkcy5cbiAgICAgKi9cbiAgICBwcm92aWRlckRhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLm9wdGlvbmFsKCksXG59KTtcbi8qKlxuICogRXZlcnkgaXRlbSBoYXMgYSBzaGFyZWQgb2Ygc2hhcmVkIGl0ZW0gZGF0YSBpbmNsdWRpbmcgYW4gb3B0aW9uYWwgSUQuXG4gKi9cbmV4cG9ydCBjb25zdCBJdGVtQmFzZSA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBBbiBJRCB0byBpZGVudGlmeSB0aGUgaXRlbS4gVGhpcyBpcyBvcHRpb25hbCBieSBkZWZhdWx0LiBJZiBhIG1vZGVsIHByb3ZpZGVyIGFic29sdXRlbHlcbiAgICAgKiByZXF1aXJlcyB0aGlzIGZpZWxkLCBpdCB3aWxsIGJlIHZhbGlkYXRlZCBvbiB0aGUgbW9kZWwgbGV2ZWwuXG4gICAgICovXG4gICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ29udGVudCB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IFJlZnVzYWwgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZWZ1c2FsJyksXG4gICAgLyoqXG4gICAgICogVGhlIHJlZnVzYWwgZXhwbGFuYXRpb24gZnJvbSB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgcmVmdXNhbDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IE91dHB1dFRleHQgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXRfdGV4dCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICB0ZXh0OiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgSW5wdXRUZXh0ID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfdGV4dCcpLFxuICAgIC8qKlxuICAgICAqIEEgdGV4dCBpbnB1dCBmb3IgZXhhbXBsZSBhIG1lc3NhZ2UgZnJvbSBhIHVzZXJcbiAgICAgKi9cbiAgICB0ZXh0OiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgUmVhc29uaW5nVGV4dCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3JlYXNvbmluZ190ZXh0JyksXG4gICAgLyoqXG4gICAgICogQSB0ZXh0IGlucHV0IGZvciBleGFtcGxlIGEgbWVzc2FnZSBmcm9tIGEgdXNlclxuICAgICAqL1xuICAgIHRleHQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBJbnB1dEltYWdlID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfaW1hZ2UnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2UgaW5wdXQgdG8gdGhlIG1vZGVsLiBDb3VsZCBiZSBhIFVSTCwgYmFzZTY0IG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC5cbiAgICAgKi9cbiAgICBpbWFnZTogelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLm9yKHoub2JqZWN0KHtcbiAgICAgICAgaWQ6IHouc3RyaW5nKCksXG4gICAgfSkpXG4gICAgICAgIC5kZXNjcmliZSgnQ291bGQgYmUgYSBVUkwsIGJhc2U2NCBvciBhbiBvYmplY3Qgd2l0aCBhIGZpbGUgSUQuJyksXG59KTtcbmV4cG9ydCBjb25zdCBJbnB1dEZpbGUgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9maWxlJyksXG4gICAgLyoqXG4gICAgICogVGhlIGZpbGUgaW5wdXQgdG8gdGhlIG1vZGVsLiBDb3VsZCBiZSBhIFVSTCwgYmFzZTY0IG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC5cbiAgICAgKi9cbiAgICBmaWxlOiB6XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAuZGVzY3JpYmUoJ0VpdGhlciBiYXNlNjQgZW5jb2RlZCBmaWxlIGRhdGEgb3IgYSBwdWJsaWNseSBhY2Nlc3NpYmxlIGZpbGUgVVJMJylcbiAgICAgICAgLm9yKHoub2JqZWN0KHtcbiAgICAgICAgaWQ6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ09wZW5BSSBmaWxlIElEJyksXG4gICAgfSkpXG4gICAgICAgIC5vcih6Lm9iamVjdCh7XG4gICAgICAgIHVybDogei5zdHJpbmcoKS5kZXNjcmliZSgnUHVibGljbHkgYWNjZXNzaWJsZSBQREYgZmlsZSBVUkwnKSxcbiAgICB9KSlcbiAgICAgICAgLmRlc2NyaWJlKCdDb250ZW50cyBvZiB0aGUgZmlsZSBvciBhbiBvYmplY3Qgd2l0aCBhIGZpbGUgSUQuJyksXG59KTtcbmV4cG9ydCBjb25zdCBBdWRpb0NvbnRlbnQgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdhdWRpbycpLFxuICAgIC8qKlxuICAgICAqIFRoZSBhdWRpbyBpbnB1dCB0byB0aGUgbW9kZWwuIENvdWxkIGJlIGJhc2U2NCBlbmNvZGVkIGF1ZGlvIGRhdGEgb3IgYW4gb2JqZWN0IHdpdGggYSBmaWxlIElELlxuICAgICAqL1xuICAgIGF1ZGlvOiB6XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAub3Ioei5vYmplY3Qoe1xuICAgICAgICBpZDogei5zdHJpbmcoKSxcbiAgICB9KSlcbiAgICAgICAgLmRlc2NyaWJlKCdCYXNlNjQgZW5jb2RlZCBhdWRpbyBkYXRhIG9yIGZpbGUgaWQnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgZm9ybWF0IG9mIHRoZSBhdWRpby5cbiAgICAgKi9cbiAgICBmb3JtYXQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc2NyaXB0IG9mIHRoZSBhdWRpby5cbiAgICAgKi9cbiAgICB0cmFuc2NyaXB0OiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IEltYWdlQ29udGVudCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2ltYWdlJyksXG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIGlucHV0IHRvIHRoZSBtb2RlbC4gQ291bGQgYmUgYmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YSBvciBhbiBvYmplY3Qgd2l0aCBhIGZpbGUgSUQuXG4gICAgICovXG4gICAgaW1hZ2U6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ0Jhc2U2NCBlbmNvZGVkIGltYWdlIGRhdGEnKSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvb2xPdXRwdXRUZXh0ID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgndGV4dCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICB0ZXh0OiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgVG9vbE91dHB1dEltYWdlID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW1hZ2UnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2UgZGF0YS4gQ291bGQgYmUgYmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YSBvciBhbiBvYmplY3Qgd2l0aCBhIGZpbGUgSUQuXG4gICAgICovXG4gICAgZGF0YTogei5zdHJpbmcoKS5kZXNjcmliZSgnQmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YScpLFxuICAgIC8qKlxuICAgICAqIFRoZSBtZWRpYSB0eXBlIG9mIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICBtZWRpYVR5cGU6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ0lBTkEgbWVkaWEgdHlwZSBvZiB0aGUgaW1hZ2UnKSxcbn0pO1xuZXhwb3J0IGNvbnN0IENvbXB1dGVyVG9vbE91dHB1dCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbXB1dGVyX3NjcmVlbnNob3QnKSxcbiAgICAvKipcbiAgICAgKiBBIGJhc2U2NCBlbmNvZGVkIGltYWdlIGRhdGEgb3IgYSBVUkwgcmVwcmVzZW50aW5nIHRoZSBzY3JlZW5zaG90LlxuICAgICAqL1xuICAgIGRhdGE6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ0Jhc2U2NCBlbmNvZGVkIGltYWdlIGRhdGEgb3IgVVJMJyksXG59KTtcbmV4cG9ydCBjb25zdCBjb21wdXRlckFjdGlvbnMgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICB6Lm9iamVjdCh7IHR5cGU6IHoubGl0ZXJhbCgnc2NyZWVuc2hvdCcpIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdjbGljaycpLFxuICAgICAgICB4OiB6Lm51bWJlcigpLFxuICAgICAgICB5OiB6Lm51bWJlcigpLFxuICAgICAgICBidXR0b246IHouZW51bShbJ2xlZnQnLCAncmlnaHQnLCAnd2hlZWwnLCAnYmFjaycsICdmb3J3YXJkJ10pLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdkb3VibGVfY2xpY2snKSxcbiAgICAgICAgeDogei5udW1iZXIoKSxcbiAgICAgICAgeTogei5udW1iZXIoKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnc2Nyb2xsJyksXG4gICAgICAgIHg6IHoubnVtYmVyKCksXG4gICAgICAgIHk6IHoubnVtYmVyKCksXG4gICAgICAgIHNjcm9sbF94OiB6Lm51bWJlcigpLFxuICAgICAgICBzY3JvbGxfeTogei5udW1iZXIoKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgndHlwZScpLFxuICAgICAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHsgdHlwZTogei5saXRlcmFsKCd3YWl0JykgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ21vdmUnKSxcbiAgICAgICAgeDogei5udW1iZXIoKSxcbiAgICAgICAgeTogei5udW1iZXIoKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgna2V5cHJlc3MnKSxcbiAgICAgICAga2V5czogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnZHJhZycpLFxuICAgICAgICBwYXRoOiB6LmFycmF5KHoub2JqZWN0KHsgeDogei5udW1iZXIoKSwgeTogei5udW1iZXIoKSB9KSksXG4gICAgfSksXG5dKTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE1lc3NhZ2UgdHlwZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBjb25zdCBBc3Npc3RhbnRDb250ZW50ID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgT3V0cHV0VGV4dCxcbiAgICBSZWZ1c2FsLFxuICAgIEF1ZGlvQ29udGVudCxcbiAgICBJbWFnZUNvbnRlbnQsXG5dKTtcbmNvbnN0IE1lc3NhZ2VCYXNlID0gSXRlbUJhc2UuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBBbnkgaXRlbSB3aXRob3V0IGEgdHlwZSBpcyB0cmVhdGVkIGFzIGEgbWVzc2FnZVxuICAgICAqL1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnbWVzc2FnZScpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBBc3Npc3RhbnRNZXNzYWdlSXRlbSA9IE1lc3NhZ2VCYXNlLmV4dGVuZCh7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50aW5nIGEgbWVzc2FnZSBmcm9tIHRoZSBhc3Npc3RhbnQgKGkuZS4gdGhlIG1vZGVsKVxuICAgICAqL1xuICAgIHJvbGU6IHoubGl0ZXJhbCgnYXNzaXN0YW50JyksXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJ10pLFxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IHouYXJyYXkoQXNzaXN0YW50Q29udGVudCksXG59KTtcbmV4cG9ydCBjb25zdCBVc2VyQ29udGVudCA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIElucHV0VGV4dCxcbiAgICBJbnB1dEltYWdlLFxuICAgIElucHV0RmlsZSxcbiAgICBBdWRpb0NvbnRlbnQsXG5dKTtcbmV4cG9ydCBjb25zdCBVc2VyTWVzc2FnZUl0ZW0gPSBNZXNzYWdlQmFzZS5leHRlbmQoe1xuICAgIC8vIHR5cGU6IHoubGl0ZXJhbCgnbWVzc2FnZScpLFxuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudGluZyBhIG1lc3NhZ2UgZnJvbSB0aGUgdXNlclxuICAgICAqL1xuICAgIHJvbGU6IHoubGl0ZXJhbCgndXNlcicpLFxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IHouYXJyYXkoVXNlckNvbnRlbnQpLm9yKHouc3RyaW5nKCkpLFxufSk7XG5jb25zdCBTeXN0ZW1NZXNzYWdlSXRlbSA9IE1lc3NhZ2VCYXNlLmV4dGVuZCh7XG4gICAgLy8gdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJyksXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50aW5nIGEgc3lzdGVtIG1lc3NhZ2UgdG8gdGhlIHVzZXJcbiAgICAgKi9cbiAgICByb2xlOiB6LmxpdGVyYWwoJ3N5c3RlbScpLFxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBNZXNzYWdlSXRlbSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCdyb2xlJywgW1xuICAgIFN5c3RlbU1lc3NhZ2VJdGVtLFxuICAgIEFzc2lzdGFudE1lc3NhZ2VJdGVtLFxuICAgIFVzZXJNZXNzYWdlSXRlbSxcbl0pO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVG9vbCBjYWxsIHR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgY29uc3QgSG9zdGVkVG9vbENhbGxJdGVtID0gSXRlbUJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2hvc3RlZF90b29sX2NhbGwnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaG9zdGVkIHRvb2wuIEZvciBleGFtcGxlIGB3ZWJfc2VhcmNoX2NhbGxgIG9yIGBmaWxlX3NlYXJjaF9jYWxsYFxuICAgICAqL1xuICAgIG5hbWU6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ1RoZSBuYW1lIG9mIHRoZSBob3N0ZWQgdG9vbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBhcmd1bWVudHMgb2YgdGhlIGhvc3RlZCB0b29sIGNhbGwuXG4gICAgICovXG4gICAgYXJndW1lbnRzOiB6XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAuZGVzY3JpYmUoJ1RoZSBhcmd1bWVudHMgb2YgdGhlIGhvc3RlZCB0b29sIGNhbGwnKVxuICAgICAgICAub3B0aW9uYWwoKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSB0b29sIGNhbGwuXG4gICAgICovXG4gICAgc3RhdHVzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgLyoqXG4gICAgICogVGhlIHByaW1hcnkgb3V0cHV0IG9mIHRoZSB0b29sIGNhbGwuIEFkZGl0aW9uYWwgb3V0cHV0IG1pZ2h0IGJlIGluIHRoZSBgcHJvdmlkZXJEYXRhYCBmaWVsZC5cbiAgICAgKi9cbiAgICBvdXRwdXQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IEZ1bmN0aW9uQ2FsbEl0ZW0gPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnZnVuY3Rpb25fY2FsbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgdG9vbCBjYWxsLiBSZXF1aXJlZCB0byBtYXRjaCB1cCB0aGUgcmVzcGVjdGl2ZSB0b29sIGNhbGwgcmVzdWx0LlxuICAgICAqL1xuICAgIGNhbGxJZDogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSB0b29sIGNhbGwnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgbmFtZTogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uJyksXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cbiAgICAgKi9cbiAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJ10pLm9wdGlvbmFsKCksXG4gICAgLyoqXG4gICAgICogVGhlIGFyZ3VtZW50cyBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBGdW5jdGlvbkNhbGxSZXN1bHRJdGVtID0gSXRlbUJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2Z1bmN0aW9uX2NhbGxfcmVzdWx0JyksXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHRvb2wgdGhhdCB3YXMgY2FsbGVkXG4gICAgICovXG4gICAgbmFtZTogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIG5hbWUgb2YgdGhlIHRvb2wnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHRvb2wgY2FsbC4gUmVxdWlyZWQgdG8gbWF0Y2ggdXAgdGhlIHJlc3BlY3RpdmUgdG9vbCBjYWxsIHJlc3VsdC5cbiAgICAgKi9cbiAgICBjYWxsSWQ6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgdG9vbCBjYWxsJyksXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgdG9vbCBjYWxsLlxuICAgICAqL1xuICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJywgJ2luY29tcGxldGUnXSksXG4gICAgLyoqXG4gICAgICogVGhlIG91dHB1dCBvZiB0aGUgdG9vbCBjYWxsLlxuICAgICAqL1xuICAgIG91dHB1dDogei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbVG9vbE91dHB1dFRleHQsIFRvb2xPdXRwdXRJbWFnZV0pLFxufSk7XG5leHBvcnQgY29uc3QgQ29tcHV0ZXJVc2VDYWxsSXRlbSA9IEl0ZW1CYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb21wdXRlcl9jYWxsJyksXG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBjb21wdXRlciBjYWxsLiBSZXF1aXJlZCB0byBtYXRjaCB1cCB0aGUgcmVzcGVjdGl2ZSBjb21wdXRlciBjYWxsIHJlc3VsdC5cbiAgICAgKi9cbiAgICBjYWxsSWQ6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgY29tcHV0ZXIgY2FsbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBzdGF0dXMgb2YgdGhlIGNvbXB1dGVyIGNhbGwuXG4gICAgICovXG4gICAgc3RhdHVzOiB6LmVudW0oWydpbl9wcm9ncmVzcycsICdjb21wbGV0ZWQnLCAnaW5jb21wbGV0ZSddKSxcbiAgICAvKipcbiAgICAgKiBUaGUgYWN0aW9uIHRvIGJlIHBlcmZvcm1lZCBieSB0aGUgY29tcHV0ZXIuXG4gICAgICovXG4gICAgYWN0aW9uOiBjb21wdXRlckFjdGlvbnMsXG59KTtcbmV4cG9ydCBjb25zdCBDb21wdXRlckNhbGxSZXN1bHRJdGVtID0gSXRlbUJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbXB1dGVyX2NhbGxfcmVzdWx0JyksXG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBjb21wdXRlciBjYWxsLiBSZXF1aXJlZCB0byBtYXRjaCB1cCB0aGUgcmVzcGVjdGl2ZSBjb21wdXRlciBjYWxsIHJlc3VsdC5cbiAgICAgKi9cbiAgICBjYWxsSWQ6IHouc3RyaW5nKCkuZGVzY3JpYmUoJ1RoZSBJRCBvZiB0aGUgY29tcHV0ZXIgY2FsbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgb2YgdGhlIGNvbXB1dGVyIGNhbGwuXG4gICAgICovXG4gICAgb3V0cHV0OiBDb21wdXRlclRvb2xPdXRwdXQsXG59KTtcbmV4cG9ydCBjb25zdCBUb29sQ2FsbEl0ZW0gPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICBDb21wdXRlclVzZUNhbGxJdGVtLFxuICAgIEZ1bmN0aW9uQ2FsbEl0ZW0sXG4gICAgSG9zdGVkVG9vbENhbGxJdGVtLFxuXSk7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTcGVjaWFsIGl0ZW0gdHlwZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBjb25zdCBSZWFzb25pbmdJdGVtID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIGlkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgdHlwZTogei5saXRlcmFsKCdyZWFzb25pbmcnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgdXNlciBmYWNpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlYXNvbmluZy4gQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBtaWdodCBiZSBpbiB0aGUgYHByb3ZpZGVyRGF0YWAgZmllbGQuXG4gICAgICovXG4gICAgY29udGVudDogei5hcnJheShJbnB1dFRleHQpLFxuICAgIC8qKlxuICAgICAqIFRoZSByYXcgcmVhc29uaW5nIHRleHQgZnJvbSB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgcmF3Q29udGVudDogei5hcnJheShSZWFzb25pbmdUZXh0KS5vcHRpb25hbCgpLFxufSk7XG4vKipcbiAqIFRoaXMgaXMgYSBjYXRjaCBhbGwgZm9yIGl0ZW1zIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBwcm90b2NvbC5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYSBtb2RlbCBtaWdodCByZXR1cm4gYW4gaXRlbSB0aGF0IGlzIG5vdCBwYXJ0IG9mIHRoZSBwcm90b2NvbCB1c2luZyB0aGlzIHR5cGUuXG4gKlxuICogSW4gdGhhdCBjYXNlIGV2ZXJ5dGhpbmcgcmV0dXJuZWQgZnJvbSB0aGUgbW9kZWwgc2hvdWxkIGJlIHBhc3NlZCBpbiB0aGUgYHByb3ZpZGVyRGF0YWAgZmllbGQuXG4gKlxuICogVGhpcyBlbmFibGVzIG5ldyBmZWF0dXJlcyB0byBiZSBhZGRlZCB0byBiZSBhZGRlZCBieSBhIG1vZGVsIHByb3ZpZGVyIHdpdGhvdXQgYnJlYWtpbmcgdGhlIHByb3RvY29sLlxuICovXG5leHBvcnQgY29uc3QgVW5rbm93bkl0ZW0gPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgndW5rbm93bicpLFxufSk7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKb2luZWQgaXRlbSB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IE91dHB1dE1vZGVsSXRlbSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIEFzc2lzdGFudE1lc3NhZ2VJdGVtLFxuICAgIEhvc3RlZFRvb2xDYWxsSXRlbSxcbiAgICBGdW5jdGlvbkNhbGxJdGVtLFxuICAgIENvbXB1dGVyVXNlQ2FsbEl0ZW0sXG4gICAgUmVhc29uaW5nSXRlbSxcbiAgICBVbmtub3duSXRlbSxcbl0pO1xuZXhwb3J0IGNvbnN0IE1vZGVsSXRlbSA9IHoudW5pb24oW1xuICAgIFVzZXJNZXNzYWdlSXRlbSxcbiAgICBBc3Npc3RhbnRNZXNzYWdlSXRlbSxcbiAgICBTeXN0ZW1NZXNzYWdlSXRlbSxcbiAgICBIb3N0ZWRUb29sQ2FsbEl0ZW0sXG4gICAgRnVuY3Rpb25DYWxsSXRlbSxcbiAgICBDb21wdXRlclVzZUNhbGxJdGVtLFxuICAgIEZ1bmN0aW9uQ2FsbFJlc3VsdEl0ZW0sXG4gICAgQ29tcHV0ZXJDYWxsUmVzdWx0SXRlbSxcbiAgICBSZWFzb25pbmdJdGVtLFxuICAgIFVua25vd25JdGVtLFxuXSk7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBNZXRhIGRhdGEgdHlwZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBjb25zdCBVc2FnZURhdGEgPSB6Lm9iamVjdCh7XG4gICAgcmVxdWVzdHM6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICBpbnB1dFRva2Vuczogei5udW1iZXIoKSxcbiAgICBvdXRwdXRUb2tlbnM6IHoubnVtYmVyKCksXG4gICAgdG90YWxUb2tlbnM6IHoubnVtYmVyKCksXG4gICAgaW5wdXRUb2tlbnNEZXRhaWxzOiB6LnJlY29yZCh6LnN0cmluZygpLCB6Lm51bWJlcigpKS5vcHRpb25hbCgpLFxuICAgIG91dHB1dFRva2Vuc0RldGFpbHM6IHoucmVjb3JkKHouc3RyaW5nKCksIHoubnVtYmVyKCkpLm9wdGlvbmFsKCksXG59KTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0cmVhbSBldmVudCB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLyoqXG4gKiBFdmVudCByZXR1cm5lZCBieSB0aGUgbW9kZWwgd2hlbiBuZXcgb3V0cHV0IHRleHQgaXMgYXZhaWxhYmxlIHRvIHN0cmVhbSB0byB0aGUgdXNlci5cbiAqL1xuZXhwb3J0IGNvbnN0IFN0cmVhbUV2ZW50VGV4dFN0cmVhbSA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dF90ZXh0X2RlbHRhJyksXG4gICAgLyoqXG4gICAgICogVGhlIGRlbHRhIHRleHQgdGhhdCB3YXMgc3RyZWFtZWQgYnkgdGhlIG1vZGVsdG8gdGhlIHVzZXIuXG4gICAgICovXG4gICAgZGVsdGE6IHouc3RyaW5nKCksXG59KTtcbi8qKlxuICogRXZlbnQgcmV0dXJuZWQgYnkgdGhlIG1vZGVsIHdoZW4gYSBuZXcgcmVzcG9uc2UgaXMgc3RhcnRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IFN0cmVhbUV2ZW50UmVzcG9uc2VTdGFydGVkID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Vfc3RhcnRlZCcpLFxufSk7XG4vKipcbiAqIEV2ZW50IHJldHVybmVkIGJ5IHRoZSBtb2RlbCB3aGVuIGEgcmVzcG9uc2UgaXMgY29tcGxldGVkLlxuICovXG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnRSZXNwb25zZUNvbXBsZXRlZCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlX2RvbmUnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgcmVzcG9uc2U6IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBJRCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAqL1xuICAgICAgICBpZDogei5zdHJpbmcoKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB1c2FnZSBkYXRhIGZvciB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAqL1xuICAgICAgICB1c2FnZTogVXNhZ2VEYXRhLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIG91dHB1dDogei5hcnJheShPdXRwdXRNb2RlbEl0ZW0pLFxuICAgIH0pLFxufSk7XG4vKipcbiAqIEV2ZW50IHJldHVybmVkIGZvciBldmVyeSBpdGVtIHRoYXQgZ2V0cyBzdHJlYW1lZCB0byB0aGUgbW9kZWwuIFVzZWQgdG8gZXhwb3NlIHRoZSByYXcgZXZlbnRzXG4gKiBmcm9tIHRoZSBtb2RlbC5cbiAqL1xuZXhwb3J0IGNvbnN0IFN0cmVhbUV2ZW50R2VuZXJpY0l0ZW0gPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdtb2RlbCcpLFxuICAgIGV2ZW50OiB6LmFueSgpLmRlc2NyaWJlKCdUaGUgZXZlbnQgZnJvbSB0aGUgbW9kZWwnKSxcbn0pO1xuZXhwb3J0IGNvbnN0IFN0cmVhbUV2ZW50ID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgU3RyZWFtRXZlbnRUZXh0U3RyZWFtLFxuICAgIFN0cmVhbUV2ZW50UmVzcG9uc2VDb21wbGV0ZWQsXG4gICAgU3RyZWFtRXZlbnRSZXNwb25zZVN0YXJ0ZWQsXG4gICAgU3RyZWFtRXZlbnRHZW5lcmljSXRlbSxcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdG9jb2wubWpzLm1hcCIsImltcG9ydCB7IFVzYWdlRGF0YSB9IGZyb20gXCIuL3R5cGVzL3Byb3RvY29sLm1qc1wiO1xuLyoqXG4gKiBUcmFja3MgdG9rZW4gdXNhZ2UgYW5kIHJlcXVlc3QgY291bnRzIGZvciBhbiBhZ2VudCBydW4uXG4gKi9cbmV4cG9ydCBjbGFzcyBVc2FnZSB7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiByZXF1ZXN0cyBtYWRlIHRvIHRoZSBMTE0gQVBJLlxuICAgICAqL1xuICAgIHJlcXVlc3RzO1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgaW5wdXQgdG9rZW5zIHVzZWQgYWNyb3NzIGFsbCByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICBpbnB1dFRva2VucztcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIG91dHB1dCB0b2tlbnMgdXNlZCBhY3Jvc3MgYWxsIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIG91dHB1dFRva2VucztcbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIHRva2VucyBzZW50IGFuZCByZWNlaXZlZCwgYWNyb3NzIGFsbCByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICB0b3RhbFRva2VucztcbiAgICAvKipcbiAgICAgKiBEZXRhaWxzIGFib3V0IHRoZSBpbnB1dCB0b2tlbnMgdXNlZCBhY3Jvc3MgYWxsIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGlucHV0VG9rZW5zRGV0YWlscyA9IFtdO1xuICAgIC8qKlxuICAgICAqIERldGFpbHMgYWJvdXQgdGhlIG91dHB1dCB0b2tlbnMgdXNlZCBhY3Jvc3MgYWxsIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIG91dHB1dFRva2Vuc0RldGFpbHMgPSBbXTtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0cyA9IDA7XG4gICAgICAgICAgICB0aGlzLmlucHV0VG9rZW5zID0gMDtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VG9rZW5zID0gMDtcbiAgICAgICAgICAgIHRoaXMudG90YWxUb2tlbnMgPSAwO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFRva2Vuc0RldGFpbHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VG9rZW5zRGV0YWlscyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0cyA9IGlucHV0Py5yZXF1ZXN0cyA/PyAxO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFRva2VucyA9IGlucHV0Py5pbnB1dFRva2VucyA/PyBpbnB1dD8uaW5wdXRfdG9rZW5zID8/IDA7XG4gICAgICAgICAgICB0aGlzLm91dHB1dFRva2VucyA9IGlucHV0Py5vdXRwdXRUb2tlbnMgPz8gaW5wdXQ/Lm91dHB1dF90b2tlbnMgPz8gMDtcbiAgICAgICAgICAgIHRoaXMudG90YWxUb2tlbnMgPSBpbnB1dD8udG90YWxUb2tlbnMgPz8gaW5wdXQ/LnRvdGFsX3Rva2VucyA/PyAwO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRUb2tlbnNEZXRhaWxzID0gaW5wdXQ/LmlucHV0VG9rZW5zRGV0YWlscyA/PyBpbnB1dD8uaW5wdXRfdG9rZW5zX2RldGFpbHM7XG4gICAgICAgICAgICB0aGlzLmlucHV0VG9rZW5zRGV0YWlscyA9IGlucHV0VG9rZW5zRGV0YWlsc1xuICAgICAgICAgICAgICAgID8gW2lucHV0VG9rZW5zRGV0YWlsc11cbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0VG9rZW5zRGV0YWlscyA9IGlucHV0Py5vdXRwdXRUb2tlbnNEZXRhaWxzID8/IGlucHV0Py5vdXRwdXRfdG9rZW5zX2RldGFpbHM7XG4gICAgICAgICAgICB0aGlzLm91dHB1dFRva2Vuc0RldGFpbHMgPSBvdXRwdXRUb2tlbnNEZXRhaWxzXG4gICAgICAgICAgICAgICAgPyBbb3V0cHV0VG9rZW5zRGV0YWlsc11cbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZChuZXdVc2FnZSkge1xuICAgICAgICB0aGlzLnJlcXVlc3RzICs9IG5ld1VzYWdlLnJlcXVlc3RzO1xuICAgICAgICB0aGlzLmlucHV0VG9rZW5zICs9IG5ld1VzYWdlLmlucHV0VG9rZW5zO1xuICAgICAgICB0aGlzLm91dHB1dFRva2VucyArPSBuZXdVc2FnZS5vdXRwdXRUb2tlbnM7XG4gICAgICAgIHRoaXMudG90YWxUb2tlbnMgKz0gbmV3VXNhZ2UudG90YWxUb2tlbnM7XG4gICAgICAgIGlmIChuZXdVc2FnZS5pbnB1dFRva2Vuc0RldGFpbHMpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0eXBlIGRvZXMgbm90IGFsbG93IHVuZGVmaW5lZCwgYnV0IGl0IGNvdWxkIGhhcHBlbiBydW50aW1lXG4gICAgICAgICAgICB0aGlzLmlucHV0VG9rZW5zRGV0YWlscy5wdXNoKC4uLm5ld1VzYWdlLmlucHV0VG9rZW5zRGV0YWlscyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1VzYWdlLm91dHB1dFRva2Vuc0RldGFpbHMpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0eXBlIGRvZXMgbm90IGFsbG93IHVuZGVmaW5lZCwgYnV0IGl0IGNvdWxkIGhhcHBlbiBydW50aW1lXG4gICAgICAgICAgICB0aGlzLm91dHB1dFRva2Vuc0RldGFpbHMucHVzaCguLi5uZXdVc2FnZS5vdXRwdXRUb2tlbnNEZXRhaWxzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCB7IFVzYWdlRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNhZ2UubWpzLm1hcCIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IHsgVXNhZ2UgfSBmcm9tIFwiLi91c2FnZS5tanNcIjtcbi8qKlxuICogQSBjb250ZXh0IG9iamVjdCB0aGF0IGlzIHBhc3NlZCB0byB0aGUgYFJ1bm5lci5ydW4oKWAgbWV0aG9kLlxuICovXG5leHBvcnQgY2xhc3MgUnVuQ29udGV4dCB7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRleHQgb2JqZWN0IHlvdSBwYXNzZWQgdG8gdGhlIGBSdW5uZXIucnVuKClgIG1ldGhvZC5cbiAgICAgKi9cbiAgICBjb250ZXh0O1xuICAgIC8qKlxuICAgICAqIFRoZSB1c2FnZSBvZiB0aGUgYWdlbnQgcnVuIHNvIGZhci4gRm9yIHN0cmVhbWVkIHJlc3BvbnNlcywgdGhlIHVzYWdlIHdpbGwgYmUgc3RhbGUgdW50aWwgdGhlXG4gICAgICogbGFzdCBjaHVuayBvZiB0aGUgc3RyZWFtIGlzIHByb2Nlc3NlZC5cbiAgICAgKi9cbiAgICB1c2FnZTtcbiAgICAvKipcbiAgICAgKiBBIG1hcCBvZiB0b29sIG5hbWVzIHRvIHdoZXRoZXIgdGhleSBoYXZlIGJlZW4gYXBwcm92ZWQuXG4gICAgICovXG4gICAgI2FwcHJvdmFscztcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0ID0ge30pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy51c2FnZSA9IG5ldyBVc2FnZSgpO1xuICAgICAgICB0aGlzLiNhcHByb3ZhbHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYnVpbGQgdGhlIGFwcHJvdmFscyBtYXAgZnJvbSBhIHNlcmlhbGl6ZWQgc3RhdGUuXG4gICAgICogQGludGVybmFsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXBwcm92YWxzIC0gVGhlIGFwcHJvdmFscyBtYXAgdG8gcmVidWlsZC5cbiAgICAgKi9cbiAgICBfcmVidWlsZEFwcHJvdmFscyhhcHByb3ZhbHMpIHtcbiAgICAgICAgdGhpcy4jYXBwcm92YWxzID0gbmV3IE1hcChPYmplY3QuZW50cmllcyhhcHByb3ZhbHMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSB0b29sIGNhbGwgaGFzIGJlZW4gYXBwcm92ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9vbE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdG9vbC5cbiAgICAgKiBAcGFyYW0gY2FsbElkIC0gVGhlIGNhbGwgSUQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRvb2wgY2FsbCBoYXMgYmVlbiBhcHByb3ZlZCwgYGZhbHNlYCBpZiBibG9ja2VkIGFuZCBgdW5kZWZpbmVkYCBpZiBub3QgeWV0IGFwcHJvdmVkIG9yIHJlamVjdGVkLlxuICAgICAqL1xuICAgIGlzVG9vbEFwcHJvdmVkKHsgdG9vbE5hbWUsIGNhbGxJZCB9KSB7XG4gICAgICAgIGNvbnN0IGFwcHJvdmFsRW50cnkgPSB0aGlzLiNhcHByb3ZhbHMuZ2V0KHRvb2xOYW1lKTtcbiAgICAgICAgaWYgKGFwcHJvdmFsRW50cnk/LmFwcHJvdmVkID09PSB0cnVlICYmIGFwcHJvdmFsRW50cnkucmVqZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdUb29sIGlzIHBlcm1hbmVudGx5IGFwcHJvdmVkIGFuZCByZWplY3RlZCBhdCB0aGUgc2FtZSB0aW1lLiBBcHByb3ZhbCB0YWtlcyBwcmVjZWRlbmNlJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXBwcm92YWxFbnRyeT8uYXBwcm92ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcHByb3ZhbEVudHJ5Py5yZWplY3RlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGl2aWR1YWxDYWxsQXBwcm92YWwgPSBBcnJheS5pc0FycmF5KGFwcHJvdmFsRW50cnk/LmFwcHJvdmVkKVxuICAgICAgICAgICAgPyBhcHByb3ZhbEVudHJ5LmFwcHJvdmVkLmluY2x1ZGVzKGNhbGxJZClcbiAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGluZGl2aWR1YWxDYWxsUmVqZWN0aW9uID0gQXJyYXkuaXNBcnJheShhcHByb3ZhbEVudHJ5Py5yZWplY3RlZClcbiAgICAgICAgICAgID8gYXBwcm92YWxFbnRyeS5yZWplY3RlZC5pbmNsdWRlcyhjYWxsSWQpXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICBpZiAoaW5kaXZpZHVhbENhbGxBcHByb3ZhbCAmJiBpbmRpdmlkdWFsQ2FsbFJlamVjdGlvbikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oYFRvb2wgY2FsbCAke2NhbGxJZH0gaXMgYm90aCBhcHByb3ZlZCBhbmQgcmVqZWN0ZWQgYXQgdGhlIHNhbWUgdGltZS4gQXBwcm92YWwgdGFrZXMgcHJlY2VkZW5jZWApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGl2aWR1YWxDYWxsQXBwcm92YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRpdmlkdWFsQ2FsbFJlamVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcHJvdmUgYSB0b29sIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9vbE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdG9vbC5cbiAgICAgKiBAcGFyYW0gY2FsbElkIC0gVGhlIGNhbGwgSUQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBhcHByb3ZlVG9vbChhcHByb3ZhbEl0ZW0sIHsgYWx3YXlzQXBwcm92ZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCB0b29sTmFtZSA9IGFwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWU7XG4gICAgICAgIGlmIChhbHdheXNBcHByb3ZlKSB7XG4gICAgICAgICAgICB0aGlzLiNhcHByb3ZhbHMuc2V0KHRvb2xOYW1lLCB7XG4gICAgICAgICAgICAgICAgYXBwcm92ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVqZWN0ZWQ6IFtdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXBwcm92YWxFbnRyeSA9IHRoaXMuI2FwcHJvdmFscy5nZXQodG9vbE5hbWUpID8/IHtcbiAgICAgICAgICAgIGFwcHJvdmVkOiBbXSxcbiAgICAgICAgICAgIHJlamVjdGVkOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXBwcm92YWxFbnRyeS5hcHByb3ZlZCkpIHtcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uIHRvb2wgaGFzIGNhbGxfaWQsIGhvc3RlZCB0b29sIGNhbGwgaGFzIGlkXG4gICAgICAgICAgICBjb25zdCBjYWxsSWQgPSAnY2FsbElkJyBpbiBhcHByb3ZhbEl0ZW0ucmF3SXRlbVxuICAgICAgICAgICAgICAgID8gYXBwcm92YWxJdGVtLnJhd0l0ZW0uY2FsbElkIC8vIGZ1bmN0aW9uIHRvb2xzXG4gICAgICAgICAgICAgICAgOiBhcHByb3ZhbEl0ZW0ucmF3SXRlbS5pZDsgLy8gaG9zdGVkIHRvb2xzXG4gICAgICAgICAgICBhcHByb3ZhbEVudHJ5LmFwcHJvdmVkLnB1c2goY2FsbElkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNhcHByb3ZhbHMuc2V0KHRvb2xOYW1lLCBhcHByb3ZhbEVudHJ5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVqZWN0IGEgdG9vbCBjYWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcHJvdmFsSXRlbSAtIFRoZSB0b29sIGFwcHJvdmFsIGl0ZW0gdG8gcmVqZWN0LlxuICAgICAqL1xuICAgIHJlamVjdFRvb2woYXBwcm92YWxJdGVtLCB7IGFsd2F5c1JlamVjdCA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCB0b29sTmFtZSA9IGFwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWU7XG4gICAgICAgIGlmIChhbHdheXNSZWplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuI2FwcHJvdmFscy5zZXQodG9vbE5hbWUsIHtcbiAgICAgICAgICAgICAgICBhcHByb3ZlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVqZWN0ZWQ6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcHByb3ZhbEVudHJ5ID0gdGhpcy4jYXBwcm92YWxzLmdldCh0b29sTmFtZSkgPz8ge1xuICAgICAgICAgICAgYXBwcm92ZWQ6IFtdLFxuICAgICAgICAgICAgcmVqZWN0ZWQ6IFtdLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcHByb3ZhbEVudHJ5LnJlamVjdGVkKSkge1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gdG9vbCBoYXMgY2FsbF9pZCwgaG9zdGVkIHRvb2wgY2FsbCBoYXMgaWRcbiAgICAgICAgICAgIGNvbnN0IGNhbGxJZCA9ICdjYWxsSWQnIGluIGFwcHJvdmFsSXRlbS5yYXdJdGVtXG4gICAgICAgICAgICAgICAgPyBhcHByb3ZhbEl0ZW0ucmF3SXRlbS5jYWxsSWQgLy8gZnVuY3Rpb24gdG9vbHNcbiAgICAgICAgICAgICAgICA6IGFwcHJvdmFsSXRlbS5yYXdJdGVtLmlkOyAvLyBob3N0ZWQgdG9vbHNcbiAgICAgICAgICAgIGFwcHJvdmFsRW50cnkucmVqZWN0ZWQucHVzaChjYWxsSWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2FwcHJvdmFscy5zZXQodG9vbE5hbWUsIGFwcHJvdmFsRW50cnkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgICB1c2FnZTogdGhpcy51c2FnZSxcbiAgICAgICAgICAgIGFwcHJvdmFsczogT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuI2FwcHJvdmFscy5lbnRyaWVzKCkpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bkNvbnRleHQubWpzLm1hcCIsImltcG9ydCB7IFJlYWRhYmxlU3RyZWFtIGFzIF9SZWFkYWJsZVN0cmVhbSwgVHJhbnNmb3JtU3RyZWFtLCBSZWFkYWJsZSwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5pbXBvcnQgeyBnZXRUdXJuSW5wdXQgfSBmcm9tIFwiLi9ydW4ubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IFN0cmVhbUV2ZW50VGV4dFN0cmVhbSB9IGZyb20gXCIuL3R5cGVzL3Byb3RvY29sLm1qc1wiO1xuY2xhc3MgUnVuUmVzdWx0QmFzZSB7XG4gICAgc3RhdGU7XG4gICAgY29uc3RydWN0b3Ioc3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgaGlzdG9yeSBvZiB0aGUgYWdlbnQgcnVuLiBUaGlzIGluY2x1ZGVzIHRoZSBpbnB1dCBpdGVtcyBhbmQgdGhlIG5ldyBpdGVtcyBnZW5lcmF0ZWQgZHVyaW5nXG4gICAgICogdGhlIGFnZW50IHJ1bi5cbiAgICAgKlxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgYXMgaW5wdXRzIGZvciB0aGUgbmV4dCBhZ2VudCBydW4uXG4gICAgICovXG4gICAgZ2V0IGhpc3RvcnkoKSB7XG4gICAgICAgIHJldHVybiBnZXRUdXJuSW5wdXQodGhpcy5pbnB1dCwgdGhpcy5uZXdJdGVtcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBuZXcgaXRlbXMgZ2VuZXJhdGVkIGR1cmluZyB0aGUgYWdlbnQgcnVuLiBUaGVzZSBpbmNsdWRlIHRoaW5ncyBsaWtlIG5ldyBtZXNzYWdlcywgdG9vbFxuICAgICAqIGNhbGxzIGFuZCB0aGVpciBvdXRwdXRzLCBldGMuXG4gICAgICpcbiAgICAgKiBJdCBkb2VzIG5vdCBpbmNsdWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBhZ2VudHMgYW5kIGluc3RlYWQgcmVwcmVzZW50cyB0aGUgbW9kZWwgZGF0YS5cbiAgICAgKlxuICAgICAqIEZvciB0aGUgb3V0cHV0IGluY2x1ZGluZyB0aGUgYWdlbnRzLCB1c2UgdGhlIGBuZXdJdGVtc2AgcHJvcGVydHkuXG4gICAgICovXG4gICAgZ2V0IG91dHB1dCgpIHtcbiAgICAgICAgcmV0dXJuIGdldFR1cm5JbnB1dChbXSwgdGhpcy5uZXdJdGVtcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY29weSBvZiB0aGUgb3JpZ2luYWwgaW5wdXQgaXRlbXMuXG4gICAgICovXG4gICAgZ2V0IGlucHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5fb3JpZ2luYWxJbnB1dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHJ1biBpdGVtcyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBhZ2VudCBydW4uIFRoaXMgYXNzb2NpYXRlcyB0aGUgbW9kZWwgZGF0YSB3aXRoIHRoZSBhZ2VudHMuXG4gICAgICpcbiAgICAgKiBGb3IgdGhlIG1vZGVsIGRhdGEgdGhhdCBjYW4gYmUgdXNlZCBhcyBpbnB1dHMgZm9yIHRoZSBuZXh0IGFnZW50IHJ1biwgdXNlIHRoZSBgb3V0cHV0YCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBnZXQgbmV3SXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9nZW5lcmF0ZWRJdGVtcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHJhdyBMTE0gcmVzcG9uc2VzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgZHVyaW5nIHRoZSBhZ2VudCBydW4uXG4gICAgICovXG4gICAgZ2V0IHJhd1Jlc3BvbnNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX21vZGVsUmVzcG9uc2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGFzdCByZXNwb25zZSBJRCBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsIGR1cmluZyB0aGUgYWdlbnQgcnVuLlxuICAgICAqL1xuICAgIGdldCBsYXN0UmVzcG9uc2VJZCgpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2VzID0gdGhpcy5yYXdSZXNwb25zZXM7XG4gICAgICAgIHJldHVybiByZXNwb25zZXMgJiYgcmVzcG9uc2VzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gcmVzcG9uc2VzW3Jlc3BvbnNlcy5sZW5ndGggLSAxXS5yZXNwb25zZUlkXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGxhc3QgYWdlbnQgdGhhdCB3YXMgcnVuXG4gICAgICovXG4gICAgZ2V0IGxhc3RBZ2VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX2N1cnJlbnRBZ2VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR3VhcmRyYWlsIHJlc3VsdHMgZm9yIHRoZSBpbnB1dCBtZXNzYWdlcy5cbiAgICAgKi9cbiAgICBnZXQgaW5wdXRHdWFyZHJhaWxSZXN1bHRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5faW5wdXRHdWFyZHJhaWxSZXN1bHRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHdWFyZHJhaWwgcmVzdWx0cyBmb3IgdGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgYWdlbnQuXG4gICAgICovXG4gICAgZ2V0IG91dHB1dEd1YXJkcmFpbFJlc3VsdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9vdXRwdXRHdWFyZHJhaWxSZXN1bHRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbnkgaW50ZXJydXB0aW9ucyB0aGF0IG9jY3VycmVkIGR1cmluZyB0aGUgYWdlbnQgcnVuIGZvciBleGFtcGxlIGZvciB0b29sIGFwcHJvdmFscy5cbiAgICAgKi9cbiAgICBnZXQgaW50ZXJydXB0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuX2N1cnJlbnRTdGVwPy50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9jdXJyZW50U3RlcC5kYXRhLmludGVycnVwdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZmluYWwgb3V0cHV0IG9mIHRoZSBhZ2VudC4gSWYgdGhlIG91dHB1dCB0eXBlIHdhcyBzZXQgdG8gYW55dGhpbmcgb3RoZXIgdGhhbiBgdGV4dGAsXG4gICAgICogdGhpcyB3aWxsIGJlIHBhcnNlZCBlaXRoZXIgYXMgSlNPTiBvciB1c2luZyB0aGUgWm9kIHNjaGVtYSB5b3UgcHJvdmlkZWQuXG4gICAgICovXG4gICAgZ2V0IGZpbmFsT3V0cHV0KCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5fY3VycmVudFN0ZXA/LnR5cGUgPT09ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX2N1cnJlbnRBZ2VudC5wcm9jZXNzRmluYWxPdXRwdXQodGhpcy5zdGF0ZS5fY3VycmVudFN0ZXAub3V0cHV0KTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIud2FybignQWNjZXNzZWQgZmluYWxPdXRwdXQgYmVmb3JlIGFnZW50IHJ1biBpcyBjb21wbGV0ZWQuJyk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgcmVzdWx0IG9mIGFuIGFnZW50IHJ1bi5cbiAqL1xuZXhwb3J0IGNsYXNzIFJ1blJlc3VsdCBleHRlbmRzIFJ1blJlc3VsdEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKHN0YXRlKTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSByZXN1bHQgb2YgYW4gYWdlbnQgcnVuIGluIHN0cmVhbWluZyBtb2RlLlxuICovXG5leHBvcnQgY2xhc3MgU3RyZWFtZWRSdW5SZXN1bHQgZXh0ZW5kcyBSdW5SZXN1bHRCYXNlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBhZ2VudCB0aGF0IGlzIHJ1bm5pbmdcbiAgICAgKi9cbiAgICBnZXQgY3VycmVudEFnZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0QWdlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHR1cm4gbnVtYmVyXG4gICAgICovXG4gICAgY3VycmVudFR1cm4gPSAwO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0dXJucyB0aGF0IGNhbiBiZSBydW5cbiAgICAgKi9cbiAgICBtYXhUdXJucztcbiAgICAjZXJyb3IgPSBudWxsO1xuICAgICNzaWduYWw7XG4gICAgI3JlYWRhYmxlQ29udHJvbGxlcjtcbiAgICAjcmVhZGFibGVTdHJlYW07XG4gICAgI2NvbXBsZXRlZFByb21pc2U7XG4gICAgI2NvbXBsZXRlZFByb21pc2VSZXNvbHZlO1xuICAgICNjb21wbGV0ZWRQcm9taXNlUmVqZWN0O1xuICAgICNjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICBjb25zdHJ1Y3RvcihyZXN1bHQgPSB7fSkge1xuICAgICAgICBzdXBlcihyZXN1bHQuc3RhdGUpO1xuICAgICAgICB0aGlzLiNzaWduYWwgPSByZXN1bHQuc2lnbmFsO1xuICAgICAgICB0aGlzLiNyZWFkYWJsZVN0cmVhbSA9IG5ldyBfUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICAgICAgc3RhcnQ6IChjb250cm9sbGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiNjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2NvbXBsZXRlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlUmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuI3NpZ25hbCkge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlQWJvcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2NhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuI2NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlcjtcbiAgICAgICAgICAgICAgICB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI3JlYWRhYmxlU3RyZWFtLmxvY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBGYWlsZWQgdG8gY2xvc2UgcmVhZGFibGUgc3RyZWFtIG9uIGFib3J0OiAke2Vycn1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCB0aGlzLiNyZWFkYWJsZVN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbmNlbCh0aGlzLiNzaWduYWw/LnJlYXNvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYEZhaWxlZCB0byBjYW5jZWwgcmVhZGFibGUgc3RyZWFtIG9uIGFib3J0OiAke2Vycn1gKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuI2NvbXBsZXRlZFByb21pc2VSZXNvbHZlPy4oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy4jc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVBYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgaGFuZGxlQWJvcnQsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBBZGRzIGFuIGl0ZW0gdG8gdGhlIHN0cmVhbSBvZiBvdXRwdXQgaXRlbXNcbiAgICAgKi9cbiAgICBfYWRkSXRlbShpdGVtKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlcj8uZW5xdWV1ZShpdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgc3RyZWFtIGhhcyBiZWVuIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIF9kb25lKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuY2VsbGVkICYmIHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlcikge1xuICAgICAgICAgICAgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlUmVzb2x2ZT8uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogSGFuZGxlcyBhbiBlcnJvciBpbiB0aGUgc3RyZWFtIGxvb3AuXG4gICAgICovXG4gICAgX3JhaXNlRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5jZWxsZWQgJiYgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyKSB7XG4gICAgICAgICAgICB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNlcnJvciA9IGVycjtcbiAgICAgICAgdGhpcy4jY29tcGxldGVkUHJvbWlzZVJlamVjdD8uKGVycik7XG4gICAgICAgIHRoaXMuI2NvbXBsZXRlZFByb21pc2UuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgUmVzdWx0ZWQgaW4gYW4gZXJyb3I6ICR7ZX1gKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3RyZWFtIGhhcyBiZWVuIGNhbmNlbGxlZC5cbiAgICAgKi9cbiAgICBnZXQgY2FuY2VsbGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY2FuY2VsbGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIHJlYWRhYmxlIHN0cmVhbS5cbiAgICAgKiBAcmV0dXJucyBBIHJlYWRhYmxlIHN0cmVhbSBvZiB0aGUgYWdlbnQgcnVuLlxuICAgICAqL1xuICAgIHRvU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcmVhZGFibGVTdHJlYW07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF3YWl0IHRoaXMgcHJvbWlzZSB0byBlbnN1cmUgdGhhdCB0aGUgc3RyZWFtIGhhcyBiZWVuIGNvbXBsZXRlZCBpZiB5b3UgYXJlIG5vdCBjb25zdW1pbmcgdGhlXG4gICAgICogc3RyZWFtIGRpcmVjdGx5LlxuICAgICAqL1xuICAgIGdldCBjb21wbGV0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjb21wbGV0ZWRQcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFcnJvciB0aHJvd24gZHVyaW5nIHRoZSBydW4sIGlmIGFueS5cbiAgICAgKi9cbiAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNlcnJvcjtcbiAgICB9XG4gICAgdG9UZXh0U3RyZWFtKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLiNyZWFkYWJsZVN0cmVhbS5waXBlVGhyb3VnaChuZXcgVHJhbnNmb3JtU3RyZWFtKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybShldmVudCwgY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncmF3X21vZGVsX3N0cmVhbV9ldmVudCcgJiZcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS50eXBlID09PSAnb3V0cHV0X3RleHRfZGVsdGEnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBTdHJlYW1FdmVudFRleHRTdHJlYW0ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShpdGVtLmRlbHRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICAgIGlmIChvcHRpb25zLmNvbXBhdGlibGVXaXRoTm9kZVN0cmVhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFkYWJsZS5mcm9tV2ViKHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICB9XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3JlYWRhYmxlU3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3VsdC5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVRvb2wodG9vbCkge1xuICAgIGlmICh0b29sLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdG9vbC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHRvb2wucGFyYW1ldGVycyxcbiAgICAgICAgICAgIHN0cmljdDogdG9vbC5zdHJpY3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh0b29sLnR5cGUgPT09ICdjb21wdXRlcicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdjb21wdXRlcicsXG4gICAgICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgICAgICBlbnZpcm9ubWVudDogdG9vbC5jb21wdXRlci5lbnZpcm9ubWVudCxcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6IHRvb2wuY29tcHV0ZXIuZGltZW5zaW9ucyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2hvc3RlZF90b29sJyxcbiAgICAgICAgbmFtZTogdG9vbC5uYW1lLFxuICAgICAgICBwcm92aWRlckRhdGE6IHRvb2wucHJvdmlkZXJEYXRhLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplSGFuZG9mZihoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9vbE5hbWU6IGgudG9vbE5hbWUsXG4gICAgICAgIHRvb2xEZXNjcmlwdGlvbjogaC50b29sRGVzY3JpcHRpb24sXG4gICAgICAgIGlucHV0SnNvblNjaGVtYTogaC5pbnB1dEpzb25TY2hlbWEsXG4gICAgICAgIHN0cmljdEpzb25TY2hlbWE6IGguc3RyaWN0SnNvblNjaGVtYSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXplLm1qcy5tYXAiLCJpbXBvcnQgeyB0b1NtYXJ0U3RyaW5nIH0gZnJvbSBcIi4vdXRpbHMvc21hcnRTdHJpbmcubWpzXCI7XG5leHBvcnQgY2xhc3MgUnVuSXRlbUJhc2Uge1xuICAgIHR5cGUgPSAnYmFzZV9pdGVtJztcbiAgICByYXdJdGVtO1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIHJhd0l0ZW06IHRoaXMucmF3SXRlbSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuTWVzc2FnZU91dHB1dEl0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBhZ2VudDtcbiAgICB0eXBlID0gJ21lc3NhZ2Vfb3V0cHV0X2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIGFnZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmF3SXRlbSA9IHJhd0l0ZW07XG4gICAgICAgIHRoaXMuYWdlbnQgPSBhZ2VudDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBhZ2VudDogdGhpcy5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IGNvbnRlbnQoKSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gJyc7XG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLnJhd0l0ZW0uY29udGVudCkge1xuICAgICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gJ291dHB1dF90ZXh0Jykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gcGFydC50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdW5Ub29sQ2FsbEl0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBhZ2VudDtcbiAgICB0eXBlID0gJ3Rvb2xfY2FsbF9pdGVtJztcbiAgICBjb25zdHJ1Y3RvcihyYXdJdGVtLCBhZ2VudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhd0l0ZW0gPSByYXdJdGVtO1xuICAgICAgICB0aGlzLmFnZW50ID0gYWdlbnQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgYWdlbnQ6IHRoaXMuYWdlbnQudG9KU09OKCksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1blRvb2xDYWxsT3V0cHV0SXRlbSBleHRlbmRzIFJ1bkl0ZW1CYXNlIHtcbiAgICByYXdJdGVtO1xuICAgIGFnZW50O1xuICAgIG91dHB1dDtcbiAgICB0eXBlID0gJ3Rvb2xfY2FsbF9vdXRwdXRfaXRlbSc7XG4gICAgY29uc3RydWN0b3IocmF3SXRlbSwgYWdlbnQsIG91dHB1dCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhd0l0ZW0gPSByYXdJdGVtO1xuICAgICAgICB0aGlzLmFnZW50ID0gYWdlbnQ7XG4gICAgICAgIHRoaXMub3V0cHV0ID0gb3V0cHV0O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIGFnZW50OiB0aGlzLmFnZW50LnRvSlNPTigpLFxuICAgICAgICAgICAgb3V0cHV0OiB0b1NtYXJ0U3RyaW5nKHRoaXMub3V0cHV0KSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuUmVhc29uaW5nSXRlbSBleHRlbmRzIFJ1bkl0ZW1CYXNlIHtcbiAgICByYXdJdGVtO1xuICAgIGFnZW50O1xuICAgIHR5cGUgPSAncmVhc29uaW5nX2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIGFnZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmF3SXRlbSA9IHJhd0l0ZW07XG4gICAgICAgIHRoaXMuYWdlbnQgPSBhZ2VudDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBhZ2VudDogdGhpcy5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuSGFuZG9mZkNhbGxJdGVtIGV4dGVuZHMgUnVuSXRlbUJhc2Uge1xuICAgIHJhd0l0ZW07XG4gICAgYWdlbnQ7XG4gICAgdHlwZSA9ICdoYW5kb2ZmX2NhbGxfaXRlbSc7XG4gICAgY29uc3RydWN0b3IocmF3SXRlbSwgYWdlbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yYXdJdGVtID0gcmF3SXRlbTtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIGFnZW50OiB0aGlzLmFnZW50LnRvSlNPTigpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdW5IYW5kb2ZmT3V0cHV0SXRlbSBleHRlbmRzIFJ1bkl0ZW1CYXNlIHtcbiAgICByYXdJdGVtO1xuICAgIHNvdXJjZUFnZW50O1xuICAgIHRhcmdldEFnZW50O1xuICAgIHR5cGUgPSAnaGFuZG9mZl9vdXRwdXRfaXRlbSc7XG4gICAgY29uc3RydWN0b3IocmF3SXRlbSwgc291cmNlQWdlbnQsIHRhcmdldEFnZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmF3SXRlbSA9IHJhd0l0ZW07XG4gICAgICAgIHRoaXMuc291cmNlQWdlbnQgPSBzb3VyY2VBZ2VudDtcbiAgICAgICAgdGhpcy50YXJnZXRBZ2VudCA9IHRhcmdldEFnZW50O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIHNvdXJjZUFnZW50OiB0aGlzLnNvdXJjZUFnZW50LnRvSlNPTigpLFxuICAgICAgICAgICAgdGFyZ2V0QWdlbnQ6IHRoaXMudGFyZ2V0QWdlbnQudG9KU09OKCksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1blRvb2xBcHByb3ZhbEl0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBhZ2VudDtcbiAgICB0eXBlID0gJ3Rvb2xfYXBwcm92YWxfaXRlbSc7XG4gICAgY29uc3RydWN0b3IocmF3SXRlbSwgYWdlbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yYXdJdGVtID0gcmF3SXRlbTtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIGFnZW50OiB0aGlzLmFnZW50LnRvSlNPTigpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogRXh0cmFjdCBhbGwgdGV4dCBvdXRwdXQgZnJvbSBhIGxpc3Qgb2YgcnVuIGl0ZW1zIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIGNvbnRlbnQgb2YgYWxsXG4gKiBtZXNzYWdlIG91dHB1dCBpdGVtcy5cbiAqXG4gKiBAcGFyYW0gaXRlbXMgLSBUaGUgbGlzdCBvZiBydW4gaXRlbXMgdG8gZXh0cmFjdCB0ZXh0IGZyb20uXG4gKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgdGhlIHRleHQgb3V0cHV0IGZyb20gdGhlIHJ1biBpdGVtcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RBbGxUZXh0T3V0cHV0KGl0ZW1zKSB7XG4gICAgcmV0dXJuIGl0ZW1zXG4gICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gJ21lc3NhZ2Vfb3V0cHV0X2l0ZW0nKVxuICAgICAgICAubWFwKChpdGVtKSA9PiBpdGVtLmNvbnRlbnQpXG4gICAgICAgIC5qb2luKCcnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZW1zLm1qcy5tYXAiLCIvKipcbiAqIEdldCB0aGUgbGFzdCB0ZXh0IGZyb20gdGhlIG91dHB1dCBtZXNzYWdlLlxuICogQHBhcmFtIG91dHB1dE1lc3NhZ2VcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYXN0VGV4dEZyb21PdXRwdXRNZXNzYWdlKG91dHB1dE1lc3NhZ2UpIHtcbiAgICBpZiAob3V0cHV0TWVzc2FnZS50eXBlICE9PSAnbWVzc2FnZScpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKG91dHB1dE1lc3NhZ2Uucm9sZSAhPT0gJ2Fzc2lzdGFudCcpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbGFzdEl0ZW0gPSBvdXRwdXRNZXNzYWdlLmNvbnRlbnRbb3V0cHV0TWVzc2FnZS5jb250ZW50Lmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0SXRlbS50eXBlICE9PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBsYXN0SXRlbS50ZXh0O1xufVxuLyoqXG4gKiBHZXQgdGhlIGxhc3QgdGV4dCBmcm9tIHRoZSBvdXRwdXQgbWVzc2FnZS5cbiAqIEBwYXJhbSBvdXRwdXRcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdXRwdXRUZXh0KG91dHB1dCkge1xuICAgIGlmIChvdXRwdXQub3V0cHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiAoZ2V0TGFzdFRleHRGcm9tT3V0cHV0TWVzc2FnZShvdXRwdXQub3V0cHV0W291dHB1dC5vdXRwdXQubGVuZ3RoIC0gMV0pIHx8ICcnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VzLm1qcy5tYXAiLCIvKipcbiAqIFN0cmVhbWluZyBldmVudCBmcm9tIHRoZSBMTE0uIFRoZXNlIGFyZSBgcmF3YCBldmVudHMsIGkuZS4gdGhleSBhcmUgZGlyZWN0bHkgcGFzc2VkIHRocm91Z2ggZnJvbVxuICogdGhlIExMTS5cbiAqL1xuZXhwb3J0IGNsYXNzIFJ1blJhd01vZGVsU3RyZWFtRXZlbnQge1xuICAgIGRhdGE7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIHR5cGUgPSAncmF3X21vZGVsX3N0cmVhbV9ldmVudCc7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIHJhdyByZXNwb25zZXMgc3RyZWFtIGV2ZW50cyBmcm9tIHRoZSBMTE0uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbn1cbi8qKlxuICogU3RyZWFtaW5nIGV2ZW50cyB0aGF0IHdyYXAgYSBgUnVuSXRlbWAuIEFzIHRoZSBhZ2VudCBwcm9jZXNzZXMgdGhlIExMTSByZXNwb25zZSwgaXQgd2lsbCBnZW5lcmF0ZVxuICogdGhlc2UgZXZlbnRzIGZyb20gbmV3IG1lc3NhZ2VzLCB0b29sIGNhbGxzLCB0b29sIG91dHB1dHMsIGhhbmRvZmZzLCBldGMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5JdGVtU3RyZWFtRXZlbnQge1xuICAgIG5hbWU7XG4gICAgaXRlbTtcbiAgICB0eXBlID0gJ3J1bl9pdGVtX3N0cmVhbV9ldmVudCc7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50LlxuICAgICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgaXRlbSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgIH1cbn1cbi8qKlxuICogRXZlbnQgdGhhdCBub3RpZmllcyB0aGF0IHRoZXJlIGlzIGEgbmV3IGFnZW50IHJ1bm5pbmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5BZ2VudFVwZGF0ZWRTdHJlYW1FdmVudCB7XG4gICAgYWdlbnQ7XG4gICAgdHlwZSA9ICdhZ2VudF91cGRhdGVkX3N0cmVhbV9ldmVudCc7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFnZW50IFRoZSBuZXcgYWdlbnRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhZ2VudCkge1xuICAgICAgICB0aGlzLmFnZW50ID0gYWdlbnQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLm1qcy5tYXAiLCJpbXBvcnQgeyBjb25zdW1lQWdlbnRUb29sUnVuUmVzdWx0LCB9IGZyb20gXCIuL2FnZW50Lm1qc1wiO1xuaW1wb3J0IHsgTW9kZWxCZWhhdmlvckVycm9yLCBUb29sQ2FsbEVycm9yLCBVc2VyRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgeyBnZXRUcmFuc2Zlck1lc3NhZ2UgfSBmcm9tIFwiLi9oYW5kb2ZmLm1qc1wiO1xuaW1wb3J0IHsgUnVuSGFuZG9mZkNhbGxJdGVtLCBSdW5IYW5kb2ZmT3V0cHV0SXRlbSwgUnVuTWVzc2FnZU91dHB1dEl0ZW0sIFJ1blJlYXNvbmluZ0l0ZW0sIFJ1blRvb2xBcHByb3ZhbEl0ZW0sIFJ1blRvb2xDYWxsSXRlbSwgUnVuVG9vbENhbGxPdXRwdXRJdGVtLCB9IGZyb20gXCIuL2l0ZW1zLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBnZXRMYXN0VGV4dEZyb21PdXRwdXRNZXNzYWdlIH0gZnJvbSBcIi4vdXRpbHMvbWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgeyB3aXRoRnVuY3Rpb25TcGFuLCB3aXRoSGFuZG9mZlNwYW4gfSBmcm9tIFwiLi90cmFjaW5nL2NyZWF0ZVNwYW5zLm1qc1wiO1xuaW1wb3J0IHsgZ2V0U2NoZW1hQW5kUGFyc2VyRnJvbUlucHV0VHlwZSB9IGZyb20gXCIuL3V0aWxzL3Rvb2xzLm1qc1wiO1xuaW1wb3J0IHsgc2FmZUV4ZWN1dGUgfSBmcm9tIFwiLi91dGlscy9zYWZlRXhlY3V0ZS5tanNcIjtcbmltcG9ydCB7IGFkZEVycm9yVG9DdXJyZW50U3BhbiB9IGZyb20gXCIuL3RyYWNpbmcvY29udGV4dC5tanNcIjtcbmltcG9ydCB7IFJ1bkl0ZW1TdHJlYW1FdmVudCB9IGZyb20gXCIuL2V2ZW50cy5tanNcIjtcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgdG9TbWFydFN0cmluZyB9IGZyb20gXCIuL3V0aWxzL3NtYXJ0U3RyaW5nLm1qc1wiO1xuaW1wb3J0IHsgaXNab2RPYmplY3QgfSBmcm9tIFwiLi91dGlscy9pbmRleC5tanNcIjtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzTW9kZWxSZXNwb25zZShtb2RlbFJlc3BvbnNlLCBhZ2VudCwgdG9vbHMsIGhhbmRvZmZzKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCBydW5IYW5kb2ZmcyA9IFtdO1xuICAgIGNvbnN0IHJ1bkZ1bmN0aW9ucyA9IFtdO1xuICAgIGNvbnN0IHJ1bkNvbXB1dGVyQWN0aW9ucyA9IFtdO1xuICAgIGNvbnN0IHJ1bk1DUEFwcHJvdmFsUmVxdWVzdHMgPSBbXTtcbiAgICBjb25zdCB0b29sc1VzZWQgPSBbXTtcbiAgICBjb25zdCBoYW5kb2ZmTWFwID0gbmV3IE1hcChoYW5kb2Zmcy5tYXAoKGgpID0+IFtoLnRvb2xOYW1lLCBoXSkpO1xuICAgIGNvbnN0IGZ1bmN0aW9uTWFwID0gbmV3IE1hcCh0b29scy5maWx0ZXIoKHQpID0+IHQudHlwZSA9PT0gJ2Z1bmN0aW9uJykubWFwKCh0KSA9PiBbdC5uYW1lLCB0XSkpO1xuICAgIGNvbnN0IGNvbXB1dGVyVG9vbCA9IHRvb2xzLmZpbmQoKHQpID0+IHQudHlwZSA9PT0gJ2NvbXB1dGVyJyk7XG4gICAgY29uc3QgbWNwVG9vbE1hcCA9IG5ldyBNYXAodG9vbHNcbiAgICAgICAgLmZpbHRlcigodCkgPT4gdC50eXBlID09PSAnaG9zdGVkX3Rvb2wnICYmIHQucHJvdmlkZXJEYXRhPy50eXBlID09PSAnbWNwJylcbiAgICAgICAgLm1hcCgodCkgPT4gdClcbiAgICAgICAgLm1hcCgodCkgPT4gW3QucHJvdmlkZXJEYXRhLnNlcnZlcl9sYWJlbCwgdF0pKTtcbiAgICBmb3IgKGNvbnN0IG91dHB1dCBvZiBtb2RlbFJlc3BvbnNlLm91dHB1dCkge1xuICAgICAgICBpZiAob3V0cHV0LnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgaWYgKG91dHB1dC5yb2xlID09PSAnYXNzaXN0YW50Jykge1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2gobmV3IFJ1bk1lc3NhZ2VPdXRwdXRJdGVtKG91dHB1dCwgYWdlbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvdXRwdXQudHlwZSA9PT0gJ2hvc3RlZF90b29sX2NhbGwnKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKG5ldyBSdW5Ub29sQ2FsbEl0ZW0ob3V0cHV0LCBhZ2VudCkpO1xuICAgICAgICAgICAgY29uc3QgdG9vbE5hbWUgPSBvdXRwdXQubmFtZTtcbiAgICAgICAgICAgIHRvb2xzVXNlZC5wdXNoKHRvb2xOYW1lKTtcbiAgICAgICAgICAgIGlmIChvdXRwdXQucHJvdmlkZXJEYXRhPy50eXBlID09PSAnbWNwX2FwcHJvdmFsX3JlcXVlc3QnIHx8XG4gICAgICAgICAgICAgICAgb3V0cHV0Lm5hbWUgPT09ICdtY3BfYXBwcm92YWxfcmVxdWVzdCcpIHtcbiAgICAgICAgICAgICAgICAvLyBIb3N0ZWQgcmVtb3RlIE1DUCBzZXJ2ZXIncyBhcHByb3ZhbCBwcm9jZXNzXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJEYXRhID0gb3V0cHV0LnByb3ZpZGVyRGF0YTtcbiAgICAgICAgICAgICAgICBjb25zdCBtY3BTZXJ2ZXJMYWJlbCA9IHByb3ZpZGVyRGF0YS5zZXJ2ZXJfbGFiZWw7XG4gICAgICAgICAgICAgICAgY29uc3QgbWNwU2VydmVyVG9vbCA9IG1jcFRvb2xNYXAuZ2V0KG1jcFNlcnZlckxhYmVsKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1jcFNlcnZlclRvb2wgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgTUNQIHNlcnZlciAoJHttY3BTZXJ2ZXJMYWJlbH0pIG5vdCBmb3VuZCBpbiBBZ2VudCAoJHthZ2VudC5uYW1lfSlgO1xuICAgICAgICAgICAgICAgICAgICBhZGRFcnJvclRvQ3VycmVudFNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgbWNwX3NlcnZlcl9sYWJlbDogbWNwU2VydmVyTGFiZWwgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERvIHRoaXMgYXBwcm92YWwgbGF0ZXI6XG4gICAgICAgICAgICAgICAgLy8gV2Ugc3VwcG9ydCBib3RoIG9uQXBwcm92YWwgY2FsbGJhY2sgKGxpa2UgdGhlIFB5dGhvbiBTREsgZG9lcykgYW5kIEhJVEwgcGF0dGVybnMuXG4gICAgICAgICAgICAgICAgY29uc3QgYXBwcm92YWxJdGVtID0gbmV3IFJ1blRvb2xBcHByb3ZhbEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaG9zdGVkX3Rvb2xfY2FsbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG11c3QgdXNlIHRoaXMgbmFtZSB0byBhbGlnbiB3aXRoIHRoZSBuYW1lIHNlbnQgZnJvbSB0aGUgc2VydmVyc1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm92aWRlckRhdGEubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHByb3ZpZGVyRGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlckRhdGEsXG4gICAgICAgICAgICAgICAgfSwgYWdlbnQpO1xuICAgICAgICAgICAgICAgIHJ1bk1DUEFwcHJvdmFsUmVxdWVzdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJdGVtOiBhcHByb3ZhbEl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIG1jcFRvb2w6IG1jcFNlcnZlclRvb2wsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFtY3BTZXJ2ZXJUb29sLnByb3ZpZGVyRGF0YS5vbl9hcHByb3ZhbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIG9uQXBwcm92YWwgZnVuY3Rpb24gZXhpc3RzLCBpdCBjb25maXJtcyB0aGUgYXBwcm92YWwgcmlnaHQgYWZ0ZXIgdGhpcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGh1cywgdGhpcyBhcHByb3ZhbCBpdGVtIG11c3QgYmUgYXBwZW5kZWQgb25seSBmb3IgdGhlIG5leHQgdHVybiBpbnRlcnJ1cHRpb24gcGF0dGVybnMuXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goYXBwcm92YWxJdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3V0cHV0LnR5cGUgPT09ICdyZWFzb25pbmcnKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKG5ldyBSdW5SZWFzb25pbmdJdGVtKG91dHB1dCwgYWdlbnQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvdXRwdXQudHlwZSA9PT0gJ2NvbXB1dGVyX2NhbGwnKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKG5ldyBSdW5Ub29sQ2FsbEl0ZW0ob3V0cHV0LCBhZ2VudCkpO1xuICAgICAgICAgICAgdG9vbHNVc2VkLnB1c2goJ2NvbXB1dGVyX3VzZScpO1xuICAgICAgICAgICAgaWYgKCFjb21wdXRlclRvb2wpIHtcbiAgICAgICAgICAgICAgICBhZGRFcnJvclRvQ3VycmVudFNwYW4oe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTW9kZWwgcHJvZHVjZWQgY29tcHV0ZXIgYWN0aW9uIHdpdGhvdXQgYSBjb21wdXRlciB0b29sLicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFnZW50X25hbWU6IGFnZW50Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcignTW9kZWwgcHJvZHVjZWQgY29tcHV0ZXIgYWN0aW9uIHdpdGhvdXQgYSBjb21wdXRlciB0b29sLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVuQ29tcHV0ZXJBY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHRvb2xDYWxsOiBvdXRwdXQsXG4gICAgICAgICAgICAgICAgY29tcHV0ZXI6IGNvbXB1dGVyVG9vbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdXRwdXQudHlwZSAhPT0gJ2Z1bmN0aW9uX2NhbGwnKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0b29sc1VzZWQucHVzaChvdXRwdXQubmFtZSk7XG4gICAgICAgIGNvbnN0IGhhbmRvZmYgPSBoYW5kb2ZmTWFwLmdldChvdXRwdXQubmFtZSk7XG4gICAgICAgIGlmIChoYW5kb2ZmKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKG5ldyBSdW5IYW5kb2ZmQ2FsbEl0ZW0ob3V0cHV0LCBhZ2VudCkpO1xuICAgICAgICAgICAgcnVuSGFuZG9mZnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdG9vbENhbGw6IG91dHB1dCxcbiAgICAgICAgICAgICAgICBoYW5kb2ZmOiBoYW5kb2ZmLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmdW5jdGlvblRvb2wgPSBmdW5jdGlvbk1hcC5nZXQob3V0cHV0Lm5hbWUpO1xuICAgICAgICAgICAgaWYgKCFmdW5jdGlvblRvb2wpIHtcbiAgICAgICAgICAgICAgICBhZGRFcnJvclRvQ3VycmVudFNwYW4oe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVG9vbCAke291dHB1dC5uYW1lfSBub3QgZm91bmQgaW4gYWdlbnQgJHthZ2VudC5uYW1lfS5gLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sX25hbWU6IG91dHB1dC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWdlbnRfbmFtZTogYWdlbnQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKGBUb29sICR7b3V0cHV0Lm5hbWV9IG5vdCBmb3VuZCBpbiBhZ2VudCAke2FnZW50Lm5hbWV9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMucHVzaChuZXcgUnVuVG9vbENhbGxJdGVtKG91dHB1dCwgYWdlbnQpKTtcbiAgICAgICAgICAgIHJ1bkZ1bmN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0b29sQ2FsbDogb3V0cHV0LFxuICAgICAgICAgICAgICAgIHRvb2w6IGZ1bmN0aW9uVG9vbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG5ld0l0ZW1zOiBpdGVtcyxcbiAgICAgICAgaGFuZG9mZnM6IHJ1bkhhbmRvZmZzLFxuICAgICAgICBmdW5jdGlvbnM6IHJ1bkZ1bmN0aW9ucyxcbiAgICAgICAgY29tcHV0ZXJBY3Rpb25zOiBydW5Db21wdXRlckFjdGlvbnMsXG4gICAgICAgIG1jcEFwcHJvdmFsUmVxdWVzdHM6IHJ1bk1DUEFwcHJvdmFsUmVxdWVzdHMsXG4gICAgICAgIHRvb2xzVXNlZDogdG9vbHNVc2VkLFxuICAgICAgICBoYXNUb29sc09yQXBwcm92YWxzVG9SdW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gKHJ1bkhhbmRvZmZzLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgICAgICAgICBydW5GdW5jdGlvbnMubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIHJ1bk1DUEFwcHJvdmFsUmVxdWVzdHMubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIHJ1bkNvbXB1dGVyQWN0aW9ucy5sZW5ndGggPiAwKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IG5leHRTdGVwU2NoZW1hID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ25leHRfc3RlcF9oYW5kb2ZmJyksXG4gICAgICAgIG5ld0FnZW50OiB6LmFueSgpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCduZXh0X3N0ZXBfZmluYWxfb3V0cHV0JyksXG4gICAgICAgIG91dHB1dDogei5zdHJpbmcoKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbmV4dF9zdGVwX3J1bl9hZ2FpbicpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJyksXG4gICAgICAgIGRhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLFxuICAgIH0pLFxuXSk7XG5jbGFzcyBTaW5nbGVTdGVwUmVzdWx0IHtcbiAgICBvcmlnaW5hbElucHV0O1xuICAgIG1vZGVsUmVzcG9uc2U7XG4gICAgcHJlU3RlcEl0ZW1zO1xuICAgIG5ld1N0ZXBJdGVtcztcbiAgICBuZXh0U3RlcDtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgaW5wdXQgaXRlbXMgaS5lLiB0aGUgaXRlbXMgYmVmb3JlIHJ1bigpIHdhcyBjYWxsZWQuIE1heSBiZSBtdXRlZCBieSBoYW5kb2ZmIGlucHV0IGZpbHRlcnNcbiAgICAgKi9cbiAgICBvcmlnaW5hbElucHV0LCBcbiAgICAvKipcbiAgICAgKiBUaGUgbW9kZWwgcmVzcG9uc2UgZm9yIHRoZSBjdXJyZW50IHN0ZXBcbiAgICAgKi9cbiAgICBtb2RlbFJlc3BvbnNlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbXMgYmVmb3JlIHRoZSBjdXJyZW50IHN0ZXAgd2FzIGV4ZWN1dGVkXG4gICAgICovXG4gICAgcHJlU3RlcEl0ZW1zLCBcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbXMgYWZ0ZXIgdGhlIGN1cnJlbnQgc3RlcCB3YXMgZXhlY3V0ZWRcbiAgICAgKi9cbiAgICBuZXdTdGVwSXRlbXMsIFxuICAgIC8qKlxuICAgICAqIFRoZSBuZXh0IHN0ZXAgdG8gZXhlY3V0ZVxuICAgICAqL1xuICAgIG5leHRTdGVwKSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWxJbnB1dCA9IG9yaWdpbmFsSW5wdXQ7XG4gICAgICAgIHRoaXMubW9kZWxSZXNwb25zZSA9IG1vZGVsUmVzcG9uc2U7XG4gICAgICAgIHRoaXMucHJlU3RlcEl0ZW1zID0gcHJlU3RlcEl0ZW1zO1xuICAgICAgICB0aGlzLm5ld1N0ZXBJdGVtcyA9IG5ld1N0ZXBJdGVtcztcbiAgICAgICAgdGhpcy5uZXh0U3RlcCA9IG5leHRTdGVwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbXMgZ2VuZXJhdGVkIGR1cmluZyB0aGUgYWdlbnQgcnVuIChpLmUuIGV2ZXJ5dGhpbmcgZ2VuZXJhdGVkIGFmdGVyIG9yaWdpbmFsSW5wdXQpXG4gICAgICovXG4gICAgZ2V0IGdlbmVyYXRlZEl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVTdGVwSXRlbXMuY29uY2F0KHRoaXMubmV3U3RlcEl0ZW1zKTtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF5YmVSZXNldFRvb2xDaG9pY2UoYWdlbnQsIHRvb2xVc2VUcmFja2VyLCBtb2RlbFNldHRpbmdzKSB7XG4gICAgaWYgKGFnZW50LnJlc2V0VG9vbENob2ljZSAmJiB0b29sVXNlVHJhY2tlci5oYXNVc2VkVG9vbHMoYWdlbnQpKSB7XG4gICAgICAgIHJldHVybiB7IC4uLm1vZGVsU2V0dGluZ3MsIHRvb2xDaG9pY2U6IHVuZGVmaW5lZCB9O1xuICAgIH1cbiAgICByZXR1cm4gbW9kZWxTZXR0aW5ncztcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlSW50ZXJydXB0ZWRUb29sc0FuZFNpZGVFZmZlY3RzKGFnZW50LCBvcmlnaW5hbElucHV0LCBvcmlnaW5hbFByZVN0ZXBJdGVtcywgbmV3UmVzcG9uc2UsIHByb2Nlc3NlZFJlc3BvbnNlLCBydW5uZXIsIHN0YXRlKSB7XG4gICAgLy8gY2FsbF9pZHMgZm9yIGZ1bmN0aW9uIHRvb2xzXG4gICAgY29uc3QgZnVuY3Rpb25DYWxsSWRzID0gb3JpZ2luYWxQcmVTdGVwSXRlbXNcbiAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbSBpbnN0YW5jZW9mIFJ1blRvb2xBcHByb3ZhbEl0ZW0gJiZcbiAgICAgICAgJ2NhbGxJZCcgaW4gaXRlbS5yYXdJdGVtICYmXG4gICAgICAgIGl0ZW0ucmF3SXRlbS50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcpXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmF3SXRlbS5jYWxsSWQpO1xuICAgIC8vIFJ1biBmdW5jdGlvbiB0b29scyB0aGF0IHJlcXVpcmUgYXBwcm92YWwgYWZ0ZXIgdGhleSBnZXQgdGhlaXIgYXBwcm92YWwgcmVzdWx0c1xuICAgIGNvbnN0IGZ1bmN0aW9uVG9vbFJ1bnMgPSBwcm9jZXNzZWRSZXNwb25zZS5mdW5jdGlvbnMuZmlsdGVyKChydW4pID0+IHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uQ2FsbElkcy5pbmNsdWRlcyhydW4udG9vbENhbGwuY2FsbElkKTtcbiAgICB9KTtcbiAgICBjb25zdCBmdW5jdGlvblJlc3VsdHMgPSBhd2FpdCBleGVjdXRlRnVuY3Rpb25Ub29sQ2FsbHMoYWdlbnQsIGZ1bmN0aW9uVG9vbFJ1bnMsIHJ1bm5lciwgc3RhdGUpO1xuICAgIC8vIENyZWF0ZSB0aGUgaW5pdGlhbCBzZXQgb2YgdGhlIG91dHB1dCBpdGVtc1xuICAgIGNvbnN0IG5ld0l0ZW1zID0gZnVuY3Rpb25SZXN1bHRzLm1hcCgocikgPT4gci5ydW5JdGVtKTtcbiAgICAvLyBSdW4gTUNQIHRvb2xzIHRoYXQgcmVxdWlyZSBhcHByb3ZhbCBhZnRlciB0aGV5IGdldCB0aGVpciBhcHByb3ZhbCByZXN1bHRzXG4gICAgY29uc3QgbWNwQXBwcm92YWxSdW5zID0gcHJvY2Vzc2VkUmVzcG9uc2UubWNwQXBwcm92YWxSZXF1ZXN0cy5maWx0ZXIoKHJ1bikgPT4ge1xuICAgICAgICByZXR1cm4gKHJ1bi5yZXF1ZXN0SXRlbS50eXBlID09PSAndG9vbF9hcHByb3ZhbF9pdGVtJyAmJlxuICAgICAgICAgICAgcnVuLnJlcXVlc3RJdGVtLnJhd0l0ZW0udHlwZSA9PT0gJ2hvc3RlZF90b29sX2NhbGwnICYmXG4gICAgICAgICAgICBydW4ucmVxdWVzdEl0ZW0ucmF3SXRlbS5wcm92aWRlckRhdGE/LnR5cGUgPT09ICdtY3BfYXBwcm92YWxfcmVxdWVzdCcpO1xuICAgIH0pO1xuICAgIGZvciAoY29uc3QgcnVuIG9mIG1jcEFwcHJvdmFsUnVucykge1xuICAgICAgICAvLyB0aGUgYXBwcm92YWxfcmVxdWVzdF9pZCBcIm1jcHJfMTIzLi4uXCJcbiAgICAgICAgY29uc3QgYXBwcm92YWxSZXF1ZXN0SWQgPSBydW4ucmVxdWVzdEl0ZW0ucmF3SXRlbS5pZDtcbiAgICAgICAgY29uc3QgYXBwcm92ZWQgPSBzdGF0ZS5fY29udGV4dC5pc1Rvb2xBcHByb3ZlZCh7XG4gICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGl0ZW0gbmFtZSBtdXN0IGJlIHRoZSBzYW1lIHdpdGggdGhlIG9uZSBzZW50IGZyb20gUmVzcG9uc2VzIEFQSSBzZXJ2ZXJcbiAgICAgICAgICAgIHRvb2xOYW1lOiBydW4ucmVxdWVzdEl0ZW0ucmF3SXRlbS5uYW1lLFxuICAgICAgICAgICAgY2FsbElkOiBhcHByb3ZhbFJlcXVlc3RJZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgYXBwcm92ZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlckRhdGEgPSB7XG4gICAgICAgICAgICAgICAgYXBwcm92ZTogYXBwcm92ZWQsXG4gICAgICAgICAgICAgICAgYXBwcm92YWxfcmVxdWVzdF9pZDogYXBwcm92YWxSZXF1ZXN0SWQsXG4gICAgICAgICAgICAgICAgcmVhc29uOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gVGVsbCBSZXNwb25zZXMgQVBJIHNlcnZlciB0aGUgYXBwcm92YWwgcmVzdWx0IGluIHRoZSBuZXh0IHR1cm5cbiAgICAgICAgICAgIG5ld0l0ZW1zLnB1c2gobmV3IFJ1blRvb2xDYWxsSXRlbSh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2hvc3RlZF90b29sX2NhbGwnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdtY3BfYXBwcm92YWxfcmVzcG9uc2UnLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YSxcbiAgICAgICAgICAgIH0sIGFnZW50KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY2hlY2tUb29sT3V0cHV0ID0gYXdhaXQgY2hlY2tGb3JGaW5hbE91dHB1dEZyb21Ub29scyhhZ2VudCwgZnVuY3Rpb25SZXN1bHRzLCBzdGF0ZSk7XG4gICAgLy8gRXhjbHVkZSB0aGUgdG9vbCBhcHByb3ZhbCBpdGVtcywgd2hpY2ggc2hvdWxkIG5vdCBiZSBzZW50IHRvIFJlc3BvbnNlcyBBUEksXG4gICAgLy8gZnJvbSB0aGUgU2luZ2xlU3RlcFJlc3VsdCdzIHByZVN0ZXBJdGVtc1xuICAgIGNvbnN0IHByZVN0ZXBJdGVtcyA9IG9yaWdpbmFsUHJlU3RlcEl0ZW1zLmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgICByZXR1cm4gIShpdGVtIGluc3RhbmNlb2YgUnVuVG9vbEFwcHJvdmFsSXRlbSk7XG4gICAgfSk7XG4gICAgaWYgKGNoZWNrVG9vbE91dHB1dC5pc0ZpbmFsT3V0cHV0KSB7XG4gICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF9lbmQnLCBzdGF0ZS5fY29udGV4dCwgYWdlbnQsIGNoZWNrVG9vbE91dHB1dC5maW5hbE91dHB1dCk7XG4gICAgICAgIGFnZW50LmVtaXQoJ2FnZW50X2VuZCcsIHN0YXRlLl9jb250ZXh0LCBjaGVja1Rvb2xPdXRwdXQuZmluYWxPdXRwdXQpO1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHtcbiAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0JyxcbiAgICAgICAgICAgIG91dHB1dDogY2hlY2tUb29sT3V0cHV0LmZpbmFsT3V0cHV0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hlY2tUb29sT3V0cHV0LmlzSW50ZXJydXB0ZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7XG4gICAgICAgICAgICB0eXBlOiAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgaW50ZXJydXB0aW9uczogY2hlY2tUb29sT3V0cHV0LmludGVycnVwdGlvbnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gd2Ugb25seSByYW4gbmV3IHRvb2xzIGFuZCBzaWRlIGVmZmVjdHMuIFdlIG5lZWQgdG8gcnVuIHRoZSByZXN0IG9mIHRoZSBhZ2VudFxuICAgIHJldHVybiBuZXcgU2luZ2xlU3RlcFJlc3VsdChvcmlnaW5hbElucHV0LCBuZXdSZXNwb25zZSwgcHJlU3RlcEl0ZW1zLCBuZXdJdGVtcywgeyB0eXBlOiAnbmV4dF9zdGVwX3J1bl9hZ2FpbicgfSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVRvb2xzQW5kU2lkZUVmZmVjdHMoYWdlbnQsIG9yaWdpbmFsSW5wdXQsIG9yaWdpbmFsUHJlU3RlcEl0ZW1zLCBuZXdSZXNwb25zZSwgcHJvY2Vzc2VkUmVzcG9uc2UsIHJ1bm5lciwgc3RhdGUpIHtcbiAgICBjb25zdCBwcmVTdGVwSXRlbXMgPSBvcmlnaW5hbFByZVN0ZXBJdGVtcztcbiAgICBsZXQgbmV3SXRlbXMgPSBwcm9jZXNzZWRSZXNwb25zZS5uZXdJdGVtcztcbiAgICBjb25zdCBbZnVuY3Rpb25SZXN1bHRzLCBjb21wdXRlclJlc3VsdHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBleGVjdXRlRnVuY3Rpb25Ub29sQ2FsbHMoYWdlbnQsIHByb2Nlc3NlZFJlc3BvbnNlLmZ1bmN0aW9ucywgcnVubmVyLCBzdGF0ZSksXG4gICAgICAgIGV4ZWN1dGVDb21wdXRlckFjdGlvbnMoYWdlbnQsIHByb2Nlc3NlZFJlc3BvbnNlLmNvbXB1dGVyQWN0aW9ucywgcnVubmVyLCBzdGF0ZS5fY29udGV4dCksXG4gICAgXSk7XG4gICAgbmV3SXRlbXMgPSBuZXdJdGVtcy5jb25jYXQoZnVuY3Rpb25SZXN1bHRzLm1hcCgocikgPT4gci5ydW5JdGVtKSk7XG4gICAgbmV3SXRlbXMgPSBuZXdJdGVtcy5jb25jYXQoY29tcHV0ZXJSZXN1bHRzKTtcbiAgICAvLyBydW4gaG9zdGVkIE1DUCBhcHByb3ZhbCByZXF1ZXN0c1xuICAgIGlmIChwcm9jZXNzZWRSZXNwb25zZS5tY3BBcHByb3ZhbFJlcXVlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBhcHByb3ZhbFJlcXVlc3Qgb2YgcHJvY2Vzc2VkUmVzcG9uc2UubWNwQXBwcm92YWxSZXF1ZXN0cykge1xuICAgICAgICAgICAgY29uc3QgdG9vbERhdGEgPSBhcHByb3ZhbFJlcXVlc3QubWNwVG9vbFxuICAgICAgICAgICAgICAgIC5wcm92aWRlckRhdGE7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0RGF0YSA9IGFwcHJvdmFsUmVxdWVzdC5yZXF1ZXN0SXRlbS5yYXdJdGVtXG4gICAgICAgICAgICAgICAgLnByb3ZpZGVyRGF0YTtcbiAgICAgICAgICAgIGlmICh0b29sRGF0YS5vbl9hcHByb3ZhbCkge1xuICAgICAgICAgICAgICAgIC8vIHN5bmNocm9ub3VzbHkgaGFuZGxlIHRoZSBhcHByb3ZhbCBwcm9jZXNzIGhlcmVcbiAgICAgICAgICAgICAgICBjb25zdCBhcHByb3ZhbFJlc3VsdCA9IGF3YWl0IHRvb2xEYXRhLm9uX2FwcHJvdmFsKHN0YXRlLl9jb250ZXh0LCBhcHByb3ZhbFJlcXVlc3QucmVxdWVzdEl0ZW0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsUmVzcG9uc2VEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBhcHByb3ZlOiBhcHByb3ZhbFJlc3VsdC5hcHByb3ZlLFxuICAgICAgICAgICAgICAgICAgICBhcHByb3ZhbF9yZXF1ZXN0X2lkOiByZXF1ZXN0RGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBhcHByb3ZhbFJlc3VsdC5yZWFzb24sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBuZXdJdGVtcy5wdXNoKG5ldyBSdW5Ub29sQ2FsbEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaG9zdGVkX3Rvb2xfY2FsbCcsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdtY3BfYXBwcm92YWxfcmVzcG9uc2UnLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlckRhdGE6IGFwcHJvdmFsUmVzcG9uc2VEYXRhLFxuICAgICAgICAgICAgICAgIH0sIGFnZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyByZWNlaXZlIGEgdXNlcidzIGFwcHJvdmFsIG9uIHRoZSBuZXh0IHR1cm5cbiAgICAgICAgICAgICAgICBuZXdJdGVtcy5wdXNoKGFwcHJvdmFsUmVxdWVzdC5yZXF1ZXN0SXRlbSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXBwcm92YWxJdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaG9zdGVkX21jcF90b29sX2FwcHJvdmFsJyxcbiAgICAgICAgICAgICAgICAgICAgdG9vbDogYXBwcm92YWxSZXF1ZXN0Lm1jcFRvb2wsXG4gICAgICAgICAgICAgICAgICAgIHJ1bkl0ZW06IG5ldyBSdW5Ub29sQXBwcm92YWxJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbF9jYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlcXVlc3REYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcmVxdWVzdERhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IHJlcXVlc3REYXRhLmFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YTogcmVxdWVzdERhdGEsXG4gICAgICAgICAgICAgICAgICAgIH0sIGFnZW50KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uUmVzdWx0cy5wdXNoKGFwcHJvdmFsSXRlbSk7XG4gICAgICAgICAgICAgICAgLy8gbmV3SXRlbXMucHVzaChhcHByb3ZhbEl0ZW0ucnVuSXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcHJvY2VzcyBoYW5kb2Zmc1xuICAgIGlmIChwcm9jZXNzZWRSZXNwb25zZS5oYW5kb2Zmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBleGVjdXRlSGFuZG9mZkNhbGxzKGFnZW50LCBvcmlnaW5hbElucHV0LCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCBuZXdSZXNwb25zZSwgcHJvY2Vzc2VkUmVzcG9uc2UuaGFuZG9mZnMsIHJ1bm5lciwgc3RhdGUuX2NvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjaGVja1Rvb2xPdXRwdXQgPSBhd2FpdCBjaGVja0ZvckZpbmFsT3V0cHV0RnJvbVRvb2xzKGFnZW50LCBmdW5jdGlvblJlc3VsdHMsIHN0YXRlKTtcbiAgICBpZiAoY2hlY2tUb29sT3V0cHV0LmlzRmluYWxPdXRwdXQpIHtcbiAgICAgICAgcnVubmVyLmVtaXQoJ2FnZW50X2VuZCcsIHN0YXRlLl9jb250ZXh0LCBhZ2VudCwgY2hlY2tUb29sT3V0cHV0LmZpbmFsT3V0cHV0KTtcbiAgICAgICAgYWdlbnQuZW1pdCgnYWdlbnRfZW5kJywgc3RhdGUuX2NvbnRleHQsIGNoZWNrVG9vbE91dHB1dC5maW5hbE91dHB1dCk7XG4gICAgICAgIHJldHVybiBuZXcgU2luZ2xlU3RlcFJlc3VsdChvcmlnaW5hbElucHV0LCBuZXdSZXNwb25zZSwgcHJlU3RlcEl0ZW1zLCBuZXdJdGVtcywge1xuICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnLFxuICAgICAgICAgICAgb3V0cHV0OiBjaGVja1Rvb2xPdXRwdXQuZmluYWxPdXRwdXQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaGVja1Rvb2xPdXRwdXQuaXNJbnRlcnJ1cHRlZCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHtcbiAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBpbnRlcnJ1cHRpb25zOiBjaGVja1Rvb2xPdXRwdXQuaW50ZXJydXB0aW9ucyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgbW9kZWwgaXNzdWVkIGFueSB0b29sIGNhbGxzIG9yIGhhbmRvZmZzIGluIHRoaXMgdHVybixcbiAgICAvLyB3ZSBtdXN0IE5PVCB0cmVhdCBhbnkgYXNzaXN0YW50IG1lc3NhZ2UgaW4gdGhlIHNhbWUgdHVybiBhcyB0aGUgZmluYWwgb3V0cHV0LlxuICAgIC8vIFdlIHNob3VsZCBydW4gdGhlIGxvb3AgYWdhaW4gc28gdGhlIG1vZGVsIGNhbiBzZWUgdGhlIHRvb2wgcmVzdWx0cyBhbmQgcmVzcG9uZC5cbiAgICBjb25zdCBoYWRUb29sQ2FsbHNPckFjdGlvbnMgPSAocHJvY2Vzc2VkUmVzcG9uc2UuZnVuY3Rpb25zPy5sZW5ndGggPz8gMCkgPiAwIHx8XG4gICAgICAgIChwcm9jZXNzZWRSZXNwb25zZS5jb21wdXRlckFjdGlvbnM/Lmxlbmd0aCA/PyAwKSA+IDAgfHxcbiAgICAgICAgKHByb2Nlc3NlZFJlc3BvbnNlLm1jcEFwcHJvdmFsUmVxdWVzdHM/Lmxlbmd0aCA/PyAwKSA+IDAgfHxcbiAgICAgICAgKHByb2Nlc3NlZFJlc3BvbnNlLmhhbmRvZmZzPy5sZW5ndGggPz8gMCkgPiAwO1xuICAgIGlmIChoYWRUb29sQ2FsbHNPckFjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyB9KTtcbiAgICB9XG4gICAgLy8gTm8gdG9vbCBjYWxscy9hY3Rpb25zIGluIHRoaXMgdHVybjsgc2FmZSB0byBjb25zaWRlciBhIHBsYWluIGFzc2lzdGFudCBtZXNzYWdlIGFzIGZpbmFsLlxuICAgIGNvbnN0IG1lc3NhZ2VJdGVtcyA9IG5ld0l0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbSBpbnN0YW5jZW9mIFJ1bk1lc3NhZ2VPdXRwdXRJdGVtKTtcbiAgICAvLyB3ZSB3aWxsIHVzZSB0aGUgbGFzdCBjb250ZW50IG91dHB1dCBhcyB0aGUgZmluYWwgb3V0cHV0XG4gICAgY29uc3QgcG90ZW50aWFsRmluYWxPdXRwdXQgPSBtZXNzYWdlSXRlbXMubGVuZ3RoID4gMFxuICAgICAgICA/IGdldExhc3RUZXh0RnJvbU91dHB1dE1lc3NhZ2UobWVzc2FnZUl0ZW1zW21lc3NhZ2VJdGVtcy5sZW5ndGggLSAxXS5yYXdJdGVtKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAvLyBpZiB0aGVyZSBpcyBubyBvdXRwdXQgd2UganVzdCBydW4gYWdhaW5cbiAgICBpZiAodHlwZW9mIHBvdGVudGlhbEZpbmFsT3V0cHV0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHsgdHlwZTogJ25leHRfc3RlcF9ydW5fYWdhaW4nIH0pO1xuICAgIH1cbiAgICBjb25zdCBoYXNQZW5kaW5nVG9vbHNPckFwcHJvdmFscyA9IGZ1bmN0aW9uUmVzdWx0cy5zb21lKChyZXN1bHQpID0+IHJlc3VsdC5ydW5JdGVtIGluc3RhbmNlb2YgUnVuVG9vbEFwcHJvdmFsSXRlbSk7XG4gICAgaWYgKCFoYXNQZW5kaW5nVG9vbHNPckFwcHJvdmFscykge1xuICAgICAgICBpZiAoYWdlbnQub3V0cHV0VHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbmV4dF9zdGVwX2ZpbmFsX291dHB1dCcsXG4gICAgICAgICAgICAgICAgb3V0cHV0OiBwb3RlbnRpYWxGaW5hbE91dHB1dCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhZ2VudC5vdXRwdXRUeXBlICE9PSAndGV4dCcgJiYgcG90ZW50aWFsRmluYWxPdXRwdXQpIHtcbiAgICAgICAgICAgIC8vIFN0cnVjdHVyZWQgb3V0cHV0IHNjaGVtYSA9PiBhbHdheXMgbGVhZHMgdG8gYSBmaW5hbCBvdXRwdXQgaWYgd2UgaGF2ZSB0ZXh0LlxuICAgICAgICAgICAgY29uc3QgeyBwYXJzZXIgfSA9IGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUoYWdlbnQub3V0cHV0VHlwZSwgJ2ZpbmFsX291dHB1dCcpO1xuICAgICAgICAgICAgY29uc3QgW2Vycm9yXSA9IGF3YWl0IHNhZmVFeGVjdXRlKCgpID0+IHBhcnNlcihwb3RlbnRpYWxGaW5hbE91dHB1dCkpO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgYWRkRXJyb3JUb0N1cnJlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgb3V0cHV0IHR5cGUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdJbnZhbGlkIG91dHB1dCB0eXBlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHsgdHlwZTogJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnLCBvdXRwdXQ6IHBvdGVudGlhbEZpbmFsT3V0cHV0IH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2luZ2xlU3RlcFJlc3VsdChvcmlnaW5hbElucHV0LCBuZXdSZXNwb25zZSwgcHJlU3RlcEl0ZW1zLCBuZXdJdGVtcywgeyB0eXBlOiAnbmV4dF9zdGVwX3J1bl9hZ2FpbicgfSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9vbENhbGxPdXRwdXRJdGVtKHRvb2xDYWxsLCBvdXRwdXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZnVuY3Rpb25fY2FsbF9yZXN1bHQnLFxuICAgICAgICBuYW1lOiB0b29sQ2FsbC5uYW1lLFxuICAgICAgICBjYWxsSWQ6IHRvb2xDYWxsLmNhbGxJZCxcbiAgICAgICAgc3RhdHVzOiAnY29tcGxldGVkJyxcbiAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICB0ZXh0OiB0b1NtYXJ0U3RyaW5nKG91dHB1dCksXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlRnVuY3Rpb25Ub29sQ2FsbHMoYWdlbnQsIHRvb2xSdW5zLCBydW5uZXIsIHN0YXRlKSB7XG4gICAgYXN5bmMgZnVuY3Rpb24gcnVuU2luZ2xlVG9vbCh0b29sUnVuKSB7XG4gICAgICAgIGxldCBwYXJzZWRBcmdzID0gdG9vbFJ1bi50b29sQ2FsbC5hcmd1bWVudHM7XG4gICAgICAgIGlmICh0b29sUnVuLnRvb2wucGFyYW1ldGVycykge1xuICAgICAgICAgICAgaWYgKGlzWm9kT2JqZWN0KHRvb2xSdW4udG9vbC5wYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZEFyZ3MgPSB0b29sUnVuLnRvb2wucGFyYW1ldGVycy5wYXJzZShwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlZEFyZ3MgPSBKU09OLnBhcnNlKHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5lZWRzQXBwcm92YWwgPSBhd2FpdCB0b29sUnVuLnRvb2wubmVlZHNBcHByb3ZhbChzdGF0ZS5fY29udGV4dCwgcGFyc2VkQXJncywgdG9vbFJ1bi50b29sQ2FsbC5jYWxsSWQpO1xuICAgICAgICBpZiAobmVlZHNBcHByb3ZhbCkge1xuICAgICAgICAgICAgY29uc3QgYXBwcm92YWwgPSBzdGF0ZS5fY29udGV4dC5pc1Rvb2xBcHByb3ZlZCh7XG4gICAgICAgICAgICAgICAgdG9vbE5hbWU6IHRvb2xSdW4udG9vbC5uYW1lLFxuICAgICAgICAgICAgICAgIGNhbGxJZDogdG9vbFJ1bi50b29sQ2FsbC5jYWxsSWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChhcHByb3ZhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAvLyByZWplY3RlZFxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRoRnVuY3Rpb25TcGFuKGFzeW5jIChzcGFuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gJ1Rvb2wgZXhlY3V0aW9uIHdhcyBub3QgYXBwcm92ZWQuJztcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sX25hbWU6IHRvb2xSdW4udG9vbC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBgVG9vbCBleGVjdXRpb24gZm9yICR7dG9vbFJ1bi50b29sQ2FsbC5jYWxsSWR9IHdhcyBtYW51YWxseSByZWplY3RlZCBieSB1c2VyLmAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zcGFuRGF0YS5vdXRwdXQgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbl9vdXRwdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbDogdG9vbFJ1bi50b29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkl0ZW06IG5ldyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0oZ2V0VG9vbENhbGxPdXRwdXRJdGVtKHRvb2xSdW4udG9vbENhbGwsIHJlc3BvbnNlKSwgYWdlbnQsIHJlc3BvbnNlKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRvb2xSdW4udG9vbC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFwcHJvdmFsICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBhcHByb3ZhbCBwcm9jZXNzIG5lZWRzIHRvIGJlIGRvbmUgaW4gdGhlIG5leHQgdHVyblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbl9hcHByb3ZhbCcsXG4gICAgICAgICAgICAgICAgICAgIHRvb2w6IHRvb2xSdW4udG9vbCxcbiAgICAgICAgICAgICAgICAgICAgcnVuSXRlbTogbmV3IFJ1blRvb2xBcHByb3ZhbEl0ZW0odG9vbFJ1bi50b29sQ2FsbCwgYWdlbnQpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpdGhGdW5jdGlvblNwYW4oYXN5bmMgKHNwYW4pID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uZXIuY29uZmlnLnRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNwYW5EYXRhLmlucHV0ID0gdG9vbFJ1bi50b29sQ2FsbC5hcmd1bWVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF90b29sX3N0YXJ0Jywgc3RhdGUuX2NvbnRleHQsIGFnZW50LCB0b29sUnVuLnRvb2wsIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbENhbGw6IHRvb2xSdW4udG9vbENhbGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHN0YXRlLl9jb250ZXh0LCB0b29sUnVuLnRvb2wsIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbENhbGw6IHRvb2xSdW4udG9vbENhbGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9vbE91dHB1dCA9IGF3YWl0IHRvb2xSdW4udG9vbC5pbnZva2Uoc3RhdGUuX2NvbnRleHQsIHRvb2xSdW4udG9vbENhbGwuYXJndW1lbnRzLCB7IHRvb2xDYWxsOiB0b29sUnVuLnRvb2xDYWxsIH0pO1xuICAgICAgICAgICAgICAgIC8vIFVzZSBzdHJpbmcgZGF0YSBmb3IgdHJhY2luZyBhbmQgZXZlbnQgZW1pdHRlclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ1Jlc3VsdCA9IHRvU21hcnRTdHJpbmcodG9vbE91dHB1dCk7XG4gICAgICAgICAgICAgICAgcnVubmVyLmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgc3RhdGUuX2NvbnRleHQsIGFnZW50LCB0b29sUnVuLnRvb2wsIHN0cmluZ1Jlc3VsdCwgeyB0b29sQ2FsbDogdG9vbFJ1bi50b29sQ2FsbCB9KTtcbiAgICAgICAgICAgICAgICBhZ2VudC5lbWl0KCdhZ2VudF90b29sX2VuZCcsIHN0YXRlLl9jb250ZXh0LCB0b29sUnVuLnRvb2wsIHN0cmluZ1Jlc3VsdCwgeyB0b29sQ2FsbDogdG9vbFJ1bi50b29sQ2FsbCB9KTtcbiAgICAgICAgICAgICAgICBpZiAocnVubmVyLmNvbmZpZy50cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc3BhbkRhdGEub3V0cHV0ID0gc3RyaW5nUmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmdW5jdGlvblJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX291dHB1dCcsXG4gICAgICAgICAgICAgICAgICAgIHRvb2w6IHRvb2xSdW4udG9vbCxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiB0b29sT3V0cHV0LFxuICAgICAgICAgICAgICAgICAgICBydW5JdGVtOiBuZXcgUnVuVG9vbENhbGxPdXRwdXRJdGVtKGdldFRvb2xDYWxsT3V0cHV0SXRlbSh0b29sUnVuLnRvb2xDYWxsLCB0b29sT3V0cHV0KSwgYWdlbnQsIHRvb2xPdXRwdXQpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgbmVzdGVkUnVuUmVzdWx0ID0gY29uc3VtZUFnZW50VG9vbFJ1blJlc3VsdCh0b29sUnVuLnRvb2xDYWxsKTtcbiAgICAgICAgICAgICAgICBpZiAobmVzdGVkUnVuUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uUmVzdWx0LmFnZW50UnVuUmVzdWx0ID0gbmVzdGVkUnVuUmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXN0ZWRJbnRlcnJ1cHRpb25zID0gbmVzdGVkUnVuUmVzdWx0LmludGVycnVwdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXN0ZWRJbnRlcnJ1cHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uUmVzdWx0LmludGVycnVwdGlvbnMgPSBuZXN0ZWRJbnRlcnJ1cHRpb25zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvblJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHNwYW4uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgcnVubmluZyB0b29sJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbF9uYW1lOiB0b29sUnVuLnRvb2wubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdG9vbFJ1bi50b29sLm5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHRvb2xSdW5zLm1hcChydW5TaW5nbGVUb29sKSk7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgVG9vbENhbGxFcnJvcihgRmFpbGVkIHRvIHJ1biBmdW5jdGlvbiB0b29sczogJHtlfWAsIGUsIHN0YXRlKTtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG4vLyBJbnRlcm5hbCBoZWxwZXI6IGRpc3BhdGNoIGEgY29tcHV0ZXIgYWN0aW9uIGFuZCByZXR1cm4gYSBzY3JlZW5zaG90IChzeW5jL2FzeW5jKVxuYXN5bmMgZnVuY3Rpb24gX3J1bkNvbXB1dGVyQWN0aW9uQW5kU2NyZWVuc2hvdChjb21wdXRlciwgdG9vbENhbGwpIHtcbiAgICBjb25zdCBhY3Rpb24gPSB0b29sQ2FsbC5hY3Rpb247XG4gICAgbGV0IHNjcmVlbnNob3Q7XG4gICAgLy8gRGlzcGF0Y2ggYmFzZWQgb24gYWN0aW9uIHR5cGUgc3RyaW5nIChhc3N1bWUgYWN0aW9uLnR5cGUgZXhpc3RzKVxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgYXdhaXQgY29tcHV0ZXIuY2xpY2soYWN0aW9uLngsIGFjdGlvbi55LCBhY3Rpb24uYnV0dG9uKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb3VibGVfY2xpY2snOlxuICAgICAgICAgICAgYXdhaXQgY29tcHV0ZXIuZG91YmxlQ2xpY2soYWN0aW9uLngsIGFjdGlvbi55KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkcmFnJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLmRyYWcoYWN0aW9uLnBhdGgubWFwKChwKSA9PiBbcC54LCBwLnldKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAna2V5cHJlc3MnOlxuICAgICAgICAgICAgYXdhaXQgY29tcHV0ZXIua2V5cHJlc3MoYWN0aW9uLmtleXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21vdmUnOlxuICAgICAgICAgICAgYXdhaXQgY29tcHV0ZXIubW92ZShhY3Rpb24ueCwgYWN0aW9uLnkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NjcmVlbnNob3QnOlxuICAgICAgICAgICAgc2NyZWVuc2hvdCA9IGF3YWl0IGNvbXB1dGVyLnNjcmVlbnNob3QoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzY3JvbGwnOlxuICAgICAgICAgICAgYXdhaXQgY29tcHV0ZXIuc2Nyb2xsKGFjdGlvbi54LCBhY3Rpb24ueSwgYWN0aW9uLnNjcm9sbF94LCBhY3Rpb24uc2Nyb2xsX3kpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3R5cGUnOlxuICAgICAgICAgICAgYXdhaXQgY29tcHV0ZXIudHlwZShhY3Rpb24udGV4dCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnd2FpdCc6XG4gICAgICAgICAgICBhd2FpdCBjb21wdXRlci53YWl0KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGFjdGlvbjsgLy8gZW5zdXJlcyB0aGF0IHdlIGhhbmRsZSBldmVyeSBhY3Rpb24gd2Uga25vdyBvZlxuICAgICAgICAgICAgLy8gVW5rbm93biBhY3Rpb24sIGp1c3QgdGFrZSBzY3JlZW5zaG90XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzY3JlZW5zaG90ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gc2NyZWVuc2hvdDtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHJldHVybiBzY3JlZW5zaG90IGFzIGJhc2U2NCBzdHJpbmdcbiAgICBpZiAodHlwZW9mIGNvbXB1dGVyLnNjcmVlbnNob3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2NyZWVuc2hvdCA9IGF3YWl0IGNvbXB1dGVyLnNjcmVlbnNob3QoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzY3JlZW5zaG90ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHNjcmVlbnNob3Q7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb21wdXRlciBkb2VzIG5vdCBpbXBsZW1lbnQgc2NyZWVuc2hvdCgpJyk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUNvbXB1dGVyQWN0aW9ucyhhZ2VudCwgYWN0aW9ucywgcnVubmVyLCBydW5Db250ZXh0LCBjdXN0b21Mb2dnZXIgPSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBfbG9nZ2VyID0gY3VzdG9tTG9nZ2VyID8/IGxvZ2dlcjtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZm9yIChjb25zdCBhY3Rpb24gb2YgYWN0aW9ucykge1xuICAgICAgICBjb25zdCBjb21wdXRlciA9IGFjdGlvbi5jb21wdXRlci5jb21wdXRlcjtcbiAgICAgICAgY29uc3QgdG9vbENhbGwgPSBhY3Rpb24udG9vbENhbGw7XG4gICAgICAgIC8vIEhvb2tzOiBvbl90b29sX3N0YXJ0IChnbG9iYWwgKyBhZ2VudClcbiAgICAgICAgcnVubmVyLmVtaXQoJ2FnZW50X3Rvb2xfc3RhcnQnLCBydW5Db250ZXh0LCBhZ2VudCwgYWN0aW9uLmNvbXB1dGVyLCB7XG4gICAgICAgICAgICB0b29sQ2FsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgYWdlbnQuZW1pdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHJ1bkNvbnRleHQsIGFjdGlvbi5jb21wdXRlciwgeyB0b29sQ2FsbCB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSdW4gdGhlIGFjdGlvbiBhbmQgZ2V0IHNjcmVlbnNob3RcbiAgICAgICAgbGV0IG91dHB1dDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG91dHB1dCA9IGF3YWl0IF9ydW5Db21wdXRlckFjdGlvbkFuZFNjcmVlbnNob3QoY29tcHV0ZXIsIHRvb2xDYWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZXhlY3V0ZSBjb21wdXRlciBhY3Rpb246JywgZXJyKTtcbiAgICAgICAgICAgIG91dHB1dCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhvb2tzOiBvbl90b29sX2VuZCAoZ2xvYmFsICsgYWdlbnQpXG4gICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF90b29sX2VuZCcsIHJ1bkNvbnRleHQsIGFnZW50LCBhY3Rpb24uY29tcHV0ZXIsIG91dHB1dCwge1xuICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIGFnZW50LmVtaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFnZW50LmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgcnVuQ29udGV4dCwgYWN0aW9uLmNvbXB1dGVyLCBvdXRwdXQsIHtcbiAgICAgICAgICAgICAgICB0b29sQ2FsbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsd2F5cyByZXR1cm4gYSBzY3JlZW5zaG90IGFzIGEgYmFzZTY0IGRhdGEgVVJMXG4gICAgICAgIGNvbnN0IGltYWdlVXJsID0gb3V0cHV0ID8gYGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwke291dHB1dH1gIDogJyc7XG4gICAgICAgIGNvbnN0IHJhd0l0ZW0gPSB7XG4gICAgICAgICAgICB0eXBlOiAnY29tcHV0ZXJfY2FsbF9yZXN1bHQnLFxuICAgICAgICAgICAgY2FsbElkOiB0b29sQ2FsbC5jYWxsSWQsXG4gICAgICAgICAgICBvdXRwdXQ6IHsgdHlwZTogJ2NvbXB1dGVyX3NjcmVlbnNob3QnLCBkYXRhOiBpbWFnZVVybCB9LFxuICAgICAgICB9O1xuICAgICAgICByZXN1bHRzLnB1c2gobmV3IFJ1blRvb2xDYWxsT3V0cHV0SXRlbShyYXdJdGVtLCBhZ2VudCwgaW1hZ2VVcmwpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUhhbmRvZmZDYWxscyhhZ2VudCwgb3JpZ2luYWxJbnB1dCwgcHJlU3RlcEl0ZW1zLCBuZXdTdGVwSXRlbXMsIG5ld1Jlc3BvbnNlLCBydW5IYW5kb2ZmcywgcnVubmVyLCBydW5Db250ZXh0KSB7XG4gICAgbmV3U3RlcEl0ZW1zID0gWy4uLm5ld1N0ZXBJdGVtc107XG4gICAgaWYgKHJ1bkhhbmRvZmZzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBsb2dnZXIud2FybignSW5jb3JyZWN0bHkgY2FsbGVkIGV4ZWN1dGVIYW5kb2ZmQ2FsbHMgd2l0aCBubyBoYW5kb2Zmcy4gVGhpcyBzaG91bGQgbm90IGhhcHBlbi4gTW92aW5nIG9uLicpO1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3U3RlcEl0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyB9KTtcbiAgICB9XG4gICAgaWYgKHJ1bkhhbmRvZmZzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gbXVsdGlwbGUgaGFuZG9mZnMuIElnbm9yaW5nIGFsbCBidXQgdGhlIGZpcnN0IG9uZSBieSBhZGRpbmcgcmVqZWN0IHJlc3BvbnNlcyBmb3IgdGhvc2VcbiAgICAgICAgY29uc3Qgb3V0cHV0TWVzc2FnZSA9ICdNdWx0aXBsZSBoYW5kb2ZmcyBkZXRlY3RlZCwgaWdub3JpbmcgdGhpcyBvbmUuJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBydW5IYW5kb2Zmcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbmV3U3RlcEl0ZW1zLnB1c2gobmV3IFJ1blRvb2xDYWxsT3V0cHV0SXRlbShnZXRUb29sQ2FsbE91dHB1dEl0ZW0ocnVuSGFuZG9mZnNbaV0udG9vbENhbGwsIG91dHB1dE1lc3NhZ2UpLCBhZ2VudCwgb3V0cHV0TWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFjdHVhbEhhbmRvZmYgPSBydW5IYW5kb2Zmc1swXTtcbiAgICByZXR1cm4gd2l0aEhhbmRvZmZTcGFuKGFzeW5jIChoYW5kb2ZmU3BhbikgPT4ge1xuICAgICAgICBjb25zdCBoYW5kb2ZmID0gYWN0dWFsSGFuZG9mZi5oYW5kb2ZmO1xuICAgICAgICBjb25zdCBuZXdBZ2VudCA9IGF3YWl0IGhhbmRvZmYub25JbnZva2VIYW5kb2ZmKHJ1bkNvbnRleHQsIGFjdHVhbEhhbmRvZmYudG9vbENhbGwuYXJndW1lbnRzKTtcbiAgICAgICAgaGFuZG9mZlNwYW4uc3BhbkRhdGEudG9fYWdlbnQgPSBuZXdBZ2VudC5uYW1lO1xuICAgICAgICBpZiAocnVuSGFuZG9mZnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdGVkQWdlbnRzID0gcnVuSGFuZG9mZnMubWFwKChoKSA9PiBoLmhhbmRvZmYuYWdlbnROYW1lKTtcbiAgICAgICAgICAgIGhhbmRvZmZTcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTXVsdGlwbGUgaGFuZG9mZnMgcmVxdWVzdGVkJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZF9hZ2VudHM6IHJlcXVlc3RlZEFnZW50cyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RlcEl0ZW1zLnB1c2gobmV3IFJ1bkhhbmRvZmZPdXRwdXRJdGVtKGdldFRvb2xDYWxsT3V0cHV0SXRlbShhY3R1YWxIYW5kb2ZmLnRvb2xDYWxsLCBnZXRUcmFuc2Zlck1lc3NhZ2UobmV3QWdlbnQpKSwgYWdlbnQsIG5ld0FnZW50KSk7XG4gICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF9oYW5kb2ZmJywgcnVuQ29udGV4dCwgYWdlbnQsIG5ld0FnZW50KTtcbiAgICAgICAgYWdlbnQuZW1pdCgnYWdlbnRfaGFuZG9mZicsIHJ1bkNvbnRleHQsIG5ld0FnZW50KTtcbiAgICAgICAgY29uc3QgaW5wdXRGaWx0ZXIgPSBoYW5kb2ZmLmlucHV0RmlsdGVyID8/IHJ1bm5lci5jb25maWcuaGFuZG9mZklucHV0RmlsdGVyO1xuICAgICAgICBpZiAoaW5wdXRGaWx0ZXIpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnRmlsdGVyaW5nIGlucHV0cyBmb3IgaGFuZG9mZicpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dEZpbHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGhhbmRvZmZTcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgaW5wdXQgZmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogJ25vdCBjYWxsYWJsZScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoYW5kb2ZmSW5wdXREYXRhID0ge1xuICAgICAgICAgICAgICAgIGlucHV0SGlzdG9yeTogQXJyYXkuaXNBcnJheShvcmlnaW5hbElucHV0KVxuICAgICAgICAgICAgICAgICAgICA/IFsuLi5vcmlnaW5hbElucHV0XVxuICAgICAgICAgICAgICAgICAgICA6IG9yaWdpbmFsSW5wdXQsXG4gICAgICAgICAgICAgICAgcHJlSGFuZG9mZkl0ZW1zOiBbLi4ucHJlU3RlcEl0ZW1zXSxcbiAgICAgICAgICAgICAgICBuZXdJdGVtczogWy4uLm5ld1N0ZXBJdGVtc10sXG4gICAgICAgICAgICAgICAgcnVuQ29udGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IGlucHV0RmlsdGVyKGhhbmRvZmZJbnB1dERhdGEpO1xuICAgICAgICAgICAgb3JpZ2luYWxJbnB1dCA9IGZpbHRlcmVkLmlucHV0SGlzdG9yeTtcbiAgICAgICAgICAgIHByZVN0ZXBJdGVtcyA9IGZpbHRlcmVkLnByZUhhbmRvZmZJdGVtcztcbiAgICAgICAgICAgIG5ld1N0ZXBJdGVtcyA9IGZpbHRlcmVkLm5ld0l0ZW1zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU2luZ2xlU3RlcFJlc3VsdChvcmlnaW5hbElucHV0LCBuZXdSZXNwb25zZSwgcHJlU3RlcEl0ZW1zLCBuZXdTdGVwSXRlbXMsIHsgdHlwZTogJ25leHRfc3RlcF9oYW5kb2ZmJywgbmV3QWdlbnQgfSk7XG4gICAgfSwge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBmcm9tX2FnZW50OiBhZ2VudC5uYW1lLFxuICAgICAgICB9LFxuICAgIH0pO1xufVxuY29uc3QgTk9UX0ZJTkFMX09VVFBVVCA9IHtcbiAgICBpc0ZpbmFsT3V0cHV0OiBmYWxzZSxcbiAgICBpc0ludGVycnVwdGVkOiB1bmRlZmluZWQsXG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrRm9yRmluYWxPdXRwdXRGcm9tVG9vbHMoYWdlbnQsIHRvb2xSZXN1bHRzLCBzdGF0ZSkge1xuICAgIGlmICh0b29sUmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIE5PVF9GSU5BTF9PVVRQVVQ7XG4gICAgfVxuICAgIGNvbnN0IGludGVycnVwdGlvbnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiB0b29sUmVzdWx0cykge1xuICAgICAgICBpZiAocmVzdWx0LnJ1bkl0ZW0gaW5zdGFuY2VvZiBSdW5Ub29sQXBwcm92YWxJdGVtKSB7XG4gICAgICAgICAgICBpbnRlcnJ1cHRpb25zLnB1c2gocmVzdWx0LnJ1bkl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQudHlwZSA9PT0gJ2Z1bmN0aW9uX291dHB1dCcpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdC5pbnRlcnJ1cHRpb25zKSkge1xuICAgICAgICAgICAgICAgIGludGVycnVwdGlvbnMucHVzaCguLi5yZXN1bHQuaW50ZXJydXB0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQuYWdlbnRSdW5SZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXN0ZWRJbnRlcnJ1cHRpb25zID0gcmVzdWx0LmFnZW50UnVuUmVzdWx0LmludGVycnVwdGlvbnM7XG4gICAgICAgICAgICAgICAgaWYgKG5lc3RlZEludGVycnVwdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnJ1cHRpb25zLnB1c2goLi4ubmVzdGVkSW50ZXJydXB0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpbnRlcnJ1cHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzRmluYWxPdXRwdXQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNJbnRlcnJ1cHRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGludGVycnVwdGlvbnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChhZ2VudC50b29sVXNlQmVoYXZpb3IgPT09ICdydW5fbGxtX2FnYWluJykge1xuICAgICAgICByZXR1cm4gTk9UX0ZJTkFMX09VVFBVVDtcbiAgICB9XG4gICAgY29uc3QgZmlyc3RUb29sUmVzdWx0ID0gdG9vbFJlc3VsdHNbMF07XG4gICAgaWYgKGFnZW50LnRvb2xVc2VCZWhhdmlvciA9PT0gJ3N0b3Bfb25fZmlyc3RfdG9vbCcpIHtcbiAgICAgICAgaWYgKGZpcnN0VG9vbFJlc3VsdD8udHlwZSA9PT0gJ2Z1bmN0aW9uX291dHB1dCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ091dHB1dCA9IHRvU21hcnRTdHJpbmcoZmlyc3RUb29sUmVzdWx0Lm91dHB1dCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzRmluYWxPdXRwdXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNJbnRlcnJ1cHRlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZpbmFsT3V0cHV0OiBzdHJpbmdPdXRwdXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOT1RfRklOQUxfT1VUUFVUO1xuICAgIH1cbiAgICBjb25zdCB0b29sVXNlQmVoYXZpb3IgPSBhZ2VudC50b29sVXNlQmVoYXZpb3I7XG4gICAgaWYgKHR5cGVvZiB0b29sVXNlQmVoYXZpb3IgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbnN0IHN0b3BwaW5nVG9vbCA9IHRvb2xSZXN1bHRzLmZpbmQoKHIpID0+IHRvb2xVc2VCZWhhdmlvci5zdG9wQXRUb29sTmFtZXMuaW5jbHVkZXMoci50b29sLm5hbWUpKTtcbiAgICAgICAgaWYgKHN0b3BwaW5nVG9vbD8udHlwZSA9PT0gJ2Z1bmN0aW9uX291dHB1dCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ091dHB1dCA9IHRvU21hcnRTdHJpbmcoc3RvcHBpbmdUb29sLm91dHB1dCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzRmluYWxPdXRwdXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNJbnRlcnJ1cHRlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZpbmFsT3V0cHV0OiBzdHJpbmdPdXRwdXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOT1RfRklOQUxfT1VUUFVUO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRvb2xVc2VCZWhhdmlvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdG9vbFVzZUJlaGF2aW9yKHN0YXRlLl9jb250ZXh0LCB0b29sUmVzdWx0cyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEludmFsaWQgdG9vbFVzZUJlaGF2aW9yOiAke3Rvb2xVc2VCZWhhdmlvcn1gLCBzdGF0ZSk7XG59XG5mdW5jdGlvbiBnZXRSdW5JdGVtU3RyZWFtRXZlbnROYW1lKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1bk1lc3NhZ2VPdXRwdXRJdGVtKSB7XG4gICAgICAgIHJldHVybiAnbWVzc2FnZV9vdXRwdXRfY3JlYXRlZCc7XG4gICAgfVxuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgUnVuSGFuZG9mZkNhbGxJdGVtKSB7XG4gICAgICAgIHJldHVybiAnaGFuZG9mZl9yZXF1ZXN0ZWQnO1xuICAgIH1cbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1bkhhbmRvZmZPdXRwdXRJdGVtKSB7XG4gICAgICAgIHJldHVybiAnaGFuZG9mZl9vY2N1cnJlZCc7XG4gICAgfVxuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgUnVuVG9vbENhbGxJdGVtKSB7XG4gICAgICAgIHJldHVybiAndG9vbF9jYWxsZWQnO1xuICAgIH1cbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1blRvb2xDYWxsT3V0cHV0SXRlbSkge1xuICAgICAgICByZXR1cm4gJ3Rvb2xfb3V0cHV0JztcbiAgICB9XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBSdW5SZWFzb25pbmdJdGVtKSB7XG4gICAgICAgIHJldHVybiAncmVhc29uaW5nX2l0ZW1fY3JlYXRlZCc7XG4gICAgfVxuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgUnVuVG9vbEFwcHJvdmFsSXRlbSkge1xuICAgICAgICByZXR1cm4gJ3Rvb2xfYXBwcm92YWxfcmVxdWVzdGVkJztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGVucXVldWVSdW5JdGVtU3RyZWFtRXZlbnQocmVzdWx0LCBpdGVtKSB7XG4gICAgY29uc3QgaXRlbU5hbWUgPSBnZXRSdW5JdGVtU3RyZWFtRXZlbnROYW1lKGl0ZW0pO1xuICAgIGlmICghaXRlbU5hbWUpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1Vua25vd24gaXRlbSB0eXBlOiAnLCBpdGVtKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXN1bHQuX2FkZEl0ZW0obmV3IFJ1bkl0ZW1TdHJlYW1FdmVudChpdGVtTmFtZSwgaXRlbSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmVhbVN0ZXBJdGVtc1RvUnVuUmVzdWx0KHJlc3VsdCwgaXRlbXMpIHtcbiAgICAvLyBQcmVzZXJ2ZSB0aGUgb3JkZXIgaW4gd2hpY2ggaXRlbXMgd2VyZSBnZW5lcmF0ZWQgYnkgZW5xdWV1ZWluZyBlYWNoIG9uZVxuICAgIC8vIGltbWVkaWF0ZWx5IG9uIHRoZSBzdHJlYW1lZCByZXN1bHQuXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgIGVucXVldWVSdW5JdGVtU3RyZWFtRXZlbnQocmVzdWx0LCBpdGVtKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkU3RlcFRvUnVuUmVzdWx0KHJlc3VsdCwgc3RlcCwgb3B0aW9ucykge1xuICAgIC8vIHNraXBJdGVtcyBjb250YWlucyBydW4gaXRlbXMgdGhhdCB3ZXJlIGFscmVhZHkgc3RyZWFtZWQgc28gd2UgYXZvaWRcbiAgICAvLyBlbnF1ZXVlaW5nIGR1cGxpY2F0ZSBldmVudHMgZm9yIHRoZSBzYW1lIGluc3RhbmNlLlxuICAgIGNvbnN0IHNraXBwZWRJdGVtcyA9IG9wdGlvbnM/LnNraXBJdGVtcztcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RlcC5uZXdTdGVwSXRlbXMpIHtcbiAgICAgICAgaWYgKHNraXBwZWRJdGVtcz8uaGFzKGl0ZW0pKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnF1ZXVlUnVuSXRlbVN0cmVhbUV2ZW50KHJlc3VsdCwgaXRlbSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFnZW50VG9vbFVzZVRyYWNrZXIge1xuICAgICNhZ2VudFRvVG9vbHMgPSBuZXcgTWFwKCk7XG4gICAgYWRkVG9vbFVzZShhZ2VudCwgdG9vbE5hbWVzKSB7XG4gICAgICAgIHRoaXMuI2FnZW50VG9Ub29scy5zZXQoYWdlbnQsIHRvb2xOYW1lcyk7XG4gICAgfVxuICAgIGhhc1VzZWRUb29scyhhZ2VudCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jYWdlbnRUb1Rvb2xzLmhhcyhhZ2VudCk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhBcnJheS5mcm9tKHRoaXMuI2FnZW50VG9Ub29scy5lbnRyaWVzKCkpLm1hcCgoW2FnZW50LCB0b29sTmFtZXNdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gW2FnZW50Lm5hbWUsIHRvb2xOYW1lc107XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5JbXBsZW1lbnRhdGlvbi5tanMubWFwIiwiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBBZ2VudCB9IGZyb20gXCIuL2FnZW50Lm1qc1wiO1xuaW1wb3J0IHsgUnVuTWVzc2FnZU91dHB1dEl0ZW0sIFJ1blRvb2xBcHByb3ZhbEl0ZW0sIFJ1blRvb2xDYWxsSXRlbSwgUnVuVG9vbENhbGxPdXRwdXRJdGVtLCBSdW5SZWFzb25pbmdJdGVtLCBSdW5IYW5kb2ZmQ2FsbEl0ZW0sIFJ1bkhhbmRvZmZPdXRwdXRJdGVtLCB9IGZyb20gXCIuL2l0ZW1zLm1qc1wiO1xuaW1wb3J0IHsgUnVuQ29udGV4dCB9IGZyb20gXCIuL3J1bkNvbnRleHQubWpzXCI7XG5pbXBvcnQgeyBnZXRUdXJuSW5wdXQgfSBmcm9tIFwiLi9ydW4ubWpzXCI7XG5pbXBvcnQgeyBBZ2VudFRvb2xVc2VUcmFja2VyLCBuZXh0U3RlcFNjaGVtYSwgfSBmcm9tIFwiLi9ydW5JbXBsZW1lbnRhdGlvbi5tanNcIjtcbmltcG9ydCB7IFN5c3RlbUVycm9yLCBVc2VyRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgeyBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyIH0gZnJvbSBcIi4vdHJhY2luZy9wcm92aWRlci5tanNcIjtcbmltcG9ydCB7IFVzYWdlIH0gZnJvbSBcIi4vdXNhZ2UubWpzXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50VHJhY2UgfSBmcm9tIFwiLi90cmFjaW5nL2luZGV4Lm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBoYW5kb2ZmIH0gZnJvbSBcIi4vaGFuZG9mZi5tanNcIjtcbmltcG9ydCAqIGFzIHByb3RvY29sIGZyb20gXCIuL3R5cGVzL3Byb3RvY29sLm1qc1wiO1xuaW1wb3J0IHsgc2FmZUV4ZWN1dGUgfSBmcm9tIFwiLi91dGlscy9zYWZlRXhlY3V0ZS5tanNcIjtcbi8qKlxuICogVGhlIHNjaGVtYSB2ZXJzaW9uIG9mIHRoZSBzZXJpYWxpemVkIHJ1biBzdGF0ZS4gVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHRoZSBzZXJpYWxpemVkXG4gKiBydW4gc3RhdGUgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIFNESy5cbiAqIElmIGFueXRoaW5nIGluIHRoaXMgc2NoZW1hIGNoYW5nZXMsIHRoZSB2ZXJzaW9uIHdpbGwgaGF2ZSB0byBiZSBpbmNyZW1lbnRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IENVUlJFTlRfU0NIRU1BX1ZFUlNJT04gPSAnMS4wJztcbmNvbnN0ICRzY2hlbWFWZXJzaW9uID0gei5saXRlcmFsKENVUlJFTlRfU0NIRU1BX1ZFUlNJT04pO1xuY29uc3Qgc2VyaWFsaXplZEFnZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIG5hbWU6IHouc3RyaW5nKCksXG59KTtcbmNvbnN0IHNlcmlhbGl6ZWRTcGFuQmFzZSA9IHoub2JqZWN0KHtcbiAgICBvYmplY3Q6IHoubGl0ZXJhbCgndHJhY2Uuc3BhbicpLFxuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIHRyYWNlX2lkOiB6LnN0cmluZygpLFxuICAgIHBhcmVudF9pZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgIHN0YXJ0ZWRfYXQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgICBlbmRlZF9hdDogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgIGVycm9yOiB6XG4gICAgICAgIC5vYmplY3Qoe1xuICAgICAgICBtZXNzYWdlOiB6LnN0cmluZygpLFxuICAgICAgICBkYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKS5vcHRpb25hbCgpLFxuICAgIH0pXG4gICAgICAgIC5udWxsYWJsZSgpLFxuICAgIHNwYW5fZGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSksXG59KTtcbmNvbnN0IFNlcmlhbGl6ZWRTcGFuID0gc2VyaWFsaXplZFNwYW5CYXNlLmV4dGVuZCh7XG4gICAgcHJldmlvdXNfc3Bhbjogei5sYXp5KCgpID0+IFNlcmlhbGl6ZWRTcGFuKS5vcHRpb25hbCgpLFxufSk7XG5jb25zdCB1c2FnZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICByZXF1ZXN0czogei5udW1iZXIoKSxcbiAgICBpbnB1dFRva2Vuczogei5udW1iZXIoKSxcbiAgICBvdXRwdXRUb2tlbnM6IHoubnVtYmVyKCksXG4gICAgdG90YWxUb2tlbnM6IHoubnVtYmVyKCksXG59KTtcbmNvbnN0IG1vZGVsUmVzcG9uc2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdXNhZ2U6IHVzYWdlU2NoZW1hLFxuICAgIG91dHB1dDogei5hcnJheShwcm90b2NvbC5PdXRwdXRNb2RlbEl0ZW0pLFxuICAgIHJlc3BvbnNlSWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBwcm92aWRlckRhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLm9wdGlvbmFsKCksXG59KTtcbmNvbnN0IGl0ZW1TY2hlbWEgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbWVzc2FnZV9vdXRwdXRfaXRlbScpLFxuICAgICAgICByYXdJdGVtOiBwcm90b2NvbC5Bc3Npc3RhbnRNZXNzYWdlSXRlbSxcbiAgICAgICAgYWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgndG9vbF9jYWxsX2l0ZW0nKSxcbiAgICAgICAgcmF3SXRlbTogcHJvdG9jb2wuVG9vbENhbGxJdGVtLm9yKHByb3RvY29sLkhvc3RlZFRvb2xDYWxsSXRlbSksXG4gICAgICAgIGFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ3Rvb2xfY2FsbF9vdXRwdXRfaXRlbScpLFxuICAgICAgICByYXdJdGVtOiBwcm90b2NvbC5GdW5jdGlvbkNhbGxSZXN1bHRJdGVtLFxuICAgICAgICBhZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgICAgICBvdXRwdXQ6IHouc3RyaW5nKCksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ3JlYXNvbmluZ19pdGVtJyksXG4gICAgICAgIHJhd0l0ZW06IHByb3RvY29sLlJlYXNvbmluZ0l0ZW0sXG4gICAgICAgIGFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2hhbmRvZmZfY2FsbF9pdGVtJyksXG4gICAgICAgIHJhd0l0ZW06IHByb3RvY29sLkZ1bmN0aW9uQ2FsbEl0ZW0sXG4gICAgICAgIGFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2hhbmRvZmZfb3V0cHV0X2l0ZW0nKSxcbiAgICAgICAgcmF3SXRlbTogcHJvdG9jb2wuRnVuY3Rpb25DYWxsUmVzdWx0SXRlbSxcbiAgICAgICAgc291cmNlQWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICAgICAgdGFyZ2V0QWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgndG9vbF9hcHByb3ZhbF9pdGVtJyksXG4gICAgICAgIHJhd0l0ZW06IHByb3RvY29sLkZ1bmN0aW9uQ2FsbEl0ZW0ub3IocHJvdG9jb2wuSG9zdGVkVG9vbENhbGxJdGVtKSxcbiAgICAgICAgYWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICB9KSxcbl0pO1xuY29uc3Qgc2VyaWFsaXplZFRyYWNlU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIG9iamVjdDogei5saXRlcmFsKCd0cmFjZScpLFxuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIHdvcmtmbG93X25hbWU6IHouc3RyaW5nKCksXG4gICAgZ3JvdXBfaWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgICBtZXRhZGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSksXG59KTtcbmNvbnN0IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBuZXdJdGVtczogei5hcnJheShpdGVtU2NoZW1hKSxcbiAgICB0b29sc1VzZWQ6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gICAgaGFuZG9mZnM6IHouYXJyYXkoei5vYmplY3Qoe1xuICAgICAgICB0b29sQ2FsbDogei5hbnkoKSxcbiAgICAgICAgaGFuZG9mZjogei5hbnkoKSxcbiAgICB9KSksXG4gICAgZnVuY3Rpb25zOiB6LmFycmF5KHoub2JqZWN0KHtcbiAgICAgICAgdG9vbENhbGw6IHouYW55KCksXG4gICAgICAgIHRvb2w6IHouYW55KCksXG4gICAgfSkpLFxuICAgIGNvbXB1dGVyQWN0aW9uczogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgICAgIHRvb2xDYWxsOiB6LmFueSgpLFxuICAgICAgICBjb21wdXRlcjogei5hbnkoKSxcbiAgICB9KSksXG4gICAgbWNwQXBwcm92YWxSZXF1ZXN0czogelxuICAgICAgICAuYXJyYXkoei5vYmplY3Qoe1xuICAgICAgICByZXF1ZXN0SXRlbTogei5vYmplY3Qoe1xuICAgICAgICAgICAgLy8gcHJvdG9jb2wuSG9zdGVkVG9vbENhbGxJdGVtXG4gICAgICAgICAgICByYXdJdGVtOiB6Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgdHlwZTogei5saXRlcmFsKCdob3N0ZWRfdG9vbF9jYWxsJyksXG4gICAgICAgICAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBhcmd1bWVudHM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgICAgICBvdXRwdXQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGFsd2F5cyBleGlzdHMgYnV0IG1hcmtlZCBhcyBvcHRpb25hbCBmb3IgZWFybHkgdmVyc2lvbiBjb21wYXRpYmlsaXR5OyB3aGVuIHJlbGVhc2luZyAxLjAsIHdlIGNhbiByZW1vdmUgdGhlIG51bGxhYmxlIGFuZCBvcHRpb25hbFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBIb3N0ZWRNQ1BUb29sXG4gICAgICAgIG1jcFRvb2w6IHoub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnaG9zdGVkX3Rvb2wnKSxcbiAgICAgICAgICAgIG5hbWU6IHoubGl0ZXJhbCgnaG9zdGVkX21jcCcpLFxuICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKSxcbiAgICAgICAgfSksXG4gICAgfSkpXG4gICAgICAgIC5vcHRpb25hbCgpLFxufSk7XG5jb25zdCBndWFyZHJhaWxGdW5jdGlvbk91dHB1dFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0cmlwd2lyZVRyaWdnZXJlZDogei5ib29sZWFuKCksXG4gICAgb3V0cHV0SW5mbzogei5hbnkoKSxcbn0pO1xuY29uc3QgaW5wdXRHdWFyZHJhaWxSZXN1bHRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgZ3VhcmRyYWlsOiB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXQnKSxcbiAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICB9KSxcbiAgICBvdXRwdXQ6IGd1YXJkcmFpbEZ1bmN0aW9uT3V0cHV0U2NoZW1hLFxufSk7XG5jb25zdCBvdXRwdXRHdWFyZHJhaWxSZXN1bHRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgZ3VhcmRyYWlsOiB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnb3V0cHV0JyksXG4gICAgICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgfSksXG4gICAgYWdlbnRPdXRwdXQ6IHouYW55KCksXG4gICAgYWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICBvdXRwdXQ6IGd1YXJkcmFpbEZ1bmN0aW9uT3V0cHV0U2NoZW1hLFxufSk7XG5leHBvcnQgY29uc3QgU2VyaWFsaXplZFJ1blN0YXRlID0gei5vYmplY3Qoe1xuICAgICRzY2hlbWFWZXJzaW9uLFxuICAgIGN1cnJlbnRUdXJuOiB6Lm51bWJlcigpLFxuICAgIGN1cnJlbnRBZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgIG9yaWdpbmFsSW5wdXQ6IHouc3RyaW5nKCkub3Ioei5hcnJheShwcm90b2NvbC5Nb2RlbEl0ZW0pKSxcbiAgICBtb2RlbFJlc3BvbnNlczogei5hcnJheShtb2RlbFJlc3BvbnNlU2NoZW1hKSxcbiAgICBjb250ZXh0OiB6Lm9iamVjdCh7XG4gICAgICAgIHVzYWdlOiB1c2FnZVNjaGVtYSxcbiAgICAgICAgYXBwcm92YWxzOiB6LnJlY29yZCh6LnN0cmluZygpLCB6Lm9iamVjdCh7XG4gICAgICAgICAgICBhcHByb3ZlZDogei5hcnJheSh6LnN0cmluZygpKS5vcih6LmJvb2xlYW4oKSksXG4gICAgICAgICAgICByZWplY3RlZDogei5hcnJheSh6LnN0cmluZygpKS5vcih6LmJvb2xlYW4oKSksXG4gICAgICAgIH0pKSxcbiAgICAgICAgY29udGV4dDogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSksXG4gICAgfSksXG4gICAgdG9vbFVzZVRyYWNrZXI6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYXJyYXkoei5zdHJpbmcoKSkpLFxuICAgIG1heFR1cm5zOiB6Lm51bWJlcigpLFxuICAgIGN1cnJlbnRBZ2VudFNwYW46IFNlcmlhbGl6ZWRTcGFuLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICBub0FjdGl2ZUFnZW50UnVuOiB6LmJvb2xlYW4oKSxcbiAgICBpbnB1dEd1YXJkcmFpbFJlc3VsdHM6IHouYXJyYXkoaW5wdXRHdWFyZHJhaWxSZXN1bHRTY2hlbWEpLFxuICAgIG91dHB1dEd1YXJkcmFpbFJlc3VsdHM6IHouYXJyYXkob3V0cHV0R3VhcmRyYWlsUmVzdWx0U2NoZW1hKSxcbiAgICBjdXJyZW50U3RlcDogbmV4dFN0ZXBTY2hlbWEub3B0aW9uYWwoKSxcbiAgICBsYXN0TW9kZWxSZXNwb25zZTogbW9kZWxSZXNwb25zZVNjaGVtYS5vcHRpb25hbCgpLFxuICAgIGdlbmVyYXRlZEl0ZW1zOiB6LmFycmF5KGl0ZW1TY2hlbWEpLFxuICAgIGxhc3RQcm9jZXNzZWRSZXNwb25zZTogc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlU2NoZW1hLm9wdGlvbmFsKCksXG4gICAgdHJhY2U6IHNlcmlhbGl6ZWRUcmFjZVNjaGVtYS5udWxsYWJsZSgpLFxufSk7XG4vKipcbiAqIFNlcmlhbGl6YWJsZSBzbmFwc2hvdCBvZiBhbiBhZ2VudCdzIHJ1biwgaW5jbHVkaW5nIGNvbnRleHQsIHVzYWdlIGFuZCB0cmFjZS5cbiAqIFdoaWxlIHRoaXMgY2xhc3MgaGFzIHB1YmxpY2x5IHdyaXRhYmxlIHByb3BlcnRpZXMgKHByZWZpeGVkIHdpdGggYF9gKSwgdGhleSBhcmUgbm90IG1lYW50IHRvIGJlXG4gKiB1c2VkIGRpcmVjdGx5LiBUbyByZWFkIHRoZXNlIHByb3BlcnRpZXMsIHVzZSB0aGUgYFJ1blJlc3VsdGAgaW5zdGVhZC5cbiAqXG4gKiBNYW5pcHVsYXRpb24gb2YgdGhlIHN0YXRlIGRpcmVjdGx5IGNhbiBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIHNob3VsZCBiZSBhdm9pZGVkLlxuICogSW5zdGVhZCwgdXNlIHRoZSBgYXBwcm92ZWAgYW5kIGByZWplY3RgIG1ldGhvZHMgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgc3RhdGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5TdGF0ZSB7XG4gICAgLyoqXG4gICAgICogQ3VycmVudCB0dXJuIG51bWJlciBpbiB0aGUgY29udmVyc2F0aW9uLlxuICAgICAqL1xuICAgIF9jdXJyZW50VHVybiA9IDA7XG4gICAgLyoqXG4gICAgICogVGhlIGFnZW50IGN1cnJlbnRseSBoYW5kbGluZyB0aGUgY29udmVyc2F0aW9uLlxuICAgICAqL1xuICAgIF9jdXJyZW50QWdlbnQ7XG4gICAgLyoqXG4gICAgICogT3JpZ2luYWwgdXNlciBpbnB1dCBwcmlvciB0byBhbnkgcHJvY2Vzc2luZy5cbiAgICAgKi9cbiAgICBfb3JpZ2luYWxJbnB1dDtcbiAgICAvKipcbiAgICAgKiBSZXNwb25zZXMgZnJvbSB0aGUgbW9kZWwgc28gZmFyLlxuICAgICAqL1xuICAgIF9tb2RlbFJlc3BvbnNlcztcbiAgICAvKipcbiAgICAgKiBBY3RpdmUgdHJhY2luZyBzcGFuIGZvciB0aGUgY3VycmVudCBhZ2VudCBpZiB0cmFjaW5nIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgX2N1cnJlbnRBZ2VudFNwYW47XG4gICAgLyoqXG4gICAgICogUnVuIGNvbnRleHQgdHJhY2tpbmcgYXBwcm92YWxzLCB1c2FnZSwgYW5kIG90aGVyIG1ldGFkYXRhLlxuICAgICAqL1xuICAgIF9jb250ZXh0O1xuICAgIC8qKlxuICAgICAqIFRyYWNrcyB3aGF0IHRvb2xzIGVhY2ggYWdlbnQgaGFzIHVzZWQuXG4gICAgICovXG4gICAgX3Rvb2xVc2VUcmFja2VyO1xuICAgIC8qKlxuICAgICAqIEl0ZW1zIGdlbmVyYXRlZCBieSB0aGUgYWdlbnQgZHVyaW5nIHRoZSBydW4uXG4gICAgICovXG4gICAgX2dlbmVyYXRlZEl0ZW1zO1xuICAgIC8qKlxuICAgICAqIE1heGltdW0gYWxsb3dlZCB0dXJucyBiZWZvcmUgZm9yY2luZyB0ZXJtaW5hdGlvbi5cbiAgICAgKi9cbiAgICBfbWF4VHVybnM7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgcnVuIGhhcyBhbiBhY3RpdmUgYWdlbnQgc3RlcCBpbiBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBfbm9BY3RpdmVBZ2VudFJ1biA9IHRydWU7XG4gICAgLyoqXG4gICAgICogTGFzdCBtb2RlbCByZXNwb25zZSBmb3IgdGhlIHByZXZpb3VzIHR1cm4uXG4gICAgICovXG4gICAgX2xhc3RUdXJuUmVzcG9uc2U7XG4gICAgLyoqXG4gICAgICogUmVzdWx0cyBmcm9tIGlucHV0IGd1YXJkcmFpbHMgYXBwbGllZCB0byB0aGUgcnVuLlxuICAgICAqL1xuICAgIF9pbnB1dEd1YXJkcmFpbFJlc3VsdHM7XG4gICAgLyoqXG4gICAgICogUmVzdWx0cyBmcm9tIG91dHB1dCBndWFyZHJhaWxzIGFwcGxpZWQgdG8gdGhlIHJ1bi5cbiAgICAgKi9cbiAgICBfb3V0cHV0R3VhcmRyYWlsUmVzdWx0cztcbiAgICAvKipcbiAgICAgKiBOZXh0IHN0ZXAgY29tcHV0ZWQgZm9yIHRoZSBhZ2VudCB0byB0YWtlLlxuICAgICAqL1xuICAgIF9jdXJyZW50U3RlcCA9IHVuZGVmaW5lZDtcbiAgICAvKipcbiAgICAgKiBQYXJzZWQgbW9kZWwgcmVzcG9uc2UgYWZ0ZXIgYXBwbHlpbmcgZ3VhcmRyYWlscyBhbmQgdG9vbHMuXG4gICAgICovXG4gICAgX2xhc3RQcm9jZXNzZWRSZXNwb25zZSA9IHVuZGVmaW5lZDtcbiAgICAvKipcbiAgICAgKiBUcmFjZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBydW4gaWYgdHJhY2luZyBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIF90cmFjZSA9IG51bGw7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgb3JpZ2luYWxJbnB1dCwgc3RhcnRpbmdBZ2VudCwgbWF4VHVybnMpIHtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsSW5wdXQgPSBzdHJ1Y3R1cmVkQ2xvbmUob3JpZ2luYWxJbnB1dCk7XG4gICAgICAgIHRoaXMuX21vZGVsUmVzcG9uc2VzID0gW107XG4gICAgICAgIHRoaXMuX2N1cnJlbnRBZ2VudFNwYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRBZ2VudCA9IHN0YXJ0aW5nQWdlbnQ7XG4gICAgICAgIHRoaXMuX3Rvb2xVc2VUcmFja2VyID0gbmV3IEFnZW50VG9vbFVzZVRyYWNrZXIoKTtcbiAgICAgICAgdGhpcy5fZ2VuZXJhdGVkSXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5fbWF4VHVybnMgPSBtYXhUdXJucztcbiAgICAgICAgdGhpcy5faW5wdXRHdWFyZHJhaWxSZXN1bHRzID0gW107XG4gICAgICAgIHRoaXMuX291dHB1dEd1YXJkcmFpbFJlc3VsdHMgPSBbXTtcbiAgICAgICAgdGhpcy5fdHJhY2UgPSBnZXRDdXJyZW50VHJhY2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGhpc3Rvcnkgb2YgdGhlIGFnZW50IHJ1bi4gVGhpcyBpbmNsdWRlcyB0aGUgaW5wdXQgaXRlbXMgYW5kIHRoZSBuZXcgaXRlbXMgZ2VuZXJhdGVkIGR1cmluZyB0aGUgcnVuLlxuICAgICAqXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCBhcyBpbnB1dHMgZm9yIHRoZSBuZXh0IGFnZW50IHJ1bi5cbiAgICAgKi9cbiAgICBnZXQgaGlzdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuIGdldFR1cm5JbnB1dCh0aGlzLl9vcmlnaW5hbElucHV0LCB0aGlzLl9nZW5lcmF0ZWRJdGVtcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGludGVycnVwdGlvbnMgaWYgdGhlIGN1cnJlbnQgc3RlcCBpcyBhbiBpbnRlcnJ1cHRpb24gb3RoZXJ3aXNlIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gICAgICovXG4gICAgZ2V0SW50ZXJydXB0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTdGVwPy50eXBlICE9PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFN0ZXAuZGF0YS5pbnRlcnJ1cHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHByb3ZlcyBhIHRvb2wgY2FsbCByZXF1ZXN0ZWQgYnkgdGhlIGFnZW50IHRocm91Z2ggYW4gaW50ZXJydXB0aW9uIGFuZCBhcHByb3ZhbCBpdGVtIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBUbyBhcHByb3ZlIHRoZSByZXF1ZXN0IHVzZSB0aGlzIG1ldGhvZCBhbmQgdGhlbiBydW4gdGhlIGFnZW50IGFnYWluIHdpdGggdGhlIHNhbWUgc3RhdGUgb2JqZWN0XG4gICAgICogdG8gY29udGludWUgdGhlIGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQgaXQgd2lsbCBvbmx5IGFwcHJvdmUgdGhlIGN1cnJlbnQgdG9vbCBjYWxsLiBUbyBhbGxvdyB0aGUgdG9vbCB0byBiZSB1c2VkIG11bHRpcGxlXG4gICAgICogdGltZXMgdGhyb3VnaG91dCB0aGUgcnVuLCBzZXQgdGhlIGBhbHdheXNBcHByb3ZlYCBvcHRpb24gdG8gYHRydWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcHJvdmFsSXRlbSAtIFRoZSB0b29sIGNhbGwgYXBwcm92YWwgaXRlbSB0byBhcHByb3ZlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGFwcHJvdmFsLlxuICAgICAqL1xuICAgIGFwcHJvdmUoYXBwcm92YWxJdGVtLCBvcHRpb25zID0geyBhbHdheXNBcHByb3ZlOiBmYWxzZSB9KSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuYXBwcm92ZVRvb2woYXBwcm92YWxJdGVtLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVqZWN0cyBhIHRvb2wgY2FsbCByZXF1ZXN0ZWQgYnkgdGhlIGFnZW50IHRocm91Z2ggYW4gaW50ZXJydXB0aW9uIGFuZCBhcHByb3ZhbCBpdGVtIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBUbyByZWplY3QgdGhlIHJlcXVlc3QgdXNlIHRoaXMgbWV0aG9kIGFuZCB0aGVuIHJ1biB0aGUgYWdlbnQgYWdhaW4gd2l0aCB0aGUgc2FtZSBzdGF0ZSBvYmplY3RcbiAgICAgKiB0byBjb250aW51ZSB0aGUgZXhlY3V0aW9uLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCBpdCB3aWxsIG9ubHkgcmVqZWN0IHRoZSBjdXJyZW50IHRvb2wgY2FsbC4gVG8gYWxsb3cgdGhlIHRvb2wgdG8gYmUgdXNlZCBtdWx0aXBsZVxuICAgICAqIHRpbWVzIHRocm91Z2hvdXQgdGhlIHJ1biwgc2V0IHRoZSBgYWx3YXlzUmVqZWN0YCBvcHRpb24gdG8gYHRydWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcHJvdmFsSXRlbSAtIFRoZSB0b29sIGNhbGwgYXBwcm92YWwgaXRlbSB0byByZWplY3QuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgcmVqZWN0aW9uLlxuICAgICAqL1xuICAgIHJlamVjdChhcHByb3ZhbEl0ZW0sIG9wdGlvbnMgPSB7IGFsd2F5c1JlamVjdDogZmFsc2UgfSkge1xuICAgICAgICB0aGlzLl9jb250ZXh0LnJlamVjdFRvb2woYXBwcm92YWxJdGVtLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgcnVuIHN0YXRlIHRvIGEgSlNPTiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHNlcmlhbGl6ZSB0aGUgcnVuIHN0YXRlIHRvIGEgSlNPTiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0b1xuICAgICAqIHJlc3VtZSB0aGUgcnVuIGxhdGVyLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHNlcmlhbGl6ZWQgcnVuIHN0YXRlLlxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0ge1xuICAgICAgICAgICAgJHNjaGVtYVZlcnNpb246IENVUlJFTlRfU0NIRU1BX1ZFUlNJT04sXG4gICAgICAgICAgICBjdXJyZW50VHVybjogdGhpcy5fY3VycmVudFR1cm4sXG4gICAgICAgICAgICBjdXJyZW50QWdlbnQ6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLl9jdXJyZW50QWdlbnQubmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcmlnaW5hbElucHV0OiB0aGlzLl9vcmlnaW5hbElucHV0LFxuICAgICAgICAgICAgbW9kZWxSZXNwb25zZXM6IHRoaXMuX21vZGVsUmVzcG9uc2VzLm1hcCgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB1c2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHM6IHJlc3BvbnNlLnVzYWdlLnJlcXVlc3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRUb2tlbnM6IHJlc3BvbnNlLnVzYWdlLmlucHV0VG9rZW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0VG9rZW5zOiByZXNwb25zZS51c2FnZS5vdXRwdXRUb2tlbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFRva2VuczogcmVzcG9uc2UudXNhZ2UudG90YWxUb2tlbnMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dDogcmVzcG9uc2Uub3V0cHV0LFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUlkOiByZXNwb25zZS5yZXNwb25zZUlkLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlckRhdGE6IHJlc3BvbnNlLnByb3ZpZGVyRGF0YSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLl9jb250ZXh0LnRvSlNPTigpLFxuICAgICAgICAgICAgdG9vbFVzZVRyYWNrZXI6IHRoaXMuX3Rvb2xVc2VUcmFja2VyLnRvSlNPTigpLFxuICAgICAgICAgICAgbWF4VHVybnM6IHRoaXMuX21heFR1cm5zLFxuICAgICAgICAgICAgY3VycmVudEFnZW50U3BhbjogdGhpcy5fY3VycmVudEFnZW50U3Bhbj8udG9KU09OKCksXG4gICAgICAgICAgICBub0FjdGl2ZUFnZW50UnVuOiB0aGlzLl9ub0FjdGl2ZUFnZW50UnVuLFxuICAgICAgICAgICAgaW5wdXRHdWFyZHJhaWxSZXN1bHRzOiB0aGlzLl9pbnB1dEd1YXJkcmFpbFJlc3VsdHMsXG4gICAgICAgICAgICBvdXRwdXRHdWFyZHJhaWxSZXN1bHRzOiB0aGlzLl9vdXRwdXRHdWFyZHJhaWxSZXN1bHRzLm1hcCgocikgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5yLFxuICAgICAgICAgICAgICAgIGFnZW50OiByLmFnZW50LnRvSlNPTigpLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgY3VycmVudFN0ZXA6IHRoaXMuX2N1cnJlbnRTdGVwLFxuICAgICAgICAgICAgbGFzdE1vZGVsUmVzcG9uc2U6IHRoaXMuX2xhc3RUdXJuUmVzcG9uc2UsXG4gICAgICAgICAgICBnZW5lcmF0ZWRJdGVtczogdGhpcy5fZ2VuZXJhdGVkSXRlbXMubWFwKChpdGVtKSA9PiBpdGVtLnRvSlNPTigpKSxcbiAgICAgICAgICAgIGxhc3RQcm9jZXNzZWRSZXNwb25zZTogdGhpcy5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlLFxuICAgICAgICAgICAgdHJhY2U6IHRoaXMuX3RyYWNlID8gdGhpcy5fdHJhY2UudG9KU09OKCkgOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICAvLyBwYXJzaW5nIHRoZSBzY2hlbWEgdG8gZW5zdXJlIHRoZSBvdXRwdXQgaXMgdmFsaWQgZm9yIHJlcGFyc2luZ1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBTZXJpYWxpemVkUnVuU3RhdGUuc2FmZVBhcnNlKG91dHB1dCk7XG4gICAgICAgIGlmICghcGFyc2VkLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTeXN0ZW1FcnJvcihgRmFpbGVkIHRvIHNlcmlhbGl6ZSBydW4gc3RhdGUuICR7cGFyc2VkLmVycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZC5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBydW4gc3RhdGUgdG8gYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHNlcmlhbGl6ZSB0aGUgcnVuIHN0YXRlIHRvIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgdG9cbiAgICAgKiByZXN1bWUgdGhlIHJ1biBsYXRlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBzZXJpYWxpemVkIHJ1biBzdGF0ZS5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXNlcmlhbGl6ZXMgYSBydW4gc3RhdGUgZnJvbSBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gZGVzZXJpYWxpemUgYSBydW4gc3RhdGUgZnJvbSBhIHN0cmluZyB0aGF0IHdhcyBzZXJpYWxpemVkIHVzaW5nIHRoZVxuICAgICAqIGB0b1N0cmluZ2AgbWV0aG9kLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmcm9tU3RyaW5nKGluaXRpYWxBZ2VudCwgc3RyKSB7XG4gICAgICAgIGNvbnN0IFtwYXJzaW5nRXJyb3IsIGpzb25SZXN1bHRdID0gYXdhaXQgc2FmZUV4ZWN1dGUoKCkgPT4gSlNPTi5wYXJzZShzdHIpKTtcbiAgICAgICAgaWYgKHBhcnNpbmdFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIHBhcnNlIHJ1biBzdGF0ZS4gJHtwYXJzaW5nRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IHBhcnNpbmdFcnJvci5tZXNzYWdlIDogU3RyaW5nKHBhcnNpbmdFcnJvcil9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudFNjaGVtYVZlcnNpb24gPSBqc29uUmVzdWx0LiRzY2hlbWFWZXJzaW9uO1xuICAgICAgICBpZiAoIWN1cnJlbnRTY2hlbWFWZXJzaW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdSdW4gc3RhdGUgaXMgbWlzc2luZyBzY2hlbWEgdmVyc2lvbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50U2NoZW1hVmVyc2lvbiAhPT0gQ1VSUkVOVF9TQ0hFTUFfVkVSU0lPTikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgUnVuIHN0YXRlIHNjaGVtYSB2ZXJzaW9uICR7Y3VycmVudFNjaGVtYVZlcnNpb259IGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgdmVyc2lvbiAke0NVUlJFTlRfU0NIRU1BX1ZFUlNJT059YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdGVKc29uID0gU2VyaWFsaXplZFJ1blN0YXRlLnBhcnNlKEpTT04ucGFyc2Uoc3RyKSk7XG4gICAgICAgIGNvbnN0IGFnZW50TWFwID0gYnVpbGRBZ2VudE1hcChpbml0aWFsQWdlbnQpO1xuICAgICAgICAvL1xuICAgICAgICAvLyBSZWJ1aWxkIHRoZSBjb250ZXh0XG4gICAgICAgIC8vXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgUnVuQ29udGV4dChzdGF0ZUpzb24uY29udGV4dC5jb250ZXh0KTtcbiAgICAgICAgY29udGV4dC5fcmVidWlsZEFwcHJvdmFscyhzdGF0ZUpzb24uY29udGV4dC5hcHByb3ZhbHMpO1xuICAgICAgICAvL1xuICAgICAgICAvLyBGaW5kIHRoZSBjdXJyZW50IGFnZW50IGZyb20gdGhlIGluaXRpYWwgYWdlbnRcbiAgICAgICAgLy9cbiAgICAgICAgY29uc3QgY3VycmVudEFnZW50ID0gYWdlbnRNYXAuZ2V0KHN0YXRlSnNvbi5jdXJyZW50QWdlbnQubmFtZSk7XG4gICAgICAgIGlmICghY3VycmVudEFnZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBBZ2VudCAke3N0YXRlSnNvbi5jdXJyZW50QWdlbnQubmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdGUgPSBuZXcgUnVuU3RhdGUoY29udGV4dCwgJycsIGN1cnJlbnRBZ2VudCwgc3RhdGVKc29uLm1heFR1cm5zKTtcbiAgICAgICAgc3RhdGUuX2N1cnJlbnRUdXJuID0gc3RhdGVKc29uLmN1cnJlbnRUdXJuO1xuICAgICAgICAvLyByZWJ1aWxkIHRvb2wgdXNlIHRyYWNrZXJcbiAgICAgICAgc3RhdGUuX3Rvb2xVc2VUcmFja2VyID0gbmV3IEFnZW50VG9vbFVzZVRyYWNrZXIoKTtcbiAgICAgICAgZm9yIChjb25zdCBbYWdlbnROYW1lLCB0b29sTmFtZXNdIG9mIE9iamVjdC5lbnRyaWVzKHN0YXRlSnNvbi50b29sVXNlVHJhY2tlcikpIHtcbiAgICAgICAgICAgIHN0YXRlLl90b29sVXNlVHJhY2tlci5hZGRUb29sVXNlKGFnZW50TWFwLmdldChhZ2VudE5hbWUpLCB0b29sTmFtZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYnVpbGQgY3VycmVudCBhZ2VudCBzcGFuXG4gICAgICAgIGlmIChzdGF0ZUpzb24uY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgaWYgKCFzdGF0ZUpzb24udHJhY2UpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybignVHJhY2UgaXMgbm90IHNldCwgc2tpcHBpbmcgdHJhY2luZyBzZXR1cCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHJhY2UgPSBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlVHJhY2Uoe1xuICAgICAgICAgICAgICAgIHRyYWNlSWQ6IHN0YXRlSnNvbi50cmFjZT8uaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogc3RhdGVKc29uLnRyYWNlPy53b3JrZmxvd19uYW1lLFxuICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHN0YXRlSnNvbi50cmFjZT8uZ3JvdXBfaWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBzdGF0ZUpzb24udHJhY2U/Lm1ldGFkYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3BhbiA9IGRlc2VyaWFsaXplU3Bhbih0cmFjZSwgc3RhdGVKc29uLmN1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgc3RhdGUuX3RyYWNlID0gdHJhY2U7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuX25vQWN0aXZlQWdlbnRSdW4gPSBzdGF0ZUpzb24ubm9BY3RpdmVBZ2VudFJ1bjtcbiAgICAgICAgc3RhdGUuX2lucHV0R3VhcmRyYWlsUmVzdWx0cyA9XG4gICAgICAgICAgICBzdGF0ZUpzb24uaW5wdXRHdWFyZHJhaWxSZXN1bHRzO1xuICAgICAgICBzdGF0ZS5fb3V0cHV0R3VhcmRyYWlsUmVzdWx0cyA9IHN0YXRlSnNvbi5vdXRwdXRHdWFyZHJhaWxSZXN1bHRzLm1hcCgocikgPT4gKHtcbiAgICAgICAgICAgIC4uLnIsXG4gICAgICAgICAgICBhZ2VudDogYWdlbnRNYXAuZ2V0KHIuYWdlbnQubmFtZSksXG4gICAgICAgIH0pKTtcbiAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwID0gc3RhdGVKc29uLmN1cnJlbnRTdGVwO1xuICAgICAgICBzdGF0ZS5fb3JpZ2luYWxJbnB1dCA9IHN0YXRlSnNvbi5vcmlnaW5hbElucHV0O1xuICAgICAgICBzdGF0ZS5fbW9kZWxSZXNwb25zZXMgPSBzdGF0ZUpzb24ubW9kZWxSZXNwb25zZXMubWFwKGRlc2VyaWFsaXplTW9kZWxSZXNwb25zZSk7XG4gICAgICAgIHN0YXRlLl9sYXN0VHVyblJlc3BvbnNlID0gc3RhdGVKc29uLmxhc3RNb2RlbFJlc3BvbnNlXG4gICAgICAgICAgICA/IGRlc2VyaWFsaXplTW9kZWxSZXNwb25zZShzdGF0ZUpzb24ubGFzdE1vZGVsUmVzcG9uc2UpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgc3RhdGUuX2dlbmVyYXRlZEl0ZW1zID0gc3RhdGVKc29uLmdlbmVyYXRlZEl0ZW1zLm1hcCgoaXRlbSkgPT4gZGVzZXJpYWxpemVJdGVtKGl0ZW0sIGFnZW50TWFwKSk7XG4gICAgICAgIHN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UgPSBzdGF0ZUpzb24ubGFzdFByb2Nlc3NlZFJlc3BvbnNlXG4gICAgICAgICAgICA/IGF3YWl0IGRlc2VyaWFsaXplUHJvY2Vzc2VkUmVzcG9uc2UoYWdlbnRNYXAsIHN0YXRlLl9jdXJyZW50QWdlbnQsIHN0YXRlLl9jb250ZXh0LCBzdGF0ZUpzb24ubGFzdFByb2Nlc3NlZFJlc3BvbnNlKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzdGF0ZUpzb24uY3VycmVudFN0ZXA/LnR5cGUgPT09ICduZXh0X3N0ZXBfaGFuZG9mZicpIHtcbiAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50U3RlcCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbmV4dF9zdGVwX2hhbmRvZmYnLFxuICAgICAgICAgICAgICAgIG5ld0FnZW50OiBhZ2VudE1hcC5nZXQoc3RhdGVKc29uLmN1cnJlbnRTdGVwLm5ld0FnZW50Lm5hbWUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQWdlbnRNYXAoaW5pdGlhbEFnZW50KSB7XG4gICAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHF1ZXVlID0gW2luaXRpYWxBZ2VudF07XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgY3VycmVudEFnZW50ID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKG1hcC5oYXMoY3VycmVudEFnZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBtYXAuc2V0KGN1cnJlbnRBZ2VudC5uYW1lLCBjdXJyZW50QWdlbnQpO1xuICAgICAgICBmb3IgKGNvbnN0IGhhbmRvZmYgb2YgY3VycmVudEFnZW50LmhhbmRvZmZzKSB7XG4gICAgICAgICAgICBpZiAoaGFuZG9mZiBpbnN0YW5jZW9mIEFnZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXAuaGFzKGhhbmRvZmYubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChoYW5kb2ZmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYW5kb2ZmLmFnZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXAuaGFzKGhhbmRvZmYuYWdlbnQubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChoYW5kb2ZmLmFnZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZVNwYW4odHJhY2UsIHNlcmlhbGl6ZWRTcGFuKSB7XG4gICAgY29uc3Qgc3BhbkRhdGEgPSBzZXJpYWxpemVkU3Bhbi5zcGFuX2RhdGE7XG4gICAgY29uc3QgcHJldmlvdXNTcGFuID0gc2VyaWFsaXplZFNwYW4ucHJldmlvdXNfc3BhblxuICAgICAgICA/IGRlc2VyaWFsaXplU3Bhbih0cmFjZSwgc2VyaWFsaXplZFNwYW4ucHJldmlvdXNfc3BhbilcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgY29uc3Qgc3BhbiA9IGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgc3BhbklkOiBzZXJpYWxpemVkU3Bhbi5pZCxcbiAgICAgICAgdHJhY2VJZDogc2VyaWFsaXplZFNwYW4udHJhY2VfaWQsXG4gICAgICAgIHBhcmVudElkOiBzZXJpYWxpemVkU3Bhbi5wYXJlbnRfaWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICBzdGFydGVkQXQ6IHNlcmlhbGl6ZWRTcGFuLnN0YXJ0ZWRfYXQgPz8gdW5kZWZpbmVkLFxuICAgICAgICBlbmRlZEF0OiBzZXJpYWxpemVkU3Bhbi5lbmRlZF9hdCA/PyB1bmRlZmluZWQsXG4gICAgICAgIGRhdGE6IHNwYW5EYXRhLFxuICAgIH0sIHRyYWNlKTtcbiAgICBzcGFuLnByZXZpb3VzU3BhbiA9IHByZXZpb3VzU3BhbjtcbiAgICByZXR1cm4gc3Bhbjtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZU1vZGVsUmVzcG9uc2Uoc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UpIHtcbiAgICBjb25zdCB1c2FnZSA9IG5ldyBVc2FnZSgpO1xuICAgIHVzYWdlLnJlcXVlc3RzID0gc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UudXNhZ2UucmVxdWVzdHM7XG4gICAgdXNhZ2UuaW5wdXRUb2tlbnMgPSBzZXJpYWxpemVkTW9kZWxSZXNwb25zZS51c2FnZS5pbnB1dFRva2VucztcbiAgICB1c2FnZS5vdXRwdXRUb2tlbnMgPSBzZXJpYWxpemVkTW9kZWxSZXNwb25zZS51c2FnZS5vdXRwdXRUb2tlbnM7XG4gICAgdXNhZ2UudG90YWxUb2tlbnMgPSBzZXJpYWxpemVkTW9kZWxSZXNwb25zZS51c2FnZS50b3RhbFRva2VucztcbiAgICByZXR1cm4ge1xuICAgICAgICB1c2FnZSxcbiAgICAgICAgb3V0cHV0OiBzZXJpYWxpemVkTW9kZWxSZXNwb25zZS5vdXRwdXQubWFwKChpdGVtKSA9PiBwcm90b2NvbC5PdXRwdXRNb2RlbEl0ZW0ucGFyc2UoaXRlbSkpLFxuICAgICAgICByZXNwb25zZUlkOiBzZXJpYWxpemVkTW9kZWxSZXNwb25zZS5yZXNwb25zZUlkLFxuICAgICAgICBwcm92aWRlckRhdGE6IHNlcmlhbGl6ZWRNb2RlbFJlc3BvbnNlLnByb3ZpZGVyRGF0YSxcbiAgICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc2VyaWFsaXplSXRlbShzZXJpYWxpemVkSXRlbSwgYWdlbnRNYXApIHtcbiAgICBzd2l0Y2ggKHNlcmlhbGl6ZWRJdGVtLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnbWVzc2FnZV9vdXRwdXRfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1bk1lc3NhZ2VPdXRwdXRJdGVtKHNlcmlhbGl6ZWRJdGVtLnJhd0l0ZW0sIGFnZW50TWFwLmdldChzZXJpYWxpemVkSXRlbS5hZ2VudC5uYW1lKSk7XG4gICAgICAgIGNhc2UgJ3Rvb2xfY2FsbF9pdGVtJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgUnVuVG9vbENhbGxJdGVtKHNlcmlhbGl6ZWRJdGVtLnJhd0l0ZW0sIGFnZW50TWFwLmdldChzZXJpYWxpemVkSXRlbS5hZ2VudC5uYW1lKSk7XG4gICAgICAgIGNhc2UgJ3Rvb2xfY2FsbF9vdXRwdXRfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1blRvb2xDYWxsT3V0cHV0SXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSksIHNlcmlhbGl6ZWRJdGVtLm91dHB1dCk7XG4gICAgICAgIGNhc2UgJ3JlYXNvbmluZ19pdGVtJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgUnVuUmVhc29uaW5nSXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSkpO1xuICAgICAgICBjYXNlICdoYW5kb2ZmX2NhbGxfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1bkhhbmRvZmZDYWxsSXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSkpO1xuICAgICAgICBjYXNlICdoYW5kb2ZmX291dHB1dF9pdGVtJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgUnVuSGFuZG9mZk91dHB1dEl0ZW0oc2VyaWFsaXplZEl0ZW0ucmF3SXRlbSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLnNvdXJjZUFnZW50Lm5hbWUpLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0udGFyZ2V0QWdlbnQubmFtZSkpO1xuICAgICAgICBjYXNlICd0b29sX2FwcHJvdmFsX2l0ZW0nOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5Ub29sQXBwcm92YWxJdGVtKHNlcmlhbGl6ZWRJdGVtLnJhd0l0ZW0sIGFnZW50TWFwLmdldChzZXJpYWxpemVkSXRlbS5hZ2VudC5uYW1lKSk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZGVzZXJpYWxpemVQcm9jZXNzZWRSZXNwb25zZShhZ2VudE1hcCwgY3VycmVudEFnZW50LCBjb250ZXh0LCBzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2UpIHtcbiAgICBjb25zdCBhbGxUb29scyA9IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRBbGxUb29scyhjb250ZXh0KTtcbiAgICBjb25zdCB0b29scyA9IG5ldyBNYXAoYWxsVG9vbHNcbiAgICAgICAgLmZpbHRlcigodG9vbCkgPT4gdG9vbC50eXBlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAubWFwKCh0b29sKSA9PiBbdG9vbC5uYW1lLCB0b29sXSkpO1xuICAgIGNvbnN0IGNvbXB1dGVyVG9vbHMgPSBuZXcgTWFwKGFsbFRvb2xzXG4gICAgICAgIC5maWx0ZXIoKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gJ2NvbXB1dGVyJylcbiAgICAgICAgLm1hcCgodG9vbCkgPT4gW3Rvb2wubmFtZSwgdG9vbF0pKTtcbiAgICBjb25zdCBoYW5kb2ZmcyA9IG5ldyBNYXAoY3VycmVudEFnZW50LmhhbmRvZmZzLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgQWdlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBbZW50cnkubmFtZSwgaGFuZG9mZihlbnRyeSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbZW50cnkudG9vbE5hbWUsIGVudHJ5XTtcbiAgICB9KSk7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICBuZXdJdGVtczogc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlLm5ld0l0ZW1zLm1hcCgoaXRlbSkgPT4gZGVzZXJpYWxpemVJdGVtKGl0ZW0sIGFnZW50TWFwKSksXG4gICAgICAgIHRvb2xzVXNlZDogc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlLnRvb2xzVXNlZCxcbiAgICAgICAgaGFuZG9mZnM6IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZS5oYW5kb2Zmcy5tYXAoKGhhbmRvZmYpID0+IHtcbiAgICAgICAgICAgIGlmICghaGFuZG9mZnMuaGFzKGhhbmRvZmYuaGFuZG9mZi50b29sTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBIYW5kb2ZmICR7aGFuZG9mZi5oYW5kb2ZmLnRvb2xOYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9vbENhbGw6IGhhbmRvZmYudG9vbENhbGwsXG4gICAgICAgICAgICAgICAgaGFuZG9mZjogaGFuZG9mZnMuZ2V0KGhhbmRvZmYuaGFuZG9mZi50b29sTmFtZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgZnVuY3Rpb25zOiBhd2FpdCBQcm9taXNlLmFsbChzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2UuZnVuY3Rpb25zLm1hcChhc3luYyAoZnVuY3Rpb25DYWxsKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRvb2xzLmhhcyhmdW5jdGlvbkNhbGwudG9vbC5uYW1lKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYFRvb2wgJHtmdW5jdGlvbkNhbGwudG9vbC5uYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9vbENhbGw6IGZ1bmN0aW9uQ2FsbC50b29sQ2FsbCxcbiAgICAgICAgICAgICAgICB0b29sOiB0b29scy5nZXQoZnVuY3Rpb25DYWxsLnRvb2wubmFtZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSksXG4gICAgICAgIGNvbXB1dGVyQWN0aW9uczogc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlLmNvbXB1dGVyQWN0aW9ucy5tYXAoKGNvbXB1dGVyQWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b29sTmFtZSA9IGNvbXB1dGVyQWN0aW9uLmNvbXB1dGVyLm5hbWU7XG4gICAgICAgICAgICBpZiAoIWNvbXB1dGVyVG9vbHMuaGFzKHRvb2xOYW1lKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYENvbXB1dGVyIHRvb2wgJHt0b29sTmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvb2xDYWxsOiBjb21wdXRlckFjdGlvbi50b29sQ2FsbCxcbiAgICAgICAgICAgICAgICBjb21wdXRlcjogY29tcHV0ZXJUb29scy5nZXQodG9vbE5hbWUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIG1jcEFwcHJvdmFsUmVxdWVzdHM6IChzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2UubWNwQXBwcm92YWxSZXF1ZXN0cyA/PyBbXSkubWFwKChhcHByb3ZhbFJlcXVlc3QpID0+ICh7XG4gICAgICAgICAgICByZXF1ZXN0SXRlbTogbmV3IFJ1blRvb2xBcHByb3ZhbEl0ZW0oYXBwcm92YWxSZXF1ZXN0LnJlcXVlc3RJdGVtXG4gICAgICAgICAgICAgICAgLnJhd0l0ZW0sIGN1cnJlbnRBZ2VudCksXG4gICAgICAgICAgICBtY3BUb29sOiBhcHByb3ZhbFJlcXVlc3QubWNwVG9vbCxcbiAgICAgICAgfSkpLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICBoYXNUb29sc09yQXBwcm92YWxzVG9SdW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gKHJlc3VsdC5oYW5kb2Zmcy5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgcmVzdWx0LmZ1bmN0aW9ucy5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1jcEFwcHJvdmFsUmVxdWVzdHMubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIHJlc3VsdC5jb21wdXRlckFjdGlvbnMubGVuZ3RoID4gMCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1blN0YXRlLm1qcy5tYXAiLCJpbXBvcnQgeyBBZ2VudCB9IGZyb20gXCIuL2FnZW50Lm1qc1wiO1xuaW1wb3J0IHsgZGVmaW5lSW5wdXRHdWFyZHJhaWwsIGRlZmluZU91dHB1dEd1YXJkcmFpbCwgfSBmcm9tIFwiLi9ndWFyZHJhaWwubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0TW9kZWxQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVycy5tanNcIjtcbmltcG9ydCB7IFJ1bkNvbnRleHQgfSBmcm9tIFwiLi9ydW5Db250ZXh0Lm1qc1wiO1xuaW1wb3J0IHsgUnVuUmVzdWx0LCBTdHJlYW1lZFJ1blJlc3VsdCB9IGZyb20gXCIuL3Jlc3VsdC5tanNcIjtcbmltcG9ydCB7IFJ1bkhvb2tzIH0gZnJvbSBcIi4vbGlmZWN5Y2xlLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBzZXJpYWxpemVUb29sLCBzZXJpYWxpemVIYW5kb2ZmIH0gZnJvbSBcIi4vdXRpbHMvc2VyaWFsaXplLm1qc1wiO1xuaW1wb3J0IHsgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IsIElucHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQsIE1heFR1cm5zRXhjZWVkZWRFcnJvciwgTW9kZWxCZWhhdmlvckVycm9yLCBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgVXNlckVycm9yLCB9IGZyb20gXCIuL2Vycm9ycy5tanNcIjtcbmltcG9ydCB7IGFkZFN0ZXBUb1J1blJlc3VsdCwgZXhlY3V0ZUludGVycnVwdGVkVG9vbHNBbmRTaWRlRWZmZWN0cywgZXhlY3V0ZVRvb2xzQW5kU2lkZUVmZmVjdHMsIG1heWJlUmVzZXRUb29sQ2hvaWNlLCBwcm9jZXNzTW9kZWxSZXNwb25zZSwgc3RyZWFtU3RlcEl0ZW1zVG9SdW5SZXN1bHQsIH0gZnJvbSBcIi4vcnVuSW1wbGVtZW50YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBnZXRPckNyZWF0ZVRyYWNlLCByZXNldEN1cnJlbnRTcGFuLCBzZXRDdXJyZW50U3Bhbiwgd2l0aE5ld1NwYW5Db250ZXh0LCB3aXRoVHJhY2UsIH0gZnJvbSBcIi4vdHJhY2luZy9jb250ZXh0Lm1qc1wiO1xuaW1wb3J0IHsgY3JlYXRlQWdlbnRTcGFuLCB3aXRoR3VhcmRyYWlsU3BhbiB9IGZyb20gXCIuL3RyYWNpbmcvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBVc2FnZSB9IGZyb20gXCIuL3VzYWdlLm1qc1wiO1xuaW1wb3J0IHsgUnVuQWdlbnRVcGRhdGVkU3RyZWFtRXZlbnQsIFJ1blJhd01vZGVsU3RyZWFtRXZlbnQgfSBmcm9tIFwiLi9ldmVudHMubWpzXCI7XG5pbXBvcnQgeyBSdW5TdGF0ZSB9IGZyb20gXCIuL3J1blN0YXRlLm1qc1wiO1xuaW1wb3J0IHsgU3RyZWFtRXZlbnRSZXNwb25zZUNvbXBsZXRlZCB9IGZyb20gXCIuL3R5cGVzL3Byb3RvY29sLm1qc1wiO1xuaW1wb3J0IHsgY29udmVydEFnZW50T3V0cHV0VHlwZVRvU2VyaWFsaXphYmxlIH0gZnJvbSBcIi4vdXRpbHMvdG9vbHMubWpzXCI7XG5pbXBvcnQgeyBncHQ1UmVhc29uaW5nU2V0dGluZ3NSZXF1aXJlZCwgaXNHcHQ1RGVmYXVsdCB9IGZyb20gXCIuL2RlZmF1bHRNb2RlbC5tanNcIjtcbmNvbnN0IERFRkFVTFRfTUFYX1RVUk5TID0gMTA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhY2luZyh0cmFjaW5nRGlzYWJsZWQsIHRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEpIHtcbiAgICBpZiAodHJhY2luZ0Rpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAnZW5hYmxlZF93aXRob3V0X2RhdGEnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFR1cm5JbnB1dChvcmlnaW5hbElucHV0LCBnZW5lcmF0ZWRJdGVtcykge1xuICAgIGNvbnN0IHJhd0l0ZW1zID0gZ2VuZXJhdGVkSXRlbXNcbiAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50eXBlICE9PSAndG9vbF9hcHByb3ZhbF9pdGVtJykgLy8gZG9uJ3QgaW5jbHVkZSBhcHByb3ZhbCBpdGVtcyB0byBhdm9pZCBkb3VibGUgZnVuY3Rpb24gY2FsbHNcbiAgICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS5yYXdJdGVtKTtcbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsSW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG9yaWdpbmFsSW5wdXQgPSBbeyB0eXBlOiAnbWVzc2FnZScsIHJvbGU6ICd1c2VyJywgY29udGVudDogb3JpZ2luYWxJbnB1dCB9XTtcbiAgICB9XG4gICAgcmV0dXJuIFsuLi5vcmlnaW5hbElucHV0LCAuLi5yYXdJdGVtc107XG59XG4vKipcbiAqIEEgUnVubmVyIGlzIHJlc3BvbnNpYmxlIGZvciBydW5uaW5nIGFuIGFnZW50IHdvcmtmbG93LlxuICovXG5leHBvcnQgY2xhc3MgUnVubmVyIGV4dGVuZHMgUnVuSG9va3Mge1xuICAgIGNvbmZpZztcbiAgICBpbnB1dEd1YXJkcmFpbERlZnM7XG4gICAgb3V0cHV0R3VhcmRyYWlsRGVmcztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgICAgICAgIG1vZGVsUHJvdmlkZXI6IGNvbmZpZy5tb2RlbFByb3ZpZGVyID8/IGdldERlZmF1bHRNb2RlbFByb3ZpZGVyKCksXG4gICAgICAgICAgICBtb2RlbDogY29uZmlnLm1vZGVsLFxuICAgICAgICAgICAgbW9kZWxTZXR0aW5nczogY29uZmlnLm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICBoYW5kb2ZmSW5wdXRGaWx0ZXI6IGNvbmZpZy5oYW5kb2ZmSW5wdXRGaWx0ZXIsXG4gICAgICAgICAgICBpbnB1dEd1YXJkcmFpbHM6IGNvbmZpZy5pbnB1dEd1YXJkcmFpbHMsXG4gICAgICAgICAgICBvdXRwdXRHdWFyZHJhaWxzOiBjb25maWcub3V0cHV0R3VhcmRyYWlscyxcbiAgICAgICAgICAgIHRyYWNpbmdEaXNhYmxlZDogY29uZmlnLnRyYWNpbmdEaXNhYmxlZCA/PyBmYWxzZSxcbiAgICAgICAgICAgIHRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGE6IGNvbmZpZy50cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhID8/IHRydWUsXG4gICAgICAgICAgICB3b3JrZmxvd05hbWU6IGNvbmZpZy53b3JrZmxvd05hbWUgPz8gJ0FnZW50IHdvcmtmbG93JyxcbiAgICAgICAgICAgIHRyYWNlSWQ6IGNvbmZpZy50cmFjZUlkLFxuICAgICAgICAgICAgZ3JvdXBJZDogY29uZmlnLmdyb3VwSWQsXG4gICAgICAgICAgICB0cmFjZU1ldGFkYXRhOiBjb25maWcudHJhY2VNZXRhZGF0YSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbnB1dEd1YXJkcmFpbERlZnMgPSAoY29uZmlnLmlucHV0R3VhcmRyYWlscyA/PyBbXSkubWFwKGRlZmluZUlucHV0R3VhcmRyYWlsKTtcbiAgICAgICAgdGhpcy5vdXRwdXRHdWFyZHJhaWxEZWZzID0gKGNvbmZpZy5vdXRwdXRHdWFyZHJhaWxzID8/IFtdKS5tYXAoZGVmaW5lT3V0cHV0R3VhcmRyYWlsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgYXN5bmMgI3J1bkluZGl2aWR1YWxOb25TdHJlYW0oc3RhcnRpbmdBZ2VudCwgaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhOZXdTcGFuQ29udGV4dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgc2F2ZWQgc3RhdGUgd2UgdXNlIHRoYXQgb25lLCBvdGhlcndpc2Ugd2UgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBpbnB1dCBpbnN0YW5jZW9mIFJ1blN0YXRlXG4gICAgICAgICAgICAgICAgPyBpbnB1dFxuICAgICAgICAgICAgICAgIDogbmV3IFJ1blN0YXRlKG9wdGlvbnMuY29udGV4dCBpbnN0YW5jZW9mIFJ1bkNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgUnVuQ29udGV4dChvcHRpb25zLmNvbnRleHQpLCBpbnB1dCwgc3RhcnRpbmdBZ2VudCwgb3B0aW9ucy5tYXhUdXJucyA/PyBERUZBVUxUX01BWF9UVVJOUyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cGxpY3RseU1vZGVsU2V0ID0gKHN0YXRlLl9jdXJyZW50QWdlbnQubW9kZWwgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudC5tb2RlbCAhPT0gJycpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5jb25maWcubW9kZWwgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmNvbmZpZy5tb2RlbCAhPT0gJycpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbW9kZWwgPSBzZWxlY3RNb2RlbChzdGF0ZS5fY3VycmVudEFnZW50Lm1vZGVsLCB0aGlzLmNvbmZpZy5tb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IGF3YWl0IHRoaXMuY29uZmlnLm1vZGVsUHJvdmlkZXIuZ2V0TW9kZWwobW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGRvbid0IGhhdmUgYSBjdXJyZW50IHN0ZXAsIHdlIHRyZWF0IHRoaXMgYXMgYSBuZXcgcnVuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50U3RlcCA9IHN0YXRlLl9jdXJyZW50U3RlcCA/PyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbmV4dF9zdGVwX3J1bl9hZ2FpbicsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0NvbnRpbnVpbmcgZnJvbSBpbnRlcnJ1cHRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgfHwgIXN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdObyBtb2RlbCByZXNwb25zZSBmb3VuZCBpbiBwcmV2aW91cyBzdGF0ZScsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5SZXN1bHQgPSBhd2FpdCBleGVjdXRlSW50ZXJydXB0ZWRUb29sc0FuZFNpZGVFZmZlY3RzKHN0YXRlLl9jdXJyZW50QWdlbnQsIHN0YXRlLl9vcmlnaW5hbElucHV0LCBzdGF0ZS5fZ2VuZXJhdGVkSXRlbXMsIHN0YXRlLl9sYXN0VHVyblJlc3BvbnNlLCBzdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlLCB0aGlzLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fdG9vbFVzZVRyYWNrZXIuYWRkVG9vbFVzZShzdGF0ZS5fY3VycmVudEFnZW50LCBzdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlLnRvb2xzVXNlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fb3JpZ2luYWxJbnB1dCA9IHR1cm5SZXN1bHQub3JpZ2luYWxJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9nZW5lcmF0ZWRJdGVtcyA9IHR1cm5SZXN1bHQuZ2VuZXJhdGVkSXRlbXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAgPSB0dXJuUmVzdWx0Lm5leHRTdGVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR1cm5SZXN1bHQubmV4dFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIHN0aWxsIGluIGFuIGludGVycnVwdGlvbiwgc28gd2UgbmVlZCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5SZXN1bHQoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX3J1bl9hZ2FpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRvZmZzID0gYXdhaXQgc3RhdGUuX2N1cnJlbnRBZ2VudC5nZXRFbmFibGVkSGFuZG9mZnMoc3RhdGUuX2NvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRvZmZOYW1lcyA9IGhhbmRvZmZzLm1hcCgoaCkgPT4gaC5hZ2VudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuID0gY3JlYXRlQWdlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc3RhdGUuX2N1cnJlbnRBZ2VudC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZG9mZnM6IGhhbmRvZmZOYW1lcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dF90eXBlOiBzdGF0ZS5fY3VycmVudEFnZW50Lm91dHB1dFNjaGVtYU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uc3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50U3BhbihzdGF0ZS5fY3VycmVudEFnZW50U3Bhbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b29scyA9IGF3YWl0IHN0YXRlLl9jdXJyZW50QWdlbnQuZ2V0QWxsVG9vbHMoc3RhdGUuX2NvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZFRvb2xzID0gdG9vbHMubWFwKCh0KSA9PiBzZXJpYWxpemVUb29sKHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRIYW5kb2ZmcyA9IGhhbmRvZmZzLm1hcCgoaCkgPT4gc2VyaWFsaXplSGFuZG9mZihoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5zcGFuRGF0YS50b29scyA9IHRvb2xzLm1hcCgodCkgPT4gdC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50VHVybisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50VHVybiA+IHN0YXRlLl9tYXhUdXJucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuPy5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdNYXggdHVybnMgZXhjZWVkZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IG1heF90dXJuczogc3RhdGUuX21heFR1cm5zIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1heFR1cm5zRXhjZWVkZWRFcnJvcihgTWF4IHR1cm5zICgke3N0YXRlLl9tYXhUdXJuc30pIGV4Y2VlZGVkYCwgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBSdW5uaW5nIGFnZW50ICR7c3RhdGUuX2N1cnJlbnRBZ2VudC5uYW1lfSAodHVybiAke3N0YXRlLl9jdXJyZW50VHVybn0pYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRUdXJuID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcnVuSW5wdXRHdWFyZHJhaWxzKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5JbnB1dCA9IGdldFR1cm5JbnB1dChzdGF0ZS5fb3JpZ2luYWxJbnB1dCwgc3RhdGUuX2dlbmVyYXRlZEl0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fbm9BY3RpdmVBZ2VudFJ1bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfc3RhcnQnLCBzdGF0ZS5fY29udGV4dCwgc3RhdGUuX2N1cnJlbnRBZ2VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdhZ2VudF9zdGFydCcsIHN0YXRlLl9jb250ZXh0LCBzdGF0ZS5fY3VycmVudEFnZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2RlbFNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuY29uZmlnLm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUuX2N1cnJlbnRBZ2VudC5tb2RlbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFnZW50TW9kZWxTZXR0aW5ncyA9IHN0YXRlLl9jdXJyZW50QWdlbnQubW9kZWxTZXR0aW5ncztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsU2V0dGluZ3MgPSBhZGp1c3RNb2RlbFNldHRpbmdzRm9yTm9uR1BUNVJ1bm5lck1vZGVsKGV4cGxpY3RseU1vZGVsU2V0LCBhZ2VudE1vZGVsU2V0dGluZ3MsIG1vZGVsLCBtb2RlbFNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsU2V0dGluZ3MgPSBtYXliZVJlc2V0VG9vbENob2ljZShzdGF0ZS5fY3VycmVudEFnZW50LCBzdGF0ZS5fdG9vbFVzZVRyYWNrZXIsIG1vZGVsU2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgPSBhd2FpdCBtb2RlbC5nZXRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtSW5zdHJ1Y3Rpb25zOiBhd2FpdCBzdGF0ZS5fY3VycmVudEFnZW50LmdldFN5c3RlbVByb21wdChzdGF0ZS5fY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbXB0OiBhd2FpdCBzdGF0ZS5fY3VycmVudEFnZW50LmdldFByb21wdChzdGF0ZS5fY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHR1cm5JbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1Jlc3BvbnNlSWQ6IG9wdGlvbnMucHJldmlvdXNSZXNwb25zZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNhdGlvbklkOiBvcHRpb25zLmNvbnZlcnNhdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHM6IHNlcmlhbGl6ZWRUb29scyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRUeXBlOiBjb252ZXJ0QWdlbnRPdXRwdXRUeXBlVG9TZXJpYWxpemFibGUoc3RhdGUuX2N1cnJlbnRBZ2VudC5vdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kb2Zmczogc2VyaWFsaXplZEhhbmRvZmZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNpbmc6IGdldFRyYWNpbmcodGhpcy5jb25maWcudHJhY2luZ0Rpc2FibGVkLCB0aGlzLmNvbmZpZy50cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IG9wdGlvbnMuc2lnbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fbW9kZWxSZXNwb25zZXMucHVzaChzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY29udGV4dC51c2FnZS5hZGQoc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UudXNhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX25vQWN0aXZlQWdlbnRSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZFJlc3BvbnNlID0gcHJvY2Vzc01vZGVsUmVzcG9uc2Uoc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UsIHN0YXRlLl9jdXJyZW50QWdlbnQsIHRvb2xzLCBoYW5kb2Zmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlID0gcHJvY2Vzc2VkUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuUmVzdWx0ID0gYXdhaXQgZXhlY3V0ZVRvb2xzQW5kU2lkZUVmZmVjdHMoc3RhdGUuX2N1cnJlbnRBZ2VudCwgc3RhdGUuX29yaWdpbmFsSW5wdXQsIHN0YXRlLl9nZW5lcmF0ZWRJdGVtcywgc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UsIHN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UsIHRoaXMsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl90b29sVXNlVHJhY2tlci5hZGRUb29sVXNlKHN0YXRlLl9jdXJyZW50QWdlbnQsIHN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UudG9vbHNVc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9vcmlnaW5hbElucHV0ID0gdHVyblJlc3VsdC5vcmlnaW5hbElucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2dlbmVyYXRlZEl0ZW1zID0gdHVyblJlc3VsdC5nZW5lcmF0ZWRJdGVtcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50U3RlcCA9IHR1cm5SZXN1bHQubmV4dFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50U3RlcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcnVuT3V0cHV0R3VhcmRyYWlscyhzdGF0ZSwgc3RhdGUuX2N1cnJlbnRTdGVwLm91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X2VuZCcsIHN0YXRlLl9jb250ZXh0LCBzdGF0ZS5fY3VycmVudEFnZW50LCBzdGF0ZS5fY3VycmVudFN0ZXAub3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfZW5kJywgc3RhdGUuX2NvbnRleHQsIHN0YXRlLl9jdXJyZW50U3RlcC5vdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5SZXN1bHQoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlLl9jdXJyZW50U3RlcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaGFuZG9mZicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnQgPSBzdGF0ZS5fY3VycmVudFN0ZXAubmV3QWdlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldEN1cnJlbnRTcGFuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fbm9BY3RpdmVBZ2VudFJ1biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSd2ZSBwcm9jZXNzZWQgdGhlIGhhbmRvZmYsIHNvIHdlIG5lZWQgdG8gcnVuIHRoZSBsb29wIGFnYWluXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAgPSB7IHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlLl9jdXJyZW50U3RlcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW50ZXJydXB0ZWQuIERvbid0IHJ1biBhbnkgZ3VhcmRyYWlsc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5SZXN1bHQoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdSdW5uaW5nIG5leHQgbG9vcCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgaW4gYWdlbnQgcnVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgZXJyb3I6IFN0cmluZyhlcnIpIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50U3RlcD8udHlwZSAhPT0gJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBlbmQgdGhlIHNwYW4gaWYgdGhlIHJ1biB3YXMgaW50ZXJydXB0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyAjcnVuSW5wdXRHdWFyZHJhaWxzKHN0YXRlKSB7XG4gICAgICAgIGNvbnN0IGd1YXJkcmFpbHMgPSB0aGlzLmlucHV0R3VhcmRyYWlsRGVmcy5jb25jYXQoc3RhdGUuX2N1cnJlbnRBZ2VudC5pbnB1dEd1YXJkcmFpbHMubWFwKGRlZmluZUlucHV0R3VhcmRyYWlsKSk7XG4gICAgICAgIGlmIChndWFyZHJhaWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGd1YXJkcmFpbEFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgYWdlbnQ6IHN0YXRlLl9jdXJyZW50QWdlbnQsXG4gICAgICAgICAgICAgICAgaW5wdXQ6IHN0YXRlLl9vcmlnaW5hbElucHV0LFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IHN0YXRlLl9jb250ZXh0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKGd1YXJkcmFpbHMubWFwKGFzeW5jIChndWFyZHJhaWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhHdWFyZHJhaWxTcGFuKGFzeW5jIChzcGFuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBndWFyZHJhaWwucnVuKGd1YXJkcmFpbEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zcGFuRGF0YS50cmlnZ2VyZWQgPSByZXN1bHQub3V0cHV0LnRyaXB3aXJlVHJpZ2dlcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSwgeyBkYXRhOiB7IG5hbWU6IGd1YXJkcmFpbC5uYW1lIH0gfSwgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQub3V0cHV0LnRyaXB3aXJlVHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdHdWFyZHJhaWwgdHJpcHdpcmUgdHJpZ2dlcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBndWFyZHJhaWw6IHJlc3VsdC5ndWFyZHJhaWwubmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IElucHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQoYElucHV0IGd1YXJkcmFpbCB0cmlnZ2VyZWQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0Lm91dHB1dC5vdXRwdXRJbmZvKX1gLCByZXN1bHQsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBJbnB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHJvbGwgYmFjayB0aGUgY3VycmVudCB0dXJuIHRvIGVuYWJsZSByZXJ1bnNcbiAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFR1cm4tLTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IoYElucHV0IGd1YXJkcmFpbCBmYWlsZWQgdG8gY29tcGxldGU6ICR7ZX1gLCBlLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgI3J1bk91dHB1dEd1YXJkcmFpbHMoc3RhdGUsIG91dHB1dCkge1xuICAgICAgICBjb25zdCBndWFyZHJhaWxzID0gdGhpcy5vdXRwdXRHdWFyZHJhaWxEZWZzLmNvbmNhdChzdGF0ZS5fY3VycmVudEFnZW50Lm91dHB1dEd1YXJkcmFpbHMubWFwKGRlZmluZU91dHB1dEd1YXJkcmFpbCkpO1xuICAgICAgICBpZiAoZ3VhcmRyYWlscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBhZ2VudE91dHB1dCA9IHN0YXRlLl9jdXJyZW50QWdlbnQucHJvY2Vzc0ZpbmFsT3V0cHV0KG91dHB1dCk7XG4gICAgICAgICAgICBjb25zdCBndWFyZHJhaWxBcmdzID0ge1xuICAgICAgICAgICAgICAgIGFnZW50OiBzdGF0ZS5fY3VycmVudEFnZW50LFxuICAgICAgICAgICAgICAgIGFnZW50T3V0cHV0LFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IHN0YXRlLl9jb250ZXh0LFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHsgbW9kZWxSZXNwb25zZTogc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChndWFyZHJhaWxzLm1hcChhc3luYyAoZ3VhcmRyYWlsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aXRoR3VhcmRyYWlsU3Bhbihhc3luYyAoc3BhbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ3VhcmRyYWlsLnJ1bihndWFyZHJhaWxBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4uc3BhbkRhdGEudHJpZ2dlcmVkID0gcmVzdWx0Lm91dHB1dC50cmlwd2lyZVRyaWdnZXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH0sIHsgZGF0YTogeyBuYW1lOiBndWFyZHJhaWwubmFtZSB9IH0sIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lm91dHB1dC50cmlwd2lyZVRyaWdnZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnR3VhcmRyYWlsIHRyaXB3aXJlIHRyaWdnZXJlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgZ3VhcmRyYWlsOiByZXN1bHQuZ3VhcmRyYWlsLm5hbWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZChgT3V0cHV0IGd1YXJkcmFpbCB0cmlnZ2VyZWQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0Lm91dHB1dC5vdXRwdXRJbmZvKX1gLCByZXN1bHQsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IoYE91dHB1dCBndWFyZHJhaWwgZmFpbGVkIHRvIGNvbXBsZXRlOiAke2V9YCwgZSwgc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGFzeW5jICNydW5TdHJlYW1Mb29wKHJlc3VsdCwgb3B0aW9ucykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QWdlbnQgPSByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudDtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kb2ZmcyA9IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRFbmFibGVkSGFuZG9mZnMocmVzdWx0LnN0YXRlLl9jb250ZXh0KTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29scyA9IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRBbGxUb29scyhyZXN1bHQuc3RhdGUuX2NvbnRleHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRUb29scyA9IHRvb2xzLm1hcCgodCkgPT4gc2VyaWFsaXplVG9vbCh0KSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZEhhbmRvZmZzID0gaGFuZG9mZnMubWFwKChoKSA9PiBzZXJpYWxpemVIYW5kb2ZmKGgpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwID0gcmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcCA/PyB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0NvbnRpbnVpbmcgZnJvbSBpbnRlcnJ1cHRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICFyZXN1bHQuc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignTm8gbW9kZWwgcmVzcG9uc2UgZm91bmQgaW4gcHJldmlvdXMgc3RhdGUnLCByZXN1bHQuc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5SZXN1bHQgPSBhd2FpdCBleGVjdXRlSW50ZXJydXB0ZWRUb29sc0FuZFNpZGVFZmZlY3RzKHJlc3VsdC5zdGF0ZS5fY3VycmVudEFnZW50LCByZXN1bHQuc3RhdGUuX29yaWdpbmFsSW5wdXQsIHJlc3VsdC5zdGF0ZS5fZ2VuZXJhdGVkSXRlbXMsIHJlc3VsdC5zdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgcmVzdWx0LnN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UsIHRoaXMsIHJlc3VsdC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN0ZXBUb1J1blJlc3VsdChyZXN1bHQsIHR1cm5SZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX3Rvb2xVc2VUcmFja2VyLmFkZFRvb2xVc2UocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnQsIHJlc3VsdC5zdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlLnRvb2xzVXNlZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fb3JpZ2luYWxJbnB1dCA9IHR1cm5SZXN1bHQub3JpZ2luYWxJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9nZW5lcmF0ZWRJdGVtcyA9IHR1cm5SZXN1bHQuZ2VuZXJhdGVkSXRlbXM7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAgPSB0dXJuUmVzdWx0Lm5leHRTdGVwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHVyblJlc3VsdC5uZXh0U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBzdGlsbCBpbiBhbiBpbnRlcnJ1cHRpb24sIHNvIHdlIG5lZWQgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX3J1bl9hZ2FpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRvZmZOYW1lcyA9IGhhbmRvZmZzLm1hcCgoaCkgPT4gaC5hZ2VudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuID0gY3JlYXRlQWdlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRBZ2VudC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kb2ZmczogaGFuZG9mZk5hbWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sczogdG9vbHMubWFwKCh0KSA9PiB0Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRfdHlwZTogY3VycmVudEFnZW50Lm91dHB1dFNjaGVtYU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50U3BhbihyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudFR1cm4rKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFR1cm4gPiByZXN1bHQuc3RhdGUuX21heFR1cm5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4/LnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWF4IHR1cm5zIGV4Y2VlZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IG1heF90dXJuczogcmVzdWx0LnN0YXRlLl9tYXhUdXJucyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWF4VHVybnNFeGNlZWRlZEVycm9yKGBNYXggdHVybnMgKCR7cmVzdWx0LnN0YXRlLl9tYXhUdXJuc30pIGV4Y2VlZGVkYCwgcmVzdWx0LnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYFJ1bm5pbmcgYWdlbnQgJHtjdXJyZW50QWdlbnQubmFtZX0gKHR1cm4gJHtyZXN1bHQuc3RhdGUuX2N1cnJlbnRUdXJufSlgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwbGljdGx5TW9kZWxTZXQgPSAoY3VycmVudEFnZW50Lm1vZGVsICE9PSB1bmRlZmluZWQgJiYgY3VycmVudEFnZW50Lm1vZGVsICE9PSAnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmNvbmZpZy5tb2RlbCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuY29uZmlnLm1vZGVsICE9PSAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtb2RlbCA9IHNlbGVjdE1vZGVsKGN1cnJlbnRBZ2VudC5tb2RlbCwgdGhpcy5jb25maWcubW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1vZGVsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBhd2FpdCB0aGlzLmNvbmZpZy5tb2RlbFByb3ZpZGVyLmdldE1vZGVsKG1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50VHVybiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcnVuSW5wdXRHdWFyZHJhaWxzKHJlc3VsdC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGVsU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmNvbmZpZy5tb2RlbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3VycmVudEFnZW50Lm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFnZW50TW9kZWxTZXR0aW5ncyA9IGN1cnJlbnRBZ2VudC5tb2RlbFNldHRpbmdzO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbFNldHRpbmdzID0gYWRqdXN0TW9kZWxTZXR0aW5nc0Zvck5vbkdQVDVSdW5uZXJNb2RlbChleHBsaWN0bHlNb2RlbFNldCwgYWdlbnRNb2RlbFNldHRpbmdzLCBtb2RlbCwgbW9kZWxTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsU2V0dGluZ3MgPSBtYXliZVJlc2V0VG9vbENob2ljZShjdXJyZW50QWdlbnQsIHJlc3VsdC5zdGF0ZS5fdG9vbFVzZVRyYWNrZXIsIG1vZGVsU2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuSW5wdXQgPSBnZXRUdXJuSW5wdXQocmVzdWx0LmlucHV0LCByZXN1bHQubmV3SXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfc3RhcnQnLCByZXN1bHQuc3RhdGUuX2NvbnRleHQsIGN1cnJlbnRBZ2VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X3N0YXJ0JywgcmVzdWx0LnN0YXRlLl9jb250ZXh0LCBjdXJyZW50QWdlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbFJlc3BvbnNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGV2ZW50IG9mIG1vZGVsLmdldFN0cmVhbWVkUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtSW5zdHJ1Y3Rpb25zOiBhd2FpdCBjdXJyZW50QWdlbnQuZ2V0U3lzdGVtUHJvbXB0KHJlc3VsdC5zdGF0ZS5fY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9tcHQ6IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRQcm9tcHQocmVzdWx0LnN0YXRlLl9jb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiB0dXJuSW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1Jlc3BvbnNlSWQ6IG9wdGlvbnMucHJldmlvdXNSZXNwb25zZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2F0aW9uSWQ6IG9wdGlvbnMuY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHM6IHNlcmlhbGl6ZWRUb29scyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRvZmZzOiBzZXJpYWxpemVkSGFuZG9mZnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRUeXBlOiBjb252ZXJ0QWdlbnRPdXRwdXRUeXBlVG9TZXJpYWxpemFibGUoY3VycmVudEFnZW50Lm91dHB1dFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2luZzogZ2V0VHJhY2luZyh0aGlzLmNvbmZpZy50cmFjaW5nRGlzYWJsZWQsIHRoaXMuY29uZmlnLnRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBvcHRpb25zLnNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncmVzcG9uc2VfZG9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBTdHJlYW1FdmVudFJlc3BvbnNlQ29tcGxldGVkLnBhcnNlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2FnZTogbmV3IFVzYWdlKHBhcnNlZC5yZXNwb25zZS51c2FnZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogcGFyc2VkLnJlc3BvbnNlLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VJZDogcGFyc2VkLnJlc3BvbnNlLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIHVzZXIncyBjb2RlIGV4aXRzIGEgbG9vcCB0byBjb25zdW1lIHRoZSBzdHJlYW0sIHdlIG5lZWQgdG8gYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGxvb3AgdG8gcHJldmVudCBpbnRlcm5hbCBmYWxzZSBlcnJvcnMgYW5kIHVubmVjZXNzYXJ5IHByb2Nlc3NpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuX2FkZEl0ZW0obmV3IFJ1blJhd01vZGVsU3RyZWFtRXZlbnQoZXZlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX25vQWN0aXZlQWdlbnRSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaW5hbFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdNb2RlbCBkaWQgbm90IHByb2R1Y2UgYSBmaW5hbCByZXNwb25zZSEnLCByZXN1bHQuc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSA9IGZpbmFsUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fbW9kZWxSZXNwb25zZXMucHVzaChyZXN1bHQuc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9jZXNzZWRSZXNwb25zZSA9IHByb2Nlc3NNb2RlbFJlc3BvbnNlKHJlc3VsdC5zdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgY3VycmVudEFnZW50LCB0b29scywgaGFuZG9mZnMpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSA9IHByb2Nlc3NlZFJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZWNvcmQgdGhlIGl0ZW1zIGVtaXR0ZWQgZGlyZWN0bHkgZnJvbSB0aGUgbW9kZWwgcmVzcG9uc2Ugc28gd2UgZG8gbm90XG4gICAgICAgICAgICAgICAgICAgIC8vIHN0cmVhbSB0aGVtIGFnYWluIGFmdGVyIHRvb2xzIGFuZCBvdGhlciBzaWRlIGVmZmVjdHMgZmluaXNoLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVUb29sSXRlbXMgPSBuZXcgU2V0KHByb2Nlc3NlZFJlc3BvbnNlLm5ld0l0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZVRvb2xJdGVtcy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtU3RlcEl0ZW1zVG9SdW5SZXN1bHQocmVzdWx0LCBwcm9jZXNzZWRSZXNwb25zZS5uZXdJdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHVyblJlc3VsdCA9IGF3YWl0IGV4ZWN1dGVUb29sc0FuZFNpZGVFZmZlY3RzKGN1cnJlbnRBZ2VudCwgcmVzdWx0LnN0YXRlLl9vcmlnaW5hbElucHV0LCByZXN1bHQuc3RhdGUuX2dlbmVyYXRlZEl0ZW1zLCByZXN1bHQuc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UsIHJlc3VsdC5zdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlLCB0aGlzLCByZXN1bHQuc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBhZGRTdGVwVG9SdW5SZXN1bHQocmVzdWx0LCB0dXJuUmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwSXRlbXM6IHByZVRvb2xJdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fdG9vbFVzZVRyYWNrZXIuYWRkVG9vbFVzZShjdXJyZW50QWdlbnQsIHByb2Nlc3NlZFJlc3BvbnNlLnRvb2xzVXNlZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fb3JpZ2luYWxJbnB1dCA9IHR1cm5SZXN1bHQub3JpZ2luYWxJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9nZW5lcmF0ZWRJdGVtcyA9IHR1cm5SZXN1bHQuZ2VuZXJhdGVkSXRlbXM7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAgPSB0dXJuUmVzdWx0Lm5leHRTdGVwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX2ZpbmFsX291dHB1dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcnVuT3V0cHV0R3VhcmRyYWlscyhyZXN1bHQuc3RhdGUsIHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAub3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdhZ2VudF9lbmQnLCByZXN1bHQuc3RhdGUuX2NvbnRleHQsIGN1cnJlbnRBZ2VudCwgcmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcC5vdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfZW5kJywgcmVzdWx0LnN0YXRlLl9jb250ZXh0LCByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwLm91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIGRvbmUgZm9yIG5vdy4gRG9uJ3QgcnVuIGFueSBvdXRwdXQgZ3VhcmRyYWlsc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9oYW5kb2ZmJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudCA9IHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXBcbiAgICAgICAgICAgICAgICAgICAgICAgID8ubmV3QWdlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5fYWRkSXRlbShuZXcgUnVuQWdlbnRVcGRhdGVkU3RyZWFtRXZlbnQocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UndmUgcHJvY2Vzc2VkIHRoZSBoYW5kb2ZmLCBzbyB3ZSBuZWVkIHRvIHJ1biB0aGUgbG9vcCBhZ2FpblxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9ydW5fYWdhaW4nLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdSdW5uaW5nIG5leHQgbG9vcCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgaW4gYWdlbnQgcnVuJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBlcnJvcjogU3RyaW5nKGVycm9yKSB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXA/LnR5cGUgIT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhc3luYyAjcnVuSW5kaXZpZHVhbFN0cmVhbShhZ2VudCwgaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHJldHVybiB3aXRoTmV3U3BhbkNvbnRleHQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBvciByZXVzZSBleGlzdGluZyBzdGF0ZVxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBpbnB1dCBpbnN0YW5jZW9mIFJ1blN0YXRlXG4gICAgICAgICAgICAgICAgPyBpbnB1dFxuICAgICAgICAgICAgICAgIDogbmV3IFJ1blN0YXRlKG9wdGlvbnMuY29udGV4dCBpbnN0YW5jZW9mIFJ1bkNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgUnVuQ29udGV4dChvcHRpb25zLmNvbnRleHQpLCBpbnB1dCwgYWdlbnQsIG9wdGlvbnMubWF4VHVybnMgPz8gREVGQVVMVF9NQVhfVFVSTlMpO1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RyZWFtZWQgcmVzdWx0IHdpdGggZXhpc3Rpbmcgc3RhdGVcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTdHJlYW1lZFJ1blJlc3VsdCh7XG4gICAgICAgICAgICAgICAgc2lnbmFsOiBvcHRpb25zLnNpZ25hbCxcbiAgICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gU2V0dXAgZGVmYXVsdHNcbiAgICAgICAgICAgIHJlc3VsdC5tYXhUdXJucyA9IG9wdGlvbnMubWF4VHVybnMgPz8gc3RhdGUuX21heFR1cm5zO1xuICAgICAgICAgICAgLy8gQ29udGludWUgdGhlIHN0cmVhbSBsb29wIHdpdGhvdXQgYmxvY2tpbmdcbiAgICAgICAgICAgIHRoaXMuI3J1blN0cmVhbUxvb3AocmVzdWx0LCBvcHRpb25zKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQuX2RvbmUoKTtcbiAgICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQuX3JhaXNlRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJ1bihhZ2VudCwgaW5wdXQsIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0cmVhbTogZmFsc2UsXG4gICAgICAgIGNvbnRleHQ6IHVuZGVmaW5lZCxcbiAgICB9KSB7XG4gICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJ1blN0YXRlICYmIGlucHV0Ll90cmFjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhUcmFjZShpbnB1dC5fdHJhY2UsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudFNwYW4oaW5wdXQuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucz8uc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNydW5JbmRpdmlkdWFsU3RyZWFtKGFnZW50LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jcnVuSW5kaXZpZHVhbE5vblN0cmVhbShhZ2VudCwgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRPckNyZWF0ZVRyYWNlKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zPy5zdHJlYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jcnVuSW5kaXZpZHVhbFN0cmVhbShhZ2VudCwgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuI3J1bkluZGl2aWR1YWxOb25TdHJlYW0oYWdlbnQsIGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdHJhY2VJZDogdGhpcy5jb25maWcudHJhY2VJZCxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuY29uZmlnLndvcmtmbG93TmFtZSxcbiAgICAgICAgICAgIGdyb3VwSWQ6IHRoaXMuY29uZmlnLmdyb3VwSWQsXG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5jb25maWcudHJhY2VNZXRhZGF0YSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxubGV0IF9kZWZhdWx0UnVubmVyID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gZ2V0RGVmYXVsdFJ1bm5lcigpIHtcbiAgICBpZiAoX2RlZmF1bHRSdW5uZXIpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZhdWx0UnVubmVyO1xuICAgIH1cbiAgICBfZGVmYXVsdFJ1bm5lciA9IG5ldyBSdW5uZXIoKTtcbiAgICByZXR1cm4gX2RlZmF1bHRSdW5uZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0TW9kZWwoYWdlbnRNb2RlbCwgcnVuQ29uZmlnTW9kZWwpIHtcbiAgICAvLyBXaGVuIGluaXRpYWxpemluZyBhbiBhZ2VudCB3aXRob3V0IG1vZGVsIG5hbWUsIHRoZSBtb2RlbCBwcm9wZXJ0eSBpcyBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLiBTbyxcbiAgICAvLyAqIGFnZW50TW9kZWwgPT09ICcnICYgcnVuQ29uZmlnTW9kZWwgZXhpc3RzLCBydW5Db25maWdNb2RlbCB3aWxsIGJlIHVzZWRcbiAgICAvLyAqIGFnZW50TW9kZWwgaXMgc2V0LCB0aGUgYWdlbnRNb2RlbCB3aWxsIGJlIHVzZWQgb3ZlciBydW5Db25maWdNb2RlbFxuICAgIGlmICgodHlwZW9mIGFnZW50TW9kZWwgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIGFnZW50TW9kZWwgIT09IEFnZW50LkRFRkFVTFRfTU9ERUxfUExBQ0VIT0xERVIpIHx8XG4gICAgICAgIGFnZW50TW9kZWwgLy8gYW55IHRydXRoeSB2YWx1ZVxuICAgICkge1xuICAgICAgICByZXR1cm4gYWdlbnRNb2RlbDtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bkNvbmZpZ01vZGVsID8/IGFnZW50TW9kZWwgPz8gQWdlbnQuREVGQVVMVF9NT0RFTF9QTEFDRUhPTERFUjtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW4oYWdlbnQsIGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgcnVubmVyID0gZ2V0RGVmYXVsdFJ1bm5lcigpO1xuICAgIGlmIChvcHRpb25zPy5zdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJ1bm5lci5ydW4oYWdlbnQsIGlucHV0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBydW5uZXIucnVuKGFnZW50LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBXaGVuIHRoZSBkZWZhdWx0IG1vZGVsIGlzIGEgR1BULTUgdmFyaWFudCwgYWdlbnRzIG1heSBjYXJyeSBHUFQtNS1zcGVjaWZpYyBwcm92aWRlckRhdGFcbiAqIChlLmcuLCByZWFzb25pbmcgZWZmb3J0LCB0ZXh0IHZlcmJvc2l0eSkuIElmIGEgcnVuIHJlc29sdmVzIHRvIGEgbm9uLUdQVC01IG1vZGVsIGFuZCB0aGVcbiAqIGFnZW50IHJlbGllZCBvbiB0aGUgZGVmYXVsdCBtb2RlbCAoaS5lLiwgbm8gZXhwbGljaXQgbW9kZWwgc2V0KSwgdGhlc2UgR1BULTUtb25seSBzZXR0aW5nc1xuICogYXJlIGluY29tcGF0aWJsZSBhbmQgc2hvdWxkIGJlIHN0cmlwcGVkIHRvIGF2b2lkIHJ1bnRpbWUgZXJyb3JzLlxuICovXG5mdW5jdGlvbiBhZGp1c3RNb2RlbFNldHRpbmdzRm9yTm9uR1BUNVJ1bm5lck1vZGVsKGV4cGxpY3RseU1vZGVsU2V0LCBhZ2VudE1vZGVsU2V0dGluZ3MsIHJ1bm5lck1vZGVsLCBtb2RlbFNldHRpbmdzKSB7XG4gICAgaWYgKFxuICAgIC8vIGdwdC01IGlzIGVuYWJsZWQgZm9yIHRoZSBkZWZhdWx0IG1vZGVsIGZvciBhZ2VudHNcbiAgICBpc0dwdDVEZWZhdWx0KCkgJiZcbiAgICAgICAgLy8gZXhwbGljaXRseSBzZXQgbW9kZWwgZm9yIHRoZSBhZ2VudFxuICAgICAgICBleHBsaWN0bHlNb2RlbFNldCAmJlxuICAgICAgICAvLyB0aGlzIHJ1bm5lciB1c2VzIGEgbm9uLWdwdC01IG1vZGVsXG4gICAgICAgICh0eXBlb2YgcnVubmVyTW9kZWwgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAhZ3B0NVJlYXNvbmluZ1NldHRpbmdzUmVxdWlyZWQocnVubmVyTW9kZWwpKSAmJlxuICAgICAgICAoYWdlbnRNb2RlbFNldHRpbmdzLnByb3ZpZGVyRGF0YT8ucmVhc29uaW5nIHx8XG4gICAgICAgICAgICBhZ2VudE1vZGVsU2V0dGluZ3MucHJvdmlkZXJEYXRhPy50ZXh0Py52ZXJib3NpdHkgfHxcbiAgICAgICAgICAgIGFnZW50TW9kZWxTZXR0aW5ncy5wcm92aWRlckRhdGE/LnJlYXNvbmluZ19lZmZvcnQpKSB7XG4gICAgICAgIGNvbnN0IGNvcGllZE1vZGVsU2V0dGluZ3MgPSB7IC4uLm1vZGVsU2V0dGluZ3MgfTtcbiAgICAgICAgLy8gdGhlIGluY29tcGF0aWJsZSBwYXJhbWV0ZXJzIHNob3VsZCBiZSByZW1vdmVkIHRvIGF2b2lkIHJ1bnRpbWUgZXJyb3JzXG4gICAgICAgIGRlbGV0ZSBjb3BpZWRNb2RlbFNldHRpbmdzLnByb3ZpZGVyRGF0YT8ucmVhc29uaW5nO1xuICAgICAgICBkZWxldGUgY29waWVkTW9kZWxTZXR0aW5ncy5wcm92aWRlckRhdGE/LnRleHQ/LnZlcmJvc2l0eTtcbiAgICAgICAgZGVsZXRlIGNvcGllZE1vZGVsU2V0dGluZ3MucHJvdmlkZXJEYXRhPy5yZWFzb25pbmdfZWZmb3J0O1xuICAgICAgICBpZiAoY29waWVkTW9kZWxTZXR0aW5ncy5yZWFzb25pbmcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb3BpZWRNb2RlbFNldHRpbmdzLnJlYXNvbmluZy5lZmZvcnQ7XG4gICAgICAgICAgICBkZWxldGUgY29waWVkTW9kZWxTZXR0aW5ncy5yZWFzb25pbmcuc3VtbWFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29waWVkTW9kZWxTZXR0aW5ncy50ZXh0KSB7XG4gICAgICAgICAgICBkZWxldGUgY29waWVkTW9kZWxTZXR0aW5ncy50ZXh0LnZlcmJvc2l0eTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29waWVkTW9kZWxTZXR0aW5ncztcbiAgICB9XG4gICAgcmV0dXJuIG1vZGVsU2V0dGluZ3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW4ubWpzLm1hcCIsImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgQWdlbnRIb29rcyB9IGZyb20gXCIuL2xpZmVjeWNsZS5tanNcIjtcbmltcG9ydCB7IGdldEFsbE1jcFRvb2xzIH0gZnJvbSBcIi4vbWNwLm1qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE1vZGVsU2V0dGluZ3MsIGdwdDVSZWFzb25pbmdTZXR0aW5nc1JlcXVpcmVkLCBpc0dwdDVEZWZhdWx0LCB9IGZyb20gXCIuL2RlZmF1bHRNb2RlbC5tanNcIjtcbmltcG9ydCB7IHRvb2wsIH0gZnJvbSBcIi4vdG9vbC5tanNcIjtcbmltcG9ydCB7IGdldEhhbmRvZmYgfSBmcm9tIFwiLi9oYW5kb2ZmLm1qc1wiO1xuaW1wb3J0IHsgUnVubmVyIH0gZnJvbSBcIi4vcnVuLm1qc1wiO1xuaW1wb3J0IHsgdG9GdW5jdGlvblRvb2xOYW1lIH0gZnJvbSBcIi4vdXRpbHMvdG9vbHMubWpzXCI7XG5pbXBvcnQgeyBnZXRPdXRwdXRUZXh0IH0gZnJvbSBcIi4vdXRpbHMvbWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgeyBpc0FnZW50VG9vbElucHV0IH0gZnJvbSBcIi4vdXRpbHMvdHlwZUd1YXJkcy5tanNcIjtcbmltcG9ydCB7IGlzWm9kT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHMvdHlwZUd1YXJkcy5tanNcIjtcbmltcG9ydCB7IE1vZGVsQmVoYXZpb3JFcnJvciwgVXNlckVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG4vLyBQZXItcHJvY2VzcywgZXBoZW1lcmFsIG1hcCBsaW5raW5nIGEgZnVuY3Rpb24gdG9vbCBjYWxsIHRvIGl0cyBuZXN0ZWRcbi8vIEFnZW50IHJ1biByZXN1bHQgd2l0aGluIHRoZSBzYW1lIHJ1bjsgZW50cnkgaXMgcmVtb3ZlZCBhZnRlciBjb25zdW1wdGlvbi5cbmNvbnN0IGFnZW50VG9vbFJ1blJlc3VsdHMgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIHNhdmVBZ2VudFRvb2xSdW5SZXN1bHQodG9vbENhbGwsIHJ1blJlc3VsdCkge1xuICAgIGlmICh0b29sQ2FsbCkge1xuICAgICAgICBhZ2VudFRvb2xSdW5SZXN1bHRzLnNldCh0b29sQ2FsbCwgcnVuUmVzdWx0KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZUFnZW50VG9vbFJ1blJlc3VsdCh0b29sQ2FsbCkge1xuICAgIGNvbnN0IHJ1blJlc3VsdCA9IGFnZW50VG9vbFJ1blJlc3VsdHMuZ2V0KHRvb2xDYWxsKTtcbiAgICBpZiAocnVuUmVzdWx0KSB7XG4gICAgICAgIGFnZW50VG9vbFJ1blJlc3VsdHMuZGVsZXRlKHRvb2xDYWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHJ1blJlc3VsdDtcbn1cbi8vIFRoZSBwYXJhbWV0ZXIgdHlwZSBmbyBuZWVkQXBwcm92YWwgZnVuY3Rpb24gZm9yIHRoZSB0b29sIGNyZWF0ZWQgYnkgQWdlbnQuYXNUb29sKCkgbWV0aG9kXG5jb25zdCBBZ2VudEFzVG9vbE5lZWRBcHByb3ZhbFNjaGFtZSA9IHoub2JqZWN0KHsgaW5wdXQ6IHouc3RyaW5nKCkgfSk7XG4vKipcbiAqIFRoZSBjbGFzcyByZXByZXNlbnRpbmcgYW4gQUkgYWdlbnQgY29uZmlndXJlZCB3aXRoIGluc3RydWN0aW9ucywgdG9vbHMsIGd1YXJkcmFpbHMsIGhhbmRvZmZzIGFuZCBtb3JlLlxuICpcbiAqIFdlIHN0cm9uZ2x5IHJlY29tbWVuZCBwYXNzaW5nIGBpbnN0cnVjdGlvbnNgLCB3aGljaCBpcyB0aGUgXCJzeXN0ZW0gcHJvbXB0XCIgZm9yIHRoZSBhZ2VudC4gSW5cbiAqIGFkZGl0aW9uLCB5b3UgY2FuIHBhc3MgYGhhbmRvZmZEZXNjcmlwdGlvbmAsIHdoaWNoIGlzIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlXG4gKiBhZ2VudCwgdXNlZCB3aGVuIHRoZSBhZ2VudCBpcyB1c2VkIGluc2lkZSB0b29scy9oYW5kb2Zmcy5cbiAqXG4gKiBBZ2VudHMgYXJlIGdlbmVyaWMgb24gdGhlIGNvbnRleHQgdHlwZS4gVGhlIGNvbnRleHQgaXMgYSAobXV0YWJsZSkgb2JqZWN0IHlvdSBjcmVhdGUuIEl0IGlzXG4gKiBwYXNzZWQgdG8gdG9vbCBmdW5jdGlvbnMsIGhhbmRvZmZzLCBndWFyZHJhaWxzLCBldGMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBZ2VudCBleHRlbmRzIEFnZW50SG9va3Mge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBBZ2VudCB3aXRoIGhhbmRvZmZzIGFuZCBhdXRvbWF0aWNhbGx5IGluZmVyIHRoZSB1bmlvbiB0eXBlIGZvciBUT3V0cHV0IGZyb20gdGhlIGhhbmRvZmYgYWdlbnRzJyBvdXRwdXQgdHlwZXMuXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBZ2VudCh7XG4gICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICBoYW5kb2ZmczogY29uZmlnLmhhbmRvZmZzLFxuICAgICAgICAgICAgb3V0cHV0VHlwZTogY29uZmlnLm91dHB1dFR5cGUsXG4gICAgICAgICAgICBoYW5kb2ZmT3V0cHV0VHlwZVdhcm5pbmdFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBERUZBVUxUX01PREVMX1BMQUNFSE9MREVSID0gJyc7XG4gICAgbmFtZTtcbiAgICBpbnN0cnVjdGlvbnM7XG4gICAgcHJvbXB0O1xuICAgIGhhbmRvZmZEZXNjcmlwdGlvbjtcbiAgICBoYW5kb2ZmcztcbiAgICBtb2RlbDtcbiAgICBtb2RlbFNldHRpbmdzO1xuICAgIHRvb2xzO1xuICAgIG1jcFNlcnZlcnM7XG4gICAgaW5wdXRHdWFyZHJhaWxzO1xuICAgIG91dHB1dEd1YXJkcmFpbHM7XG4gICAgb3V0cHV0VHlwZSA9ICd0ZXh0JztcbiAgICB0b29sVXNlQmVoYXZpb3I7XG4gICAgcmVzZXRUb29sQ2hvaWNlO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5uYW1lICE9PSAnc3RyaW5nJyB8fCBjb25maWcubmFtZS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdBZ2VudCBtdXN0IGhhdmUgYSBuYW1lLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgICAgICB0aGlzLmluc3RydWN0aW9ucyA9IGNvbmZpZy5pbnN0cnVjdGlvbnMgPz8gQWdlbnQuREVGQVVMVF9NT0RFTF9QTEFDRUhPTERFUjtcbiAgICAgICAgdGhpcy5wcm9tcHQgPSBjb25maWcucHJvbXB0O1xuICAgICAgICB0aGlzLmhhbmRvZmZEZXNjcmlwdGlvbiA9IGNvbmZpZy5oYW5kb2ZmRGVzY3JpcHRpb24gPz8gJyc7XG4gICAgICAgIHRoaXMuaGFuZG9mZnMgPSBjb25maWcuaGFuZG9mZnMgPz8gW107XG4gICAgICAgIHRoaXMubW9kZWwgPSBjb25maWcubW9kZWwgPz8gJyc7XG4gICAgICAgIHRoaXMubW9kZWxTZXR0aW5ncyA9IGNvbmZpZy5tb2RlbFNldHRpbmdzID8/IGdldERlZmF1bHRNb2RlbFNldHRpbmdzKCk7XG4gICAgICAgIHRoaXMudG9vbHMgPSBjb25maWcudG9vbHMgPz8gW107XG4gICAgICAgIHRoaXMubWNwU2VydmVycyA9IGNvbmZpZy5tY3BTZXJ2ZXJzID8/IFtdO1xuICAgICAgICB0aGlzLmlucHV0R3VhcmRyYWlscyA9IGNvbmZpZy5pbnB1dEd1YXJkcmFpbHMgPz8gW107XG4gICAgICAgIHRoaXMub3V0cHV0R3VhcmRyYWlscyA9IGNvbmZpZy5vdXRwdXRHdWFyZHJhaWxzID8/IFtdO1xuICAgICAgICBpZiAoY29uZmlnLm91dHB1dFR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VHlwZSA9IGNvbmZpZy5vdXRwdXRUeXBlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9vbFVzZUJlaGF2aW9yID0gY29uZmlnLnRvb2xVc2VCZWhhdmlvciA/PyAncnVuX2xsbV9hZ2Fpbic7XG4gICAgICAgIHRoaXMucmVzZXRUb29sQ2hvaWNlID0gY29uZmlnLnJlc2V0VG9vbENob2ljZSA/PyB0cnVlO1xuICAgICAgICBpZiAoXG4gICAgICAgIC8vIFRoZSB1c2VyIHNldHMgYSBub24tZGVmYXVsdCBtb2RlbFxuICAgICAgICBjb25maWcubW9kZWwgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgLy8gVGhlIGRlZmF1bHQgbW9kZWwgaXMgZ3B0LTVcbiAgICAgICAgICAgIGlzR3B0NURlZmF1bHQoKSAmJlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgdGhlIHNwZWNpZmllZCBtb2RlbCBpcyBub3QgYSBncHQtNSBtb2RlbFxuICAgICAgICAgICAgKHR5cGVvZiBjb25maWcubW9kZWwgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgICAgIWdwdDVSZWFzb25pbmdTZXR0aW5nc1JlcXVpcmVkKGNvbmZpZy5tb2RlbCkpICYmXG4gICAgICAgICAgICAvLyBUaGUgbW9kZWwgc2V0dGluZ3MgYXJlIG5vdCBjdXN0b21pemVkIGZvciB0aGUgc3BlY2lmaWVkIG1vZGVsXG4gICAgICAgICAgICBjb25maWcubW9kZWxTZXR0aW5ncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBJbiB0aGlzIHNjZW5hcmlvLCB3ZSBzaG91bGQgdXNlIGEgZ2VuZXJpYyBtb2RlbCBzZXR0aW5nc1xuICAgICAgICAgICAgLy8gYmVjYXVzZSBub24tZ3B0LTUgbW9kZWxzIGFyZSBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBkZWZhdWx0IGdwdC01IG1vZGVsIHNldHRpbmdzLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGJlc3QtZWZmb3J0IGF0dGVtcHQgdG8gbWFrZSB0aGUgYWdlbnQgd29yayB3aXRoIG5vbi1ncHQtNSBtb2RlbHMuXG4gICAgICAgICAgICB0aGlzLm1vZGVsU2V0dGluZ3MgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICAvLyAtLS0gUnVudGltZSB3YXJuaW5nIGZvciBoYW5kb2ZmIG91dHB1dCB0eXBlIGNvbXBhdGliaWxpdHkgLS0tXG4gICAgICAgIGlmIChjb25maWcuaGFuZG9mZk91dHB1dFR5cGVXYXJuaW5nRW5hYmxlZCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBjb25maWcuaGFuZG9mZk91dHB1dFR5cGVXYXJuaW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZG9mZnMgJiYgdGhpcy5vdXRwdXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0VHlwZXMgPSBuZXcgU2V0KFtKU09OLnN0cmluZ2lmeSh0aGlzLm91dHB1dFR5cGUpXSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoIG9mIHRoaXMuaGFuZG9mZnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdvdXRwdXRUeXBlJyBpbiBoICYmIGgub3V0cHV0VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0VHlwZXMuYWRkKEpTT04uc3RyaW5naWZ5KGgub3V0cHV0VHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdhZ2VudCcgaW4gaCAmJiBoLmFnZW50Lm91dHB1dFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFR5cGVzLmFkZChKU09OLnN0cmluZ2lmeShoLmFnZW50Lm91dHB1dFR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0VHlwZXMuc2l6ZSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oYFtBZ2VudF0gV2FybmluZzogSGFuZG9mZiBhZ2VudHMgaGF2ZSBkaWZmZXJlbnQgb3V0cHV0IHR5cGVzOiAke0FycmF5LmZyb20ob3V0cHV0VHlwZXMpLmpvaW4oJywgJyl9LiBZb3UgY2FuIG1ha2UgaXQgdHlwZS1zYWZlIGJ5IHVzaW5nIEFnZW50LmNyZWF0ZSh7IC4uLiB9KSBtZXRob2QgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogT3V0cHV0IHNjaGVtYSBuYW1lLlxuICAgICAqL1xuICAgIGdldCBvdXRwdXRTY2hlbWFOYW1lKCkge1xuICAgICAgICBpZiAodGhpcy5vdXRwdXRUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHJldHVybiAndGV4dCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNab2RPYmplY3QodGhpcy5vdXRwdXRUeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuICdab2RPdXRwdXQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLm91dHB1dFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXRUeXBlLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG91dHB1dCB0eXBlOiAke3RoaXMub3V0cHV0VHlwZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZXMgYSBjb3B5IG9mIHRoZSBhZ2VudCwgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzIGNoYW5nZWQuIEZvciBleGFtcGxlLCB5b3UgY291bGQgZG86XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBuZXdBZ2VudCA9IGFnZW50LmNsb25lKHsgaW5zdHJ1Y3Rpb25zOiAnTmV3IGluc3RydWN0aW9ucycgfSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWcgLSBBIHBhcnRpYWwgY29uZmlndXJhdGlvbiB0byBjaGFuZ2UuXG4gICAgICogQHJldHVybnMgQSBuZXcgYWdlbnQgd2l0aCB0aGUgZ2l2ZW4gY2hhbmdlcy5cbiAgICAgKi9cbiAgICBjbG9uZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBZ2VudCh7XG4gICAgICAgICAgICAuLi50aGlzLFxuICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIHRoaXMgYWdlbnQgaW50byBhIHRvb2wsIGNhbGxhYmxlIGJ5IG90aGVyIGFnZW50cy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgZGlmZmVyZW50IGZyb20gaGFuZG9mZnMgaW4gdHdvIHdheXM6XG4gICAgICogMS4gSW4gaGFuZG9mZnMsIHRoZSBuZXcgYWdlbnQgcmVjZWl2ZXMgdGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5LiBJbiB0aGlzIHRvb2wsIHRoZSBuZXcgYWdlbnRcbiAgICAgKiAgICByZWNlaXZlcyBnZW5lcmF0ZWQgaW5wdXQuXG4gICAgICogMi4gSW4gaGFuZG9mZnMsIHRoZSBuZXcgYWdlbnQgdGFrZXMgb3ZlciB0aGUgY29udmVyc2F0aW9uLiBJbiB0aGlzIHRvb2wsIHRoZSBuZXcgYWdlbnQgaXNcbiAgICAgKiAgICBjYWxsZWQgYXMgYSB0b29sLCBhbmQgdGhlIGNvbnZlcnNhdGlvbiBpcyBjb250aW51ZWQgYnkgdGhlIG9yaWdpbmFsIGFnZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgdG9vbC5cbiAgICAgKiBAcmV0dXJucyBBIHRvb2wgdGhhdCBydW5zIHRoZSBhZ2VudCBhbmQgcmV0dXJucyB0aGUgb3V0cHV0IHRleHQuXG4gICAgICovXG4gICAgYXNUb29sKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyB0b29sTmFtZSwgdG9vbERlc2NyaXB0aW9uLCBjdXN0b21PdXRwdXRFeHRyYWN0b3IsIG5lZWRzQXBwcm92YWwsIHJ1bkNvbmZpZywgcnVuT3B0aW9ucywgaXNFbmFibGVkLCB9ID0gb3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHRvb2woe1xuICAgICAgICAgICAgbmFtZTogdG9vbE5hbWUgPz8gdG9GdW5jdGlvblRvb2xOYW1lKHRoaXMubmFtZSksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdG9vbERlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogQWdlbnRBc1Rvb2xOZWVkQXBwcm92YWxTY2hhbWUsXG4gICAgICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgICAgICBuZWVkc0FwcHJvdmFsLFxuICAgICAgICAgICAgaXNFbmFibGVkLFxuICAgICAgICAgICAgZXhlY3V0ZTogYXN5bmMgKGRhdGEsIGNvbnRleHQsIGRldGFpbHMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQWdlbnRUb29sSW5wdXQoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcignQWdlbnQgdG9vbCBjYWxsZWQgd2l0aCBpbnZhbGlkIGlucHV0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBSdW5uZXIocnVuQ29uZmlnID8/IHt9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5uZXIucnVuKHRoaXMsIGRhdGEuaW5wdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgLi4uKHJ1bk9wdGlvbnMgPz8ge30pLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXNTdG9wQXRUb29sTmFtZXMgPSB0eXBlb2YgdGhpcy50b29sVXNlQmVoYXZpb3IgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9vbFVzZUJlaGF2aW9yICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICdzdG9wQXRUb29sTmFtZXMnIGluIHRoaXMudG9vbFVzZUJlaGF2aW9yO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VzdG9tT3V0cHV0RXh0cmFjdG9yICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgICAgIHVzZXNTdG9wQXRUb29sTmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBZb3UncmUgcGFzc2luZyB0aGUgYWdlbnQgKG5hbWU6ICR7dGhpcy5uYW1lfSkgd2l0aCB0b29sVXNlQmVoYXZpb3Iuc3RvcEF0VG9vbE5hbWVzIGNvbmZpZ3VyZWQgYXMgYSB0b29sIHRvIGEgZGlmZmVyZW50IGFnZW50OyB0aGlzIG1heSBub3Qgd29yayBhcyB5b3UgZXhwZWN0LiBZb3UgbWF5IHdhbnQgdG8gaGF2ZSBhIHdyYXBwZXIgZnVuY3Rpb24gdG9vbCB0byBjb25zaXN0ZW50bHkgcmV0dXJuIHRoZSBmaW5hbCBvdXRwdXQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG91dHB1dFRleHQgPSB0eXBlb2YgY3VzdG9tT3V0cHV0RXh0cmFjdG9yID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gYXdhaXQgY3VzdG9tT3V0cHV0RXh0cmFjdG9yKHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgOiBnZXRPdXRwdXRUZXh0KHJlc3VsdC5yYXdSZXNwb25zZXNbcmVzdWx0LnJhd1Jlc3BvbnNlcy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICAgICAgaWYgKGRldGFpbHM/LnRvb2xDYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhdmVBZ2VudFRvb2xSdW5SZXN1bHQoZGV0YWlscy50b29sQ2FsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dFRleHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3lzdGVtIHByb21wdCBmb3IgdGhlIGFnZW50LlxuICAgICAqXG4gICAgICogSWYgdGhlIGFnZW50IGhhcyBhIGZ1bmN0aW9uIGFzIGl0cyBpbnN0cnVjdGlvbnMsIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICAgKiBydW5Db250ZXh0IGFuZCB0aGUgYWdlbnQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0U3lzdGVtUHJvbXB0KHJ1bkNvbnRleHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmluc3RydWN0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaW5zdHJ1Y3Rpb25zKHJ1bkNvbnRleHQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJvbXB0IHRlbXBsYXRlIGZvciB0aGUgYWdlbnQsIGlmIGRlZmluZWQuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgYWdlbnQgaGFzIGEgZnVuY3Rpb24gYXMgaXRzIHByb21wdCwgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgICAqIHJ1bkNvbnRleHQgYW5kIHRoZSBhZ2VudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRQcm9tcHQocnVuQ29udGV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJvbXB0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9tcHQocnVuQ29udGV4dCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbXB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBhdmFpbGFibGUgdG9vbHMgZnJvbSB0aGUgTUNQIHNlcnZlcnMuXG4gICAgICogQHJldHVybnMgdGhlIE1DUCBwb3dlcmVkIHRvb2xzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0TWNwVG9vbHMocnVuQ29udGV4dCkge1xuICAgICAgICBpZiAodGhpcy5tY3BTZXJ2ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRBbGxNY3BUb29scyh7XG4gICAgICAgICAgICAgICAgbWNwU2VydmVyczogdGhpcy5tY3BTZXJ2ZXJzLFxuICAgICAgICAgICAgICAgIHJ1bkNvbnRleHQsXG4gICAgICAgICAgICAgICAgYWdlbnQ6IHRoaXMsXG4gICAgICAgICAgICAgICAgY29udmVydFNjaGVtYXNUb1N0cmljdDogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFMbCBhZ2VudCB0b29scywgaW5jbHVkaW5nIHRoZSBNQ1BsIGFuZCBmdW5jdGlvbiB0b29scy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGFsbCBjb25maWd1cmVkIHRvb2xzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWxsVG9vbHMocnVuQ29udGV4dCkge1xuICAgICAgICBjb25zdCBtY3BUb29scyA9IGF3YWl0IHRoaXMuZ2V0TWNwVG9vbHMocnVuQ29udGV4dCk7XG4gICAgICAgIGNvbnN0IGVuYWJsZWRUb29scyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGNhbmRpZGF0ZSBvZiB0aGlzLnRvb2xzKSB7XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXliZUlzRW5hYmxlZCA9IGNhbmRpZGF0ZS5pc0VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5hYmxlZCA9IHR5cGVvZiBtYXliZUlzRW5hYmxlZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGF3YWl0IG1heWJlSXNFbmFibGVkKHJ1bkNvbnRleHQsIHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIG1heWJlSXNFbmFibGVkID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbWF5YmVJc0VuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIWVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5hYmxlZFRvb2xzLnB1c2goY2FuZGlkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWy4uLm1jcFRvb2xzLCAuLi5lbmFibGVkVG9vbHNdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoYW5kb2ZmcyB0aGF0IHNob3VsZCBiZSBleHBvc2VkIHRvIHRoZSBtb2RlbCBmb3IgdGhlIGN1cnJlbnQgcnVuLlxuICAgICAqXG4gICAgICogSGFuZG9mZnMgdGhhdCBwcm92aWRlIGFuIGBpc0VuYWJsZWRgIGZ1bmN0aW9uIHJldHVybmluZyBgZmFsc2VgIGFyZSBvbWl0dGVkLlxuICAgICAqL1xuICAgIGFzeW5jIGdldEVuYWJsZWRIYW5kb2ZmcyhydW5Db250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGhhbmRvZmZzID0gdGhpcy5oYW5kb2Zmcz8ubWFwKChoKSA9PiBnZXRIYW5kb2ZmKGgpKSA/PyBbXTtcbiAgICAgICAgY29uc3QgZW5hYmxlZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGhhbmRvZmYgb2YgaGFuZG9mZnMpIHtcbiAgICAgICAgICAgIGlmIChhd2FpdCBoYW5kb2ZmLmlzRW5hYmxlZCh7IHJ1bkNvbnRleHQsIGFnZW50OiB0aGlzIH0pKSB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZC5wdXNoKGhhbmRvZmYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmFibGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgdGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgYWdlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3V0cHV0IC0gVGhlIG91dHB1dCBvZiB0aGUgYWdlbnQuXG4gICAgICogQHJldHVybnMgVGhlIHBhcnNlZCBvdXQuXG4gICAgICovXG4gICAgcHJvY2Vzc0ZpbmFsT3V0cHV0KG91dHB1dCkge1xuICAgICAgICBpZiAodGhpcy5vdXRwdXRUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm91dHB1dFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKG91dHB1dCk7XG4gICAgICAgICAgICBpZiAoaXNab2RPYmplY3QodGhpcy5vdXRwdXRUeXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm91dHB1dFR5cGUucGFyc2UocGFyc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG91dHB1dCB0eXBlOiAke3RoaXMub3V0cHV0VHlwZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGFnZW50LCB3aGljaCBpcyBzZXJpYWxpemFibGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIEpTT04gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGFnZW50J3MgbmFtZS5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgIH07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWdlbnQubWpzLm1hcCIsImltcG9ydCB7IGFkZFRyYWNlUHJvY2Vzc29yIH0gZnJvbSBcIi4vdHJhY2luZy9pbmRleC5tanNcIjtcbmltcG9ydCB7IGRlZmF1bHRQcm9jZXNzb3IgfSBmcm9tIFwiLi90cmFjaW5nL3Byb2Nlc3Nvci5tanNcIjtcbmV4cG9ydCB7IFJ1bnRpbWVFdmVudEVtaXR0ZXIgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5leHBvcnQgeyBBZ2VudCwgfSBmcm9tIFwiLi9hZ2VudC5tanNcIjtcbmV4cG9ydCB7IEFnZW50c0Vycm9yLCBHdWFyZHJhaWxFeGVjdXRpb25FcnJvciwgSW5wdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgTWF4VHVybnNFeGNlZWRlZEVycm9yLCBNb2RlbEJlaGF2aW9yRXJyb3IsIE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkLCBUb29sQ2FsbEVycm9yLCBVc2VyRXJyb3IsIFN5c3RlbUVycm9yLCB9IGZyb20gXCIuL2Vycm9ycy5tanNcIjtcbmV4cG9ydCB7IFJ1bkFnZW50VXBkYXRlZFN0cmVhbUV2ZW50LCBSdW5SYXdNb2RlbFN0cmVhbUV2ZW50LCBSdW5JdGVtU3RyZWFtRXZlbnQsIH0gZnJvbSBcIi4vZXZlbnRzLm1qc1wiO1xuZXhwb3J0IHsgZGVmaW5lT3V0cHV0R3VhcmRyYWlsLCB9IGZyb20gXCIuL2d1YXJkcmFpbC5tanNcIjtcbmV4cG9ydCB7IGdldEhhbmRvZmYsIGdldFRyYW5zZmVyTWVzc2FnZSwgSGFuZG9mZiwgaGFuZG9mZiwgfSBmcm9tIFwiLi9oYW5kb2ZmLm1qc1wiO1xuZXhwb3J0IHsgYXNzaXN0YW50LCBzeXN0ZW0sIHVzZXIgfSBmcm9tIFwiLi9oZWxwZXJzL21lc3NhZ2UubWpzXCI7XG5leHBvcnQgeyBleHRyYWN0QWxsVGV4dE91dHB1dCwgUnVuSGFuZG9mZkNhbGxJdGVtLCBSdW5IYW5kb2ZmT3V0cHV0SXRlbSwgUnVuTWVzc2FnZU91dHB1dEl0ZW0sIFJ1blJlYXNvbmluZ0l0ZW0sIFJ1blRvb2xBcHByb3ZhbEl0ZW0sIFJ1blRvb2xDYWxsSXRlbSwgUnVuVG9vbENhbGxPdXRwdXRJdGVtLCB9IGZyb20gXCIuL2l0ZW1zLm1qc1wiO1xuZXhwb3J0IHsgQWdlbnRIb29rcyB9IGZyb20gXCIuL2xpZmVjeWNsZS5tanNcIjtcbmV4cG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmV4cG9ydCB7IGdldEFsbE1jcFRvb2xzLCBpbnZhbGlkYXRlU2VydmVyVG9vbHNDYWNoZSwgbWNwVG9GdW5jdGlvblRvb2wsIE1DUFNlcnZlclN0ZGlvLCBNQ1BTZXJ2ZXJTdHJlYW1hYmxlSHR0cCwgTUNQU2VydmVyU1NFLCB9IGZyb20gXCIuL21jcC5tanNcIjtcbmV4cG9ydCB7IGNyZWF0ZU1DUFRvb2xTdGF0aWNGaWx0ZXIsIH0gZnJvbSBcIi4vbWNwVXRpbC5tanNcIjtcbmV4cG9ydCB7IE9QRU5BSV9ERUZBVUxUX01PREVMX0VOVl9WQVJJQUJMRV9OQU1FLCBncHQ1UmVhc29uaW5nU2V0dGluZ3NSZXF1aXJlZCwgZ2V0RGVmYXVsdE1vZGVsLCBnZXREZWZhdWx0TW9kZWxTZXR0aW5ncywgaXNHcHQ1RGVmYXVsdCwgfSBmcm9tIFwiLi9kZWZhdWx0TW9kZWwubWpzXCI7XG5leHBvcnQgeyBzZXREZWZhdWx0TW9kZWxQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVycy5tanNcIjtcbmV4cG9ydCB7IFJ1blJlc3VsdCwgU3RyZWFtZWRSdW5SZXN1bHQgfSBmcm9tIFwiLi9yZXN1bHQubWpzXCI7XG5leHBvcnQgeyBydW4sIFJ1bm5lciwgfSBmcm9tIFwiLi9ydW4ubWpzXCI7XG5leHBvcnQgeyBSdW5Db250ZXh0IH0gZnJvbSBcIi4vcnVuQ29udGV4dC5tanNcIjtcbmV4cG9ydCB7IFJ1blN0YXRlIH0gZnJvbSBcIi4vcnVuU3RhdGUubWpzXCI7XG5leHBvcnQgeyBjb21wdXRlclRvb2wsIGhvc3RlZE1jcFRvb2wsIHRvb2wsIH0gZnJvbSBcIi4vdG9vbC5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RyYWNpbmcvaW5kZXgubWpzXCI7XG5leHBvcnQgeyBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyLCBUcmFjZVByb3ZpZGVyIH0gZnJvbSBcIi4vdHJhY2luZy9wcm92aWRlci5tanNcIjtcbmV4cG9ydCB7IFVzYWdlIH0gZnJvbSBcIi4vdXNhZ2UubWpzXCI7XG5leHBvcnQgKiBhcyBwcm90b2NvbCBmcm9tIFwiLi90eXBlcy9wcm90b2NvbC5tanNcIjtcbi8qKlxuICogQWRkIHRoZSBkZWZhdWx0IHByb2Nlc3Nvciwgd2hpY2ggZXhwb3J0cyB0cmFjZXMgYW5kIHNwYW5zIHRvIHRoZSBiYWNrZW5kIGluIGJhdGNoZXMuIFlvdSBjYW5cbiAqIGNoYW5nZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBieSBlaXRoZXI6XG4gKiAxLiBjYWxsaW5nIGFkZFRyYWNlUHJvY2Vzc29yLCB3aGljaCBhZGRzIGFkZGl0aW9uYWwgcHJvY2Vzc29ycywgb3JcbiAqIDIuIGNhbGxpbmcgc2V0VHJhY2VQcm9jZXNzb3JzLCB3aGljaCBzZXRzIHRoZSBwcm9jZXNzb3JzIGFuZCBkaXNjYXJkcyB0aGUgZGVmYXVsdCBvbmVcbiAqL1xuYWRkVHJhY2VQcm9jZXNzb3IoZGVmYXVsdFByb2Nlc3NvcigpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgTUVUQURBVEEgZnJvbSBcIi4vbWV0YWRhdGEubWpzXCI7XG5pbXBvcnQgeyBSdW5Ub29sQXBwcm92YWxJdGVtIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZSc7XG4vKipcbiAqIENvbnZlcnRzIGEgYmFzZTY0IHN0cmluZyB0byBhbiBBcnJheUJ1ZmZlclxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFxuICogQHJldHVybnMge0FycmF5QnVmZmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjQpIHtcbiAgICBjb25zdCBiaW5hcnlTdHJpbmcgPSBhdG9iKGJhc2U2NCk7XG4gICAgY29uc3QgbGVuID0gYmluYXJ5U3RyaW5nLmxlbmd0aDtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBieXRlc1tpXSA9IGJpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZXMuYnVmZmVyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBBcnJheUJ1ZmZlciB0byBhIGJhc2U2NCBzdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlCdWZmZXJUb0Jhc2U2NChhcnJheUJ1ZmZlcikge1xuICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoLi4ubmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICByZXR1cm4gYnRvYShiaW5hcnlTdHJpbmcpO1xufVxuLyoqXG4gKiBHZXQgdGhlIGxhc3QgdGV4dCBmcm9tIGFuIGF1ZGlvIG91dHB1dCBtZXNzYWdlXG4gKiBAcGFyYW0gaXRlbVxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3RUZXh0RnJvbUF1ZGlvT3V0cHV0TWVzc2FnZShpdGVtKSB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBpdGVtID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBpdGVtICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICAhKCd0eXBlJyBpbiBpdGVtKSB8fFxuICAgICAgICB0eXBlb2YgaXRlbS50eXBlICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAhaXRlbS50eXBlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpdGVtLnR5cGUgIT09ICdtZXNzYWdlJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoISgnY29udGVudCcgaW4gaXRlbSkgfHxcbiAgICAgICAgIUFycmF5LmlzQXJyYXkoaXRlbS5jb250ZW50KSB8fFxuICAgICAgICBpdGVtLmNvbnRlbnQubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBsYXN0Q29udGVudEl0ZW0gPSBpdGVtLmNvbnRlbnRbaXRlbS5jb250ZW50Lmxlbmd0aCAtIDFdO1xuICAgIGlmICghKCd0eXBlJyBpbiBsYXN0Q29udGVudEl0ZW0pIHx8XG4gICAgICAgIHR5cGVvZiBsYXN0Q29udGVudEl0ZW0udHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGxhc3RDb250ZW50SXRlbS50eXBlID09PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgbGFzdENvbnRlbnRJdGVtLnRleHQgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IGxhc3RDb250ZW50SXRlbS50ZXh0XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGxhc3RDb250ZW50SXRlbS50eXBlID09PSAnb3V0cHV0X2F1ZGlvJykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGxhc3RDb250ZW50SXRlbS50cmFuc2NyaXB0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBsYXN0Q29udGVudEl0ZW0udHJhbnNjcmlwdFxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIENvbXBhcmUgdHdvIGNvbnZlcnNhdGlvbiBoaXN0b3JpZXMgdG8gZGV0ZXJtaW5lIHRoZSByZW1vdmFscywgYWRkaXRpb25zLCBhbmQgdXBkYXRlcy5cbiAqIEBwYXJhbSBvbGRIaXN0b3J5IC0gVGhlIG9sZCBoaXN0b3J5LlxuICogQHBhcmFtIG5ld0hpc3RvcnkgLSBUaGUgbmV3IGhpc3RvcnkuXG4gKiBAcmV0dXJucyBBIGRpZmYgb2YgdGhlIHR3byBoaXN0b3JpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmUmVhbHRpbWVIaXN0b3J5KG9sZEhpc3RvcnksIG5ld0hpc3RvcnkpIHtcbiAgICBjb25zdCByZW1vdmFscyA9IG9sZEhpc3RvcnkuZmlsdGVyKChpdGVtKSA9PiAhbmV3SGlzdG9yeS5zb21lKChuZXdJdGVtKSA9PiBuZXdJdGVtLml0ZW1JZCA9PT0gaXRlbS5pdGVtSWQpKTtcbiAgICBjb25zdCBhZGRpdGlvbnMgPSBuZXdIaXN0b3J5LmZpbHRlcigoaXRlbSkgPT4gIW9sZEhpc3Rvcnkuc29tZSgob2xkSXRlbSkgPT4gb2xkSXRlbS5pdGVtSWQgPT09IGl0ZW0uaXRlbUlkKSk7XG4gICAgY29uc3QgdXBkYXRlcyA9IG5ld0hpc3RvcnkuZmlsdGVyKChpdGVtKSA9PiBvbGRIaXN0b3J5LnNvbWUoKG9sZEl0ZW0pID0+IG9sZEl0ZW0uaXRlbUlkID09PSBpdGVtLml0ZW1JZCAmJlxuICAgICAgICBKU09OLnN0cmluZ2lmeShvbGRJdGVtKSAhPT0gSlNPTi5zdHJpbmdpZnkoaXRlbSkpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmFscyxcbiAgICAgICAgYWRkaXRpb25zLFxuICAgICAgICB1cGRhdGVzLFxuICAgIH07XG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIFdlYlJUQy5cbiAqIEByZXR1cm5zIFRydWUgaWYgV2ViUlRDIGlzIHN1cHBvcnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzV2ViUlRDU3VwcG9ydCgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvd1snUlRDUGVlckNvbm5lY3Rpb24nXSAhPT0gJ3VuZGVmaW5lZCc7XG59XG4vKipcbiAqIFJlbW92ZXMgdGhlIGF1ZGlvIGRhdGEgZnJvbSBhbGwgY29udGVudCBpbiBhIG1lc3NhZ2UgYnkgc2V0dGluZyBpdCB0byBudWxsLlxuICogQHBhcmFtIGl0ZW1cbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBdWRpb0Zyb21Db250ZW50KGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5yb2xlID09PSAnc3lzdGVtJykge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gICAgaWYgKGl0ZW0ucm9sZSA9PT0gJ2Fzc2lzdGFudCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS50eXBlID09PSAnb3V0cHV0X2F1ZGlvJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpbzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpdGVtLnJvbGUgPT09ICd1c2VyJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LnR5cGUgPT09ICdpbnB1dF9hdWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbi8qKlxuICogVXBkYXRlcyB0aGUgcmVhbHRpbWUgaGlzdG9yeSBhcnJheSBiYXNlZCBvbiB0aGUgaW5jb21pbmcgZXZlbnQgYW5kIG9wdGlvbnMuXG4gKiBAcGFyYW0gaGlzdG9yeSAtIFRoZSBjdXJyZW50IGhpc3RvcnkgYXJyYXkuXG4gKiBAcGFyYW0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gcHJvY2VzcyAoUmVhbHRpbWVJdGVtKS5cbiAqIEBwYXJhbSBzaG91bGRJbmNsdWRlQXVkaW9EYXRhIC0gV2hldGhlciB0byBpbmNsdWRlIGF1ZGlvIGRhdGEgaW4gbWVzc2FnZSBpdGVtcy5cbiAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIGhpc3RvcnkgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVSZWFsdGltZUhpc3RvcnkoaGlzdG9yeSwgZXZlbnQsIHNob3VsZEluY2x1ZGVBdWRpb0RhdGEpIHtcbiAgICAvLyBNZXJnZSB0cmFuc2NyaXB0IGludG8gcGxhY2Vob2xkZXIgaW5wdXRfYXVkaW8gbWVzc2FnZVxuICAgIGlmIChldmVudC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5jb21wbGV0ZWQnKSB7XG4gICAgICAgIHJldHVybiBoaXN0b3J5Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0uaXRlbUlkID09PSBldmVudC5pdGVtX2lkICYmXG4gICAgICAgICAgICAgICAgaXRlbS50eXBlID09PSAnbWVzc2FnZScgJiZcbiAgICAgICAgICAgICAgICAncm9sZScgaW4gaXRlbSAmJlxuICAgICAgICAgICAgICAgIGl0ZW0ucm9sZSA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZENvbnRlbnQgPSBpdGVtLmNvbnRlbnQubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gJ2lucHV0X2F1ZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NyaXB0OiBldmVudC50cmFuc2NyaXB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogdXBkYXRlZENvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ2NvbXBsZXRlZCcsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgbmV3RXZlbnQgPSAhc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSAmJiBldmVudC50eXBlID09PSAnbWVzc2FnZSdcbiAgICAgICAgPyByZW1vdmVBdWRpb0Zyb21Db250ZW50KGV2ZW50KVxuICAgICAgICA6IGV2ZW50O1xuICAgIGNvbnN0IGV4aXN0aW5nSW5kZXggPSBoaXN0b3J5LmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbS5pdGVtSWQgPT09IGV2ZW50Lml0ZW1JZCk7XG4gICAgaWYgKGV4aXN0aW5nSW5kZXggIT09IC0xKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBpdGVtXG4gICAgICAgIHJldHVybiBoaXN0b3J5Lm1hcCgoaXRlbSwgaWR4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaWR4ID09PSBleGlzdGluZ0luZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0V2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzaG91bGRJbmNsdWRlQXVkaW9EYXRhICYmIGl0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZUF1ZGlvRnJvbUNvbnRlbnQoaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2ZW50LnByZXZpb3VzSXRlbUlkKSB7XG4gICAgICAgIC8vIEluc2VydCBhZnRlciBwcmV2aW91c0l0ZW1JZCBpZiBmb3VuZCwgZWxzZSBhdCBlbmRcbiAgICAgICAgY29uc3QgcHJldkluZGV4ID0gaGlzdG9yeS5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0uaXRlbUlkID09PSBldmVudC5wcmV2aW91c0l0ZW1JZCk7XG4gICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC4uLmhpc3Rvcnkuc2xpY2UoMCwgcHJldkluZGV4ICsgMSksXG4gICAgICAgICAgICAgICAgbmV3RXZlbnQsXG4gICAgICAgICAgICAgICAgLi4uaGlzdG9yeS5zbGljZShwcmV2SW5kZXggKyAxKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gWy4uLmhpc3RvcnksIG5ld0V2ZW50XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsuLi5oaXN0b3J5LCBuZXdFdmVudF07XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgaGVhZGVycyB0byB1c2UgZm9yIHRoZSBSZWFsdGltZSBBUEkuXG4gKi9cbmV4cG9ydCBjb25zdCBIRUFERVJTID0ge1xuICAgICdVc2VyLUFnZW50JzogYEFnZW50cy9KYXZhU2NyaXB0ICR7TUVUQURBVEEudmVyc2lvbn1gLFxuICAgICdYLU9wZW5BSS1BZ2VudHMtU0RLJzogYG9wZW5haS1hZ2VudHMtc2RrLiR7TUVUQURBVEEudmVyc2lvbn1gLFxufTtcbi8qKlxuICogQnJvd3NlciB3ZWJzb2NrZXQgaGVhZGVyXG4gKi9cbmV4cG9ydCBjb25zdCBXRUJTT0NLRVRfTUVUQSA9IGBvcGVuYWktYWdlbnRzLXNkay4ke01FVEFEQVRBLnZlcnNpb259YDtcbmV4cG9ydCBmdW5jdGlvbiByZWFsdGltZUFwcHJvdmFsSXRlbVRvQXBwcm92YWxJdGVtKGFnZW50LCBpdGVtKSB7XG4gICAgY29uc3QgeyBuYW1lLCBhcmd1bWVudHM6IGFyZ3MsIC4uLnJlc3QgfSA9IGl0ZW07XG4gICAgcmV0dXJuIG5ldyBSdW5Ub29sQXBwcm92YWxJdGVtKHtcbiAgICAgICAgdHlwZTogJ2hvc3RlZF90b29sX2NhbGwnLFxuICAgICAgICBuYW1lLFxuICAgICAgICBhcmd1bWVudHM6IEpTT04uc3RyaW5naWZ5KGFyZ3MpLFxuICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgIHByb3ZpZGVyRGF0YToge1xuICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgfSxcbiAgICB9LCBhZ2VudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXBwcm92YWxJdGVtVG9SZWFsdGltZUFwcHJvdmFsSXRlbShpdGVtKSB7XG4gICAgY29uc3QgeyBuYW1lLCBhcmd1bWVudHM6IGFyZ3MsIHByb3ZpZGVyRGF0YSB9ID0gaXRlbS5yYXdJdGVtO1xuICAgIGNvbnN0IHsgaXRlbUlkLCBzZXJ2ZXJMYWJlbCwgLi4ucmVzdCB9ID0gcHJvdmlkZXJEYXRhID8/IHt9O1xuICAgIGlmICghaXRlbUlkIHx8ICFzZXJ2ZXJMYWJlbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXBwcm92YWwgaXRlbSBmb3IgUmVhbHRpbWUgTUNQIGFwcHJvdmFsIHJlcXVlc3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ21jcF9hcHByb3ZhbF9yZXF1ZXN0JyxcbiAgICAgICAgaXRlbUlkLFxuICAgICAgICBzZXJ2ZXJMYWJlbCxcbiAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYXJndW1lbnRzOiBhcmdzID8gSlNPTi5wYXJzZShhcmdzKSA6IHt9LFxuICAgICAgICBhcHByb3ZlZDogbnVsbCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcCIsImltcG9ydCB7IEFnZW50LCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuLyoqXG4gKiBBIHNwZWNpYWxpemVkIGFnZW50IGluc3RhbmNlIHRoYXQgaXMgbWVhbnQgdG8gYmUgdXNlZCB3aXRoaW4gYSBgUmVhbHRpbWVTZXNzaW9uYCB0byBidWlsZFxuICogdm9pY2UgYWdlbnRzLiBEdWUgdG8gdGhlIG5hdHVyZSBvZiB0aGlzIGFnZW50LCBzb21lIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhcmUgbm90IHN1cHBvcnRlZFxuICogdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IHJlZ3VsYXIgYEFnZW50YCBpbnN0YW5jZXMuIEZvciBleGFtcGxlOlxuICogLSBgbW9kZWxgIGNob2ljZSBpcyBub3Qgc3VwcG9ydGVkIGFzIGFsbCBSZWFsdGltZUFnZW50cyB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIHNhbWUgbW9kZWwgd2l0aGluXG4gKiAgIGEgYFJlYWx0aW1lU2Vzc2lvbmBcbiAqIC0gYG1vZGVsU2V0dGluZ3NgIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYWxsIFJlYWx0aW1lQWdlbnRzIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgc2FtZSBtb2RlbCB3aXRoaW5cbiAqICAgYSBgUmVhbHRpbWVTZXNzaW9uYFxuICogLSBgb3V0cHV0VHlwZWAgaXMgbm90IHN1cHBvcnRlZCBhcyBSZWFsdGltZUFnZW50cyBkbyBub3Qgc3VwcG9ydCBzdHJ1Y3R1cmVkIG91dHB1dHNcbiAqIC0gYHRvb2xVc2VCZWhhdmlvcmAgaXMgbm90IHN1cHBvcnRlZCBhcyBhbGwgUmVhbHRpbWVBZ2VudHMgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBzYW1lIG1vZGVsIHdpdGhpblxuICogICBhIGBSZWFsdGltZVNlc3Npb25gXG4gKiAtIGB2b2ljZWAgY2FuIGJlIGNvbmZpZ3VyZWQgb24gYW4gYEFnZW50YCBsZXZlbCBob3dldmVyIGl0IGNhbm5vdCBiZSBjaGFuZ2VkIGFmdGVyIHRoZSBmaXJzdFxuICogICAgYWdlbnQgd2l0aGluIGEgYFJlYWx0aW1lU2Vzc2lvbmAgc3Bva2VcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IGFnZW50ID0gbmV3IFJlYWx0aW1lQWdlbnQoe1xuICogICBuYW1lOiAnbXktYWdlbnQnLFxuICogICBpbnN0cnVjdGlvbnM6ICdZb3UgYXJlIGEgaGVscGZ1bCBhc3Npc3RhbnQgdGhhdCBjYW4gYW5zd2VyIHF1ZXN0aW9ucyBhbmQgaGVscCB3aXRoIHRhc2tzLicsXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNlc3Npb24gPSBuZXcgUmVhbHRpbWVTZXNzaW9uKGFnZW50KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUmVhbHRpbWVBZ2VudCBleHRlbmRzIEFnZW50IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdm9pY2UgaW50ZW5kZWQgdG8gYmUgdXNlZCBieSB0aGUgYWdlbnQuIElmIGFub3RoZXIgYWdlbnQgYWxyZWFkeSBzcG9rZSBkdXJpbmcgdGhlXG4gICAgICogUmVhbHRpbWVTZXNzaW9uLCBjaGFuZ2luZyB0aGUgdm9pY2UgZHVyaW5nIGEgaGFuZG9mZiB3aWxsIGZhaWwuXG4gICAgICovXG4gICAgdm9pY2U7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgIHRoaXMudm9pY2UgPSBjb25maWcudm9pY2U7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhbHRpbWVBZ2VudC5tanMubWFwIiwiaW1wb3J0IHsgZGVmaW5lT3V0cHV0R3VhcmRyYWlsLCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJlYWx0aW1lR3VhcmRyYWlsU2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWJvdW5jZVRleHRMZW5ndGg6IHNldHRpbmdzLmRlYm91bmNlVGV4dExlbmd0aCA/PyAxMDAsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVSZWFsdGltZU91dHB1dEd1YXJkcmFpbCh7IHBvbGljeUhpbnQ6IHBvbGljeUhpbnRJbnB1dCwgLi4ub3B0aW9ucyB9KSB7XG4gICAgY29uc3QgYmFzZUd1YXJkcmFpbCA9IGRlZmluZU91dHB1dEd1YXJkcmFpbChvcHRpb25zKTtcbiAgICBjb25zdCBwb2xpY3lIaW50ID0gcG9saWN5SGludElucHV0ID8/IGJhc2VHdWFyZHJhaWwubmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5iYXNlR3VhcmRyYWlsLFxuICAgICAgICBwb2xpY3lIaW50LFxuICAgICAgICBydW46IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBiYXNlR3VhcmRyYWlsLnJ1bihhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgICAgIGd1YXJkcmFpbDogeyAuLi5yZXN1bHQuZ3VhcmRyYWlsLCBwb2xpY3lIaW50IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIG1lc3NhZ2UgdGhhdCBpbmZvcm1zIHRoZSBtb2RlbCBhYm91dCB3aHkgdGhlIGd1YXJkcmFpbCB3YXMgdHJpZ2dlcmVkIGFuZCB0b1xuICogY29ycmVjdCB0aGUgYmVoYXZpb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWFsdGltZUd1YXJkcmFpbEZlZWRiYWNrTWVzc2FnZShyZXN1bHQpIHtcbiAgICByZXR1cm4gYFxu4pqg77iPIFlvdXIgbGFzdCBhbnN3ZXIgd2FzIGJsb2NrZWQuIFxuRmFpbGVkIEd1YXJkcmFpbCBSZWFzb246ICR7cmVzdWx0Lmd1YXJkcmFpbC5wb2xpY3lIaW50fS4gXG5GYWlsdXJlIERldGFpbHM6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0Lm91dHB1dC5vdXRwdXRJbmZvID8/IHt9KX0uIFxuUGxlYXNlIHJlc3BvbmQgYWdhaW4gZm9sbG93aW5nIHBvbGljeS4gQXBvbG9naXplIGZvciBub3QgYmVpbmcgYWJsZSB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uICh3aGlsZSBhdm9pZGluZyB0aGUgc3BlY2lmaWMgcmVhc29uKSBhbmQgZGl2ZXJ0IGRpc2N1c3Npb24gYmFjayB0byBhbiBhcHByb3ZlZCB0b3BpYyBpbW1lZGlhdGVseSBhbmQgbm90IGludml0ZSBtb3JlIGRpc2N1c3Npb24uXG5gLnRyaW0oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWd1YXJkcmFpbC5tanMubWFwIiwiZnVuY3Rpb24gaXNEZWZpbmVkKGtleSwgb2JqZWN0KSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBmdWRnaW5nIHdpdGggdHlwZXMgaGVyZSBmb3IgdGhlIGluZGV4IHR5cGVzXG4gICAgcmV0dXJuIGtleSBpbiBvYmplY3QgJiYgdHlwZW9mIG9iamVjdFtrZXldICE9PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIGlzRGVwcmVjYXRlZENvbmZpZyhjb25maWcpIHtcbiAgICByZXR1cm4gKGlzRGVmaW5lZCgnbW9kYWxpdGllcycsIGNvbmZpZykgfHxcbiAgICAgICAgaXNEZWZpbmVkKCdpbnB1dEF1ZGlvRm9ybWF0JywgY29uZmlnKSB8fFxuICAgICAgICBpc0RlZmluZWQoJ291dHB1dEF1ZGlvRm9ybWF0JywgY29uZmlnKSB8fFxuICAgICAgICBpc0RlZmluZWQoJ2lucHV0QXVkaW9UcmFuc2NyaXB0aW9uJywgY29uZmlnKSB8fFxuICAgICAgICBpc0RlZmluZWQoJ3R1cm5EZXRlY3Rpb24nLCBjb25maWcpIHx8XG4gICAgICAgIGlzRGVmaW5lZCgnaW5wdXRBdWRpb05vaXNlUmVkdWN0aW9uJywgY29uZmlnKSB8fFxuICAgICAgICBpc0RlZmluZWQoJ3NwZWVkJywgY29uZmlnKSk7XG59XG4vKipcbiAqIENvbnZlcnQgYW55IGdpdmVuIGNvbmZpZyAob2xkIG9yIG5ldykgdG8gdGhlIG5ldyBHQSBjb25maWcgc2hhcGUuXG4gKiBJZiBhIG5ldyBjb25maWcgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMtaXMgKG5vcm1hbGl6ZWQgc2hhbGxvd2x5KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvTmV3U2Vzc2lvbkNvbmZpZyhjb25maWcpIHtcbiAgICBpZiAoIWlzRGVwcmVjYXRlZENvbmZpZyhjb25maWcpKSB7XG4gICAgICAgIGNvbnN0IGlucHV0Q29uZmlnID0gY29uZmlnLmF1ZGlvPy5pbnB1dFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBub3JtYWxpemVBdWRpb0Zvcm1hdChjb25maWcuYXVkaW8uaW5wdXQuZm9ybWF0KSxcbiAgICAgICAgICAgICAgICBub2lzZVJlZHVjdGlvbjogY29uZmlnLmF1ZGlvLmlucHV0Lm5vaXNlUmVkdWN0aW9uID8/IG51bGwsXG4gICAgICAgICAgICAgICAgdHJhbnNjcmlwdGlvbjogY29uZmlnLmF1ZGlvLmlucHV0LnRyYW5zY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgdHVybkRldGVjdGlvbjogY29uZmlnLmF1ZGlvLmlucHV0LnR1cm5EZXRlY3Rpb24sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgcmVxdWVzdGVkT3V0cHV0Vm9pY2UgPSBjb25maWcuYXVkaW8/Lm91dHB1dD8udm9pY2UgPz8gY29uZmlnLnZvaWNlO1xuICAgICAgICBjb25zdCBvdXRwdXRDb25maWcgPSBjb25maWcuYXVkaW8/Lm91dHB1dCB8fCB0eXBlb2YgcmVxdWVzdGVkT3V0cHV0Vm9pY2UgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IG5vcm1hbGl6ZUF1ZGlvRm9ybWF0KGNvbmZpZy5hdWRpbz8ub3V0cHV0Py5mb3JtYXQpLFxuICAgICAgICAgICAgICAgIHZvaWNlOiByZXF1ZXN0ZWRPdXRwdXRWb2ljZSxcbiAgICAgICAgICAgICAgICBzcGVlZDogY29uZmlnLmF1ZGlvPy5vdXRwdXQ/LnNwZWVkLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlbDogY29uZmlnLm1vZGVsLFxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zOiBjb25maWcuaW5zdHJ1Y3Rpb25zLFxuICAgICAgICAgICAgdG9vbENob2ljZTogY29uZmlnLnRvb2xDaG9pY2UsXG4gICAgICAgICAgICB0b29sczogY29uZmlnLnRvb2xzLFxuICAgICAgICAgICAgdHJhY2luZzogY29uZmlnLnRyYWNpbmcsXG4gICAgICAgICAgICBwcm92aWRlckRhdGE6IGNvbmZpZy5wcm92aWRlckRhdGEsXG4gICAgICAgICAgICBwcm9tcHQ6IGNvbmZpZy5wcm9tcHQsXG4gICAgICAgICAgICBvdXRwdXRNb2RhbGl0aWVzOiBjb25maWcub3V0cHV0TW9kYWxpdGllcyxcbiAgICAgICAgICAgIGF1ZGlvOiBpbnB1dENvbmZpZyB8fCBvdXRwdXRDb25maWdcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGlucHV0Q29uZmlnLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IG91dHB1dENvbmZpZyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG1vZGVsOiBjb25maWcubW9kZWwsXG4gICAgICAgIGluc3RydWN0aW9uczogY29uZmlnLmluc3RydWN0aW9ucyxcbiAgICAgICAgdG9vbENob2ljZTogY29uZmlnLnRvb2xDaG9pY2UsXG4gICAgICAgIHRvb2xzOiBjb25maWcudG9vbHMsXG4gICAgICAgIHRyYWNpbmc6IGNvbmZpZy50cmFjaW5nLFxuICAgICAgICBwcm92aWRlckRhdGE6IGNvbmZpZy5wcm92aWRlckRhdGEsXG4gICAgICAgIHByb21wdDogY29uZmlnLnByb21wdCxcbiAgICAgICAgb3V0cHV0TW9kYWxpdGllczogY29uZmlnLm1vZGFsaXRpZXMsXG4gICAgICAgIGF1ZGlvOiB7XG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICAgIGZvcm1hdDogbm9ybWFsaXplQXVkaW9Gb3JtYXQoY29uZmlnLmlucHV0QXVkaW9Gb3JtYXQpLFxuICAgICAgICAgICAgICAgIG5vaXNlUmVkdWN0aW9uOiBjb25maWcuaW5wdXRBdWRpb05vaXNlUmVkdWN0aW9uID8/IG51bGwsXG4gICAgICAgICAgICAgICAgdHJhbnNjcmlwdGlvbjogY29uZmlnLmlucHV0QXVkaW9UcmFuc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIHR1cm5EZXRlY3Rpb246IGNvbmZpZy50dXJuRGV0ZWN0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG91dHB1dDoge1xuICAgICAgICAgICAgICAgIGZvcm1hdDogbm9ybWFsaXplQXVkaW9Gb3JtYXQoY29uZmlnLm91dHB1dEF1ZGlvRm9ybWF0KSxcbiAgICAgICAgICAgICAgICB2b2ljZTogY29uZmlnLnZvaWNlLFxuICAgICAgICAgICAgICAgIHNwZWVkOiBjb25maWcuc3BlZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQXVkaW9Gb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKCFmb3JtYXQpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIGNvbnN0IGYgPSBTdHJpbmcoZm9ybWF0KTtcbiAgICBpZiAoZiA9PT0gJ3BjbTE2JylcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2F1ZGlvL3BjbScsIHJhdGU6IDI0MDAwIH07XG4gICAgaWYgKGYgPT09ICdnNzExX3VsYXcnKVxuICAgICAgICByZXR1cm4geyB0eXBlOiAnYXVkaW8vcGNtdScgfTtcbiAgICBpZiAoZiA9PT0gJ2c3MTFfYWxhdycpXG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdhdWRpby9wY21hJyB9O1xuICAgIC8vIERlZmF1bHQgZmFsbGJhY2s6IGFzc3VtZSAyNGtIeiBQQ00gaWYgdW5rbm93biBzdHJpbmdcbiAgICByZXR1cm4geyB0eXBlOiAnYXVkaW8vcGNtJywgcmF0ZTogMjQwMDAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudE1lc3NhZ2VzLm1qcy5tYXAiLCJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmV4cG9ydCBjb25zdCBiYXNlSXRlbVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZWFsdGltZU1lc3NhZ2VJdGVtU2NoZW1hID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3JvbGUnLCBbXG4gICAgei5vYmplY3Qoe1xuICAgICAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgICAgIHByZXZpb3VzSXRlbUlkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJyksXG4gICAgICAgIHJvbGU6IHoubGl0ZXJhbCgnc3lzdGVtJyksXG4gICAgICAgIGNvbnRlbnQ6IHouYXJyYXkoei5vYmplY3QoeyB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X3RleHQnKSwgdGV4dDogei5zdHJpbmcoKSB9KSksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgICAgIHByZXZpb3VzSXRlbUlkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJyksXG4gICAgICAgIHJvbGU6IHoubGl0ZXJhbCgndXNlcicpLFxuICAgICAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCddKSxcbiAgICAgICAgY29udGVudDogei5hcnJheSh6Lm9iamVjdCh7IHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfdGV4dCcpLCB0ZXh0OiB6LnN0cmluZygpIH0pLm9yKHoub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfYXVkaW8nKSxcbiAgICAgICAgICAgIGF1ZGlvOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgICAgICAgfSkpKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIGl0ZW1JZDogei5zdHJpbmcoKSxcbiAgICAgICAgcHJldmlvdXNJdGVtSWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ21lc3NhZ2UnKSxcbiAgICAgICAgcm9sZTogei5saXRlcmFsKCdhc3Npc3RhbnQnKSxcbiAgICAgICAgc3RhdHVzOiB6LmVudW0oWydpbl9wcm9ncmVzcycsICdjb21wbGV0ZWQnLCAnaW5jb21wbGV0ZSddKSxcbiAgICAgICAgY29udGVudDogei5hcnJheSh6Lm9iamVjdCh7IHR5cGU6IHoubGl0ZXJhbCgnb3V0cHV0X3RleHQnKSwgdGV4dDogei5zdHJpbmcoKSB9KS5vcih6Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dF9hdWRpbycpLFxuICAgICAgICAgICAgYXVkaW86IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgdHJhbnNjcmlwdDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgICAgIH0pKSksXG4gICAgfSksXG5dKTtcbmV4cG9ydCBjb25zdCByZWFsdGltZVRvb2xDYWxsSXRlbSA9IHoub2JqZWN0KHtcbiAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgcHJldmlvdXNJdGVtSWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHoubGl0ZXJhbCgnZnVuY3Rpb25fY2FsbCcpLFxuICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJywgJ2luY29tcGxldGUnXSksXG4gICAgYXJndW1lbnRzOiB6LnN0cmluZygpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0OiB6LnN0cmluZygpLm51bGxhYmxlKCksXG59KTtcbmV4cG9ydCBjb25zdCByZWFsdGltZU1jcENhbGxJdGVtID0gei5vYmplY3Qoe1xuICAgIGl0ZW1JZDogei5zdHJpbmcoKSxcbiAgICBwcmV2aW91c0l0ZW1JZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgdHlwZTogei5lbnVtKFsnbWNwX2NhbGwnLCAnbWNwX3Rvb2xfY2FsbCddKSxcbiAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJ10pLFxuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIG91dHB1dDogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxufSk7XG5leHBvcnQgY29uc3QgcmVhbHRpbWVNY3BDYWxsQXBwcm92YWxSZXF1ZXN0SXRlbSA9IHoub2JqZWN0KHtcbiAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgdHlwZTogei5saXRlcmFsKCdtY3BfYXBwcm92YWxfcmVxdWVzdCcpLFxuICAgIHNlcnZlckxhYmVsOiB6LnN0cmluZygpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgYXJndW1lbnRzOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKSxcbiAgICBhcHByb3ZlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtcy5tanMubWFwIiwiaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZSc7XG5jb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoJ29wZW5haS1hZ2VudHM6cmVhbHRpbWUnKTtcbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5tanMubWFwIiwiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG4vLyBFdmVudCBzY2hlbWFzIG1pcnJvcmluZyB0aGUgc3RydWN0dXJlcyBkZWZpbmVkIGluIHRoZSBPcGVuQUkgU0RLIHR5cGluZ3MuXG4vLyBNb3N0IGZpZWxkcyBmcm9tIHRoZSBpbnRlcmZhY2VzIGluIGByZWFsdGltZS5kLnRzYCBhcmUgY2FwdHVyZWQgaGVyZSB0b1xuLy8gcHJvdmlkZSBiZXR0ZXIgcnVudGltZSB2YWxpZGF0aW9uIHdoZW4gcGFyc2luZyBldmVudHMgZnJvbSB0aGUgc2VydmVyLlxuZXhwb3J0IGNvbnN0IHJlYWx0aW1lUmVzcG9uc2UgPSB6Lm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIGNvbnZlcnNhdGlvbl9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgbWF4X291dHB1dF90b2tlbnM6IHoubnVtYmVyKCkub3Ioei5saXRlcmFsKCdpbmYnKSkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIG1ldGFkYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgLy8gR0EgcmVuYW1lOiBtb2RhbGl0aWVzIC0+IG91dHB1dF9tb2RhbGl0aWVzXG4gICAgb3V0cHV0X21vZGFsaXRpZXM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIG9iamVjdDogei5saXRlcmFsKCdyZWFsdGltZS5yZXNwb25zZScpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICBvdXRwdXQ6IHouYXJyYXkoei5hbnkoKSkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIC8vIEdBIGdyb3VwaW5nOiBhdWRpby5vdXRwdXQue2Zvcm1hdCx2b2ljZX1cbiAgICBhdWRpbzogelxuICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgb3V0cHV0OiB6XG4gICAgICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgICAgIGZvcm1hdDogei5hbnkoKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgICAgICAgICB2b2ljZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgICAgIH0pXG4gICAgICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAgICAgLm51bGxhYmxlKCksXG4gICAgfSlcbiAgICAgICAgLm9wdGlvbmFsKClcbiAgICAgICAgLm51bGxhYmxlKCksXG4gICAgc3RhdHVzOiB6XG4gICAgICAgIC5lbnVtKFsnY29tcGxldGVkJywgJ2luY29tcGxldGUnLCAnZmFpbGVkJywgJ2NhbmNlbGxlZCcsICdpbl9wcm9ncmVzcyddKVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAubnVsbGFibGUoKSxcbiAgICBzdGF0dXNfZGV0YWlsczogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIHVzYWdlOiB6XG4gICAgICAgIC5vYmplY3Qoe1xuICAgICAgICBpbnB1dF90b2tlbnM6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICAgICAgaW5wdXRfdG9rZW5zX2RldGFpbHM6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICAgICAgb3V0cHV0X3Rva2Vuczogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgICBvdXRwdXRfdG9rZW5zX2RldGFpbHM6IHpcbiAgICAgICAgICAgIC5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSlcbiAgICAgICAgICAgIC5vcHRpb25hbCgpXG4gICAgICAgICAgICAubnVsbGFibGUoKSxcbiAgICB9KVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAubnVsbGFibGUoKSxcbn0pO1xuLy8gQmFzaWMgY29udGVudCBzY2hlbWEgdXNlZCBieSBDb252ZXJzYXRpb25JdGVtLlxuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1Db250ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgYXVkaW86IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHRleHQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHoudW5pb24oW1xuICAgICAgICB6LmxpdGVyYWwoJ2lucHV0X3RleHQnKSxcbiAgICAgICAgei5saXRlcmFsKCdpbnB1dF9hdWRpbycpLFxuICAgICAgICB6LmxpdGVyYWwoJ2l0ZW1fcmVmZXJlbmNlJyksXG4gICAgICAgIHoubGl0ZXJhbCgnb3V0cHV0X3RleHQnKSxcbiAgICAgICAgei5saXRlcmFsKCdvdXRwdXRfYXVkaW8nKSxcbiAgICBdKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1TY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBhcmd1bWVudHM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBjYWxsX2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgY29udGVudDogei5hcnJheShjb252ZXJzYXRpb25JdGVtQ29udGVudFNjaGVtYSkub3B0aW9uYWwoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgb3V0cHV0OiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICByb2xlOiB6LmVudW0oWyd1c2VyJywgJ2Fzc2lzdGFudCcsICdzeXN0ZW0nXSkub3B0aW9uYWwoKSxcbiAgICBzdGF0dXM6IHouZW51bShbJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJywgJ2luX3Byb2dyZXNzJ10pLm9wdGlvbmFsKCksXG4gICAgdHlwZTogelxuICAgICAgICAuZW51bShbXG4gICAgICAgICdtZXNzYWdlJyxcbiAgICAgICAgJ2Z1bmN0aW9uX2NhbGwnLFxuICAgICAgICAnZnVuY3Rpb25fY2FsbF9vdXRwdXQnLFxuICAgICAgICAnbWNwX2xpc3RfdG9vbHMnLFxuICAgICAgICAnbWNwX3Rvb2xfY2FsbCcsXG4gICAgICAgICdtY3BfY2FsbCcsXG4gICAgICAgICdtY3BfYXBwcm92YWxfcmVxdWVzdCcsXG4gICAgICAgICdtY3BfYXBwcm92YWxfcmVzcG9uc2UnLFxuICAgIF0pXG4gICAgICAgIC5vcHRpb25hbCgpLFxuICAgIGFwcHJvdmFsX3JlcXVlc3RfaWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIGFwcHJvdmU6IHouYm9vbGVhbigpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICByZWFzb246IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHNlcnZlcl9sYWJlbDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGVycm9yOiB6LmFueSgpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICB0b29sczogelxuICAgICAgICAuYXJyYXkoelxuICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAgICAgZGVzY3JpcHRpb246IHouc3RyaW5nKCksXG4gICAgICAgIGlucHV0X3NjaGVtYTogei5yZWNvcmQoei5hbnkoKSkub3B0aW9uYWwoKSxcbiAgICB9KVxuICAgICAgICAucGFzc3Rocm91Z2goKSlcbiAgICAgICAgLm9wdGlvbmFsKCksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkNyZWF0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5jcmVhdGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgY29udmVyc2F0aW9uOiB6Lm9iamVjdCh7XG4gICAgICAgIGlkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIG9iamVjdDogei5saXRlcmFsKCdyZWFsdGltZS5jb252ZXJzYXRpb24nKS5vcHRpb25hbCgpLFxuICAgIH0pLFxufSk7XG4vLyBHQSByZW5hbWU6IGNvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZWQgLT4gY29udmVyc2F0aW9uLml0ZW0uYWRkZWRcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtQWRkZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLmFkZGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbTogY29udmVyc2F0aW9uSXRlbVNjaGVtYSxcbiAgICBwcmV2aW91c19pdGVtX2lkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbn0pO1xuLy8gR0EgYWRkaXRpb246IGNvbnZlcnNhdGlvbi5pdGVtLmRvbmVcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtRG9uZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW06IGNvbnZlcnNhdGlvbkl0ZW1TY2hlbWEsXG4gICAgcHJldmlvdXNfaXRlbV9pZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtRGVsZXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25Db21wbGV0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24uY29tcGxldGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCksXG4gICAgbG9ncHJvYnM6IHouYXJyYXkoei5hbnkoKSkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRGVsdGFFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24uZGVsdGEnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICBkZWx0YTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGxvZ3Byb2JzOiB6LmFycmF5KHouYW55KCkpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkZhaWxlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5mYWlsZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgZXJyb3I6IHoub2JqZWN0KHtcbiAgICAgICAgY29kZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICBtZXNzYWdlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHBhcmFtOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW06IGNvbnZlcnNhdGlvbkl0ZW1TY2hlbWEsXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGF1ZGlvX2VuZF9tczogei5udW1iZXIoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbUNyZWF0ZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlJyksXG4gICAgaXRlbTogY29udmVyc2F0aW9uSXRlbVNjaGVtYSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHByZXZpb3VzX2l0ZW1faWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbURlbGV0ZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlJyksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbVJldHJpZXZlRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZScpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1UcnVuY2F0ZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0udHJ1bmNhdGUnKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGF1ZGlvX2VuZF9tczogei5udW1iZXIoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBlcnJvckV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnZXJyb3InKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGVycm9yOiB6LmFueSgpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBpbnB1dEF1ZGlvQnVmZmVyQ2xlYXJlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfYXVkaW9fYnVmZmVyLmNsZWFyZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGlucHV0QXVkaW9CdWZmZXJBcHBlbmRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvX2J1ZmZlci5hcHBlbmQnKSxcbiAgICBhdWRpbzogei5zdHJpbmcoKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgaW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpb19idWZmZXIuY2xlYXInKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgaW5wdXRBdWRpb0J1ZmZlckNvbW1pdEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfYXVkaW9fYnVmZmVyLmNvbW1pdCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBpbnB1dEF1ZGlvQnVmZmVyQ29tbWl0dGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpb19idWZmZXIuY29tbWl0dGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBwcmV2aW91c19pdGVtX2lkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGlucHV0QXVkaW9CdWZmZXJTcGVlY2hTdGFydGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpb19idWZmZXIuc3BlZWNoX3N0YXJ0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGF1ZGlvX3N0YXJ0X21zOiB6Lm51bWJlcigpLFxufSk7XG5leHBvcnQgY29uc3QgaW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0b3BwZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvX2J1ZmZlci5zcGVlY2hfc3RvcHBlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgYXVkaW9fZW5kX21zOiB6Lm51bWJlcigpLFxufSk7XG5leHBvcnQgY29uc3Qgb3V0cHV0QXVkaW9CdWZmZXJTdGFydGVkRXZlbnRTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXRfYXVkaW9fYnVmZmVyLnN0YXJ0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5leHBvcnQgY29uc3Qgb3V0cHV0QXVkaW9CdWZmZXJTdG9wcGVkRXZlbnRTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXRfYXVkaW9fYnVmZmVyLnN0b3BwZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5leHBvcnQgY29uc3Qgb3V0cHV0QXVkaW9CdWZmZXJDbGVhcmVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXRfYXVkaW9fYnVmZmVyLmNsZWFyZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJhdGVMaW1pdHNVcGRhdGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyYXRlX2xpbWl0cy51cGRhdGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgcmF0ZV9saW1pdHM6IHouYXJyYXkoei5vYmplY3Qoe1xuICAgICAgICBsaW1pdDogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgICBuYW1lOiB6LmVudW0oWydyZXF1ZXN0cycsICd0b2tlbnMnXSkub3B0aW9uYWwoKSxcbiAgICAgICAgcmVtYWluaW5nOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgICAgIHJlc2V0X3NlY29uZHM6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICB9KSksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUF1ZGlvRGVsdGFFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLm91dHB1dF9hdWRpby5kZWx0YScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICBkZWx0YTogei5zdHJpbmcoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUF1ZGlvRG9uZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Uub3V0cHV0X2F1ZGlvLmRvbmUnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREZWx0YUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Uub3V0cHV0X2F1ZGlvX3RyYW5zY3JpcHQuZGVsdGEnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgZGVsdGE6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgLy8gIEdBIG1heSBpbnRyb2R1Y2UgcmVzcG9uc2Uub3V0cHV0X2F1ZGlvX3RyYW5zY3JpcHQuZG9uZVxuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Uub3V0cHV0X2F1ZGlvX3RyYW5zY3JpcHQuZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICB0cmFuc2NyaXB0OiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuY29udGVudF9wYXJ0LmFkZGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbiAgICBwYXJ0OiB6Lm9iamVjdCh7XG4gICAgICAgIGF1ZGlvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHRleHQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHJhbnNjcmlwdDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICB0eXBlOiB6LmVudW0oWyd0ZXh0JywgJ2F1ZGlvJ10pLm9wdGlvbmFsKCksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUNvbnRlbnRQYXJ0RG9uZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuY29udGVudF9wYXJ0LmRvbmUnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxuICAgIHBhcnQ6IHoub2JqZWN0KHtcbiAgICAgICAgYXVkaW86IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdGV4dDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICB0cmFuc2NyaXB0OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHouZW51bShbJ3RleHQnLCAnYXVkaW8nXSkub3B0aW9uYWwoKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlQ3JlYXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuY3JlYXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIHJlc3BvbnNlOiByZWFsdGltZVJlc3BvbnNlLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VEb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgcmVzcG9uc2U6IHJlYWx0aW1lUmVzcG9uc2UsXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5mdW5jdGlvbl9jYWxsX2FyZ3VtZW50cy5kZWx0YScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY2FsbF9pZDogei5zdHJpbmcoKSxcbiAgICBkZWx0YTogei5zdHJpbmcoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RvbmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRvbmUnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNhbGxfaWQ6IHouc3RyaW5nKCksXG4gICAgYXJndW1lbnRzOiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlT3V0cHV0SXRlbUFkZGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5vdXRwdXRfaXRlbS5hZGRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW06IGNvbnZlcnNhdGlvbkl0ZW1TY2hlbWEsXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VPdXRwdXRJdGVtRG9uZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Uub3V0cHV0X2l0ZW0uZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW06IGNvbnZlcnNhdGlvbkl0ZW1TY2hlbWEsXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VUZXh0RGVsdGFFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLm91dHB1dF90ZXh0LmRlbHRhJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGRlbHRhOiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlVGV4dERvbmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAvLyBObyByZW5hbWUgc3BlY2lmaWVkIGZvciBkb25lOyBrZWVwIHJlc3BvbnNlLnRleHQuZG9uZVxuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Uub3V0cHV0X3RleHQuZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHNlc3Npb25DcmVhdGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdzZXNzaW9uLmNyZWF0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBzZXNzaW9uOiB6LmFueSgpLFxufSk7XG5leHBvcnQgY29uc3Qgc2Vzc2lvblVwZGF0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Nlc3Npb24udXBkYXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIHNlc3Npb246IHouYW55KCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUNhbmNlbEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuY2FuY2VsJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VDcmVhdGVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmNyZWF0ZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgcmVzcG9uc2U6IHouYW55KCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHNlc3Npb25VcGRhdGVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Nlc3Npb24udXBkYXRlJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBzZXNzaW9uOiB6LmFueSgpLFxufSk7XG5leHBvcnQgY29uc3QgbWNwTGlzdFRvb2xzSW5Qcm9ncmVzc0V2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnbWNwX2xpc3RfdG9vbHMuaW5fcHJvZ3Jlc3MnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IG1jcExpc3RUb29sc0NvbXBsZXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnbWNwX2xpc3RfdG9vbHMuY29tcGxldGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZU1jcENhbGxBcmd1bWVudHNEZWx0YUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UubWNwX2NhbGxfYXJndW1lbnRzLmRlbHRhJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgZGVsdGE6IHouc3RyaW5nKCksXG4gICAgb2JmdXNjYXRpb246IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZU1jcENhbGxBcmd1bWVudHNEb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5tY3BfY2FsbF9hcmd1bWVudHMuZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlTWNwQ2FsbEluUHJvZ3Jlc3NFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLm1jcF9jYWxsLmluX3Byb2dyZXNzJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZU1jcENhbGxDb21wbGV0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLm1jcF9jYWxsLmNvbXBsZXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgbWNwTGlzdFRvb2xzRmFpbGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdtY3BfbGlzdF90b29scy5mYWlsZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuLyoqXG4gKiBUaGlzIHNjaGVtYSBpcyB1c2VkIGlmIGFuIGV2ZW50IGlzIHVua25vd24gdG8gdGhlIGNsaWVudC4gVGhlIFJlYWx0aW1lIEFQSSBtaWdodCBpbnRyb2R1Y2VcbiAqIG5ldyBldmVudHMgYXQgc29tZSBwb2ludCBhbmQgd2Ugc2hvdWxkIGhhbmRsZSB0aGVtIGdyYWNlZnVsbHkgYnkgdHJlYXRpbmcgdGhlbSBhcyBnZW5lcmljIGV2ZW50c1xuICogb25seSByZXF1aXJpbmcgYSB0eXBlIGFuZCBhbiBvcHRpb25hbCBldmVudF9pZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyaWNFdmVudFNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5leHBvcnQgY29uc3QgcmVhbHRpbWVTZXJ2ZXJFdmVudFNjaGVtYSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIGNvbnZlcnNhdGlvbkNyZWF0ZWRFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtQWRkZWRFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtRG9uZUV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1EZWxldGVkRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uQ29tcGxldGVkRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRGVsdGFFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25GYWlsZWRFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtUmV0cmlldmVkRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbVRydW5jYXRlZEV2ZW50U2NoZW1hLFxuICAgIGVycm9yRXZlbnRTY2hlbWEsXG4gICAgaW5wdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyQ29tbWl0dGVkRXZlbnRTY2hlbWEsXG4gICAgaW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0YXJ0ZWRFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyU3BlZWNoU3RvcHBlZEV2ZW50U2NoZW1hLFxuICAgIG91dHB1dEF1ZGlvQnVmZmVyU3RhcnRlZEV2ZW50U2NoZW1hLFxuICAgIG91dHB1dEF1ZGlvQnVmZmVyU3RvcHBlZEV2ZW50U2NoZW1hLFxuICAgIG91dHB1dEF1ZGlvQnVmZmVyQ2xlYXJlZEV2ZW50U2NoZW1hLFxuICAgIHJhdGVMaW1pdHNVcGRhdGVkRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VBdWRpb0RlbHRhRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VBdWRpb0RvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREb25lRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VDb250ZW50UGFydEFkZGVkRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUNyZWF0ZWRFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZURvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEb25lRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VUZXh0RGVsdGFFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZVRleHREb25lRXZlbnRTY2hlbWEsXG4gICAgc2Vzc2lvbkNyZWF0ZWRFdmVudFNjaGVtYSxcbiAgICBzZXNzaW9uVXBkYXRlZEV2ZW50U2NoZW1hLFxuICAgIG1jcExpc3RUb29sc0luUHJvZ3Jlc3NFdmVudFNjaGVtYSxcbiAgICBtY3BMaXN0VG9vbHNDb21wbGV0ZWRFdmVudFNjaGVtYSxcbiAgICBtY3BMaXN0VG9vbHNGYWlsZWRFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZU1jcENhbGxBcmd1bWVudHNEZWx0YUV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZU1jcENhbGxJblByb2dyZXNzRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VNY3BDYWxsQ29tcGxldGVkRXZlbnRTY2hlbWEsXG5dKTtcbmV4cG9ydCBjb25zdCByZWFsdGltZUNsaWVudEV2ZW50U2NoZW1hID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgY29udmVyc2F0aW9uSXRlbUNyZWF0ZUV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1EZWxldGVFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtUmV0cmlldmVFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyQXBwZW5kRXZlbnRTY2hlbWEsXG4gICAgaW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnRTY2hlbWEsXG4gICAgaW5wdXRBdWRpb0J1ZmZlckNvbW1pdEV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlQ2FuY2VsRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VDcmVhdGVFdmVudFNjaGVtYSxcbiAgICBzZXNzaW9uVXBkYXRlRXZlbnRTY2hlbWEsXG5dKTtcbi8qKlxuICogUGFyc2VzIGEgcmVhbHRpbWUgZXZlbnQgZnJvbSB0aGUgc2VydmVyLiBJZiB0aGUgZXZlbnQgaXMgdW5rbm93biB0byB0aGUgY2xpZW50LCBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBnZW5lcmljIGV2ZW50LlxuICogQHBhcmFtIGV2ZW50IC0gVGhlIGV2ZW50IHRvIHBhcnNlLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBldmVudCBvciBudWxsIGlmIHRoZSBldmVudCBpcyB1bmtub3duIHRvIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlYWx0aW1lRXZlbnQoZXZlbnQpIHtcbiAgICBjb25zdCByYXcgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEudG9TdHJpbmcoKSk7XG4gICAgY29uc3QgcGFyc2VkID0gcmVhbHRpbWVTZXJ2ZXJFdmVudFNjaGVtYS5zYWZlUGFyc2UocmF3KTtcbiAgICBpZiAoIXBhcnNlZC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IGdlbmVyaWNQYXJzZWQgPSBnZW5lcmljRXZlbnRTY2hlbWEuc2FmZVBhcnNlKHJhdyk7XG4gICAgICAgIGlmIChnZW5lcmljUGFyc2VkLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IGdlbmVyaWNQYXJzZWQuZGF0YSwgaXNHZW5lcmljOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgaXNHZW5lcmljOiB0cnVlIH07XG4gICAgfVxuICAgIHJldHVybiB7IGRhdGE6IHBhcnNlZC5kYXRhLCBpc0dlbmVyaWM6IGZhbHNlIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuYWlSZWFsdGltZUV2ZW50cy5tanMubWFwIiwiaW1wb3J0IHsgUnVudGltZUV2ZW50RW1pdHRlciwgVXNhZ2UgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbmltcG9ydCB7IHRvTmV3U2Vzc2lvbkNvbmZpZywgfSBmcm9tIFwiLi9jbGllbnRNZXNzYWdlcy5tanNcIjtcbmltcG9ydCB7IHJlYWx0aW1lTWNwQ2FsbEFwcHJvdmFsUmVxdWVzdEl0ZW0sIHJlYWx0aW1lTWNwQ2FsbEl0ZW0sIHJlYWx0aW1lTWVzc2FnZUl0ZW1TY2hlbWEsIHJlYWx0aW1lVG9vbENhbGxJdGVtLCB9IGZyb20gXCIuL2l0ZW1zLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVJlYWx0aW1lRXZlbnQsIHJlc3BvbnNlRG9uZUV2ZW50U2NoZW1hLCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lRXZlbnRzLm1qc1wiO1xuaW1wb3J0IHsgYXJyYXlCdWZmZXJUb0Jhc2U2NCwgZGlmZlJlYWx0aW1lSGlzdG9yeSB9IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyRGVsZWdhdGUgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL3V0aWxzJztcbi8qKlxuICogVGhlIGRlZmF1bHQgbW9kZWwgdGhhdCBpcyB1c2VkIGR1cmluZyB0aGUgY29ubmVjdGlvbiBpZiBubyBtb2RlbCBpcyBwcm92aWRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX01PREVMID0gJ2dwdC1yZWFsdGltZSc7XG4vKipcbiAqIFRoZSBkZWZhdWx0IHNlc3Npb24gY29uZmlnIHRoYXQgZ2V0cyBzZW5kIG92ZXIgZHVyaW5nIHNlc3Npb24gY29ubmVjdGlvbiB1bmxlc3Mgb3ZlcnJpZGRlblxuICogYnkgdGhlIHVzZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRyA9IHtcbiAgICBvdXRwdXRNb2RhbGl0aWVzOiBbJ2F1ZGlvJ10sXG4gICAgYXVkaW86IHtcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIGZvcm1hdDogeyB0eXBlOiAnYXVkaW8vcGNtJywgcmF0ZTogMjQwMDAgfSxcbiAgICAgICAgICAgIHRyYW5zY3JpcHRpb246IHsgbW9kZWw6ICdncHQtNG8tbWluaS10cmFuc2NyaWJlJyB9LFxuICAgICAgICAgICAgdHVybkRldGVjdGlvbjogeyB0eXBlOiAnc2VtYW50aWNfdmFkJyB9LFxuICAgICAgICAgICAgbm9pc2VSZWR1Y3Rpb246IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIG91dHB1dDoge1xuICAgICAgICAgICAgZm9ybWF0OiB7IHR5cGU6ICdhdWRpby9wY20nLCByYXRlOiAyNDAwMCB9LFxuICAgICAgICAgICAgc3BlZWQ6IDEsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY2xhc3MgT3BlbkFJUmVhbHRpbWVCYXNlIGV4dGVuZHMgRXZlbnRFbWl0dGVyRGVsZWdhdGUge1xuICAgICNtb2RlbDtcbiAgICAjYXBpS2V5O1xuICAgICN0cmFjaW5nQ29uZmlnID0gbnVsbDtcbiAgICAjcmF3U2Vzc2lvbkNvbmZpZyA9IG51bGw7XG4gICAgZXZlbnRFbWl0dGVyID0gbmV3IFJ1bnRpbWVFdmVudEVtaXR0ZXIoKTtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy4jbW9kZWwgPSBvcHRpb25zLm1vZGVsID8/IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX01PREVMO1xuICAgICAgICB0aGlzLiNhcGlLZXkgPSBvcHRpb25zLmFwaUtleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgbW9kZWwgdGhhdCBpcyBiZWluZyB1c2VkIGJ5IHRoZSB0cmFuc3BvcnQgbGF5ZXIuXG4gICAgICovXG4gICAgZ2V0IGN1cnJlbnRNb2RlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI21vZGVsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBtb2RlbCB0aGF0IGlzIGJlaW5nIHVzZWQgYnkgdGhlIHRyYW5zcG9ydCBsYXllci5cbiAgICAgKiAqKk5vdGUqKjogVGhlIG1vZGVsIGNhbm5vdCBiZSBjaGFuZ2VkIG1pZCBjb252ZXJzYXRpb24uXG4gICAgICovXG4gICAgc2V0IGN1cnJlbnRNb2RlbChtb2RlbCkge1xuICAgICAgICB0aGlzLiNtb2RlbCA9IG1vZGVsO1xuICAgIH1cbiAgICBnZXQgX3Jhd1Nlc3Npb25Db25maWcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNyYXdTZXNzaW9uQ29uZmlnID8/IG51bGw7XG4gICAgfVxuICAgIGFzeW5jIF9nZXRBcGlLZXkob3B0aW9ucykge1xuICAgICAgICBjb25zdCBhcGlLZXkgPSBvcHRpb25zLmFwaUtleSA/PyB0aGlzLiNhcGlLZXk7XG4gICAgICAgIGlmICh0eXBlb2YgYXBpS2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgYXBpS2V5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwaUtleTtcbiAgICB9XG4gICAgX29uTWVzc2FnZShldmVudCkge1xuICAgICAgICBjb25zdCB7IGRhdGE6IHBhcnNlZCwgaXNHZW5lcmljIH0gPSBwYXJzZVJlYWx0aW1lRXZlbnQoZXZlbnQpO1xuICAgICAgICBpZiAocGFyc2VkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCcqJywgcGFyc2VkKTtcbiAgICAgICAgaWYgKGlzR2VuZXJpYykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHsgdHlwZTogJ2Vycm9yJywgZXJyb3I6IHBhcnNlZCB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChwYXJzZWQudHlwZSwgcGFyc2VkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5jcmVhdGVkJykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd0dXJuX3N0YXJ0ZWQnLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlX3N0YXJ0ZWQnLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YToge1xuICAgICAgICAgICAgICAgICAgICAuLi5wYXJzZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Nlc3Npb24udXBkYXRlZCcpIHtcbiAgICAgICAgICAgIHRoaXMuI3Jhd1Nlc3Npb25Db25maWcgPSBwYXJzZWQuc2Vzc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5kb25lJykge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXNwb25zZURvbmVFdmVudFNjaGVtYS5zYWZlUGFyc2UocGFyc2VkKTtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgcGFyc2luZyByZXNwb25zZSBkb25lIGV2ZW50JywgcmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlucHV0VG9rZW5zID0gcmVzcG9uc2UuZGF0YS5yZXNwb25zZS51c2FnZT8uaW5wdXRfdG9rZW5zID8/IDA7XG4gICAgICAgICAgICBjb25zdCBvdXRwdXRUb2tlbnMgPSByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnVzYWdlPy5vdXRwdXRfdG9rZW5zID8/IDA7XG4gICAgICAgICAgICBjb25zdCB0b3RhbFRva2VucyA9IGlucHV0VG9rZW5zICsgb3V0cHV0VG9rZW5zO1xuICAgICAgICAgICAgY29uc3QgdXNhZ2UgPSBuZXcgVXNhZ2Uoe1xuICAgICAgICAgICAgICAgIGlucHV0VG9rZW5zLFxuICAgICAgICAgICAgICAgIGlucHV0VG9rZW5zRGV0YWlsczogcmVzcG9uc2UuZGF0YS5yZXNwb25zZS51c2FnZT8uaW5wdXRfdG9rZW5zX2RldGFpbHMgPz8ge30sXG4gICAgICAgICAgICAgICAgb3V0cHV0VG9rZW5zLFxuICAgICAgICAgICAgICAgIG91dHB1dFRva2Vuc0RldGFpbHM6IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UudXNhZ2U/Lm91dHB1dF90b2tlbnNfZGV0YWlscyA/PyB7fSxcbiAgICAgICAgICAgICAgICB0b3RhbFRva2VucyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd1c2FnZV91cGRhdGUnLCB1c2FnZSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3R1cm5fZG9uZScsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2VfZG9uZScsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UuaWQgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dDogcmVzcG9uc2UuZGF0YS5yZXNwb25zZS5vdXRwdXQgPz8gW10sXG4gICAgICAgICAgICAgICAgICAgIHVzYWdlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFRva2VucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VG9rZW5zRGV0YWlsczogcmVzcG9uc2UuZGF0YS5yZXNwb25zZS51c2FnZT8uaW5wdXRfdG9rZW5zX2RldGFpbHMgPz8ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRUb2tlbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRUb2tlbnNEZXRhaWxzOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnVzYWdlPy5vdXRwdXRfdG9rZW5zX2RldGFpbHMgPz8ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFRva2VucyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2F1ZGlvLmRvbmUnKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvX2RvbmUnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5kZWxldGVkJykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdpdGVtX2RlbGV0ZWQnLCB7XG4gICAgICAgICAgICAgICAgaXRlbUlkOiBwYXJzZWQuaXRlbV9pZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ2NvbnZlcnNhdGlvbi5pdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24uY29tcGxldGVkJyB8fFxuICAgICAgICAgICAgcGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZWQnKSB7XG4gICAgICAgICAgICAvLyByaWdodCBub3cgcmF0aGVyIHRoYW4ga2VlcGluZyB0cmFjayBvZiBwYXJ0aWFscyBhbmQgcmVidWlsZGluZyB0aGUgaXRlbSB3ZVxuICAgICAgICAgICAgLy8gd2lsbCByZXRyaWV2ZSBpdCBpbnN0ZWFkIHdoaWNoIHRyaWdnZXJzIHRoZSBgY29udmVyc2F0aW9uLml0ZW0ucmV0cmlldmVkYCBldmVudCBiZWxvd1xuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZScsXG4gICAgICAgICAgICAgICAgaXRlbV9pZDogcGFyc2VkLml0ZW1faWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5pbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uLmRlbHRhJyB8fFxuICAgICAgICAgICAgcGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5vdXRwdXRfdGV4dC5kZWx0YScgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2F1ZGlvX3RyYW5zY3JpcHQuZGVsdGEnIHx8XG4gICAgICAgICAgICBwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRlbHRhJykge1xuICAgICAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2F1ZGlvX3RyYW5zY3JpcHQuZGVsdGEnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdhdWRpb190cmFuc2NyaXB0X2RlbHRhJywge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndHJhbnNjcmlwdF9kZWx0YScsXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhOiBwYXJzZWQuZGVsdGEsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogcGFyc2VkLml0ZW1faWQsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSWQ6IHBhcnNlZC5yZXNwb25zZV9pZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5vIHN1cHBvcnQgZm9yIHBhcnRpYWwgdHJhbnNjcmlwdHMgeWV0LlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ2NvbnZlcnNhdGlvbi5pdGVtLmFkZGVkJyB8fFxuICAgICAgICAgICAgcGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5kb25lJyB8fFxuICAgICAgICAgICAgcGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZWQnKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgTUNQIGxpc3QgdG9vbHMgaXRlbXMgKG9ubHkgYWN0IHdoZW4gZG9uZSB0byBlbnN1cmUgdG9vbHMgYXJlIHByZXNlbnQpXG4gICAgICAgICAgICBpZiAocGFyc2VkLml0ZW0udHlwZSA9PT0gJ21jcF9saXN0X3Rvb2xzJyAmJlxuICAgICAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uZG9uZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJMYWJlbCA9IHBhcnNlZC5pdGVtLnNlcnZlcl9sYWJlbCA/PyAnJztcbiAgICAgICAgICAgICAgICBjb25zdCB0b29scyA9IChwYXJzZWQuaXRlbS50b29scyA/PyBbXSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdtY3BfdG9vbHNfbGlzdGVkJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyTGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29scyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBlbWl0dGluZyBtY3BfdG9vbHNfbGlzdGVkJywgZXJyLCBwYXJzZWQuaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdlIGRvIG5vdCBhZGQgdGhpcyBpdGVtIHRvIGhpc3Rvcnk7IGl0J3MgYSB0cmFuc3BvcnQtbGV2ZWwgc2lkZS1jaGFubmVsLlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZWQuaXRlbS50eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c0l0ZW1JZCA9IHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uYWRkZWQnIHx8XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uZG9uZSdcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJzZWQucHJldmlvdXNfaXRlbV9pZFxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHJlYWx0aW1lTWVzc2FnZUl0ZW1TY2hlbWEucGFyc2Uoe1xuICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnNlZC5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0l0ZW1JZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogcGFyc2VkLml0ZW0udHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogcGFyc2VkLml0ZW0ucm9sZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcGFyc2VkLml0ZW0uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBwYXJzZWQuaXRlbS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdpdGVtX3VwZGF0ZScsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZWQuaXRlbS50eXBlID09PSAnbWNwX2FwcHJvdmFsX3JlcXVlc3QnICYmXG4gICAgICAgICAgICAgICAgcGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5kb25lJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBwYXJzZWQuaXRlbTtcbiAgICAgICAgICAgICAgICBjb25zdCBtY3BBcHByb3ZhbFJlcXVlc3QgPSByZWFsdGltZU1jcENhbGxBcHByb3ZhbFJlcXVlc3RJdGVtLnBhcnNlKHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiBpdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBpdGVtLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlckxhYmVsOiBpdGVtLnNlcnZlcl9sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IEpTT04ucGFyc2UoaXRlbS5hcmd1bWVudHMgfHwgJ3t9JyksXG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkOiBpdGVtLmFwcHJvdmVkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCBtY3BBcHByb3ZhbFJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnbWNwX2FwcHJvdmFsX3JlcXVlc3QnLCBtY3BBcHByb3ZhbFJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZWQuaXRlbS50eXBlID09PSAnbWNwX3Rvb2xfY2FsbCcgfHxcbiAgICAgICAgICAgICAgICBwYXJzZWQuaXRlbS50eXBlID09PSAnbWNwX2NhbGwnKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gcGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5kb25lJ1xuICAgICAgICAgICAgICAgICAgICA/ICdjb21wbGV0ZWQnXG4gICAgICAgICAgICAgICAgICAgIDogJ2luX3Byb2dyZXNzJztcbiAgICAgICAgICAgICAgICBjb25zdCBtY3BDYWxsID0gcmVhbHRpbWVNY3BDYWxsSXRlbS5wYXJzZSh7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogcGFyc2VkLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHBhcnNlZC5pdGVtLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBwYXJzZWQuaXRlbS5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHBhcnNlZC5pdGVtLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dDogcGFyc2VkLml0ZW0ub3V0cHV0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCBtY3BDYWxsKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5kb25lJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ21jcF90b29sX2NhbGxfY29tcGxldGVkJywgbWNwQ2FsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5tY3BfY2FsbC5pbl9wcm9ncmVzcycpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBwYXJzZWQ7XG4gICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlJyxcbiAgICAgICAgICAgICAgICBpdGVtX2lkOiBpdGVtLml0ZW1faWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdtY3BfbGlzdF90b29scy5pbl9wcm9ncmVzcycpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBwYXJzZWQ7XG4gICAgICAgICAgICBpZiAoaXRlbS5pdGVtX2lkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0ucmV0cmlldmUnLFxuICAgICAgICAgICAgICAgICAgICBpdGVtX2lkOiBpdGVtLml0ZW1faWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2l0ZW0uZG9uZScgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWQnKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkLml0ZW07XG4gICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcgJiYgaXRlbS5zdGF0dXMgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9vbENhbGwgPSByZWFsdGltZVRvb2xDYWxsSXRlbS5wYXJzZSh7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsIC8vIHdlIHNldCBpdCB0byBpbl9wcm9ncmVzcyBmb3IgdGhlIFVJIGFzIGl0IHdpbGwgb25seSBiZSBjb21wbGV0ZWQgd2l0aCB0aGUgb3V0cHV0XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogaXRlbS5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBudWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCB0b29sQ2FsbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdmdW5jdGlvbl9jYWxsJywge1xuICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX2NhbGwnLFxuICAgICAgICAgICAgICAgICAgICBjYWxsSWQ6IGl0ZW0uY2FsbF9pZCA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBpdGVtLmFyZ3VtZW50cyA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lID8/ICcnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdtY3BfdG9vbF9jYWxsJyB8fCBpdGVtLnR5cGUgPT09ICdtY3BfY2FsbCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtY3BDYWxsID0gcmVhbHRpbWVNY3BDYWxsSXRlbS5wYXJzZSh7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2l0ZW0uZG9uZSdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ2NvbXBsZXRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ2luX3Byb2dyZXNzJywgLy8gd2Ugc2V0IGl0IHRvIGluX3Byb2dyZXNzIGZvciB0aGUgVUkgYXMgaXQgd2lsbCBvbmx5IGJlIGNvbXBsZXRlZCB3aXRoIHRoZSBvdXRwdXRcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBpdGVtLmFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IGl0ZW0ub3V0cHV0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCBtY3BDYWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsdGltZUl0ZW0gPSByZWFsdGltZU1lc3NhZ2VJdGVtU2NoZW1hLnBhcnNlKHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiBwYXJzZWQuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogcGFyc2VkLml0ZW0udHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogcGFyc2VkLml0ZW0ucm9sZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcGFyc2VkLml0ZW0uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChpdGVtLnN0YXR1cyA/PyAnY29tcGxldGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKGl0ZW0uc3RhdHVzID8/ICdpbl9wcm9ncmVzcycpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCByZWFsdGltZUl0ZW0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfb25FcnJvcihlcnJvcikge1xuICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywge1xuICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX29uT3BlbigpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0ZWQnKTtcbiAgICB9XG4gICAgX29uQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGlzY29ubmVjdGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBSZWFsdGltZSBBUEkuIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgaXRlbSBpbiB0aGUgY29udmVyc2F0aW9uIGFuZFxuICAgICAqIHRyaWdnZXIgYSByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gb3RoZXJFdmVudERhdGEgLSBBZGRpdGlvbmFsIGV2ZW50IGRhdGEgdG8gc2VuZC5cbiAgICAgKi9cbiAgICBzZW5kTWVzc2FnZShtZXNzYWdlLCBvdGhlckV2ZW50RGF0YSwgeyB0cmlnZ2VyUmVzcG9uc2UgPSB0cnVlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dF90ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgOiBtZXNzYWdlLmNvbnRlbnQubWFwKChjb250ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ2lucHV0X2ltYWdlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2lucHV0X2ltYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlX3VybDogY29udGVudC5pbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLihjb250ZW50LnByb3ZpZGVyRGF0YSA/PyB7fSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS5jcmVhdGUnLFxuICAgICAgICAgICAgaXRlbToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5vdGhlckV2ZW50RGF0YSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0cmlnZ2VyUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UuY3JlYXRlJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEltYWdlKGltYWdlLCB7IHRyaWdnZXJSZXNwb25zZSA9IHRydWUgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgY29udGVudDogW3sgdHlwZTogJ2lucHV0X2ltYWdlJywgaW1hZ2UgfV0sXG4gICAgICAgIH0sIHt9LCB7IHRyaWdnZXJSZXNwb25zZSB9KTtcbiAgICB9XG4gICAgX2dldE1lcmdlZFNlc3Npb25Db25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IG5ld0NvbmZpZyA9IHRvTmV3U2Vzc2lvbkNvbmZpZyhjb25maWcpO1xuICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdyZWFsdGltZScsXG4gICAgICAgICAgICBpbnN0cnVjdGlvbnM6IG5ld0NvbmZpZy5pbnN0cnVjdGlvbnMsXG4gICAgICAgICAgICBtb2RlbDogbmV3Q29uZmlnLm1vZGVsID8/IHRoaXMuI21vZGVsLFxuICAgICAgICAgICAgb3V0cHV0X21vZGFsaXRpZXM6IG5ld0NvbmZpZy5vdXRwdXRNb2RhbGl0aWVzID8/XG4gICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcub3V0cHV0TW9kYWxpdGllcyxcbiAgICAgICAgICAgIGF1ZGlvOiB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBuZXdDb25maWcuYXVkaW8/LmlucHV0Py5mb3JtYXQgPz9cbiAgICAgICAgICAgICAgICAgICAgICAgIERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLmF1ZGlvPy5pbnB1dD8uZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICBub2lzZV9yZWR1Y3Rpb246IG5ld0NvbmZpZy5hdWRpbz8uaW5wdXQ/Lm5vaXNlUmVkdWN0aW9uID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5hdWRpbz8uaW5wdXQ/Lm5vaXNlUmVkdWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2NyaXB0aW9uOiBuZXdDb25maWcuYXVkaW8/LmlucHV0Py50cmFuc2NyaXB0aW9uID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5hdWRpbz8uaW5wdXQ/LnRyYW5zY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIHR1cm5fZGV0ZWN0aW9uOiBPcGVuQUlSZWFsdGltZUJhc2UuYnVpbGRUdXJuRGV0ZWN0aW9uQ29uZmlnKG5ld0NvbmZpZy5hdWRpbz8uaW5wdXQ/LnR1cm5EZXRlY3Rpb24pID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5hdWRpbz8uaW5wdXQ/LnR1cm5EZXRlY3Rpb24sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBuZXdDb25maWcuYXVkaW8/Lm91dHB1dD8uZm9ybWF0ID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5hdWRpbz8ub3V0cHV0Py5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIHZvaWNlOiBuZXdDb25maWcuYXVkaW8/Lm91dHB1dD8udm9pY2UgPz9cbiAgICAgICAgICAgICAgICAgICAgICAgIERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLmF1ZGlvPy5vdXRwdXQ/LnZvaWNlLFxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogbmV3Q29uZmlnLmF1ZGlvPy5vdXRwdXQ/LnNwZWVkID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5hdWRpbz8ub3V0cHV0Py5zcGVlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2xfY2hvaWNlOiBuZXdDb25maWcudG9vbENob2ljZSA/P1xuICAgICAgICAgICAgICAgIERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLnRvb2xDaG9pY2UsXG4gICAgICAgICAgICAvLyBXZSBkb24ndCBzZXQgdHJhY2luZyBoZXJlIHRvIG1ha2Ugc3VyZSB0aGF0IHdlIGRvbid0IHRyeSB0byBvdmVycmlkZSBpdCBvbiBldmVyeVxuICAgICAgICAgICAgLy8gc2Vzc2lvbi51cGRhdGUgYXMgaXQgbWlnaHQgbGVhZCB0byBlcnJvcnNcbiAgICAgICAgICAgIC4uLihuZXdDb25maWcucHJvdmlkZXJEYXRhID8/IHt9KSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG5ld0NvbmZpZy5wcm9tcHQpIHtcbiAgICAgICAgICAgIHNlc3Npb25EYXRhLnByb21wdCA9IHtcbiAgICAgICAgICAgICAgICBpZDogbmV3Q29uZmlnLnByb21wdC5wcm9tcHRJZCxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBuZXdDb25maWcucHJvbXB0LnZlcnNpb24sXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzOiBuZXdDb25maWcucHJvbXB0LnZhcmlhYmxlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0NvbmZpZy50b29scyAmJiBuZXdDb25maWcudG9vbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2Vzc2lvbkRhdGEudG9vbHMgPSBuZXdDb25maWcudG9vbHMubWFwKCh0b29sKSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnRvb2wsXG4gICAgICAgICAgICAgICAgc3RyaWN0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlc3Npb25EYXRhO1xuICAgIH1cbiAgICBzdGF0aWMgYnVpbGRUdXJuRGV0ZWN0aW9uQ29uZmlnKGMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHR5cGUsIGNyZWF0ZVJlc3BvbnNlLCBjcmVhdGVfcmVzcG9uc2UsIGVhZ2VybmVzcywgaW50ZXJydXB0UmVzcG9uc2UsIGludGVycnVwdF9yZXNwb25zZSwgcHJlZml4UGFkZGluZ01zLCBwcmVmaXhfcGFkZGluZ19tcywgc2lsZW5jZUR1cmF0aW9uTXMsIHNpbGVuY2VfZHVyYXRpb25fbXMsIHRocmVzaG9sZCwgaWRsZVRpbWVvdXRNcywgaWRsZV90aW1lb3V0X21zLCAuLi5yZXN0IH0gPSBjO1xuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgY3JlYXRlX3Jlc3BvbnNlOiBjcmVhdGVSZXNwb25zZSA/IGNyZWF0ZVJlc3BvbnNlIDogY3JlYXRlX3Jlc3BvbnNlLFxuICAgICAgICAgICAgZWFnZXJuZXNzLFxuICAgICAgICAgICAgaW50ZXJydXB0X3Jlc3BvbnNlOiBpbnRlcnJ1cHRSZXNwb25zZVxuICAgICAgICAgICAgICAgID8gaW50ZXJydXB0UmVzcG9uc2VcbiAgICAgICAgICAgICAgICA6IGludGVycnVwdF9yZXNwb25zZSxcbiAgICAgICAgICAgIHByZWZpeF9wYWRkaW5nX21zOiBwcmVmaXhQYWRkaW5nTXMgPyBwcmVmaXhQYWRkaW5nTXMgOiBwcmVmaXhfcGFkZGluZ19tcyxcbiAgICAgICAgICAgIHNpbGVuY2VfZHVyYXRpb25fbXM6IHNpbGVuY2VEdXJhdGlvbk1zXG4gICAgICAgICAgICAgICAgPyBzaWxlbmNlRHVyYXRpb25Nc1xuICAgICAgICAgICAgICAgIDogc2lsZW5jZV9kdXJhdGlvbl9tcyxcbiAgICAgICAgICAgIGlkbGVfdGltZW91dF9tczogaWRsZVRpbWVvdXRNcyA/IGlkbGVUaW1lb3V0TXMgOiBpZGxlX3RpbWVvdXRfbXMsXG4gICAgICAgICAgICB0aHJlc2hvbGQsXG4gICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICB9O1xuICAgICAgICAvLyBSZW1vdmUgdW5kZWZpbmVkIHZhbHVlcyBmcm9tIHRoZSBjb25maWdcbiAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChjb25maWdba2V5XSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWdba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhjb25maWcpLmxlbmd0aCA+IDAgPyBjb25maWcgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGludGVybmFsIHRyYWNpbmcgY29uZmlnLiBUaGlzIGlzIHVzZWQgdG8gdHJhY2sgdGhlIHRyYWNpbmcgY29uZmlnIHRoYXQgaGFzIGJlZW4gc2V0XG4gICAgICogZHVyaW5nIHRoZSBzZXNzaW9uLmNyZWF0ZSBldmVudC5cbiAgICAgKi9cbiAgICBzZXQgX3RyYWNpbmdDb25maWcodHJhY2luZ0NvbmZpZykge1xuICAgICAgICB0aGlzLiN0cmFjaW5nQ29uZmlnID0gdHJhY2luZ0NvbmZpZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdHJhY2luZyBjb25maWcgZm9yIHRoZSBzZXNzaW9uLiBUaGlzIHdpbGwgc2VuZCB0aGUgdHJhY2luZyBjb25maWcgdG8gdGhlIFJlYWx0aW1lIEFQSS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFjaW5nQ29uZmlnIC0gVGhlIHRyYWNpbmcgY29uZmlnIHRvIHNldC4gV2UgZG9uJ3Qgc3VwcG9ydCAnYXV0bycgaGVyZSBhcyB0aGUgU0RLIHdpbGwgYWx3YXlzIGNvbmZpZ3VyZSBhIFdvcmtmbG93IE5hbWUgdW5sZXNzIGl0IGV4aXN0c1xuICAgICAqL1xuICAgIF91cGRhdGVUcmFjaW5nQ29uZmlnKHRyYWNpbmdDb25maWcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLiN0cmFjaW5nQ29uZmlnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gdHJlYXRpbmcgaXQgYXMgZGVmYXVsdCB2YWx1ZVxuICAgICAgICAgICAgdGhpcy4jdHJhY2luZ0NvbmZpZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNpbmdDb25maWcgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgLy8gdHVybiBvbiB0cmFjaW5nIGluIGF1dG8gbW9kZVxuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzZXNzaW9uLnVwZGF0ZScsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVhbHRpbWUnLFxuICAgICAgICAgICAgICAgICAgICB0cmFjaW5nOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiN0cmFjaW5nQ29uZmlnICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy4jdHJhY2luZ0NvbmZpZyAhPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHR5cGVvZiB0cmFjaW5nQ29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gdHJhY2luZyBpcyBhbHJlYWR5IHNldCwgd2UgY2FuJ3QgY2hhbmdlIGl0XG4gICAgICAgICAgICBsb2dnZXIud2FybignVHJhY2luZyBjb25maWcgaXMgYWxyZWFkeSBzZXQsIHNraXBwaW5nIHNldHRpbmcgaXQgYWdhaW4uIFRoaXMgbGlrZWx5IGhhcHBlbnMgd2hlbiB5b3UgYWxyZWFkeSBzZXQgYSB0cmFjaW5nIGNvbmZpZyBvbiBzZXNzaW9uIGNyZWF0aW9uLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjaW5nQ29uZmlnID09PSBudWxsKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0Rpc2FibGluZyB0cmFjaW5nIGZvciB0aGlzIHNlc3Npb24uIEl0IGNhbm5vdCBiZSB0dXJuZWQgb24gZm9yIHRoaXMgc2Vzc2lvbiBmcm9tIHRoaXMgcG9pbnQgb24uJyk7XG4gICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Nlc3Npb24udXBkYXRlJyxcbiAgICAgICAgICAgICAgICBzZXNzaW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdyZWFsdGltZScsXG4gICAgICAgICAgICAgICAgICAgIHRyYWNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiN0cmFjaW5nQ29uZmlnID09PSBudWxsIHx8XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy4jdHJhY2luZ0NvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIHRyYWNpbmcgaXMgY3VycmVudGx5IG5vdCBzZXQgc28gd2UgY2FuIHNldCBpdCB0byB0aGUgbmV3IHZhbHVlXG4gICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Nlc3Npb24udXBkYXRlJyxcbiAgICAgICAgICAgICAgICBzZXNzaW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdyZWFsdGltZScsXG4gICAgICAgICAgICAgICAgICAgIHRyYWNpbmc6IHRyYWNpbmdDb25maWcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjaW5nQ29uZmlnPy5ncm91cF9pZCAhPT0gdGhpcy4jdHJhY2luZ0NvbmZpZz8uZ3JvdXBfaWQgfHxcbiAgICAgICAgICAgIHRyYWNpbmdDb25maWc/Lm1ldGFkYXRhICE9PSB0aGlzLiN0cmFjaW5nQ29uZmlnPy5tZXRhZGF0YSB8fFxuICAgICAgICAgICAgdHJhY2luZ0NvbmZpZz8ud29ya2Zsb3dfbmFtZSAhPT0gdGhpcy4jdHJhY2luZ0NvbmZpZz8ud29ya2Zsb3dfbmFtZSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ01pc21hdGNoIGluIHRyYWNpbmcgY29uZmlnLiBJZ25vcmluZyB0aGUgbmV3IHRyYWNpbmcgY29uZmlnLiBUaGlzIGxpa2VseSBoYXBwZW5zIHdoZW4geW91IGFscmVhZHkgc2V0IGEgdHJhY2luZyBjb25maWcgb24gc2Vzc2lvbiBjcmVhdGlvbi4gQ3VycmVudCB0cmFjaW5nIGNvbmZpZzogJXMsIG5ldyB0cmFjaW5nIGNvbmZpZzogJXMnLCBKU09OLnN0cmluZ2lmeSh0aGlzLiN0cmFjaW5nQ29uZmlnKSwgSlNPTi5zdHJpbmdpZnkodHJhY2luZ0NvbmZpZykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdzZXNzaW9uLnVwZGF0ZScsXG4gICAgICAgICAgICBzZXNzaW9uOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JlYWx0aW1lJyxcbiAgICAgICAgICAgICAgICB0cmFjaW5nOiB0cmFjaW5nQ29uZmlnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHNlc3Npb24gY29uZmlnLiBUaGlzIHdpbGwgbWVyZ2UgaXQgd2l0aCB0aGUgY3VycmVudCBzZXNzaW9uIGNvbmZpZyB3aXRoIHRoZSBkZWZhdWx0XG4gICAgICogdmFsdWVzIGFuZCBzZW5kIGl0IHRvIHRoZSBSZWFsdGltZSBBUEkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gVGhlIHNlc3Npb24gY29uZmlnIHRvIHVwZGF0ZS5cbiAgICAgKi9cbiAgICB1cGRhdGVTZXNzaW9uQ29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IHRoaXMuX2dldE1lcmdlZFNlc3Npb25Db25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ3Nlc3Npb24udXBkYXRlJyxcbiAgICAgICAgICAgIHNlc3Npb246IHNlc3Npb25EYXRhLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgb3V0cHV0IG9mIGEgZnVuY3Rpb24gY2FsbCB0byB0aGUgUmVhbHRpbWUgQVBJLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRvb2xDYWxsIC0gVGhlIHRvb2wgY2FsbCB0byBzZW5kIHRoZSBvdXRwdXQgZm9yLlxuICAgICAqIEBwYXJhbSBvdXRwdXQgLSBUaGUgb3V0cHV0IG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICAgICAqIEBwYXJhbSBzdGFydFJlc3BvbnNlIC0gV2hldGhlciB0byBzdGFydCBhIG5ldyByZXNwb25zZSBhZnRlciBzZW5kaW5nIHRoZSBvdXRwdXQuXG4gICAgICovXG4gICAgc2VuZEZ1bmN0aW9uQ2FsbE91dHB1dCh0b29sQ2FsbCwgb3V0cHV0LCBzdGFydFJlc3BvbnNlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlJyxcbiAgICAgICAgICAgIGl0ZW06IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb25fY2FsbF9vdXRwdXQnLFxuICAgICAgICAgICAgICAgIG91dHB1dCxcbiAgICAgICAgICAgICAgICBjYWxsX2lkOiB0b29sQ2FsbC5jYWxsSWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSByZWFsdGltZVRvb2xDYWxsSXRlbS5wYXJzZSh7XG4gICAgICAgICAgICAgICAgaXRlbUlkOiB0b29sQ2FsbC5pZCxcbiAgICAgICAgICAgICAgICBwcmV2aW91c0l0ZW1JZDogdG9vbENhbGwucHJldmlvdXNJdGVtSWQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX2NhbGwnLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2NvbXBsZXRlZCcsXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiB0b29sQ2FsbC5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgbmFtZTogdG9vbENhbGwubmFtZSxcbiAgICAgICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgcGFyc2luZyB0b29sIGNhbGwgaXRlbScsIGVycm9yLCB0b29sQ2FsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0UmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UuY3JlYXRlJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgYW4gYXVkaW8gYnVmZmVyIHRvIHRoZSBSZWFsdGltZSBBUEkuIElmIGB7IGNvbW1pdDogdHJ1ZSB9YCBpcyBwYXNzZWQsIHRoZSBhdWRpbyBidWZmZXJcbiAgICAgKiB3aWxsIGJlIGNvbW1pdHRlZCBhbmQgdGhlIG1vZGVsIHdpbGwgc3RhcnQgcHJvY2Vzc2luZyBpdC4gVGhpcyBpcyBuZWNlc3NhcnkgaWYgeW91IGhhdmVcbiAgICAgKiBkaXNhYmxlZCB0dXJuIGRldGVjdGlvbiAvIHZvaWNlIGFjdGl2aXR5IGRldGVjdGlvbiAoVkFEKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdWRpbyAtIFRoZSBhdWRpbyBidWZmZXIgdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgYXVkaW8gYnVmZmVyLlxuICAgICAqL1xuICAgIHNlbmRBdWRpbyhhdWRpbywgeyBjb21taXQgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ2lucHV0X2F1ZGlvX2J1ZmZlci5hcHBlbmQnLFxuICAgICAgICAgICAgYXVkaW86IGFycmF5QnVmZmVyVG9CYXNlNjQoYXVkaW8pLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNvbW1pdCkge1xuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dF9hdWRpb19idWZmZXIuY29tbWl0JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBoaXN0b3J5IG9mIHRoZSBjb252ZXJzYXRpb24uIFRoaXMgd2lsbCBjcmVhdGUgYSBkaWZmIGJldHdlZW4gdGhlIG9sZCBhbmQgbmV3IGhpc3RvcnlcbiAgICAgKiBhbmQgc2VuZCB0aGUgbmVjZXNzYXJ5IGV2ZW50cyB0byB0aGUgUmVhbHRpbWUgQVBJIHRvIHVwZGF0ZSB0aGUgaGlzdG9yeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvbGRIaXN0b3J5IC0gVGhlIG9sZCBoaXN0b3J5IG9mIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICogQHBhcmFtIG5ld0hpc3RvcnkgLSBUaGUgbmV3IGhpc3Rvcnkgb2YgdGhlIGNvbnZlcnNhdGlvbi5cbiAgICAgKi9cbiAgICByZXNldEhpc3Rvcnkob2xkSGlzdG9yeSwgbmV3SGlzdG9yeSkge1xuICAgICAgICBjb25zdCB7IHJlbW92YWxzLCBhZGRpdGlvbnMsIHVwZGF0ZXMgfSA9IGRpZmZSZWFsdGltZUhpc3Rvcnkob2xkSGlzdG9yeSwgbmV3SGlzdG9yeSk7XG4gICAgICAgIGNvbnN0IHJlbW92YWxJZHMgPSBuZXcgU2V0KHJlbW92YWxzLm1hcCgoaXRlbSkgPT4gaXRlbS5pdGVtSWQpKTtcbiAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhbiB1cGRhdGUgZXZlbnQgZm9yIGl0ZW1zIHNvIHdlIHdpbGwgcmVtb3ZlIGFuZCByZS1hZGQgd2hhdCdzIHRoZXJlXG4gICAgICAgIGZvciAoY29uc3QgdXBkYXRlIG9mIHVwZGF0ZXMpIHtcbiAgICAgICAgICAgIHJlbW92YWxJZHMuYWRkKHVwZGF0ZS5pdGVtSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW1vdmFsSWRzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW1JZCBvZiByZW1vdmFsSWRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlJyxcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9pZDogaXRlbUlkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFkZGl0aW9uc0FuZFVwZGF0ZXMgPSBbLi4uYWRkaXRpb25zLCAuLi51cGRhdGVzXTtcbiAgICAgICAgZm9yIChjb25zdCBhZGRpdGlvbiBvZiBhZGRpdGlvbnNBbmRVcGRhdGVzKSB7XG4gICAgICAgICAgICBpZiAoYWRkaXRpb24udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUVudHJ5ID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IGFkZGl0aW9uLnJvbGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGFkZGl0aW9uLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBhZGRpdGlvbi5pdGVtSWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkaXRpb24ucm9sZSAhPT0gJ3N5c3RlbScgJiYgYWRkaXRpb24uc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1FbnRyeS5zdGF0dXMgPSBhZGRpdGlvbi5zdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZScsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1FbnRyeSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFkZGl0aW9uLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCdGdW5jdGlvbiBjYWxscyBjYW5ub3QgYmUgbWFudWFsbHkgYWRkZWQgb3IgdXBkYXRlZCBhdCB0aGUgbW9tZW50LiBJZ25vcmluZy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZW5kTWNwUmVzcG9uc2UoYXBwcm92YWxSZXF1ZXN0LCBhcHByb3ZlZCkge1xuICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlJyxcbiAgICAgICAgICAgIHByZXZpb3VzX2l0ZW1faWQ6IGFwcHJvdmFsUmVxdWVzdC5pdGVtSWQsXG4gICAgICAgICAgICBpdGVtOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ21jcF9hcHByb3ZhbF9yZXNwb25zZScsXG4gICAgICAgICAgICAgICAgYXBwcm92YWxfcmVxdWVzdF9pZDogYXBwcm92YWxSZXF1ZXN0Lml0ZW1JZCxcbiAgICAgICAgICAgICAgICBhcHByb3ZlOiBhcHByb3ZlZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5haVJlYWx0aW1lQmFzZS5tanMubWFwIiwiLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbmltcG9ydCB7IGlzQnJvd3NlckVudmlyb25tZW50IH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZS9fc2hpbXMnO1xuaW1wb3J0IHsgVXNlckVycm9yIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZSc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IE9wZW5BSVJlYWx0aW1lQmFzZSwgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZUJhc2UubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVJlYWx0aW1lRXZlbnQgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZUV2ZW50cy5tanNcIjtcbmltcG9ydCB7IEhFQURFUlMgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbi8qKlxuICogVHJhbnNwb3J0IGxheWVyIHRoYXQncyBoYW5kbGluZyB0aGUgY29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kIE9wZW5BSSdzIFJlYWx0aW1lIEFQSVxuICogdmlhIFdlYlJUQy4gV2hpbGUgdGhpcyB0cmFuc3BvcnQgbGF5ZXIgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCB3aXRoaW4gYSBSZWFsdGltZVNlc3Npb24sIGl0IGNhblxuICogYWxzbyBiZSB1c2VkIHN0YW5kYWxvbmUgaWYgeW91IHdhbnQgdG8gaGF2ZSBhIGRpcmVjdCBjb25uZWN0aW9uIHRvIHRoZSBSZWFsdGltZSBBUEkuXG4gKlxuICogVW5sZXNzIHlvdSBzcGVjaWZ5IGEgYG1lZGlhU3RyZWFtYCBvciBgYXVkaW9FbGVtZW50YCBvcHRpb24sIHRoZSB0cmFuc3BvcnQgbGF5ZXIgd2lsbFxuICogYXV0b21hdGljYWxseSBjb25maWd1cmUgdGhlIG1pY3JvcGhvbmUgYW5kIGF1ZGlvIG91dHB1dCB0byBiZSB1c2VkIGJ5IHRoZSBzZXNzaW9uLlxuICovXG5leHBvcnQgY2xhc3MgT3BlbkFJUmVhbHRpbWVXZWJSVEMgZXh0ZW5kcyBPcGVuQUlSZWFsdGltZUJhc2Uge1xuICAgIG9wdGlvbnM7XG4gICAgI3VybDtcbiAgICAjc3RhdGUgPSB7XG4gICAgICAgIHN0YXR1czogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgICAgIHBlZXJDb25uZWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGRhdGFDaGFubmVsOiB1bmRlZmluZWQsXG4gICAgICAgIGNhbGxJZDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgI3VzZUluc2VjdXJlQXBpS2V5O1xuICAgICNvbmdvaW5nUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAjbXV0ZWQgPSBmYWxzZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBSVENQZWVyQ29ubmVjdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViUlRDIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLiN1cmwgPSBvcHRpb25zLmJhc2VVcmwgPz8gYGh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvcmVhbHRpbWUvY2FsbHNgO1xuICAgICAgICB0aGlzLiN1c2VJbnNlY3VyZUFwaUtleSA9IG9wdGlvbnMudXNlSW5zZWN1cmVBcGlLZXkgPz8gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGNhbGwgSUQgb2YgdGhlIFdlYlJUQyBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBjYWxsSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNzdGF0ZS5jYWxsSWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgV2ViUlRDIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IHN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3N0YXRlLnN0YXR1cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgY29ubmVjdGlvbiBzdGF0ZSBvZiB0aGUgV2ViUlRDIGNvbm5lY3Rpb24gaW5jbHVkaW5nIHRoZSBwZWVyIGNvbm5lY3Rpb24gYW5kIGRhdGFcbiAgICAgKiBjaGFubmVsLlxuICAgICAqL1xuICAgIGdldCBjb25uZWN0aW9uU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNzdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgc2Vzc2lvbiBpcyBtdXRlZC5cbiAgICAgKi9cbiAgICBnZXQgbXV0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNtdXRlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byB0aGUgUmVhbHRpbWUgQVBJLiBUaGlzIHdpbGwgZXN0YWJsaXNoIHRoZSBjb25uZWN0aW9uIHRvIHRoZSBPcGVuQUkgUmVhbHRpbWUgQVBJXG4gICAgICogdmlhIFdlYlJUQy5cbiAgICAgKlxuICAgICAqIElmIHlvdSBhcmUgdXNpbmcgYSBicm93c2VyLCB0aGUgdHJhbnNwb3J0IGxheWVyIHdpbGwgYWxzbyBhdXRvbWF0aWNhbGx5IGNvbmZpZ3VyZSB0aGVcbiAgICAgKiBtaWNyb3Bob25lIGFuZCBhdWRpbyBvdXRwdXQgdG8gYmUgdXNlZCBieSB0aGUgc2Vzc2lvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGNvbm5lY3Qob3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy4jc3RhdGUuc3RhdHVzID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiNzdGF0ZS5zdGF0dXMgPT09ICdjb25uZWN0aW5nJykge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1JlYWx0aW1lIGNvbm5lY3Rpb24gYWxyZWFkeSBpbiBwcm9ncmVzcy4gUGxlYXNlIGF3YWl0IG9yaWdpbmFsIHByb21pc2UnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2RlbCA9IG9wdGlvbnMubW9kZWwgPz8gdGhpcy5jdXJyZW50TW9kZWw7XG4gICAgICAgIHRoaXMuY3VycmVudE1vZGVsID0gbW9kZWw7XG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSBvcHRpb25zLnVybCA/PyB0aGlzLiN1cmw7XG4gICAgICAgIGNvbnN0IGFwaUtleSA9IGF3YWl0IHRoaXMuX2dldEFwaUtleShvcHRpb25zKTtcbiAgICAgICAgY29uc3QgaXNDbGllbnRLZXkgPSB0eXBlb2YgYXBpS2V5ID09PSAnc3RyaW5nJyAmJiBhcGlLZXkuc3RhcnRzV2l0aCgnZWtfJyk7XG4gICAgICAgIGlmIChpc0Jyb3dzZXJFbnZpcm9ubWVudCgpICYmICF0aGlzLiN1c2VJbnNlY3VyZUFwaUtleSAmJiAhaXNDbGllbnRLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ1VzaW5nIHRoZSBXZWJSVEMgY29ubmVjdGlvbiBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQgcmVxdWlyZXMgYW4gZXBoZW1lcmFsIGNsaWVudCBrZXkuIElmIHlvdSBuZWVkIHRvIHVzZSBhIHJlZ3VsYXIgQVBJIGtleSwgdXNlIHRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0IG9yIHNldCB0aGUgYHVzZUluc2VjdXJlQXBpS2V5YCBvcHRpb24gdG8gdHJ1ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXN5bmMtcHJvbWlzZS1leGVjdXRvclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyU2Vzc2lvbkNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKG9wdGlvbnMuaW5pdGlhbFNlc3Npb25Db25maWcgfHwge30pLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogdGhpcy5jdXJyZW50TW9kZWwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uVXJsID0gbmV3IFVSTChiYXNlVXJsKTtcbiAgICAgICAgICAgICAgICBsZXQgcGVlckNvbm5lY3Rpb24gPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhQ2hhbm5lbCA9IHBlZXJDb25uZWN0aW9uLmNyZWF0ZURhdGFDaGFubmVsKCdvYWktZXZlbnRzJyk7XG4gICAgICAgICAgICAgICAgbGV0IGNhbGxJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnY29ubmVjdGluZycsXG4gICAgICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhQ2hhbm5lbCxcbiAgICAgICAgICAgICAgICAgICAgY2FsbElkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uX2NoYW5nZScsIHRoaXMuI3N0YXRlLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdjb25uZWN0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhQ2hhbm5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxJZCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VuZGluZyB0aGUgc2Vzc2lvbiBjb25maWcgYWdhaW4gaGVyZSBvbmNlIHRoZSBjaGFubmVsIGlzIGNvbm5lY3RlZCB0byBlbnN1cmVcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCB0aGUgc2Vzc2lvbiBjb25maWcgaXMgc2VudCB0byB0aGUgc2VydmVyIGJlZm9yZSB0aGUgZmlyc3QgcmVzcG9uc2UgaXMgcmVjZWl2ZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dGluZyBpdCBvbiBjb25uZWN0aW9uIHNob3VsZCB3b3JrIGJ1dCB0aGUgY29uZmlnIGlzIG5vdCBiZWluZyB2YWxpZGF0ZWQgb24gdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlcnZlci4gVGhpcyB0cmlnZ2VycyBhIHZhbGlkYXRpb24gZXJyb3IgaWYgdGhlIGNvbmZpZyBpcyBub3QgdmFsaWQuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2Vzc2lvbkNvbmZpZyh1c2VyU2Vzc2lvbkNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbl9jaGFuZ2UnLCB0aGlzLiNzdGF0ZS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbk9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25FcnJvcihldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChldmVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbk1lc3NhZ2UoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGE6IHBhcnNlZCwgaXNHZW5lcmljIH0gPSBwYXJzZVJlYWx0aW1lRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZCB8fCBpc0dlbmVyaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5jcmVhdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jb25nb2luZ1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLmRvbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNvbmdvaW5nUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdzZXNzaW9uLmNyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFjaW5nQ29uZmlnID0gcGFyc2VkLnNlc3Npb24udHJhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeWluZyB0byB0dXJuIG9uIHRyYWNpbmcgYWZ0ZXIgdGhlIHNlc3Npb24gaXMgY3JlYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVHJhY2luZ0NvbmZpZyh1c2VyU2Vzc2lvbkNvbmZpZy50cmFjaW5nID8/ICdhdXRvJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBzZXQgdXAgYXVkaW8gcGxheWJhY2tcbiAgICAgICAgICAgICAgICBjb25zdCBhdWRpb0VsZW1lbnQgPSB0aGlzLm9wdGlvbnMuYXVkaW9FbGVtZW50ID8/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG4gICAgICAgICAgICAgICAgYXVkaW9FbGVtZW50LmF1dG9wbGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5vbnRyYWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvRWxlbWVudC5zcmNPYmplY3QgPSBldmVudC5zdHJlYW1zWzBdO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gZ2V0IG1pY3JvcGhvbmUgc3RyZWFtXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gdGhpcy5vcHRpb25zLm1lZGlhU3RyZWFtID8/XG4gICAgICAgICAgICAgICAgICAgIChhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpbzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLmFkZFRyYWNrKHN0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNoYW5nZVBlZXJDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub3B0aW9ucy5jaGFuZ2VQZWVyQ29ubmVjdGlvbihwZWVyQ29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3N0YXRlID0geyAuLi50aGlzLiNzdGF0ZSwgcGVlckNvbm5lY3Rpb24gfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCBwZWVyQ29ubmVjdGlvbi5jcmVhdGVPZmZlcigpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHBlZXJDb25uZWN0aW9uLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgICAgIGlmICghb2ZmZXIuc2RwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBvZmZlcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzZHBSZXNwb25zZSA9IGF3YWl0IGZldGNoKGNvbm5lY3Rpb25VcmwsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IG9mZmVyLnNkcCxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9zZHAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2FwaUtleX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1gtT3BlbkFJLUFnZW50cy1TREsnOiBIRUFERVJTWydYLU9wZW5BSS1BZ2VudHMtU0RLJ10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2FsbElkID0gc2RwUmVzcG9uc2UuaGVhZGVycz8uZ2V0KCdMb2NhdGlvbicpPy5zcGxpdCgnLycpLnBvcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuI3N0YXRlID0geyAuLi50aGlzLiNzdGF0ZSwgY2FsbElkIH07XG4gICAgICAgICAgICAgICAgY29uc3QgYW5zd2VyID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYW5zd2VyJyxcbiAgICAgICAgICAgICAgICAgICAgc2RwOiBhd2FpdCBzZHBSZXNwb25zZS50ZXh0KCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhd2FpdCBwZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIGV2ZW50IHRvIHRoZSBSZWFsdGltZSBBUEkuIFRoaXMgd2lsbCBzdHJpbmdpZnkgdGhlIGV2ZW50IGFuZCBzZW5kIGl0IGRpcmVjdGx5IHRvIHRoZVxuICAgICAqIEFQSS4gVGhpcyBjYW4gYmUgdXNlZCBpZiB5b3Ugd2FudCB0byB0YWtlIGNvbnRyb2wgb3ZlciB0aGUgY29ubmVjdGlvbiBhbmQgc2VuZCBldmVudHMgbWFudWFsbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gc2VuZC5cbiAgICAgKi9cbiAgICBzZW5kRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNzdGF0ZS5kYXRhQ2hhbm5lbCB8fFxuICAgICAgICAgICAgdGhpcy4jc3RhdGUuZGF0YUNoYW5uZWwucmVhZHlTdGF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYlJUQyBkYXRhIGNoYW5uZWwgaXMgbm90IGNvbm5lY3RlZC4gTWFrZSBzdXJlIHlvdSBjYWxsIGBjb25uZWN0KClgIGJlZm9yZSBzZW5kaW5nIGV2ZW50cy4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNzdGF0ZS5kYXRhQ2hhbm5lbC5zZW5kKEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11dGUgb3IgdW5tdXRlIHRoZSBzZXNzaW9uLlxuICAgICAqIEBwYXJhbSBtdXRlZCAtIFdoZXRoZXIgdG8gbXV0ZSB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBtdXRlKG11dGVkKSB7XG4gICAgICAgIHRoaXMuI211dGVkID0gbXV0ZWQ7XG4gICAgICAgIGlmICh0aGlzLiNzdGF0ZS5wZWVyQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcGVlckNvbm5lY3Rpb24gPSB0aGlzLiNzdGF0ZS5wZWVyQ29ubmVjdGlvbjtcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLmdldFNlbmRlcnMoKS5mb3JFYWNoKChzZW5kZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VuZGVyLnRyYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRlci50cmFjay5lbmFibGVkID0gIW11dGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlIHRoZSBjb25uZWN0aW9uIHRvIHRoZSBSZWFsdGltZSBBUEkgYW5kIGRpc2Nvbm5lY3RzIHRoZSB1bmRlcmx5aW5nIFdlYlJUQyBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy4jc3RhdGUuZGF0YUNoYW5uZWwpIHtcbiAgICAgICAgICAgIHRoaXMuI3N0YXRlLmRhdGFDaGFubmVsLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuI3N0YXRlLnBlZXJDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwZWVyQ29ubmVjdGlvbiA9IHRoaXMuI3N0YXRlLnBlZXJDb25uZWN0aW9uO1xuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uZ2V0U2VuZGVycygpLmZvckVhY2goKHNlbmRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHNlbmRlci50cmFjaz8uc3RvcCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiNzdGF0ZS5zdGF0dXMgIT09ICdkaXNjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZGF0YUNoYW5uZWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjYWxsSWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb25fY2hhbmdlJywgdGhpcy4jc3RhdGUuc3RhdHVzKTtcbiAgICAgICAgICAgIHRoaXMuX29uQ2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnRlcnJ1cHQgdGhlIGN1cnJlbnQgcmVzcG9uc2UgaWYgb25lIGlzIG9uZ29pbmcgYW5kIGNsZWFyIHRoZSBhdWRpbyBidWZmZXIgc28gdGhhdCB0aGUgYWdlbnRcbiAgICAgKiBzdG9wcyB0YWxraW5nLlxuICAgICAqL1xuICAgIGludGVycnVwdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI29uZ29pbmdSZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyZXNwb25zZS5jYW5jZWwnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLiNvbmdvaW5nUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICB0eXBlOiAnb3V0cHV0X2F1ZGlvX2J1ZmZlci5jbGVhcicsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5haVJlYWx0aW1lV2ViUnRjLm1qcy5tYXAiLCIvLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuZXhwb3J0IGNvbnN0IFdlYlNvY2tldCA9IGdsb2JhbFRoaXMuV2ViU29ja2V0O1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlckVudmlyb25tZW50KCkge1xuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGNvbnN0IHVzZVdlYlNvY2tldFByb3RvY29scyA9IHRydWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGltcy1icm93c2VyLm1qcy5tYXAiLCJpbXBvcnQgeyBpc0Jyb3dzZXJFbnZpcm9ubWVudCwgdXNlV2ViU29ja2V0UHJvdG9jb2xzLCBXZWJTb2NrZXQsIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtcmVhbHRpbWUvX3NoaW1zJztcbmltcG9ydCB7IE9wZW5BSVJlYWx0aW1lQmFzZSwgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZUJhc2UubWpzXCI7XG5pbXBvcnQgeyBiYXNlNjRUb0FycmF5QnVmZmVyLCBIRUFERVJTLCBXRUJTT0NLRVRfTUVUQSB9IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuaW1wb3J0IHsgVXNlckVycm9yIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZSc7XG5pbXBvcnQgeyBwYXJzZVJlYWx0aW1lRXZlbnQgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZUV2ZW50cy5tanNcIjtcbi8qKlxuICogVHJhbnNwb3J0IGxheWVyIHRoYXQncyBoYW5kbGluZyB0aGUgY29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kIE9wZW5BSSdzIFJlYWx0aW1lIEFQSVxuICogdmlhIFdlYlNvY2tldHMuIFdoaWxlIHRoaXMgdHJhbnNwb3J0IGxheWVyIGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aGluIGEgUmVhbHRpbWVTZXNzaW9uLCBpdFxuICogY2FuIGFsc28gYmUgdXNlZCBzdGFuZGFsb25lIGlmIHlvdSB3YW50IHRvIGhhdmUgYSBkaXJlY3QgY29ubmVjdGlvbiB0byB0aGUgUmVhbHRpbWUgQVBJLlxuICovXG5leHBvcnQgY2xhc3MgT3BlbkFJUmVhbHRpbWVXZWJTb2NrZXQgZXh0ZW5kcyBPcGVuQUlSZWFsdGltZUJhc2Uge1xuICAgICNhcGlLZXk7XG4gICAgI3VybDtcbiAgICAjc3RhdGUgPSB7XG4gICAgICAgIHN0YXR1czogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgICAgIHdlYnNvY2tldDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgI3VzZUluc2VjdXJlQXBpS2V5O1xuICAgICNjdXJyZW50SXRlbUlkO1xuICAgICNjdXJyZW50QXVkaW9Db250ZW50SW5kZXg7XG4gICAgLyoqXG4gICAgICogVGltZXN0YW1wIG1haW50YWluZWQgYnkgdGhlIHRyYW5zcG9ydCBsYXllciB0byBhaWQgd2l0aCB0aGUgY2FsY3VsYXRpb24gb2YgdGhlIGVsYXBzZWQgdGltZVxuICAgICAqIHNpbmNlIHRoZSByZXNwb25zZSBzdGFydGVkIHRvIGNvbXB1dGUgdGhlIHJpZ2h0IGludGVycnVwdGlvbiB0aW1lLlxuICAgICAqXG4gICAgICogTW9zdGx5IGludGVybmFsIGJ1dCBtaWdodCBiZSB1c2VkIGJ5IGV4dGVuZGVkIHRyYW5zcG9ydCBsYXllcnMgZm9yIHRoZWlyIGludGVycnVwdGlvblxuICAgICAqIGNhbGN1bGF0aW9uLlxuICAgICAqL1xuICAgIF9maXJzdEF1ZGlvVGltZXN0YW1wO1xuICAgIF9hdWRpb0xlbmd0aE1zID0gMDtcbiAgICAjb25nb2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgI2NyZWF0ZVdlYlNvY2tldDtcbiAgICAjc2tpcE9wZW5FdmVudExpc3RlbmVycztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuI3VybCA9IG9wdGlvbnMudXJsO1xuICAgICAgICB0aGlzLiN1c2VJbnNlY3VyZUFwaUtleSA9IG9wdGlvbnMudXNlSW5zZWN1cmVBcGlLZXkgPz8gZmFsc2U7XG4gICAgICAgIHRoaXMuI2NyZWF0ZVdlYlNvY2tldCA9IG9wdGlvbnMuY3JlYXRlV2ViU29ja2V0O1xuICAgICAgICB0aGlzLiNza2lwT3BlbkV2ZW50TGlzdGVuZXJzID0gb3B0aW9ucy5za2lwT3BlbkV2ZW50TGlzdGVuZXJzID8/IGZhbHNlO1xuICAgIH1cbiAgICBnZXRDb21tb25SZXF1ZXN0SGVhZGVycygpIHtcbiAgICAgICAgcmV0dXJuIEhFQURFUlM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IHN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3N0YXRlLnN0YXR1cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgY29ubmVjdGlvbiBzdGF0ZSBvZiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IGNvbm5lY3Rpb25TdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3N0YXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbHdheXMgcmV0dXJucyBgbnVsbGAgYXMgdGhlIFdlYlNvY2tldCB0cmFuc3BvcnQgbGF5ZXIgZG9lcyBub3QgaGFuZGxlIG11dGluZy4gSW5zdGVhZCxcbiAgICAgKiB0aGlzIHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSBjbGllbnQgYnkgbm90IHRyaWdnZXJpbmcgdGhlIGBzZW5kQXVkaW9gIG1ldGhvZC5cbiAgICAgKi9cbiAgICBnZXQgbXV0ZWQoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBpdGVtIElEIG9mIHRoZSBvbmdvaW5nIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIGdldCBjdXJyZW50SXRlbUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudEl0ZW1JZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgdGhlIGBhdWRpb2AgZXZlbnQgdGhhdCBhIGNsaWVudCBtaWdodCBsaXN0ZW4gdG8gdG8gcmVjZWl2ZSB0aGUgYXVkaW8gYnVmZmVyLlxuICAgICAqIFByb3RlY3RlZCBmb3IgeW91IHRvIGJlIGFibGUgdG8gb3ZlcnJpZGUgYW5kIGRpc2FibGUgZW1pdHRpbmcgdGhpcyBldmVudCBpbiBjYXNlIHlvdXIgZXh0ZW5kZWRcbiAgICAgKiB0cmFuc3BvcnQgbGF5ZXIgaGFuZGxlcyBhdWRpbyBpbnRlcm5hbGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGF1ZGlvRXZlbnQgLSBUaGUgYXVkaW8gZXZlbnQgdG8gZW1pdC5cbiAgICAgKi9cbiAgICBfb25BdWRpbyhhdWRpb0V2ZW50KSB7XG4gICAgICAgIHRoaXMuZW1pdCgnYXVkaW8nLCBhdWRpb0V2ZW50KTtcbiAgICB9XG4gICAgYXN5bmMgI3NldHVwV2ViU29ja2V0KHJlc29sdmUsIHJlamVjdCwgc2Vzc2lvbkNvbmZpZykge1xuICAgICAgICBpZiAodGhpcy4jc3RhdGUud2Vic29ja2V0KSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLiNhcGlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ0FQSSBrZXkgaXMgbm90IHNldC4gUGxlYXNlIGNhbGwgYGNvbm5lY3QoKWAgd2l0aCBhbiBBUEkga2V5IGZpcnN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Jyb3dzZXJFbnZpcm9ubWVudCgpICYmXG4gICAgICAgICAgICAhdGhpcy4jYXBpS2V5LnN0YXJ0c1dpdGgoJ2VrXycpICYmXG4gICAgICAgICAgICAhdGhpcy4jdXNlSW5zZWN1cmVBcGlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ1VzaW5nIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQgcmVxdWlyZXMgYW4gZXBoZW1lcmFsIGNsaWVudCBrZXkuIElmIHlvdSBoYXZlIHRvIHVzZSBhIHJlZ3VsYXIgQVBJIGtleSwgc2V0IHRoZSBgdXNlSW5zZWN1cmVBcGlLZXlgIG9wdGlvbiB0byB0cnVlLicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB3cyA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLiNjcmVhdGVXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIHdzID0gYXdhaXQgdGhpcy4jY3JlYXRlV2ViU29ja2V0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuI3VybCxcbiAgICAgICAgICAgICAgICBhcGlLZXk6IHRoaXMuI2FwaUtleSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gYnJvd3NlcnMgYW5kIHdvcmtlcmQgc2hvdWxkIHVzZSB0aGUgcHJvdG9jb2xzIGFyZ3VtZW50LCBub2RlIHNob3VsZCB1c2UgdGhlIGhlYWRlcnMgYXJndW1lbnRcbiAgICAgICAgICAgIGNvbnN0IHdlYnNvY2tldEFyZ3VtZW50cyA9IHVzZVdlYlNvY2tldFByb3RvY29sc1xuICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAncmVhbHRpbWUnLFxuICAgICAgICAgICAgICAgICAgICAvLyBBdXRoXG4gICAgICAgICAgICAgICAgICAgICdvcGVuYWktaW5zZWN1cmUtYXBpLWtleS4nICsgdGhpcy4jYXBpS2V5LFxuICAgICAgICAgICAgICAgICAgICAvLyBWZXJzaW9uIGhlYWRlclxuICAgICAgICAgICAgICAgICAgICBXRUJTT0NLRVRfTUVUQSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLiNhcGlLZXl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2V0Q29tbW9uUmVxdWVzdEhlYWRlcnMoKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KHRoaXMuI3VybCwgd2Vic29ja2V0QXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgIHN0YXR1czogJ2Nvbm5lY3RpbmcnLFxuICAgICAgICAgICAgd2Vic29ja2V0OiB3cyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uX2NoYW5nZScsIHRoaXMuI3N0YXRlLnN0YXR1cyk7XG4gICAgICAgIGNvbnN0IG9uU29ja2V0T3BlblJlYWR5ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXQ6IHdzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbl9jaGFuZ2UnLCB0aGlzLiNzdGF0ZS5zdGF0dXMpO1xuICAgICAgICAgICAgdGhpcy5fb25PcGVuKCk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLiNza2lwT3BlbkV2ZW50TGlzdGVuZXJzID09PSB0cnVlKSB7XG4gICAgICAgICAgICBvblNvY2tldE9wZW5SZWFkeSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsIG9uU29ja2V0T3BlblJlYWR5KTtcbiAgICAgICAgfVxuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICAgICAgICAgIHdlYnNvY2tldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbl9jaGFuZ2UnLCB0aGlzLiNzdGF0ZS5zdGF0dXMpO1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25NZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBwYXJzZWQsIGlzR2VuZXJpYyB9ID0gcGFyc2VSZWFsdGltZUV2ZW50KG1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKCFwYXJzZWQgfHwgaXNHZW5lcmljKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2F1ZGlvLmRlbHRhJykge1xuICAgICAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRBdWRpb0NvbnRlbnRJbmRleCA9IHBhcnNlZC5jb250ZW50X2luZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRJdGVtSWQgPSBwYXJzZWQuaXRlbV9pZDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZmlyc3RBdWRpb1RpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXNwb25zZSBzdGFydCB0aW1lc3RhbXAgaXMgbm90IHNldCwgd2Ugc2V0IGl0IHRvIHRoZSBjdXJyZW50IHRpbWUuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIGVsYXBzZWQgdGltZSBmb3IgaW50ZXJydXB0aW9uLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXJzdEF1ZGlvVGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXVkaW9MZW5ndGhNcyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmYgPSBiYXNlNjRUb0FycmF5QnVmZmVyKHBhcnNlZC5kZWx0YSk7XG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBhdWRpbyBsZW5ndGggaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgLy8gR0EgZm9ybWF0OiBzZXNzaW9uLmF1ZGlvLm91dHB1dC5mb3JtYXQgc3VwcG9ydHMgc3RydWN0dXJlZCB7IHR5cGU6IFwiYXVkaW8vcGNtXCIsIHJhdGUgfSBvciBcImF1ZGlvL3BjbXVcIiBldGMuXG4gICAgICAgICAgICAgICAgY29uc3QgZm10ID0gdGhpcy5fcmF3U2Vzc2lvbkNvbmZpZz8uYXVkaW8/Lm91dHB1dD8uZm9ybWF0O1xuICAgICAgICAgICAgICAgIGlmIChmbXQgJiYgdHlwZW9mIGZtdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RydWN0dXJlZCBmb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGZtdC50eXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gJ2F1ZGlvL3BjbXUnIHx8IHQgPT09ICdhdWRpby9wY21hJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gOGtIeiwgMSBieXRlIHBlciBzYW1wbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgKz0gYnVmZi5ieXRlTGVuZ3RoIC8gODtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0ID09PSAnYXVkaW8vcGNtJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF0ZSA9IGZtdC5yYXRlID8/IDI0MDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnl0ZXMgLT4gc2FtcGxlcyAoMiBieXRlcyBwZXIgc2FtcGxlKSAtPiBtc1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXVkaW9MZW5ndGhNcyArPSAoYnVmZi5ieXRlTGVuZ3RoIC8gMiAvIHJhdGUpICogMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZhbGxiYWNrIGFzc3VtcHRpb24gc2ltaWxhciB0byBsZWdhY3lcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgKz0gYnVmZi5ieXRlTGVuZ3RoIC8gMjQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBmbXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbXQuc3RhcnRzV2l0aCgnZzcxMV8nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXVkaW9MZW5ndGhNcyArPSBidWZmLmJ5dGVMZW5ndGggLyA4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXNzdW1lIDI0a0h6IFBDTTE2XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdWRpb0xlbmd0aE1zICs9IGJ1ZmYuYnl0ZUxlbmd0aCAvIDI0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVmYXVsdCB0byAyNGtIeiBQQ00xNiBiZWhhdmlvciBpZiB1bnNwZWNpZmllZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdWRpb0xlbmd0aE1zICs9IGJ1ZmYuYnl0ZUxlbmd0aCAvIDI0IC8gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9FdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYnVmZixcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VJZDogcGFyc2VkLnJlc3BvbnNlX2lkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fb25BdWRpbyhhdWRpb0V2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcnNlZC50eXBlID09PSAnaW5wdXRfYXVkaW9fYnVmZmVyLnNwZWVjaF9zdGFydGVkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF1dG9tYXRpY1Jlc3BvbnNlQ2FuY2VsbGF0aW9uRW5hYmxlZCA9IHRoaXMuX3Jhd1Nlc3Npb25Db25maWc/LmF1ZGlvPy5pbnB1dD8udHVybl9kZXRlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgPy5pbnRlcnJ1cHRfcmVzcG9uc2UgPz8gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnJ1cHQoIWF1dG9tYXRpY1Jlc3BvbnNlQ2FuY2VsbGF0aW9uRW5hYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLmNyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jb25nb2luZ1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2UuZG9uZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNvbmdvaW5nUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcnNlZC50eXBlID09PSAnc2Vzc2lvbi5jcmVhdGVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYWNpbmdDb25maWcgPSBwYXJzZWQuc2Vzc2lvbi50cmFjaW5nO1xuICAgICAgICAgICAgICAgIC8vIFRyeWluZyB0byB0dXJuIG9uIHRyYWNpbmcgYWZ0ZXIgdGhlIHNlc3Npb24gaXMgY3JlYXRlZFxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRyYWNpbmdDb25maWcoc2Vzc2lvbkNvbmZpZy50cmFjaW5nID8/ICdhdXRvJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI3N0YXRlID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgICAgICAgICAgICAgd2Vic29ja2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uX2NoYW5nZScsIHRoaXMuI3N0YXRlLnN0YXR1cyk7XG4gICAgICAgICAgICB0aGlzLl9vbkNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBjb25uZWN0KG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSBvcHRpb25zLm1vZGVsID8/IHRoaXMuY3VycmVudE1vZGVsO1xuICAgICAgICB0aGlzLmN1cnJlbnRNb2RlbCA9IG1vZGVsO1xuICAgICAgICB0aGlzLiNhcGlLZXkgPSBhd2FpdCB0aGlzLl9nZXRBcGlLZXkob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHVybCA9IG9wdGlvbnMudXJsID8/XG4gICAgICAgICAgICB0aGlzLiN1cmwgPz9cbiAgICAgICAgICAgIGB3c3M6Ly9hcGkub3BlbmFpLmNvbS92MS9yZWFsdGltZT9tb2RlbD0ke3RoaXMuY3VycmVudE1vZGVsfWA7XG4gICAgICAgIHRoaXMuI3VybCA9IHVybDtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkNvbmZpZyA9IHtcbiAgICAgICAgICAgIC4uLihvcHRpb25zLmluaXRpYWxTZXNzaW9uQ29uZmlnIHx8IHt9KSxcbiAgICAgICAgICAgIG1vZGVsOiB0aGlzLmN1cnJlbnRNb2RlbCxcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jc2V0dXBXZWJTb2NrZXQocmVzb2x2ZSwgcmVqZWN0LCBzZXNzaW9uQ29uZmlnKS5jYXRjaChyZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVTZXNzaW9uQ29uZmlnKHNlc3Npb25Db25maWcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIGV2ZW50IHRvIHRoZSBSZWFsdGltZSBBUEkuIFRoaXMgd2lsbCBzdHJpbmdpZnkgdGhlIGV2ZW50IGFuZCBzZW5kIGl0IGRpcmVjdGx5IHRvIHRoZVxuICAgICAqIEFQSS4gVGhpcyBjYW4gYmUgdXNlZCBpZiB5b3Ugd2FudCB0byB0YWtlIGNvbnRyb2wgb3ZlciB0aGUgY29ubmVjdGlvbiBhbmQgc2VuZCBldmVudHMgbWFudWFsbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gc2VuZC5cbiAgICAgKi9cbiAgICBzZW5kRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNzdGF0ZS53ZWJzb2NrZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViU29ja2V0IGlzIG5vdCBjb25uZWN0ZWQuIE1ha2Ugc3VyZSB5b3UgY2FsbCBgY29ubmVjdCgpYCBiZWZvcmUgc2VuZGluZyBldmVudHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhdGUud2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogVGhpcyB3aWxsIGFsc28gcmVzZXQgYW55IGludGVybmFsIGNvbm5lY3Rpb24gdHJhY2tpbmcgdXNlZCBmb3IgaW50ZXJydXB0aW9uIGhhbmRsaW5nLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLiNzdGF0ZS53ZWJzb2NrZXQ/LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRJdGVtSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2ZpcnN0QXVkaW9UaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgPSAwO1xuICAgICAgICB0aGlzLiNjdXJyZW50QXVkaW9Db250ZW50SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgdGhyb3cgYW4gZXJyb3IgYXMgdGhlIFdlYlNvY2tldCB0cmFuc3BvcnQgbGF5ZXIgZG9lcyBub3Qgc3VwcG9ydCBtdXRpbmcuXG4gICAgICovXG4gICAgbXV0ZShfbXV0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXRlIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0LiBZb3UgaGF2ZSB0byBtdXRlIHRoZSBhdWRpbyBpbnB1dCB5b3Vyc2VsZi4nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBhdWRpbyBidWZmZXIgdG8gdGhlIFJlYWx0aW1lIEFQSS4gVGhpcyBpcyB1c2VkIGZvciB5b3VyIGNsaWVudCB0byBzZW5kIGF1ZGlvIHRvIHRoZVxuICAgICAqIG1vZGVsIHRvIHJlc3BvbmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXVkaW8gLSBUaGUgYXVkaW8gYnVmZmVyIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGF1ZGlvIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBzZW5kQXVkaW8oYXVkaW8sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodGhpcy4jc3RhdGUuc3RhdHVzID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgc3VwZXIuc2VuZEF1ZGlvKGF1ZGlvLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgY2FuY2VsIHJlc3BvbnNlIGV2ZW50IHRvIHRoZSBSZWFsdGltZSBBUEkuIFRoaXMgaXMgdXNlZCB0byBjYW5jZWwgYW4gb25nb2luZ1xuICAgICAqICByZXNwb25zZSB0aGF0IHRoZSBtb2RlbCBpcyBjdXJyZW50bHkgZ2VuZXJhdGluZy5cbiAgICAgKi9cbiAgICBfY2FuY2VsUmVzcG9uc2UoKSB7XG4gICAgICAgIC8vIGNhbmNlbCB0aGUgb25nb2luZyByZXNwb25zZVxuICAgICAgICBpZiAodGhpcy4jb25nb2luZ1Jlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlLmNhbmNlbCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuI29uZ29pbmdSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERvIE5PVCBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBDYWxsIGBpbnRlcnJ1cHQoKWAgaW5zdGVhZCBmb3IgcHJvcGVyIGludGVycnVwdGlvbiBoYW5kbGluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gc2VuZCB0aGUgcmlnaHQgZXZlbnRzIHRvIHRoZSBBUEkgdG8gaW5mb3JtIHRoZSBtb2RlbCB0aGF0IHRoZSB1c2VyIGhhc1xuICAgICAqIGludGVycnVwdGVkIHRoZSByZXNwb25zZS4gSXQgbWlnaHQgYmUgb3ZlcnJpZGRlbi9leHRlbmRlZCBieSBhbiBleHRlbmRlZCB0cmFuc3BvcnQgbGF5ZXIuIFNlZVxuICAgICAqIHRoZSBgVHdpbGlvUmVhbHRpbWVUcmFuc3BvcnRMYXllcmAgZm9yIGFuIGV4YW1wbGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxhcHNlZFRpbWUgLSBUaGUgZWxhcHNlZCB0aW1lIHNpbmNlIHRoZSByZXNwb25zZSBzdGFydGVkLlxuICAgICAqL1xuICAgIF9pbnRlcnJ1cHQoZWxhcHNlZFRpbWUsIGNhbmNlbE9uZ29pbmdSZXNwb25zZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKGVsYXBzZWRUaW1lIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGltbWVkaWF0ZWx5IGVtaXQgdGhpcyBldmVudCBzbyB0aGUgY2xpZW50IGNhbiBzdG9wIHBsYXlpbmcgYXVkaW9cbiAgICAgICAgaWYgKGNhbmNlbE9uZ29pbmdSZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FuY2VsUmVzcG9uc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLl9hdWRpb0xlbmd0aE1zID8/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgLy8gYXVkaW9fZW5kX21zIG11c3QgYmUgYW4gaW50ZWdlclxuICAgICAgICBjb25zdCBhdWRpb19lbmRfbXMgPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKE1hdGgubWluKGVsYXBzZWRUaW1lLCBsZW5ndGgpKSk7XG4gICAgICAgIHRoaXMuZW1pdCgnYXVkaW9faW50ZXJydXB0ZWQnKTtcbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLnRydW5jYXRlJyxcbiAgICAgICAgICAgIGl0ZW1faWQ6IHRoaXMuI2N1cnJlbnRJdGVtSWQsXG4gICAgICAgICAgICBjb250ZW50X2luZGV4OiB0aGlzLiNjdXJyZW50QXVkaW9Db250ZW50SW5kZXgsXG4gICAgICAgICAgICBhdWRpb19lbmRfbXMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnRlcnJ1cHQgdGhlIG9uZ29pbmcgcmVzcG9uc2UuIFRoaXMgbWV0aG9kIGlzIHRyaWdnZXJlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBjbGllbnQgd2hlblxuICAgICAqIHZvaWNlIGFjdGl2aXR5IGRldGVjdGlvbiAoVkFEKSBpcyBlbmFibGVkIChkZWZhdWx0KSBhcyB3ZWxsIGFzIHdoZW4gYW4gb3V0cHV0IGd1YXJkcmFpbCBnb3RcbiAgICAgKiB0cmlnZ2VyZWQuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGFsc28gY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseSBpZiB5b3Ugd2FudCB0byBpbnRlcnJ1cHQgdGhlIGNvbnZlcnNhdGlvbiBmb3IgZXhhbXBsZVxuICAgICAqIGJhc2VkIG9uIGFuIGV2ZW50IGluIHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgaW50ZXJydXB0KGNhbmNlbE9uZ29pbmdSZXNwb25zZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNjdXJyZW50SXRlbUlkIHx8IHR5cGVvZiB0aGlzLl9maXJzdEF1ZGlvVGltZXN0YW1wICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gRGF0ZS5ub3coKSAtIHRoaXMuX2ZpcnN0QXVkaW9UaW1lc3RhbXA7XG4gICAgICAgIGlmIChlbGFwc2VkVGltZSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcnJ1cHQoZWxhcHNlZFRpbWUsIGNhbmNlbE9uZ29pbmdSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jY3VycmVudEl0ZW1JZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZmlyc3RBdWRpb1RpbWVzdGFtcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fYXVkaW9MZW5ndGhNcyA9IDA7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRBdWRpb0NvbnRlbnRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuYWlSZWFsdGltZVdlYnNvY2tldC5tanMubWFwIiwiaW1wb3J0IHsgVXNlckVycm9yLCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuZXhwb3J0IGNvbnN0IEJBQ0tHUk9VTkRfUkVTVUxUX1NZTUJPTCA9IFN5bWJvbCgnYmFja2dyb3VuZFJlc3VsdCcpO1xuZXhwb3J0IGZ1bmN0aW9uIGJhY2tncm91bmRSZXN1bHQoY29udGVudCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIFtCQUNLR1JPVU5EX1JFU1VMVF9TWU1CT0xdOiB0cnVlLFxuICAgICAgICBjb250ZW50LFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCYWNrZ3JvdW5kUmVzdWx0KHJlc3VsdCkge1xuICAgIHJldHVybiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgcmVzdWx0ICE9PSBudWxsICYmXG4gICAgICAgIEJBQ0tHUk9VTkRfUkVTVUxUX1NZTUJPTCBpbiByZXN1bHQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRSZWFsdGltZVRvb2wodG9vbCkge1xuICAgIHJldHVybiAodG9vbC50eXBlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICh0b29sLnR5cGUgPT09ICdob3N0ZWRfdG9vbCcgJiYgdG9vbC5uYW1lID09PSAnaG9zdGVkX21jcCcpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1JlYWx0aW1lVG9vbERlZmluaXRpb24odG9vbCkge1xuICAgIGlmICh0b29sLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRvb2w7XG4gICAgfVxuICAgIGlmICh0b29sLnR5cGUgPT09ICdob3N0ZWRfdG9vbCcgJiYgdG9vbC5uYW1lID09PSAnaG9zdGVkX21jcCcpIHtcbiAgICAgICAgY29uc3Qgc2VydmVyVXJsID0gdG9vbC5wcm92aWRlckRhdGEuc2VydmVyX3VybCAmJiB0b29sLnByb3ZpZGVyRGF0YS5zZXJ2ZXJfdXJsLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gdG9vbC5wcm92aWRlckRhdGEuc2VydmVyX3VybFxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnbWNwJyxcbiAgICAgICAgICAgIHNlcnZlcl9sYWJlbDogdG9vbC5wcm92aWRlckRhdGEuc2VydmVyX2xhYmVsLFxuICAgICAgICAgICAgc2VydmVyX3VybDogc2VydmVyVXJsLFxuICAgICAgICAgICAgaGVhZGVyczogdG9vbC5wcm92aWRlckRhdGEuaGVhZGVycyxcbiAgICAgICAgICAgIGFsbG93ZWRfdG9vbHM6IHRvb2wucHJvdmlkZXJEYXRhLmFsbG93ZWRfdG9vbHMsXG4gICAgICAgICAgICByZXF1aXJlX2FwcHJvdmFsOiB0b29sLnByb3ZpZGVyRGF0YS5yZXF1aXJlX2FwcHJvdmFsLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBJbnZhbGlkIHRvb2wgdHlwZTogJHt0b29sfWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9vbC5tanMubWFwIiwiaW1wb3J0IHsgZ2V0VHJhbnNmZXJNZXNzYWdlLCBNb2RlbEJlaGF2aW9yRXJyb3IsIE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkLCBSdW5Db250ZXh0LCBSdW5Ub29sQXBwcm92YWxJdGVtLCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuaW1wb3J0IHsgUnVudGltZUV2ZW50RW1pdHRlciB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbmltcG9ydCB7IGlzWm9kT2JqZWN0LCB0b1NtYXJ0U3RyaW5nIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZS91dGlscyc7XG5pbXBvcnQgeyBkZWZpbmVSZWFsdGltZU91dHB1dEd1YXJkcmFpbCwgZ2V0UmVhbHRpbWVHdWFyZHJhaWxGZWVkYmFja01lc3NhZ2UsIGdldFJlYWx0aW1lR3VhcmRyYWlsU2V0dGluZ3MsIH0gZnJvbSBcIi4vZ3VhcmRyYWlsLm1qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVCYXNlLm1qc1wiO1xuaW1wb3J0IHsgT3BlbkFJUmVhbHRpbWVXZWJSVEMgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZVdlYlJ0Yy5tanNcIjtcbmltcG9ydCB7IE9wZW5BSVJlYWx0aW1lV2ViU29ja2V0IH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVXZWJzb2NrZXQubWpzXCI7XG5pbXBvcnQgeyBhcHByb3ZhbEl0ZW1Ub1JlYWx0aW1lQXBwcm92YWxJdGVtLCBnZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UsIGhhc1dlYlJUQ1N1cHBvcnQsIHJlYWx0aW1lQXBwcm92YWxJdGVtVG9BcHByb3ZhbEl0ZW0sIHVwZGF0ZVJlYWx0aW1lSGlzdG9yeSwgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IHsgaXNCYWNrZ3JvdW5kUmVzdWx0LCBpc1ZhbGlkUmVhbHRpbWVUb29sLCB0b1JlYWx0aW1lVG9vbERlZmluaXRpb24sIH0gZnJvbSBcIi4vdG9vbC5tanNcIjtcbmZ1bmN0aW9uIGNsb25lRGVmYXVsdFNlc3Npb25Db25maWcoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcpKTtcbn1cbi8qKlxuICogQSBgUmVhbHRpbWVTZXNzaW9uYCBpcyB0aGUgY29ybmVyc3RvbmUgb2YgYnVpbGRpbmcgVm9pY2UgQWdlbnRzLiBJdCdzIHRoZSBlcXVpdmFsZW50IG9mIGFcbiAqIFJ1bm5lciBpbiB0ZXh0LWJhc2VkIGFnZW50cyBleGNlcHQgdGhhdCBpdCBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgbXVsdGlwbGUgdHVybnMgYnkgbWFpbnRhaW5pbmcgYVxuICogY29ubmVjdGlvbiB3aXRoIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllci5cbiAqXG4gKiBUaGUgc2Vzc2lvbiBoYW5kbGVzIG1hbmFnaW5nIHRoZSBsb2NhbCBoaXN0b3J5IGNvcHksIGV4ZWN1dGVzIHRvb2xzLCBydW5zIG91dHB1dCBndWFyZHJhaWxzLCBhbmRcbiAqIGZhY2lsaXRhdGVzIGhhbmRvZmZzLlxuICpcbiAqIFRoZSBhY3R1YWwgYXVkaW8gaGFuZGxpbmcgYW5kIGdlbmVyYXRpb24gb2YgbW9kZWwgcmVzcG9uc2VzIGlzIGhhbmRsZWQgYnkgdGhlIHVuZGVybHlpbmdcbiAqIHRyYW5zcG9ydCBsYXllci4gQnkgZGVmYXVsdCBpZiB5b3UgYXJlIHVzaW5nIGEgYnJvd3NlciB3aXRoIFdlYlJUQyBzdXBwb3J0LCB0aGUgc2Vzc2lvbiB3aWxsXG4gKiBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgV2ViUlRDIHZlcnNpb24gb2YgdGhlIE9wZW5BSSBSZWFsdGltZSBBUEkuIE9uIHRoZSBzZXJ2ZXIgb3IgaWYgeW91IHBhc3NcbiAqIGB3ZWJzb2NrZXRgIGFzIHRoZSB0cmFuc3BvcnQgbGF5ZXIsIHRoZSBzZXNzaW9uIHdpbGwgZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB1c2luZyBXZWJTb2NrZXRzLlxuICpcbiAqIEluIHRoZSBjYXNlIG9mIFdlYlJUQywgaW4gdGhlIGJyb3dzZXIsIHRoZSB0cmFuc3BvcnQgbGF5ZXIgd2lsbCBhbHNvIGF1dG9tYXRpY2FsbHkgY29uZmlndXJlIHRoZVxuICogbWljcm9waG9uZSBhbmQgYXVkaW8gb3V0cHV0IHRvIGJlIHVzZWQgYnkgdGhlIHNlc3Npb24uXG4gKlxuICogWW91IGNhbiBhbHNvIGNyZWF0ZSBhIHRyYW5zcG9ydCBsYXllciBpbnN0YW5jZSB5b3Vyc2VsZiBhbmQgcGFzcyBpdCBpbiB0byBoYXZlIG1vcmUgY29udHJvbCBvdmVyXG4gKiB0aGUgY29uZmlndXJhdGlvbiBvciBldmVuIGV4dGVuZCB0aGUgZXhpc3Rpbmcgb25lcy4gQ2hlY2sgb3V0IHRoZSBgVHdpbGlvUmVhbHRpbWVUcmFuc3BvcnRMYXllcmBcbiAqIGZvciBhbiBleGFtcGxlIG9mIGhvdyB0byBjcmVhdGUgYSBjdXN0b20gdHJhbnNwb3J0IGxheWVyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY29uc3QgYWdlbnQgPSBuZXcgUmVhbHRpbWVBZ2VudCh7XG4gKiAgIG5hbWU6ICdteS1hZ2VudCcsXG4gKiAgIGluc3RydWN0aW9uczogJ1lvdSBhcmUgYSBoZWxwZnVsIGFzc2lzdGFudCB0aGF0IGNhbiBhbnN3ZXIgcXVlc3Rpb25zIGFuZCBoZWxwIHdpdGggdGFza3MuJyxcbiAqIH0pXG4gKlxuICogY29uc3Qgc2Vzc2lvbiA9IG5ldyBSZWFsdGltZVNlc3Npb24oYWdlbnQpO1xuICogc2Vzc2lvbi5jb25uZWN0KHtcbiAqICAgYXBpS2V5OiAneW91ci1hcGkta2V5JyxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWFsdGltZVNlc3Npb24gZXh0ZW5kcyBSdW50aW1lRXZlbnRFbWl0dGVyIHtcbiAgICBpbml0aWFsQWdlbnQ7XG4gICAgb3B0aW9ucztcbiAgICAjdHJhbnNwb3J0O1xuICAgICNjdXJyZW50QWdlbnQ7XG4gICAgI2N1cnJlbnRUb29scztcbiAgICAjY29udGV4dDtcbiAgICAjb3V0cHV0R3VhcmRyYWlscyA9IFtdO1xuICAgICNvdXRwdXRHdWFyZHJhaWxTZXR0aW5ncztcbiAgICAjdHJhbnNjcmliZWRUZXh0RGVsdGFzID0ge307XG4gICAgI2hpc3RvcnkgPSBbXTtcbiAgICAjc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YTtcbiAgICAjaW50ZXJydXB0ZWRCeUd1YXJkcmFpbCA9IHt9O1xuICAgICNhdWRpb1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAvLyBUcmFja3MgYWxsIE1DUCB0b29scyBmZXRjaGVkIHBlciBzZXJ2ZXIgbGFiZWwgKGZyb20gbWNwX2xpc3RfdG9vbHMgcmVzdWx0cykuXG4gICAgI2FsbE1jcFRvb2xzQnlTZXJ2ZXIgPSBuZXcgTWFwKCk7XG4gICAgLy8gVHJhY2tzIGN1cnJlbnRseSBhdmFpbGFibGUgTUNQIHRvb2xzIGJhc2VkIG9uIHRoZSBhY3RpdmUgYWdlbnQncyBjb25maWd1cmVkIHNlcnZlcl9sYWJlbHMuXG4gICAgI2F2YWlsYWJsZU1jcFRvb2xzID0gW107XG4gICAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIGxhc3QgZnVsbCBzZXNzaW9uIGNvbmZpZyB3ZSBzZW50IChjYW1lbENhc2Uga2V5cykgc28gdGhhdFxuICAgIC8vIHN1YnNlcXVlbnQgdXBkYXRlcyAoZS5nLiBkdXJpbmcgYWdlbnQgaGFuZG9mZnMpIHByZXNlcnZlIHByb3BlcnRpZXMgdGhhdCBhcmVcbiAgICAvLyBub3QgZXhwbGljaXRseSByZWNhbGN1bGF0ZWQgaGVyZSAoc3VjaCBhcyBpbnB1dEF1ZGlvRm9ybWF0LCBvdXRwdXRBdWRpb0Zvcm1hdCxcbiAgICAvLyBtb2RhbGl0aWVzLCBzcGVlZCwgdG9vbENob2ljZSwgdHVybkRldGVjdGlvbiwgZXRjLikuIFdpdGhvdXQgdGhpcywgdXBkYXRpbmdcbiAgICAvLyB0aGUgYWdlbnQgd291bGQgZHJvcCBhdWRpbyBmb3JtYXQgb3ZlcnJpZGVzIChlLmcuIGc3MTFfdWxhdykgYW5kIHJldmVydCB0b1xuICAgIC8vIHRyYW5zcG9ydCBkZWZhdWx0cyBjYXVzaW5nIGlzc3VlcyBmb3IgaW50ZWdyYXRpb25zIGxpa2UgVHdpbGlvLlxuICAgICNsYXN0U2Vzc2lvbkNvbmZpZyA9IGNsb25lRGVmYXVsdFNlc3Npb25Db25maWcoKTtcbiAgICAjYXV0b21hdGljYWxseVRyaWdnZXJSZXNwb25zZUZvck1jcFRvb2xDYWxscyA9IHRydWU7XG4gICAgY29uc3RydWN0b3IoaW5pdGlhbEFnZW50LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsQWdlbnQgPSBpbml0aWFsQWdlbnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIGlmICgodHlwZW9mIG9wdGlvbnMudHJhbnNwb3J0ID09PSAndW5kZWZpbmVkJyAmJiBoYXNXZWJSVENTdXBwb3J0KCkpIHx8XG4gICAgICAgICAgICBvcHRpb25zLnRyYW5zcG9ydCA9PT0gJ3dlYnJ0YycpIHtcbiAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydCA9IG5ldyBPcGVuQUlSZWFsdGltZVdlYlJUQygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMudHJhbnNwb3J0ID09PSAnd2Vic29ja2V0JyB8fFxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMudHJhbnNwb3J0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy4jdHJhbnNwb3J0ID0gbmV3IE9wZW5BSVJlYWx0aW1lV2ViU29ja2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiN0cmFuc3BvcnQgPSBvcHRpb25zLnRyYW5zcG9ydDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQgPSBpbml0aWFsQWdlbnQ7XG4gICAgICAgIHRoaXMuI2NvbnRleHQgPSBuZXcgUnVuQ29udGV4dCh7XG4gICAgICAgICAgICAuLi4ob3B0aW9ucy5jb250ZXh0ID8/IHt9KSxcbiAgICAgICAgICAgIGhpc3Rvcnk6IHRoaXMuI2hpc3RvcnksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiNvdXRwdXRHdWFyZHJhaWxzID0gKG9wdGlvbnMub3V0cHV0R3VhcmRyYWlscyA/PyBbXSkubWFwKGRlZmluZVJlYWx0aW1lT3V0cHV0R3VhcmRyYWlsKTtcbiAgICAgICAgdGhpcy4jb3V0cHV0R3VhcmRyYWlsU2V0dGluZ3MgPSBnZXRSZWFsdGltZUd1YXJkcmFpbFNldHRpbmdzKG9wdGlvbnMub3V0cHV0R3VhcmRyYWlsU2V0dGluZ3MgPz8ge30pO1xuICAgICAgICB0aGlzLiNzaG91bGRJbmNsdWRlQXVkaW9EYXRhID0gb3B0aW9ucy5oaXN0b3J5U3RvcmVBdWRpbyA/PyBmYWxzZTtcbiAgICAgICAgdGhpcy4jYXV0b21hdGljYWxseVRyaWdnZXJSZXNwb25zZUZvck1jcFRvb2xDYWxscyA9XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9tYXRpY2FsbHlUcmlnZ2VyUmVzcG9uc2VGb3JNY3BUb29sQ2FsbHMgPz8gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zcG9ydCBsYXllciB1c2VkIGJ5IHRoZSBzZXNzaW9uLlxuICAgICAqL1xuICAgIGdldCB0cmFuc3BvcnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiN0cmFuc3BvcnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGFnZW50IGluIHRoZSBzZXNzaW9uLlxuICAgICAqL1xuICAgIGdldCBjdXJyZW50QWdlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjdXJyZW50QWdlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHVzYWdlIG9mIHRoZSBzZXNzaW9uLlxuICAgICAqL1xuICAgIGdldCB1c2FnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2NvbnRleHQudXNhZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIHNlc3Npb24uXG4gICAgICovXG4gICAgZ2V0IGNvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjb250ZXh0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBzZXNzaW9uIGlzIG11dGVkLiBNaWdodCBiZSBgbnVsbGAgaWYgdGhlIHVuZGVybHlpbmcgdHJhbnNwb3J0IGxheWVyIGRvZXMgbm90XG4gICAgICogc3VwcG9ydCBtdXRpbmcuXG4gICAgICovXG4gICAgZ2V0IG11dGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdHJhbnNwb3J0Lm11dGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgaGlzdG9yeSBvZiB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBnZXQgaGlzdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2hpc3Rvcnk7XG4gICAgfVxuICAgIGdldCBhdmFpbGFibGVNY3BUb29scygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2F2YWlsYWJsZU1jcFRvb2xzO1xuICAgIH1cbiAgICBhc3luYyAjc2V0Q3VycmVudEFnZW50KGFnZW50KSB7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudCA9IGFnZW50O1xuICAgICAgICBjb25zdCBoYW5kb2ZmcyA9IGF3YWl0IHRoaXMuI2N1cnJlbnRBZ2VudC5nZXRFbmFibGVkSGFuZG9mZnModGhpcy4jY29udGV4dCk7XG4gICAgICAgIGNvbnN0IGhhbmRvZmZUb29scyA9IGhhbmRvZmZzLm1hcCgoaGFuZG9mZikgPT4gaGFuZG9mZi5nZXRIYW5kb2ZmQXNGdW5jdGlvblRvb2woKSk7XG4gICAgICAgIGNvbnN0IGFsbFRvb2xzID0gKGF3YWl0IHRoaXMuI2N1cnJlbnRBZ2VudC5nZXRBbGxUb29scyh0aGlzLiNjb250ZXh0KSlcbiAgICAgICAgICAgIC5maWx0ZXIoaXNWYWxpZFJlYWx0aW1lVG9vbClcbiAgICAgICAgICAgIC5tYXAodG9SZWFsdGltZVRvb2xEZWZpbml0aW9uKTtcbiAgICAgICAgY29uc3QgaGFzVG9vbHNEZWZpbmVkID0gdHlwZW9mIHRoaXMuI2N1cnJlbnRBZ2VudC50b29scyAhPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLiNjdXJyZW50QWdlbnQubWNwU2VydmVycyAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGNvbnN0IGhhc0hhbmRvZmZzRGVmaW5lZCA9IGhhbmRvZmZzLmxlbmd0aCA+IDA7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRUb29scyA9XG4gICAgICAgICAgICBoYXNUb29sc0RlZmluZWQgfHwgaGFzSGFuZG9mZnNEZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBbLi4uYWxsVG9vbHMsIC4uLmhhbmRvZmZUb29sc11cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gUmVjb21wdXRlIGN1cnJlbnRseSBhdmFpbGFibGUgTUNQIHRvb2xzIGJhc2VkIG9uIHRoZSBuZXcgYWdlbnQncyBhY3RpdmUgc2VydmVyIGxhYmVscy5cbiAgICAgICAgdGhpcy4jdXBkYXRlQXZhaWxhYmxlTWNwVG9vbHMoKTtcbiAgICB9XG4gICAgYXN5bmMgI2dldFNlc3Npb25Db25maWcoYWRkaXRpb25hbENvbmZpZyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGluc3RydWN0aW9ucyA9IGF3YWl0IHRoaXMuI2N1cnJlbnRBZ2VudC5nZXRTeXN0ZW1Qcm9tcHQodGhpcy4jY29udGV4dCk7XG4gICAgICAgIGNvbnN0IHRyYWNpbmdDb25maWcgPSB0aGlzLm9wdGlvbnNcbiAgICAgICAgICAgIC50cmFjaW5nRGlzYWJsZWRcbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiB0aGlzLm9wdGlvbnMud29ya2Zsb3dOYW1lXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtmbG93X25hbWU6IHRoaXMub3B0aW9ucy53b3JrZmxvd05hbWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogJ2F1dG8nO1xuICAgICAgICBpZiAodHJhY2luZ0NvbmZpZyAhPT0gbnVsbCAmJiB0cmFjaW5nQ29uZmlnICE9PSAnYXV0bycpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXBJZCkge1xuICAgICAgICAgICAgICAgIHRyYWNpbmdDb25maWcuZ3JvdXBfaWQgPSB0aGlzLm9wdGlvbnMuZ3JvdXBJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2VNZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgIHRyYWNpbmdDb25maWcubWV0YWRhdGEgPSB0aGlzLm9wdGlvbnMudHJhY2VNZXRhZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXBJZCB8fCB0aGlzLm9wdGlvbnMudHJhY2VNZXRhZGF0YSkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0luIG9yZGVyIHRvIHNldCB0cmFjZU1ldGFkYXRhIG9yIGEgZ3JvdXBJZCB5b3UgbmVlZCB0byBzcGVjaWZ5IGEgd29ya2Zsb3dOYW1lLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFN0YXJ0IGZyb20gYW55IHByZXZpb3VzbHktc2VudCBjb25maWcgKHNvIHdlIHByZXNlcnZlIHZhbHVlcyBsaWtlIGF1ZGlvIGZvcm1hdHMpXG4gICAgICAgIC8vIGFuZCB0aGUgb3JpZ2luYWwgb3B0aW9ucy5jb25maWcgcHJvdmlkZWQgYnkgdGhlIHVzZXIuIFByZWZlcmVuY2Ugb3JkZXI6XG4gICAgICAgIC8vIDEuIExhc3Qgc2Vzc2lvbiBjb25maWcgd2Ugc2VudCAoI2xhc3RTZXNzaW9uQ29uZmlnKVxuICAgICAgICAvLyAyLiBPcmlnaW5hbCBvcHRpb25zLmNvbmZpZ1xuICAgICAgICAvLyAzLiBBZGRpdGlvbmFsIGNvbmZpZyBwYXNzZWQgaW50byB0aGlzIGludm9jYXRpb24gKGV4cGxpY2l0IG92ZXJyaWRlcylcbiAgICAgICAgLy8gRmluYWxseSB3ZSBvdmVyd3JpdGUgZHluYW1pYyBmaWVsZHMgKGluc3RydWN0aW9ucywgdm9pY2UsIG1vZGVsLCB0b29scywgdHJhY2luZylcbiAgICAgICAgLy8gdG8gZW5zdXJlIHRoZXkgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgYWdlbnQgJiBydW50aW1lIHN0YXRlLlxuICAgICAgICBjb25zdCBiYXNlID0ge1xuICAgICAgICAgICAgLi4uKHRoaXMuI2xhc3RTZXNzaW9uQ29uZmlnID8/IHt9KSxcbiAgICAgICAgICAgIC4uLih0aGlzLm9wdGlvbnMuY29uZmlnID8/IHt9KSxcbiAgICAgICAgICAgIC4uLihhZGRpdGlvbmFsQ29uZmlnID8/IHt9KSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTm90ZTogQ2VydGFpbiBmaWVsZHMgY2Fubm90IGJlIHVwZGF0ZWQgYWZ0ZXIgdGhlIHNlc3Npb24gYmVnaW5zLCBzdWNoIGFzIHZvaWNlIGFuZCBtb2RlbFxuICAgICAgICBjb25zdCBmdWxsQ29uZmlnID0ge1xuICAgICAgICAgICAgLi4uYmFzZSxcbiAgICAgICAgICAgIGluc3RydWN0aW9ucyxcbiAgICAgICAgICAgIHZvaWNlOiB0aGlzLiNjdXJyZW50QWdlbnQudm9pY2UsXG4gICAgICAgICAgICBtb2RlbDogdGhpcy5vcHRpb25zLm1vZGVsLFxuICAgICAgICAgICAgdG9vbHM6IHRoaXMuI2N1cnJlbnRUb29scyxcbiAgICAgICAgICAgIHRyYWNpbmc6IHRyYWNpbmdDb25maWcsXG4gICAgICAgICAgICBwcm9tcHQ6IHR5cGVvZiB0aGlzLiNjdXJyZW50QWdlbnQucHJvbXB0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLiNjdXJyZW50QWdlbnQucHJvbXB0KHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudClcbiAgICAgICAgICAgICAgICA6IHRoaXMuI2N1cnJlbnRBZ2VudC5wcm9tcHQsXG4gICAgICAgIH07XG4gICAgICAgIC8vIFVwZGF0ZSBvdXIgY2FjaGUgc28gc3Vic2VxdWVudCB1cGRhdGVzIGluaGVyaXQgdGhlIGZ1bGwgc2V0IGluY2x1ZGluZyBhbnlcbiAgICAgICAgLy8gZHluYW1pYyBmaWVsZHMgd2UganVzdCBvdmVyd3JvdGUuXG4gICAgICAgIHRoaXMuI2xhc3RTZXNzaW9uQ29uZmlnID0gZnVsbENvbmZpZztcbiAgICAgICAgcmV0dXJuIGZ1bGxDb25maWc7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZUFnZW50KG5ld0FnZW50KSB7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9oYW5kb2ZmJywgdGhpcy4jY29udGV4dCwgbmV3QWdlbnQpO1xuICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X2hhbmRvZmYnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQsIG5ld0FnZW50KTtcbiAgICAgICAgYXdhaXQgdGhpcy4jc2V0Q3VycmVudEFnZW50KG5ld0FnZW50KTtcbiAgICAgICAgYXdhaXQgdGhpcy4jdHJhbnNwb3J0LnVwZGF0ZVNlc3Npb25Db25maWcoYXdhaXQgdGhpcy4jZ2V0U2Vzc2lvbkNvbmZpZygpKTtcbiAgICAgICAgcmV0dXJuIG5ld0FnZW50O1xuICAgIH1cbiAgICBhc3luYyAjaGFuZGxlSGFuZG9mZih0b29sQ2FsbCwgaGFuZG9mZikge1xuICAgICAgICBjb25zdCBuZXdBZ2VudCA9IChhd2FpdCBoYW5kb2ZmLm9uSW52b2tlSGFuZG9mZih0aGlzLiNjb250ZXh0LCB0b29sQ2FsbC5hcmd1bWVudHMpKTtcbiAgICAgICAgdGhpcy4jY3VycmVudEFnZW50LmVtaXQoJ2FnZW50X2hhbmRvZmYnLCB0aGlzLiNjb250ZXh0LCBuZXdBZ2VudCk7XG4gICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfaGFuZG9mZicsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwgbmV3QWdlbnQpO1xuICAgICAgICAvLyB1cGRhdGUgc2Vzc2lvbiB3aXRoIG5ldyBhZ2VudFxuICAgICAgICBhd2FpdCB0aGlzLiNzZXRDdXJyZW50QWdlbnQobmV3QWdlbnQpO1xuICAgICAgICBhd2FpdCB0aGlzLiN0cmFuc3BvcnQudXBkYXRlU2Vzc2lvbkNvbmZpZyhhd2FpdCB0aGlzLiNnZXRTZXNzaW9uQ29uZmlnKCkpO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBnZXRUcmFuc2Zlck1lc3NhZ2UobmV3QWdlbnQpO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQuc2VuZEZ1bmN0aW9uQ2FsbE91dHB1dCh0b29sQ2FsbCwgb3V0cHV0LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ld0FnZW50O1xuICAgIH1cbiAgICBhc3luYyAjaGFuZGxlRnVuY3Rpb25Ub29sQ2FsbCh0b29sQ2FsbCwgdG9vbCkge1xuICAgICAgICB0aGlzLiNjb250ZXh0LmNvbnRleHQuaGlzdG9yeSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy4jaGlzdG9yeSkpOyAvLyBkZWVwIGNvcHkgb2YgdGhlIGhpc3RvcnlcbiAgICAgICAgbGV0IHBhcnNlZEFyZ3MgPSB0b29sQ2FsbC5hcmd1bWVudHM7XG4gICAgICAgIGlmICh0b29sLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGlmIChpc1pvZE9iamVjdCh0b29sLnBhcmFtZXRlcnMpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkQXJncyA9IHRvb2wucGFyYW1ldGVycy5wYXJzZShwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlZEFyZ3MgPSBKU09OLnBhcnNlKHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5lZWRzQXBwcm92YWwgPSBhd2FpdCB0b29sLm5lZWRzQXBwcm92YWwodGhpcy4jY29udGV4dCwgcGFyc2VkQXJncywgdG9vbENhbGwuY2FsbElkKTtcbiAgICAgICAgaWYgKG5lZWRzQXBwcm92YWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsID0gdGhpcy5jb250ZXh0LmlzVG9vbEFwcHJvdmVkKHtcbiAgICAgICAgICAgICAgICB0b29sTmFtZTogdG9vbC5uYW1lLFxuICAgICAgICAgICAgICAgIGNhbGxJZDogdG9vbENhbGwuY2FsbElkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoYXBwcm92YWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdhZ2VudF90b29sX3N0YXJ0JywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB0b29sLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF90b29sX3N0YXJ0JywgdGhpcy4jY29udGV4dCwgdG9vbCwge1xuICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSAnVG9vbCBleGVjdXRpb24gd2FzIG5vdCBhcHByb3ZlZC4nO1xuICAgICAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydC5zZW5kRnVuY3Rpb25DYWxsT3V0cHV0KHRvb2xDYWxsLCByZXN1bHQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfdG9vbF9lbmQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQsIHRvb2wsIHJlc3VsdCwgeyB0b29sQ2FsbCB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9lbmQnLCB0aGlzLiNjb250ZXh0LCB0b29sLCByZXN1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFwcHJvdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgndG9vbF9hcHByb3ZhbF9yZXF1ZXN0ZWQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX2FwcHJvdmFsJyxcbiAgICAgICAgICAgICAgICAgICAgdG9vbCxcbiAgICAgICAgICAgICAgICAgICAgYXBwcm92YWxJdGVtOiBuZXcgUnVuVG9vbEFwcHJvdmFsSXRlbSh0b29sQ2FsbCwgdGhpcy4jY3VycmVudEFnZW50KSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCdhZ2VudF90b29sX3N0YXJ0JywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB0b29sLCB7XG4gICAgICAgICAgICB0b29sQ2FsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF90b29sX3N0YXJ0JywgdGhpcy4jY29udGV4dCwgdG9vbCwge1xuICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiNjb250ZXh0LmNvbnRleHQuaGlzdG9yeSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy4jaGlzdG9yeSkpOyAvLyBkZWVwIGNvcHkgb2YgdGhlIGhpc3RvcnlcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdG9vbC5pbnZva2UodGhpcy4jY29udGV4dCwgdG9vbENhbGwuYXJndW1lbnRzLCB7XG4gICAgICAgICAgICB0b29sQ2FsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBzdHJpbmdSZXN1bHQ7XG4gICAgICAgIGlmIChpc0JhY2tncm91bmRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgZ2VuZXJhdGUgYSBuZXcgcmVzcG9uc2UsIGp1c3Qgc2VuZCB0aGUgcmVzdWx0XG4gICAgICAgICAgICBzdHJpbmdSZXN1bHQgPSB0b1NtYXJ0U3RyaW5nKHJlc3VsdC5jb250ZW50KTtcbiAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydC5zZW5kRnVuY3Rpb25DYWxsT3V0cHV0KHRvb2xDYWxsLCBzdHJpbmdSZXN1bHQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZ1Jlc3VsdCA9IHRvU21hcnRTdHJpbmcocmVzdWx0KTtcbiAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydC5zZW5kRnVuY3Rpb25DYWxsT3V0cHV0KHRvb2xDYWxsLCBzdHJpbmdSZXN1bHQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfdG9vbF9lbmQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQsIHRvb2wsIHN0cmluZ1Jlc3VsdCwgeyB0b29sQ2FsbCB9KTtcbiAgICAgICAgdGhpcy4jY3VycmVudEFnZW50LmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgdGhpcy4jY29udGV4dCwgdG9vbCwgc3RyaW5nUmVzdWx0LCB7IHRvb2xDYWxsIH0pO1xuICAgIH1cbiAgICBhc3luYyAjaGFuZGxlRnVuY3Rpb25DYWxsKHRvb2xDYWxsKSB7XG4gICAgICAgIGNvbnN0IGVuYWJsZWRIYW5kb2ZmcyA9IGF3YWl0IHRoaXMuI2N1cnJlbnRBZ2VudC5nZXRFbmFibGVkSGFuZG9mZnModGhpcy4jY29udGV4dCk7XG4gICAgICAgIGNvbnN0IGhhbmRvZmZNYXAgPSBuZXcgTWFwKGVuYWJsZWRIYW5kb2Zmcy5tYXAoKGhhbmRvZmYpID0+IFtoYW5kb2ZmLnRvb2xOYW1lLCBoYW5kb2ZmXSkpO1xuICAgICAgICBjb25zdCBhbGxUb29scyA9IGF3YWl0IHRoaXMuI2N1cnJlbnRBZ2VudC5nZXRBbGxUb29scyh0aGlzLiNjb250ZXh0KTtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25Ub29sTWFwID0gbmV3IE1hcChhbGxUb29scy5tYXAoKHRvb2wpID0+IFt0b29sLm5hbWUsIHRvb2xdKSk7XG4gICAgICAgIGNvbnN0IHBvc3NpYmxlSGFuZG9mZiA9IGhhbmRvZmZNYXAuZ2V0KHRvb2xDYWxsLm5hbWUpO1xuICAgICAgICBpZiAocG9zc2libGVIYW5kb2ZmKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNoYW5kbGVIYW5kb2ZmKHRvb2xDYWxsLCBwb3NzaWJsZUhhbmRvZmYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZnVuY3Rpb25Ub29sID0gZnVuY3Rpb25Ub29sTWFwLmdldCh0b29sQ2FsbC5uYW1lKTtcbiAgICAgICAgICAgIGlmIChmdW5jdGlvblRvb2wgJiYgZnVuY3Rpb25Ub29sLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNoYW5kbGVGdW5jdGlvblRvb2xDYWxsKHRvb2xDYWxsLCBmdW5jdGlvblRvb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcihgVG9vbCAke3Rvb2xDYWxsLm5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jICNydW5PdXRwdXRHdWFyZHJhaWxzKG91dHB1dCwgcmVzcG9uc2VJZCwgaXRlbUlkKSB7XG4gICAgICAgIGlmICh0aGlzLiNvdXRwdXRHdWFyZHJhaWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGd1YXJkcmFpbEFyZ3MgPSB7XG4gICAgICAgICAgICBhZ2VudDogdGhpcy4jY3VycmVudEFnZW50LFxuICAgICAgICAgICAgYWdlbnRPdXRwdXQ6IG91dHB1dCxcbiAgICAgICAgICAgIGNvbnRleHQ6IHRoaXMuI2NvbnRleHQsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLiNvdXRwdXRHdWFyZHJhaWxzLm1hcCgoZ3VhcmRyYWlsKSA9PiBndWFyZHJhaWwucnVuKGd1YXJkcmFpbEFyZ3MpKSk7XG4gICAgICAgIGNvbnN0IGZpcnN0VHJpcHdpcmVUcmlnZ2VyZWQgPSByZXN1bHRzLmZpbmQoKHJlc3VsdCkgPT4gcmVzdWx0Lm91dHB1dC50cmlwd2lyZVRyaWdnZXJlZCk7XG4gICAgICAgIGlmIChmaXJzdFRyaXB3aXJlVHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGVuc3VyZXMgdGhhdCBpZiBvbmUgZ3VhcmRyYWlsIGFscmVhZHkgdHJpcHMgYW5kIHdlIGFyZSBpbiB0aGUgbWlkZGxlIG9mIGFub3RoZXJcbiAgICAgICAgICAgIC8vIGd1YXJkcmFpbCBydW4sIHdlIGRvbid0IHRyaXAgYWdhaW5cbiAgICAgICAgICAgIGlmICh0aGlzLiNpbnRlcnJ1cHRlZEJ5R3VhcmRyYWlsW3Jlc3BvbnNlSWRdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4jaW50ZXJydXB0ZWRCeUd1YXJkcmFpbFtyZXNwb25zZUlkXSA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZChgT3V0cHV0IGd1YXJkcmFpbCB0cmlnZ2VyZWQ6ICR7SlNPTi5zdHJpbmdpZnkoZmlyc3RUcmlwd2lyZVRyaWdnZXJlZC5vdXRwdXQub3V0cHV0SW5mbyl9YCwgZmlyc3RUcmlwd2lyZVRyaWdnZXJlZCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2d1YXJkcmFpbF90cmlwcGVkJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCBlcnJvciwge1xuICAgICAgICAgICAgICAgIGl0ZW1JZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5pbnRlcnJ1cHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGZlZWRiYWNrVGV4dCA9IGdldFJlYWx0aW1lR3VhcmRyYWlsRmVlZGJhY2tNZXNzYWdlKGZpcnN0VHJpcHdpcmVUcmlnZ2VyZWQpO1xuICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShmZWVkYmFja1RleHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgICNzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCcqJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3RyYW5zcG9ydF9ldmVudCcsIGV2ZW50KTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBjb21wbGV0ZWQgdXNlciB0cmFuc2NyaXB0aW9uIGV2ZW50c1xuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5pbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uLmNvbXBsZXRlZCcpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wbGV0ZWRFdmVudCA9IGV2ZW50O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNoaXN0b3J5ID0gdXBkYXRlUmVhbHRpbWVIaXN0b3J5KHRoaXMuI2hpc3RvcnksIGNvbXBsZXRlZEV2ZW50LCB0aGlzLiNzaG91bGRJbmNsdWRlQXVkaW9EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSB0aGlzLiNoaXN0b3J5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2hpc3RvcnlfdXBkYXRlZCcsIHRoaXMuI2hpc3RvcnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCdtY3BfdG9vbHNfbGlzdGVkJywgKHsgc2VydmVyTGFiZWwsIHRvb2xzIH0pID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jYWxsTWNwVG9vbHNCeVNlcnZlci5zZXQoc2VydmVyTGFiZWwsIHRvb2xzID8/IFtdKTtcbiAgICAgICAgICAgICAgICB0aGlzLiN1cGRhdGVBdmFpbGFibGVNY3BUb29scygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7IHR5cGU6ICdlcnJvcicsIGVycm9yOiBlcnIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2F1ZGlvJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuI2F1ZGlvU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2F1ZGlvU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdhdWRpb19zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvJywgZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCd0dXJuX3N0YXJ0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNhdWRpb1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfc3RhcnQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQpO1xuICAgICAgICAgICAgdGhpcy4jY3VycmVudEFnZW50LmVtaXQoJ2FnZW50X3N0YXJ0JywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbigndHVybl9kb25lJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZXZlbnQucmVzcG9uc2Uub3V0cHV0W2V2ZW50LnJlc3BvbnNlLm91dHB1dC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGNvbnN0IHRleHRPdXRwdXQgPSBnZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UoaXRlbSkgPz8gJyc7XG4gICAgICAgICAgICBjb25zdCBpdGVtSWQgPSBpdGVtPy5pZCA/PyAnJztcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfZW5kJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB0ZXh0T3V0cHV0KTtcbiAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9lbmQnLCB0aGlzLiNjb250ZXh0LCB0ZXh0T3V0cHV0KTtcbiAgICAgICAgICAgIHRoaXMuI3J1bk91dHB1dEd1YXJkcmFpbHModGV4dE91dHB1dCwgZXZlbnQucmVzcG9uc2UuaWQsIGl0ZW1JZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2F1ZGlvX2RvbmUnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy4jYXVkaW9TdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jYXVkaW9TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvX3N0b3BwZWQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGxhc3RSdW5JbmRleCA9IDA7XG4gICAgICAgIGxldCBsYXN0SXRlbUlkO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2F1ZGlvX3RyYW5zY3JpcHRfZGVsdGEnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBldmVudC5kZWx0YTtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtSWQgPSBldmVudC5pdGVtSWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VJZCA9IGV2ZW50LnJlc3BvbnNlSWQ7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RJdGVtSWQgIT09IGl0ZW1JZCkge1xuICAgICAgICAgICAgICAgICAgICBsYXN0SXRlbUlkID0gaXRlbUlkO1xuICAgICAgICAgICAgICAgICAgICBsYXN0UnVuSW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VGV4dCA9IHRoaXMuI3RyYW5zY3JpYmVkVGV4dERlbHRhc1tpdGVtSWRdID8/ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RleHQgPSBjdXJyZW50VGV4dCArIGRlbHRhO1xuICAgICAgICAgICAgICAgIHRoaXMuI3RyYW5zY3JpYmVkVGV4dERlbHRhc1tpdGVtSWRdID0gbmV3VGV4dDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jb3V0cHV0R3VhcmRyYWlsU2V0dGluZ3MuZGVib3VuY2VUZXh0TGVuZ3RoIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1J1bkluZGV4ID0gTWF0aC5mbG9vcihuZXdUZXh0Lmxlbmd0aCAvIHRoaXMuI291dHB1dEd1YXJkcmFpbFNldHRpbmdzLmRlYm91bmNlVGV4dExlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1J1bkluZGV4ID4gbGFzdFJ1bkluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RSdW5JbmRleCA9IG5ld1J1bkluZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBjYW5jZWwgZXhpc3RpbmcgcnVucyBiZWNhdXNlIHdlIHdhbnQgdGhlIGZpcnN0IG9uZSB0byBmYWlsIHRvIGZhaWxcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHRyYW5zcG9ydCBsYXllciBzaG91bGQgdXBvbiBmYWlsdXJlIGhhbmRsZSB0aGUgaW50ZXJydXB0aW9uIGFuZCBzdG9wIHRoZSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAvLyBmcm9tIGdlbmVyYXRpbmcgZnVydGhlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNydW5PdXRwdXRHdWFyZHJhaWxzKG5ld1RleHQsIHJlc3BvbnNlSWQsIGl0ZW1JZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2l0ZW1fdXBkYXRlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTmV3ID0gIXRoaXMuI2hpc3Rvcnkuc29tZSgoaXRlbSkgPT4gaXRlbS5pdGVtSWQgPT09IGV2ZW50Lml0ZW1JZCk7XG4gICAgICAgICAgICAgICAgdGhpcy4jaGlzdG9yeSA9IHVwZGF0ZVJlYWx0aW1lSGlzdG9yeSh0aGlzLiNoaXN0b3J5LCBldmVudCwgdGhpcy4jc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSB0aGlzLiNoaXN0b3J5O1xuICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRlZEl0ZW0gPSB0aGlzLiNoaXN0b3J5LmZpbmQoKGl0ZW0pID0+IGl0ZW0uaXRlbUlkID09PSBldmVudC5pdGVtSWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRkZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2hpc3RvcnlfYWRkZWQnLCBhZGRlZEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaGlzdG9yeV91cGRhdGVkJywgdGhpcy4jaGlzdG9yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignaXRlbV9kZWxldGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2hpc3RvcnkgPSB0aGlzLiNoaXN0b3J5LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pdGVtSWQgIT09IGV2ZW50Lml0ZW1JZCk7XG4gICAgICAgICAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSB0aGlzLiNoaXN0b3J5O1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaGlzdG9yeV91cGRhdGVkJywgdGhpcy4jaGlzdG9yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignZnVuY3Rpb25fY2FsbCcsIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNoYW5kbGVGdW5jdGlvbkNhbGwoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBoYW5kbGluZyBmdW5jdGlvbiBjYWxsJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCd1c2FnZV91cGRhdGUnLCAodXNhZ2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI2NvbnRleHQudXNhZ2UuYWRkKHVzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignYXVkaW9faW50ZXJydXB0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy4jYXVkaW9TdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jYXVkaW9TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvX2ludGVycnVwdGVkJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ21jcF90b29sX2NhbGxfY29tcGxldGVkJywgKHRvb2xDYWxsKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ21jcF90b29sX2NhbGxfY29tcGxldGVkJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB0b29sQ2FsbCk7XG4gICAgICAgICAgICBpZiAodGhpcy4jYXV0b21hdGljYWxseVRyaWdnZXJSZXNwb25zZUZvck1jcFRvb2xDYWxscykge1xuICAgICAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydC5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UuY3JlYXRlJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignbWNwX2FwcHJvdmFsX3JlcXVlc3QnLCAoYXBwcm92YWxSZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3Rvb2xfYXBwcm92YWxfcmVxdWVzdGVkJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ21jcF9hcHByb3ZhbF9yZXF1ZXN0JyxcbiAgICAgICAgICAgICAgICBhcHByb3ZhbEl0ZW06IHJlYWx0aW1lQXBwcm92YWxJdGVtVG9BcHByb3ZhbEl0ZW0odGhpcy4jY3VycmVudEFnZW50LCBhcHByb3ZhbFJlcXVlc3QpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvbXB1dGVzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIE1DUCB0b29scyBiYXNlZCBvbiB0aGUgY3VycmVudCBhZ2VudCdzIGFjdGl2ZVxuICAgICAqIE1DUCBzZXJ2ZXIgY29uZmlndXJhdGlvbnMgYW5kIHRoZSBjYWNoZWQgcGVyLXNlcnZlciB0b29sIGxpc3RpbmdzLiBFbWl0c1xuICAgICAqIGBtY3BfdG9vbHNfY2hhbmdlZGAgaWYgdGhlIHNldCBjaGFuZ2VkLlxuICAgICAqL1xuICAgICN1cGRhdGVBdmFpbGFibGVNY3BUb29scygpIHtcbiAgICAgICAgLy8gQ29sbGVjdCBhY3RpdmUgTUNQIHNlcnZlciBsYWJlbHMgYW5kIG9wdGlvbmFsIGFsbG93ZWQgZmlsdGVycyBmcm9tIHRoZSBjdXJyZW50IGFnZW50XG4gICAgICAgIGNvbnN0IGFjdGl2ZU1jcENvbmZpZ3MgPSB0aGlzLiNjdXJyZW50VG9vbHM/LmZpbHRlcigodCkgPT4gdC50eXBlID09PSAnbWNwJyk7XG4gICAgICAgIGNvbnN0IGFsbG93ZWRGcm9tQ29uZmlnID0gKGNmZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWxsb3dlZCA9IGNmZy5hbGxvd2VkX3Rvb2xzO1xuICAgICAgICAgICAgaWYgKCFhbGxvd2VkKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhbGxvd2VkKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsb3dlZDtcbiAgICAgICAgICAgIGlmIChhbGxvd2VkICYmIEFycmF5LmlzQXJyYXkoYWxsb3dlZC50b29sX25hbWVzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsb3dlZC50b29sX25hbWVzO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGVkdXBCeU5hbWUgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgY2ZnIG9mIGFjdGl2ZU1jcENvbmZpZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvb2xzID0gdGhpcy4jYWxsTWNwVG9vbHNCeVNlcnZlci5nZXQoY2ZnLnNlcnZlcl9sYWJlbCkgPz8gW107XG4gICAgICAgICAgICBjb25zdCBhbGxvd2VkID0gYWxsb3dlZEZyb21Db25maWcoY2ZnKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9vbCBvZiB0b29scykge1xuICAgICAgICAgICAgICAgIGlmIChhbGxvd2VkICYmICFhbGxvd2VkLmluY2x1ZGVzKHRvb2wubmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmICghZGVkdXBCeU5hbWUuaGFzKHRvb2wubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVkdXBCeU5hbWUuc2V0KHRvb2wubmFtZSwgdG9vbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHQgPSBBcnJheS5mcm9tKGRlZHVwQnlOYW1lLnZhbHVlcygpKTtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuI2F2YWlsYWJsZU1jcFRvb2xzO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoIHx8XG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcmV2Lm1hcCgodCkgPT4gdC5uYW1lKS5zb3J0KCkpICE9PVxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG5leHQubWFwKCh0KSA9PiB0Lm5hbWUpLnNvcnQoKSk7XG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLiNhdmFpbGFibGVNY3BUb29scyA9IG5leHQ7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ21jcF90b29sc19jaGFuZ2VkJywgdGhpcy4jYXZhaWxhYmxlTWNwVG9vbHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbm5lY3QgdG8gdGhlIHNlc3Npb24uIFRoaXMgd2lsbCBlc3RhYmxpc2ggdGhlIGNvbm5lY3Rpb24gdG8gdGhlIHVuZGVybHlpbmcgdHJhbnNwb3J0IGxheWVyXG4gICAgICogYW5kIHN0YXJ0IHRoZSBzZXNzaW9uLlxuICAgICAqXG4gICAgICogQWZ0ZXIgY29ubmVjdGluZywgdGhlIHNlc3Npb24gd2lsbCBhbHNvIGVtaXQgYSBgaGlzdG9yeV91cGRhdGVkYCBldmVudCB3aXRoIGFuIGVtcHR5IGhpc3RvcnkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0KG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbWFrZXMgc3VyZSB0aGUgY3VycmVudCBhZ2VudCBpcyBjb3JyZWN0bHkgc2V0IGFuZCBsb2FkcyB0aGUgdG9vbHNcbiAgICAgICAgYXdhaXQgdGhpcy4jc2V0Q3VycmVudEFnZW50KHRoaXMuaW5pdGlhbEFnZW50KTtcbiAgICAgICAgdGhpcy4jc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgYXdhaXQgdGhpcy4jdHJhbnNwb3J0LmNvbm5lY3Qoe1xuICAgICAgICAgICAgYXBpS2V5OiBvcHRpb25zLmFwaUtleSA/PyB0aGlzLm9wdGlvbnMuYXBpS2V5LFxuICAgICAgICAgICAgbW9kZWw6IHRoaXMub3B0aW9ucy5tb2RlbCxcbiAgICAgICAgICAgIHVybDogb3B0aW9ucy51cmwsXG4gICAgICAgICAgICBpbml0aWFsU2Vzc2lvbkNvbmZpZzogYXdhaXQgdGhpcy4jZ2V0U2Vzc2lvbkNvbmZpZyh0aGlzLm9wdGlvbnMuY29uZmlnKSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgY2FjaGVkIGxhc3RTZXNzaW9uQ29uZmlnIGluY2x1ZGVzIGV2ZXJ5dGhpbmcgcGFzc2VkIGFzIHRoZSBpbml0aWFsIHNlc3Npb24gY29uZmlnXG4gICAgICAgIC8vICh0aGUgY2FsbCBhYm92ZSBhbHJlYWR5IHNldCBpdCB2aWEgI2dldFNlc3Npb25Db25maWcgYnV0IGluIGNhc2UgYWRkaXRpb25hbCBvdmVycmlkZXMgd2VyZVxuICAgICAgICAvLyBwYXNzZWQgZGlyZWN0bHkgaGVyZSBpbiB0aGUgZnV0dXJlIHdlIGNvdWxkIG1lcmdlIHRoZW0pLiBGb3Igbm93IGl0J3MgYSBuby1vcC5cbiAgICAgICAgdGhpcy4jaGlzdG9yeSA9IFtdO1xuICAgICAgICB0aGlzLmVtaXQoJ2hpc3RvcnlfdXBkYXRlZCcsIHRoaXMuI2hpc3RvcnkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGhpc3Rvcnkgb2YgdGhlIHNlc3Npb24uXG4gICAgICogQHBhcmFtIG5ld0hpc3RvcnkgLSBUaGUgbmV3IGhpc3RvcnkgdG8gc2V0LlxuICAgICAqL1xuICAgIHVwZGF0ZUhpc3RvcnkobmV3SGlzdG9yeSkge1xuICAgICAgICBsZXQgdXBkYXRlZEhpc3Rvcnk7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3SGlzdG9yeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdXBkYXRlZEhpc3RvcnkgPSBuZXdIaXN0b3J5KHRoaXMuI2hpc3RvcnkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlZEhpc3RvcnkgPSBuZXdIaXN0b3J5O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5yZXNldEhpc3RvcnkodGhpcy4jaGlzdG9yeSwgdXBkYXRlZEhpc3RvcnkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgc2Vzc2lvbi5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIG90aGVyRXZlbnREYXRhIC0gQWRkaXRpb25hbCBldmVudCBkYXRhIHRvIHNlbmQuXG4gICAgICovXG4gICAgc2VuZE1lc3NhZ2UobWVzc2FnZSwgb3RoZXJFdmVudERhdGEgPSB7fSkge1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQuc2VuZE1lc3NhZ2UobWVzc2FnZSwgb3RoZXJFdmVudERhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgaW1hZ2UgdG8gdGhlIHNlc3Npb25cbiAgICAgKiBAcGFyYW0gaW1hZ2UgLSBUaGUgaW1hZ2UgdG8gYWRkLlxuICAgICAqL1xuICAgIGFkZEltYWdlKGltYWdlLCB7IHRyaWdnZXJSZXNwb25zZSA9IHRydWUgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5hZGRJbWFnZShpbWFnZSwgeyB0cmlnZ2VyUmVzcG9uc2UgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11dGUgdGhlIHNlc3Npb24uXG4gICAgICogQHBhcmFtIG11dGVkIC0gV2hldGhlciB0byBtdXRlIHRoZSBzZXNzaW9uLlxuICAgICAqL1xuICAgIG11dGUobXV0ZWQpIHtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm11dGUobXV0ZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0IGZyb20gdGhlIHNlc3Npb24uXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuI2ludGVycnVwdGVkQnlHdWFyZHJhaWwgPSB7fTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgYXVkaW8gdG8gdGhlIHNlc3Npb24uXG4gICAgICogQHBhcmFtIGF1ZGlvIC0gVGhlIGF1ZGlvIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY29tbWl0IC0gV2hldGhlciB0byBmaW5pc2ggdGhlIHR1cm4gd2l0aCB0aGlzIGF1ZGlvLlxuICAgICAqL1xuICAgIHNlbmRBdWRpbyhhdWRpbywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5zZW5kQXVkaW8oYXVkaW8sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnRlcnJ1cHQgdGhlIHNlc3Npb24gYXJ0aWZpY2lhbGx5IGZvciBleGFtcGxlIGlmIHlvdSB3YW50IHRvIGJ1aWxkIGEgXCJzdG9wIHRhbGtpbmdcIlxuICAgICAqIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBpbnRlcnJ1cHQoKSB7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5pbnRlcnJ1cHQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwcm92ZSBhIHRvb2wgY2FsbC4gVGhpcyB3aWxsIGFsc28gdHJpZ2dlciB0aGUgdG9vbCBjYWxsIHRvIHRoZSBhZ2VudC5cbiAgICAgKiBAcGFyYW0gYXBwcm92YWxJdGVtIC0gVGhlIGFwcHJvdmFsIGl0ZW0gdG8gYXBwcm92ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hbHdheXNBcHByb3ZlIC0gV2hldGhlciB0byBhbHdheXMgYXBwcm92ZSB0aGUgdG9vbCBjYWxsLlxuICAgICAqL1xuICAgIGFzeW5jIGFwcHJvdmUoYXBwcm92YWxJdGVtLCBvcHRpb25zID0geyBhbHdheXNBcHByb3ZlOiBmYWxzZSB9KSB7XG4gICAgICAgIHRoaXMuI2NvbnRleHQuYXBwcm92ZVRvb2woYXBwcm92YWxJdGVtLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdG9vbCA9IHRoaXMuI2N1cnJlbnRBZ2VudC50b29scy5maW5kKCh0b29sKSA9PiB0b29sLm5hbWUgPT09IGFwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWUpO1xuICAgICAgICBpZiAodG9vbCAmJlxuICAgICAgICAgICAgdG9vbC50eXBlID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBhcHByb3ZhbEl0ZW0ucmF3SXRlbS50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2hhbmRsZUZ1bmN0aW9uVG9vbENhbGwoYXBwcm92YWxJdGVtLnJhd0l0ZW0sIHRvb2wpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFwcHJvdmFsSXRlbS5yYXdJdGVtLnR5cGUgPT09ICdob3N0ZWRfdG9vbF9jYWxsJykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWx3YXlzQXBwcm92ZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCdBbHdheXMgYXBwcm92aW5nIE1DUCB0b29scyBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgdGhlIGFsbG93ZWQgdG9vbHMgY29uZmlndXJhdGlvbiBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWNwQXBwcm92YWxSZXF1ZXN0ID0gYXBwcm92YWxJdGVtVG9SZWFsdGltZUFwcHJvdmFsSXRlbShhcHByb3ZhbEl0ZW0pO1xuICAgICAgICAgICAgdGhpcy4jdHJhbnNwb3J0LnNlbmRNY3BSZXNwb25zZShtY3BBcHByb3ZhbFJlcXVlc3QsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcihgVG9vbCAke2FwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlamVjdCBhIHRvb2wgY2FsbC4gVGhpcyB3aWxsIGFsc28gdHJpZ2dlciB0aGUgdG9vbCBjYWxsIHRvIHRoZSBhZ2VudC5cbiAgICAgKiBAcGFyYW0gYXBwcm92YWxJdGVtIC0gVGhlIGFwcHJvdmFsIGl0ZW0gdG8gcmVqZWN0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmFsd2F5c1JlamVjdCAtIFdoZXRoZXIgdG8gYWx3YXlzIHJlamVjdCB0aGUgdG9vbCBjYWxsLlxuICAgICAqL1xuICAgIGFzeW5jIHJlamVjdChhcHByb3ZhbEl0ZW0sIG9wdGlvbnMgPSB7IGFsd2F5c1JlamVjdDogZmFsc2UgfSkge1xuICAgICAgICB0aGlzLiNjb250ZXh0LnJlamVjdFRvb2woYXBwcm92YWxJdGVtLCBvcHRpb25zKTtcbiAgICAgICAgLy8gd2Ugc3RpbGwgbmVlZCB0byBzaW11bGF0ZSBhIHRvb2wgY2FsbCB0byB0aGUgYWdlbnQgdG8gbGV0IHRoZSBhZ2VudCBrbm93XG4gICAgICAgIGNvbnN0IHRvb2wgPSB0aGlzLiNjdXJyZW50QWdlbnQudG9vbHMuZmluZCgodG9vbCkgPT4gdG9vbC5uYW1lID09PSBhcHByb3ZhbEl0ZW0ucmF3SXRlbS5uYW1lKTtcbiAgICAgICAgaWYgKHRvb2wgJiZcbiAgICAgICAgICAgIHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgYXBwcm92YWxJdGVtLnJhd0l0ZW0udHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNoYW5kbGVGdW5jdGlvblRvb2xDYWxsKGFwcHJvdmFsSXRlbS5yYXdJdGVtLCB0b29sKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcHByb3ZhbEl0ZW0ucmF3SXRlbS50eXBlID09PSAnaG9zdGVkX3Rvb2xfY2FsbCcpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFsd2F5c1JlamVjdCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCdBbHdheXMgcmVqZWN0aW5nIE1DUCB0b29scyBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgdGhlIGFsbG93ZWQgdG9vbHMgY29uZmlndXJhdGlvbiBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWNwQXBwcm92YWxSZXF1ZXN0ID0gYXBwcm92YWxJdGVtVG9SZWFsdGltZUFwcHJvdmFsSXRlbShhcHByb3ZhbEl0ZW0pO1xuICAgICAgICAgICAgdGhpcy4jdHJhbnNwb3J0LnNlbmRNY3BSZXNwb25zZShtY3BBcHByb3ZhbFJlcXVlc3QsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IoYFRvb2wgJHthcHByb3ZhbEl0ZW0ucmF3SXRlbS5uYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWx0aW1lU2Vzc2lvbi5tanMubWFwIiwiaW1wb3J0ICogYXMgdXRpbEltcG9ydCBmcm9tIFwiLi91dGlscy5tanNcIjtcbmV4cG9ydCB7IFJlYWx0aW1lQWdlbnQgfSBmcm9tIFwiLi9yZWFsdGltZUFnZW50Lm1qc1wiO1xuZXhwb3J0IHsgUmVhbHRpbWVTZXNzaW9uLCB9IGZyb20gXCIuL3JlYWx0aW1lU2Vzc2lvbi5tanNcIjtcbmV4cG9ydCB7IE9wZW5BSVJlYWx0aW1lV2ViUlRDLCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lV2ViUnRjLm1qc1wiO1xuZXhwb3J0IHsgT3BlbkFJUmVhbHRpbWVXZWJTb2NrZXQsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVXZWJzb2NrZXQubWpzXCI7XG5leHBvcnQgeyBPcGVuQUlSZWFsdGltZUJhc2UsIERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX01PREVMLCBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRywgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZUJhc2UubWpzXCI7XG5leHBvcnQgY29uc3QgdXRpbHMgPSB7XG4gICAgYmFzZTY0VG9BcnJheUJ1ZmZlcjogdXRpbEltcG9ydC5iYXNlNjRUb0FycmF5QnVmZmVyLFxuICAgIGFycmF5QnVmZmVyVG9CYXNlNjQ6IHV0aWxJbXBvcnQuYXJyYXlCdWZmZXJUb0Jhc2U2NCxcbiAgICBnZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2U6IHV0aWxJbXBvcnQuZ2V0TGFzdFRleHRGcm9tQXVkaW9PdXRwdXRNZXNzYWdlLFxufTtcbmV4cG9ydCB7IE1vZGVsQmVoYXZpb3JFcnJvciwgT3V0cHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQsIHRvb2wsIFVzZXJFcnJvciwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbmV4cG9ydCB7IGJhY2tncm91bmRSZXN1bHQsIGlzQmFja2dyb3VuZFJlc3VsdCB9IGZyb20gXCIuL3Rvb2wubWpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbIk1FVEFEQVRBIiwic2FmZUV4ZWN1dGUiLCJmbiIsImVycm9yIiwibWFrZVBhcnNlYWJsZVRleHRGb3JtYXQiLCJyZXNwb25zZV9mb3JtYXQiLCJwYXJzZXIiLCJvYmoiLCJpZ25vcmVPdmVycmlkZSIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJvcHRpb25zIiwiem9kRGVmIiwiem9kU2NoZW1hIiwiaXNFbXB0eU9iaiIsIl9rIiwiZ2V0UmVmcyIsIl9vcHRpb25zIiwiY3VycmVudFBhdGgiLCJuYW1lIiwiZGVmIiwiYWRkRXJyb3JNZXNzYWdlIiwicmVzIiwia2V5IiwiZXJyb3JNZXNzYWdlIiwicmVmcyIsInNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMiLCJ2YWx1ZSIsInV0aWwiLCJfIiwiYXNzZXJ0SXMiLCJfYXJnIiwiYXNzZXJ0TmV2ZXIiLCJfeCIsIml0ZW1zIiwiaXRlbSIsInZhbGlkS2V5cyIsImsiLCJmaWx0ZXJlZCIsImUiLCJvYmplY3QiLCJrZXlzIiwiYXJyIiwiY2hlY2tlciIsInZhbCIsImpvaW5WYWx1ZXMiLCJhcnJheSIsInNlcGFyYXRvciIsIm9iamVjdFV0aWwiLCJmaXJzdCIsInNlY29uZCIsIlpvZFBhcnNlZFR5cGUiLCJnZXRQYXJzZWRUeXBlIiwiZGF0YSIsIlpvZElzc3VlQ29kZSIsIlpvZEVycm9yIiwiaXNzdWVzIiwic3ViIiwic3VicyIsImFjdHVhbFByb3RvIiwiX21hcHBlciIsIm1hcHBlciIsImlzc3VlIiwiZmllbGRFcnJvcnMiLCJwcm9jZXNzRXJyb3IiLCJjdXJyIiwiaSIsImVsIiwiZm9ybUVycm9ycyIsImVycm9yTWFwIiwiX2N0eCIsIm1lc3NhZ2UiLCJvdmVycmlkZUVycm9yTWFwIiwiZGVmYXVsdEVycm9yTWFwIiwiZ2V0RXJyb3JNYXAiLCJtYWtlSXNzdWUiLCJwYXJhbXMiLCJwYXRoIiwiZXJyb3JNYXBzIiwiaXNzdWVEYXRhIiwiZnVsbFBhdGgiLCJmdWxsSXNzdWUiLCJtYXBzIiwibSIsIm1hcCIsImFkZElzc3VlVG9Db250ZXh0IiwiY3R4Iiwib3ZlcnJpZGVNYXAiLCJ4IiwiUGFyc2VTdGF0dXMiLCJzdGF0dXMiLCJyZXN1bHRzIiwiYXJyYXlWYWx1ZSIsIklOVkFMSUQiLCJwYWlycyIsInN5bmNQYWlycyIsInBhaXIiLCJmaW5hbE9iamVjdCIsIkRJUlRZIiwiT0siLCJpc0Fib3J0ZWQiLCJpc0RpcnR5IiwiaXNWYWxpZCIsImlzQXN5bmMiLCJlcnJvclV0aWwiLCJQYXJzZUlucHV0TGF6eVBhdGgiLCJwYXJlbnQiLCJoYW5kbGVSZXN1bHQiLCJyZXN1bHQiLCJwcm9jZXNzQ3JlYXRlUGFyYW1zIiwiaW52YWxpZF90eXBlX2Vycm9yIiwicmVxdWlyZWRfZXJyb3IiLCJkZXNjcmlwdGlvbiIsImlzcyIsIlpvZFR5cGUiLCJpbnB1dCIsImVyciIsIl9iIiwiX2EiLCJtYXliZUFzeW5jUmVzdWx0IiwiY2hlY2siLCJnZXRJc3N1ZVByb3BlcnRpZXMiLCJzZXRFcnJvciIsInJlZmluZW1lbnREYXRhIiwicmVmaW5lbWVudCIsIlpvZEVmZmVjdHMiLCJab2RGaXJzdFBhcnR5VHlwZUtpbmQiLCJab2RPcHRpb25hbCIsIlpvZE51bGxhYmxlIiwiWm9kQXJyYXkiLCJab2RQcm9taXNlIiwib3B0aW9uIiwiWm9kVW5pb24iLCJpbmNvbWluZyIsIlpvZEludGVyc2VjdGlvbiIsInRyYW5zZm9ybSIsImRlZmF1bHRWYWx1ZUZ1bmMiLCJab2REZWZhdWx0IiwiWm9kQnJhbmRlZCIsImNhdGNoVmFsdWVGdW5jIiwiWm9kQ2F0Y2giLCJUaGlzIiwidGFyZ2V0IiwiWm9kUGlwZWxpbmUiLCJab2RSZWFkb25seSIsImN1aWRSZWdleCIsImN1aWQyUmVnZXgiLCJ1bGlkUmVnZXgiLCJ1dWlkUmVnZXgiLCJuYW5vaWRSZWdleCIsImp3dFJlZ2V4IiwiZHVyYXRpb25SZWdleCIsImVtYWlsUmVnZXgiLCJfZW1vamlSZWdleCIsImVtb2ppUmVnZXgiLCJpcHY0UmVnZXgiLCJpcHY0Q2lkclJlZ2V4IiwiaXB2NlJlZ2V4IiwiaXB2NkNpZHJSZWdleCIsImJhc2U2NFJlZ2V4IiwiYmFzZTY0dXJsUmVnZXgiLCJkYXRlUmVnZXhTb3VyY2UiLCJkYXRlUmVnZXgiLCJ0aW1lUmVnZXhTb3VyY2UiLCJhcmdzIiwic2Vjb25kc1JlZ2V4U291cmNlIiwic2Vjb25kc1F1YW50aWZpZXIiLCJ0aW1lUmVnZXgiLCJkYXRldGltZVJlZ2V4IiwicmVnZXgiLCJvcHRzIiwiaXNWYWxpZElQIiwiaXAiLCJ2ZXJzaW9uIiwiaXNWYWxpZEpXVCIsImp3dCIsImFsZyIsImhlYWRlciIsImJhc2U2NCIsImRlY29kZWQiLCJpc1ZhbGlkQ2lkciIsIlpvZFN0cmluZyIsInRvb0JpZyIsInRvb1NtYWxsIiwidmFsaWRhdGlvbiIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImxlbiIsImNoIiwibWluIiwibWF4IiwiZmxvYXRTYWZlUmVtYWluZGVyIiwic3RlcCIsInZhbERlY0NvdW50Iiwic3RlcERlY0NvdW50IiwiZGVjQ291bnQiLCJ2YWxJbnQiLCJzdGVwSW50IiwiWm9kTnVtYmVyIiwia2luZCIsImluY2x1c2l2ZSIsIlpvZEJpZ0ludCIsIlpvZEJvb2xlYW4iLCJab2REYXRlIiwibWluRGF0ZSIsIm1heERhdGUiLCJab2RTeW1ib2wiLCJab2RVbmRlZmluZWQiLCJab2ROdWxsIiwiWm9kQW55IiwiWm9kVW5rbm93biIsIlpvZE5ldmVyIiwiWm9kVm9pZCIsInNjaGVtYSIsImRlZXBQYXJ0aWFsaWZ5IiwiWm9kT2JqZWN0IiwibmV3U2hhcGUiLCJmaWVsZFNjaGVtYSIsIlpvZFR1cGxlIiwic2hhcGUiLCJzaGFwZUtleXMiLCJleHRyYUtleXMiLCJrZXlWYWxpZGF0b3IiLCJ1bmtub3duS2V5cyIsImNhdGNoYWxsIiwiZGVmYXVsdEVycm9yIiwiYXVnbWVudGF0aW9uIiwibWVyZ2luZyIsImluZGV4IiwibWFzayIsIm5ld0ZpZWxkIiwiY3JlYXRlWm9kRW51bSIsImhhbmRsZVJlc3VsdHMiLCJ1bmlvbkVycm9ycyIsImNoaWxkQ3R4IiwiZGlydHkiLCJ0eXBlcyIsImdldERpc2NyaW1pbmF0b3IiLCJ0eXBlIiwiWm9kTGF6eSIsIlpvZExpdGVyYWwiLCJab2RFbnVtIiwiWm9kTmF0aXZlRW51bSIsIlpvZERpc2NyaW1pbmF0ZWRVbmlvbiIsImRpc2NyaW1pbmF0b3IiLCJkaXNjcmltaW5hdG9yVmFsdWUiLCJvcHRpb25zTWFwIiwiZGlzY3JpbWluYXRvclZhbHVlcyIsIm1lcmdlVmFsdWVzIiwiYSIsImIiLCJhVHlwZSIsImJUeXBlIiwiYktleXMiLCJzaGFyZWRLZXlzIiwibmV3T2JqIiwic2hhcmVkVmFsdWUiLCJuZXdBcnJheSIsIml0ZW1BIiwiaXRlbUIiLCJoYW5kbGVQYXJzZWQiLCJwYXJzZWRMZWZ0IiwicGFyc2VkUmlnaHQiLCJtZXJnZWQiLCJsZWZ0IiwicmlnaHQiLCJpdGVtSW5kZXgiLCJyZXN0Iiwic2NoZW1hcyIsIlpvZFJlY29yZCIsImtleVR5cGUiLCJ2YWx1ZVR5cGUiLCJ0aGlyZCIsIlpvZE1hcCIsImZpbmFsTWFwIiwiWm9kU2V0IiwiZmluYWxpemVTZXQiLCJlbGVtZW50cyIsInBhcnNlZFNldCIsImVsZW1lbnQiLCJtaW5TaXplIiwibWF4U2l6ZSIsInNpemUiLCJnZXR0ZXIiLCJ2YWx1ZXMiLCJleHBlY3RlZFZhbHVlcyIsImVudW1WYWx1ZXMiLCJuZXdEZWYiLCJvcHQiLCJuYXRpdmVFbnVtVmFsdWVzIiwicHJvbWlzaWZpZWQiLCJlZmZlY3QiLCJjaGVja0N0eCIsImFyZyIsInByb2Nlc3NlZCIsImV4ZWN1dGVSZWZpbmVtZW50IiwiYWNjIiwiaW5uZXIiLCJiYXNlIiwicHJlcHJvY2VzcyIsIm5ld0N0eCIsIlpvZE5hTiIsImluUmVzdWx0IiwiZnJlZXplIiwic3RyaW5nVHlwZSIsIm51bWJlclR5cGUiLCJib29sZWFuVHlwZSIsImFueVR5cGUiLCJhcnJheVR5cGUiLCJvYmplY3RUeXBlIiwidW5pb25UeXBlIiwiZGlzY3JpbWluYXRlZFVuaW9uVHlwZSIsInJlY29yZFR5cGUiLCJsYXp5VHlwZSIsImxpdGVyYWxUeXBlIiwiZW51bVR5cGUiLCJwYXJzZUFueURlZiIsInBhcnNlQXJyYXlEZWYiLCJwYXJzZURlZiIsInBhcnNlQmlnaW50RGVmIiwicGFyc2VCb29sZWFuRGVmIiwicGFyc2VCcmFuZGVkRGVmIiwiX2RlZiIsInBhcnNlQ2F0Y2hEZWYiLCJwYXJzZURhdGVEZWYiLCJvdmVycmlkZURhdGVTdHJhdGVneSIsInN0cmF0ZWd5IiwiaW50ZWdlckRhdGVQYXJzZXIiLCJwYXJzZURlZmF1bHREZWYiLCJwYXJzZUVmZmVjdHNEZWYiLCJmb3JjZVJlc29sdXRpb24iLCJwYXJzZUVudW1EZWYiLCJpc0pzb25TY2hlbWE3QWxsT2ZUeXBlIiwicGFyc2VJbnRlcnNlY3Rpb25EZWYiLCJhbGxPZiIsInVuZXZhbHVhdGVkUHJvcGVydGllcyIsIm1lcmdlZEFsbE9mIiwibmVzdGVkU2NoZW1hIiwiYWRkaXRpb25hbFByb3BlcnRpZXMiLCJwYXJzZUxpdGVyYWxEZWYiLCJwYXJzZWRUeXBlIiwiem9kUGF0dGVybnMiLCJwYXJzZVN0cmluZ0RlZiIsInByb2Nlc3NQYXR0ZXJuIiwiZXNjYXBlTm9uQWxwaGFOdW1lcmljIiwiYWRkRm9ybWF0IiwiYWRkUGF0dGVybiIsImMiLCJwcm9jZXNzUmVnRXhwIiwicmVnZXhPckZ1bmN0aW9uIiwiZmxhZ3MiLCJzb3VyY2UiLCJwYXR0ZXJuIiwiaXNFc2NhcGVkIiwiaW5DaGFyR3JvdXAiLCJpbkNoYXJSYW5nZSIsInJlZ2V4VGVzdCIsInBhcnNlUmVjb3JkRGVmIiwiX2MiLCJfZCIsInBhcnNlTWFwRGVmIiwicGFyc2VOYXRpdmVFbnVtRGVmIiwiYWN0dWFsVmFsdWVzIiwicGFyc2VkVHlwZXMiLCJwYXJzZU5ldmVyRGVmIiwicGFyc2VOdWxsRGVmIiwicHJpbWl0aXZlTWFwcGluZ3MiLCJwYXJzZVVuaW9uRGVmIiwiYXNBbnlPZiIsInVuaXF1ZVR5cGVzIiwiYW55T2YiLCJwYXJzZU51bGxhYmxlRGVmIiwicGFyc2VOdW1iZXJEZWYiLCJkZWNpZGVBZGRpdGlvbmFsUHJvcGVydGllcyIsInBhcnNlT2JqZWN0RGVmIiwicHJvcE5hbWUiLCJwcm9wRGVmIiwicHJvcGVydHlQYXRoIiwicGFyc2VkRGVmIiwicGFyc2VPcHRpb25hbERlZiIsImlubmVyU2NoZW1hIiwicGFyc2VQaXBlbGluZURlZiIsInBhcnNlUHJvbWlzZURlZiIsInBhcnNlU2V0RGVmIiwicGFyc2VUdXBsZURlZiIsInBhcnNlVW5kZWZpbmVkRGVmIiwicGFyc2VVbmtub3duRGVmIiwicGFyc2VSZWFkb25seURlZiIsInNlZW5JdGVtIiwib3ZlcnJpZGVSZXN1bHQiLCJzZWVuU2NoZW1hIiwiZ2V0JHJlZiIsIm5ld0l0ZW0iLCJqc29uU2NoZW1hIiwic2VsZWN0UGFyc2VyIiwiYWRkTWV0YSIsImdldFJlbGF0aXZlUGF0aCIsInBhdGhBIiwicGF0aEIiLCJ0eXBlTmFtZSIsInpvZFRvSnNvblNjaGVtYSIsIm1haW4iLCJ0aXRsZSIsImRlZmluaXRpb25zIiwicHJvY2Vzc2VkRGVmaW5pdGlvbnMiLCJuZXdEZWZpbml0aW9ucyIsImNvbWJpbmVkIiwibWFrZVBhcnNlYWJsZVJlc3BvbnNlVG9vbCIsInRvb2wiLCJjYWxsYmFjayIsIl96b2RUb0pzb25TY2hlbWEiLCJ6b2RUZXh0Rm9ybWF0Iiwiem9kT2JqZWN0IiwicHJvcHMiLCJjb250ZW50Iiwiem9kUmVzcG9uc2VzRnVuY3Rpb24iLCJBZ2VudHNFcnJvciIsInN0YXRlIiwiX19wdWJsaWNGaWVsZCIsIlN5c3RlbUVycm9yIiwiTWF4VHVybnNFeGNlZWRlZEVycm9yIiwiTW9kZWxCZWhhdmlvckVycm9yIiwiVXNlckVycm9yIiwiR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IiLCJUb29sQ2FsbEVycm9yIiwiSW5wdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCIsIk91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkIiwiaXNab2RPYmplY3QiLCJpc0FnZW50VG9vbElucHV0IiwidG9GdW5jdGlvblRvb2xOYW1lIiwiZ2V0U2NoZW1hQW5kUGFyc2VyRnJvbUlucHV0VHlwZSIsImlucHV0VHlwZSIsImZvcm1hdHRlZEZ1bmN0aW9uIiwiY29udmVydEFnZW50T3V0cHV0VHlwZVRvU2VyaWFsaXphYmxlIiwib3V0cHV0VHlwZSIsIm91dHB1dCIsInMiLCJoIiwiZCIsInciLCJ5IiwibXMiLCJwYXJzZSIsImZtdExvbmciLCJmbXRTaG9ydCIsInN0ciIsIm1hdGNoIiwibiIsIm1zQWJzIiwicGx1cmFsIiwiaXNQbHVyYWwiLCJzZXR1cCIsImVudiIsImNyZWF0ZURlYnVnIiwiY29lcmNlIiwiZGlzYWJsZSIsImVuYWJsZSIsImVuYWJsZWQiLCJyZXF1aXJlJCQwIiwiZGVzdHJveSIsInNlbGVjdENvbG9yIiwibmFtZXNwYWNlIiwiaGFzaCIsInByZXZUaW1lIiwiZW5hYmxlT3ZlcnJpZGUiLCJuYW1lc3BhY2VzQ2FjaGUiLCJlbmFibGVkQ2FjaGUiLCJkZWJ1ZyIsInNlbGYiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJleHRlbmQiLCJ2IiwiZGVsaW1pdGVyIiwibmV3RGVidWciLCJuYW1lc3BhY2VzIiwic3BsaXQiLCJucyIsIm1hdGNoZXNUZW1wbGF0ZSIsInNlYXJjaCIsInRlbXBsYXRlIiwic2VhcmNoSW5kZXgiLCJ0ZW1wbGF0ZUluZGV4Iiwic3RhckluZGV4IiwibWF0Y2hJbmRleCIsInNraXAiLCJjb21tb24iLCJleHBvcnRzIiwiZm9ybWF0QXJncyIsInNhdmUiLCJsb2FkIiwidXNlQ29sb3JzIiwibG9jYWxzdG9yYWdlIiwid2FybmVkIiwibW9kdWxlIiwibGFzdEMiLCJyIiwiZm9ybWF0dGVycyIsImxvYWRFbnYiLCJfbG9hZEVudiIsImlzRW5hYmxlZCIsImZsYWdOYW1lIiwidHJhY2luZyIsImxvZ2dpbmciLCJkb250TG9nTW9kZWxEYXRhIiwiZG9udExvZ1Rvb2xEYXRhIiwiZ2V0TG9nZ2VyIiwibG9nZ2VyIiwidG9TbWFydFN0cmluZyIsImRlZmF1bHRUb29sRXJyb3JGdW5jdGlvbiIsImNvbnRleHQiLCJ0b29sRXJyb3JGdW5jdGlvbiIsInN0cmljdE1vZGUiLCJwYXJhbWV0ZXJzIiwiX2ludm9rZSIsInJ1bkNvbnRleHQiLCJkZXRhaWxzIiwicGFyc2VkIiwic3RyaW5nUmVzdWx0IiwiaW52b2tlIiwiY3VycmVudFNwYW4iLCJnZXRDdXJyZW50U3BhbiIsIm5lZWRzQXBwcm92YWwiLCJhZ2VudCIsInByZWRpY2F0ZSIsInoub2JqZWN0Iiwiei5zdHJpbmciLCJ6LmxpdGVyYWwiLCJ6LnJlY29yZCIsInouYW55Iiwiei5hcnJheSIsInouYm9vbGVhbiIsIl9jYWNoZWRUb29scyIsImdldEZ1bmN0aW9uVG9vbHNGcm9tU2VydmVyIiwic2VydmVyIiwiY29udmVydFNjaGVtYXNUb1N0cmljdCIsInQiLCJtY3BUb0Z1bmN0aW9uVG9vbCIsIndpdGhNQ1BMaXN0VG9vbHNTcGFuIiwic3BhbiIsImZldGNoZWRNY3BUb29scyIsIm1jcFRvb2xzIiwiZmlsdGVyZWRUb29scyIsImZpbHRlciIsImdsb2JhbExvZ2dlciIsImFsbG93ZWRUb29sTmFtZXMiLCJibG9ja2VkVG9vbE5hbWVzIiwiYWxsb3dlZCIsImJsb2NrZWQiLCJ0b29scyIsImdldEFsbE1jcFRvb2xzIiwibWNwU2VydmVyc09yT3B0cyIsIm1jcFNlcnZlcnMiLCJjb252ZXJ0U2NoZW1hc1RvU3RyaWN0RnJvbU9wdHMiLCJydW5Db250ZXh0RnJvbU9wdHMiLCJhZ2VudEZyb21PcHRzIiwiYWxsVG9vbHMiLCJ0b29sTmFtZXMiLCJzZXJ2ZXJUb29scyIsImludGVyc2VjdGlvbiIsIm1jcFRvb2wiLCJfY29udGV4dCIsInN0cmljdFNjaGVtYSIsImVuc3VyZVN0cmljdEpzb25TY2hlbWEiLCJub25TdHJpY3RTY2hlbWEiLCJvdXQiLCJCcm93c2VyRXZlbnRFbWl0dGVyIiwiX19wcml2YXRlQWRkIiwiX3RhcmdldCIsIl9saXN0ZW5lcldyYXBwZXJzIiwibGlzdGVuZXIiLCJldmVudFR5cGUiLCJsaXN0ZW5lcnNGb3JUeXBlIiwiX19wcml2YXRlR2V0Iiwid3JhcHBlcnMiLCJ3cmFwcGVyIiwiZXZlbnQiLCJoYW5kbGVyIiwicmFuZG9tVVVJRCIsIlJlYWRhYmxlIiwiX2Rlc3RpbmF0aW9uIiwiX3RyYW5zZm9ybSIsIlJlYWRhYmxlU3RyZWFtIiwiVHJhbnNmb3JtU3RyZWFtIiwiQXN5bmNMb2NhbFN0b3JhZ2UiLCJCcm93c2VyVGltZXIiLCJ0aW1lb3V0IiwidGltZW91dElkIiwidGltZXIiLCJfY29udGV4dEFzeW5jTG9jYWxTdG9yYWdlIiwiZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlIiwiZ2V0Q3VycmVudFRyYWNlIiwiY3VycmVudFRyYWNlIiwiX3dyYXBGdW5jdGlvbldpdGhUcmFjZUxpZmVjeWNsZSIsInRyYWNlIiwid2l0aFRyYWNlIiwibmV3VHJhY2UiLCJnZXRHbG9iYWxUcmFjZVByb3ZpZGVyIiwiZ2V0T3JDcmVhdGVUcmFjZSIsInNldEN1cnJlbnRTcGFuIiwicmVzZXRDdXJyZW50U3BhbiIsImFkZEVycm9yVG9DdXJyZW50U3BhbiIsInNwYW5FcnJvciIsImNsb25lQ3VycmVudENvbnRleHQiLCJ3aXRoTmV3U3BhbkNvbnRleHQiLCJjdXJyZW50Q29udGV4dCIsImNvcHlPZkNvbnRleHQiLCJDb25zb2xlU3BhbkV4cG9ydGVyIiwiQmF0Y2hUcmFjZVByb2Nlc3NvciIsImV4cG9ydGVyIiwibWF4UXVldWVTaXplIiwibWF4QmF0Y2hTaXplIiwic2NoZWR1bGVEZWxheSIsImV4cG9ydFRyaWdnZXJSYXRpbyIsIl9CYXRjaFRyYWNlUHJvY2Vzc29yX2luc3RhbmNlcyIsIl9tYXhRdWV1ZVNpemUiLCJfbWF4QmF0Y2hTaXplIiwiX3NjaGVkdWxlRGVsYXkiLCJfZXhwb3J0VHJpZ2dlclNpemUiLCJfZXhwb3J0ZXIiLCJfYnVmZmVyIiwiX3RpbWVyIiwiX3RpbWVvdXQiLCJfZXhwb3J0SW5Qcm9ncmVzcyIsIl90aW1lb3V0QWJvcnRDb250cm9sbGVyIiwiX19wcml2YXRlU2V0IiwiX19wcml2YXRlTWV0aG9kIiwicnVuRXhwb3J0TG9vcF9mbiIsInNhZmVBZGRJdGVtX2ZuIiwiX3RyYWNlIiwiX3NwYW4iLCJleHBvcnRCYXRjaGVzX2ZuIiwicmVzb2x2ZSIsImZvcmNlIiwidG9FeHBvcnQiLCJiYXRjaCIsIk11bHRpVHJhY2luZ1Byb2Nlc3NvciIsIl9wcm9jZXNzb3JzIiwicHJvY2Vzc29yIiwicHJvY2Vzc29ycyIsIl9kZWZhdWx0RXhwb3J0ZXIiLCJfZGVmYXVsdFByb2Nlc3NvciIsImRlZmF1bHRFeHBvcnRlciIsImRlZmF1bHRQcm9jZXNzb3IiLCJ0aW1lSXNvIiwiZ2VuZXJhdGVUcmFjZUlkIiwiZ2VuZXJhdGVTcGFuSWQiLCJyZW1vdmVQcml2YXRlRmllbGRzIiwiX1NwYW4iLCJfZGF0YSIsIl90cmFjZUlkIiwiX3NwYW5JZCIsIl9wYXJlbnRJZCIsIl9wcm9jZXNzb3IiLCJfc3RhcnRlZEF0IiwiX2VuZGVkQXQiLCJfZXJyb3IiLCJfcHJldmlvdXNTcGFuIiwiU3BhbiIsIk5vb3BTcGFuIiwiX1RyYWNlIiwiX3N0YXJ0ZWQiLCJUcmFjZSIsIk5vb3BUcmFjZSIsIlRyYWNlUHJvdmlkZXIiLCJfVHJhY2VQcm92aWRlcl9pbnN0YW5jZXMiLCJfbXVsdGlQcm9jZXNzb3IiLCJfZGlzYWJsZWQiLCJhZGRDbGVhbnVwTGlzdGVuZXJzX2ZuIiwiZGlzYWJsZWQiLCJ0cmFjZU9wdGlvbnMiLCJ0cmFjZUlkIiwic3Bhbk9wdGlvbnMiLCJwYXJlbnRJZCIsImNsZWFudXAiLCJoYXNPdGhlckxpc3RlbmVyc0ZvclNpZ25hbHMiLCJyZWFzb24iLCJwcm9taXNlIiwiaGFzT3RoZXJMaXN0ZW5lcnNGb3JFdmVudHMiLCJHTE9CQUxfVFJBQ0VfUFJPVklERVIiLCJfd2l0aFNwYW5GYWN0b3J5IiwiY3JlYXRlU3BhbiIsImNyZWF0ZUFnZW50U3BhbiIsImNyZWF0ZUZ1bmN0aW9uU3BhbiIsIndpdGhGdW5jdGlvblNwYW4iLCJjcmVhdGVIYW5kb2ZmU3BhbiIsIndpdGhIYW5kb2ZmU3BhbiIsImNyZWF0ZUd1YXJkcmFpbFNwYW4iLCJ3aXRoR3VhcmRyYWlsU3BhbiIsImNyZWF0ZU1DUExpc3RUb29sc1NwYW4iLCJhZGRUcmFjZVByb2Nlc3NvciIsIkV2ZW50RW1pdHRlckRlbGVnYXRlIiwiQWdlbnRIb29rcyIsIlJ1bnRpbWVFdmVudEVtaXR0ZXIiLCJSdW5Ib29rcyIsIk9QRU5BSV9ERUZBVUxUX01PREVMX0VOVl9WQVJJQUJMRV9OQU1FIiwiZ3B0NVJlYXNvbmluZ1NldHRpbmdzUmVxdWlyZWQiLCJtb2RlbE5hbWUiLCJpc0dwdDVEZWZhdWx0IiwiZ2V0RGVmYXVsdE1vZGVsIiwiZ2V0RGVmYXVsdE1vZGVsU2V0dGluZ3MiLCJtb2RlbCIsIl9tb2RlbCIsImdldFRyYW5zZmVyTWVzc2FnZSIsImRlZmF1bHRIYW5kb2ZmVG9vbE5hbWUiLCJkZWZhdWx0SGFuZG9mZlRvb2xEZXNjcmlwdGlvbiIsIkhhbmRvZmYiLCJvbkludm9rZUhhbmRvZmYiLCJoYW5kb2ZmIiwiY29uZmlnIiwiaGFzT25IYW5kb2ZmIiwiaGFzSW5wdXRUeXBlIiwiaW5wdXRKc29uU3RyaW5nIiwiZ2V0SGFuZG9mZiIsImRlZmluZUlucHV0R3VhcmRyYWlsIiwiZXhlY3V0ZSIsImRlZmluZU91dHB1dEd1YXJkcmFpbCIsImdldERlZmF1bHRNb2RlbFByb3ZpZGVyIiwiU2hhcmVkQmFzZSIsIkl0ZW1CYXNlIiwiUmVmdXNhbCIsIk91dHB1dFRleHQiLCJJbnB1dFRleHQiLCJSZWFzb25pbmdUZXh0IiwiSW5wdXRJbWFnZSIsInpcbiAgICAgICAgLnN0cmluZyIsIklucHV0RmlsZSIsIkF1ZGlvQ29udGVudCIsIkltYWdlQ29udGVudCIsIlRvb2xPdXRwdXRUZXh0IiwiVG9vbE91dHB1dEltYWdlIiwiQ29tcHV0ZXJUb29sT3V0cHV0IiwiY29tcHV0ZXJBY3Rpb25zIiwiei5kaXNjcmltaW5hdGVkVW5pb24iLCJ6Lm51bWJlciIsInouZW51bSIsIkFzc2lzdGFudENvbnRlbnQiLCJNZXNzYWdlQmFzZSIsIkFzc2lzdGFudE1lc3NhZ2VJdGVtIiwiVXNlckNvbnRlbnQiLCJVc2VyTWVzc2FnZUl0ZW0iLCJTeXN0ZW1NZXNzYWdlSXRlbSIsIkhvc3RlZFRvb2xDYWxsSXRlbSIsIkZ1bmN0aW9uQ2FsbEl0ZW0iLCJGdW5jdGlvbkNhbGxSZXN1bHRJdGVtIiwiQ29tcHV0ZXJVc2VDYWxsSXRlbSIsIkNvbXB1dGVyQ2FsbFJlc3VsdEl0ZW0iLCJUb29sQ2FsbEl0ZW0iLCJSZWFzb25pbmdJdGVtIiwiVW5rbm93bkl0ZW0iLCJPdXRwdXRNb2RlbEl0ZW0iLCJNb2RlbEl0ZW0iLCJ6LnVuaW9uIiwiVXNhZ2VEYXRhIiwiU3RyZWFtRXZlbnRUZXh0U3RyZWFtIiwiU3RyZWFtRXZlbnRSZXNwb25zZVN0YXJ0ZWQiLCJTdHJlYW1FdmVudFJlc3BvbnNlQ29tcGxldGVkIiwiU3RyZWFtRXZlbnRHZW5lcmljSXRlbSIsIlVzYWdlIiwiaW5wdXRUb2tlbnNEZXRhaWxzIiwib3V0cHV0VG9rZW5zRGV0YWlscyIsIm5ld1VzYWdlIiwiUnVuQ29udGV4dCIsIl9hcHByb3ZhbHMiLCJhcHByb3ZhbHMiLCJ0b29sTmFtZSIsImNhbGxJZCIsImFwcHJvdmFsRW50cnkiLCJpbmRpdmlkdWFsQ2FsbEFwcHJvdmFsIiwiaW5kaXZpZHVhbENhbGxSZWplY3Rpb24iLCJhcHByb3ZhbEl0ZW0iLCJhbHdheXNBcHByb3ZlIiwiYWx3YXlzUmVqZWN0IiwiUnVuUmVzdWx0QmFzZSIsImdldFR1cm5JbnB1dCIsInJlc3BvbnNlcyIsIlJ1blJlc3VsdCIsIlN0cmVhbWVkUnVuUmVzdWx0IiwiX3NpZ25hbCIsIl9yZWFkYWJsZUNvbnRyb2xsZXIiLCJfcmVhZGFibGVTdHJlYW0iLCJfY29tcGxldGVkUHJvbWlzZSIsIl9jb21wbGV0ZWRQcm9taXNlUmVzb2x2ZSIsIl9jb21wbGV0ZWRQcm9taXNlUmVqZWN0IiwiX2NhbmNlbGxlZCIsIl9SZWFkYWJsZVN0cmVhbSIsImNvbnRyb2xsZXIiLCJyZWplY3QiLCJoYW5kbGVBYm9ydCIsInN0cmVhbSIsInNlcmlhbGl6ZVRvb2wiLCJzZXJpYWxpemVIYW5kb2ZmIiwiUnVuSXRlbUJhc2UiLCJSdW5NZXNzYWdlT3V0cHV0SXRlbSIsInJhd0l0ZW0iLCJwYXJ0IiwiUnVuVG9vbENhbGxJdGVtIiwiUnVuVG9vbENhbGxPdXRwdXRJdGVtIiwiUnVuUmVhc29uaW5nSXRlbSIsIlJ1bkhhbmRvZmZDYWxsSXRlbSIsIlJ1bkhhbmRvZmZPdXRwdXRJdGVtIiwic291cmNlQWdlbnQiLCJ0YXJnZXRBZ2VudCIsIlJ1blRvb2xBcHByb3ZhbEl0ZW0iLCJnZXRMYXN0VGV4dEZyb21PdXRwdXRNZXNzYWdlIiwib3V0cHV0TWVzc2FnZSIsImxhc3RJdGVtIiwiZ2V0T3V0cHV0VGV4dCIsIlJ1blJhd01vZGVsU3RyZWFtRXZlbnQiLCJSdW5JdGVtU3RyZWFtRXZlbnQiLCJSdW5BZ2VudFVwZGF0ZWRTdHJlYW1FdmVudCIsInByb2Nlc3NNb2RlbFJlc3BvbnNlIiwibW9kZWxSZXNwb25zZSIsImhhbmRvZmZzIiwicnVuSGFuZG9mZnMiLCJydW5GdW5jdGlvbnMiLCJydW5Db21wdXRlckFjdGlvbnMiLCJydW5NQ1BBcHByb3ZhbFJlcXVlc3RzIiwidG9vbHNVc2VkIiwiaGFuZG9mZk1hcCIsImZ1bmN0aW9uTWFwIiwiY29tcHV0ZXJUb29sIiwibWNwVG9vbE1hcCIsInByb3ZpZGVyRGF0YSIsIm1jcFNlcnZlckxhYmVsIiwibWNwU2VydmVyVG9vbCIsImZ1bmN0aW9uVG9vbCIsIm5leHRTdGVwU2NoZW1hIiwiU2luZ2xlU3RlcFJlc3VsdCIsIm9yaWdpbmFsSW5wdXQiLCJwcmVTdGVwSXRlbXMiLCJuZXdTdGVwSXRlbXMiLCJuZXh0U3RlcCIsIm1heWJlUmVzZXRUb29sQ2hvaWNlIiwidG9vbFVzZVRyYWNrZXIiLCJtb2RlbFNldHRpbmdzIiwiZXhlY3V0ZUludGVycnVwdGVkVG9vbHNBbmRTaWRlRWZmZWN0cyIsIm9yaWdpbmFsUHJlU3RlcEl0ZW1zIiwibmV3UmVzcG9uc2UiLCJwcm9jZXNzZWRSZXNwb25zZSIsInJ1bm5lciIsImZ1bmN0aW9uQ2FsbElkcyIsImZ1bmN0aW9uVG9vbFJ1bnMiLCJydW4iLCJmdW5jdGlvblJlc3VsdHMiLCJleGVjdXRlRnVuY3Rpb25Ub29sQ2FsbHMiLCJuZXdJdGVtcyIsIm1jcEFwcHJvdmFsUnVucyIsImFwcHJvdmFsUmVxdWVzdElkIiwiYXBwcm92ZWQiLCJjaGVja1Rvb2xPdXRwdXQiLCJjaGVja0ZvckZpbmFsT3V0cHV0RnJvbVRvb2xzIiwiZXhlY3V0ZVRvb2xzQW5kU2lkZUVmZmVjdHMiLCJjb21wdXRlclJlc3VsdHMiLCJleGVjdXRlQ29tcHV0ZXJBY3Rpb25zIiwiYXBwcm92YWxSZXF1ZXN0IiwidG9vbERhdGEiLCJyZXF1ZXN0RGF0YSIsImFwcHJvdmFsUmVzdWx0IiwiYXBwcm92YWxSZXNwb25zZURhdGEiLCJleGVjdXRlSGFuZG9mZkNhbGxzIiwibWVzc2FnZUl0ZW1zIiwicG90ZW50aWFsRmluYWxPdXRwdXQiLCJnZXRUb29sQ2FsbE91dHB1dEl0ZW0iLCJ0b29sQ2FsbCIsInRvb2xSdW5zIiwicnVuU2luZ2xlVG9vbCIsInRvb2xSdW4iLCJwYXJzZWRBcmdzIiwiYXBwcm92YWwiLCJyZXNwb25zZSIsInRvb2xPdXRwdXQiLCJmdW5jdGlvblJlc3VsdCIsIm5lc3RlZFJ1blJlc3VsdCIsImNvbnN1bWVBZ2VudFRvb2xSdW5SZXN1bHQiLCJuZXN0ZWRJbnRlcnJ1cHRpb25zIiwiX3J1bkNvbXB1dGVyQWN0aW9uQW5kU2NyZWVuc2hvdCIsImNvbXB1dGVyIiwiYWN0aW9uIiwic2NyZWVuc2hvdCIsInAiLCJhY3Rpb25zIiwiY3VzdG9tTG9nZ2VyIiwiX2xvZ2dlciIsImltYWdlVXJsIiwiYWN0dWFsSGFuZG9mZiIsImhhbmRvZmZTcGFuIiwibmV3QWdlbnQiLCJyZXF1ZXN0ZWRBZ2VudHMiLCJpbnB1dEZpbHRlciIsImhhbmRvZmZJbnB1dERhdGEiLCJOT1RfRklOQUxfT1VUUFVUIiwidG9vbFJlc3VsdHMiLCJpbnRlcnJ1cHRpb25zIiwiZmlyc3RUb29sUmVzdWx0IiwidG9vbFVzZUJlaGF2aW9yIiwic3RvcHBpbmdUb29sIiwiZ2V0UnVuSXRlbVN0cmVhbUV2ZW50TmFtZSIsImVucXVldWVSdW5JdGVtU3RyZWFtRXZlbnQiLCJpdGVtTmFtZSIsInN0cmVhbVN0ZXBJdGVtc1RvUnVuUmVzdWx0IiwiYWRkU3RlcFRvUnVuUmVzdWx0Iiwic2tpcHBlZEl0ZW1zIiwiQWdlbnRUb29sVXNlVHJhY2tlciIsIl9hZ2VudFRvVG9vbHMiLCJDVVJSRU5UX1NDSEVNQV9WRVJTSU9OIiwiJHNjaGVtYVZlcnNpb24iLCJzZXJpYWxpemVkQWdlbnRTY2hlbWEiLCJzZXJpYWxpemVkU3BhbkJhc2UiLCJ6XG4gICAgICAgIC5vYmplY3QiLCJTZXJpYWxpemVkU3BhbiIsInoubGF6eSIsInVzYWdlU2NoZW1hIiwibW9kZWxSZXNwb25zZVNjaGVtYSIsInByb3RvY29sLk91dHB1dE1vZGVsSXRlbSIsIml0ZW1TY2hlbWEiLCJwcm90b2NvbC5Bc3Npc3RhbnRNZXNzYWdlSXRlbSIsInByb3RvY29sLlRvb2xDYWxsSXRlbSIsInByb3RvY29sLkhvc3RlZFRvb2xDYWxsSXRlbSIsInByb3RvY29sLkZ1bmN0aW9uQ2FsbFJlc3VsdEl0ZW0iLCJwcm90b2NvbC5SZWFzb25pbmdJdGVtIiwicHJvdG9jb2wuRnVuY3Rpb25DYWxsSXRlbSIsInNlcmlhbGl6ZWRUcmFjZVNjaGVtYSIsInNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZVNjaGVtYSIsInpcbiAgICAgICAgLmFycmF5IiwiZ3VhcmRyYWlsRnVuY3Rpb25PdXRwdXRTY2hlbWEiLCJpbnB1dEd1YXJkcmFpbFJlc3VsdFNjaGVtYSIsIm91dHB1dEd1YXJkcmFpbFJlc3VsdFNjaGVtYSIsIlNlcmlhbGl6ZWRSdW5TdGF0ZSIsInByb3RvY29sLk1vZGVsSXRlbSIsIlJ1blN0YXRlIiwic3RhcnRpbmdBZ2VudCIsIm1heFR1cm5zIiwiaW5pdGlhbEFnZW50IiwicGFyc2luZ0Vycm9yIiwianNvblJlc3VsdCIsImN1cnJlbnRTY2hlbWFWZXJzaW9uIiwic3RhdGVKc29uIiwiYWdlbnRNYXAiLCJidWlsZEFnZW50TWFwIiwiY3VycmVudEFnZW50IiwiYWdlbnROYW1lIiwiZGVzZXJpYWxpemVTcGFuIiwiZGVzZXJpYWxpemVNb2RlbFJlc3BvbnNlIiwiZGVzZXJpYWxpemVJdGVtIiwiZGVzZXJpYWxpemVQcm9jZXNzZWRSZXNwb25zZSIsIl9lIiwicXVldWUiLCJBZ2VudCIsInNlcmlhbGl6ZWRTcGFuIiwic3BhbkRhdGEiLCJwcmV2aW91c1NwYW4iLCJzZXJpYWxpemVkTW9kZWxSZXNwb25zZSIsInVzYWdlIiwic2VyaWFsaXplZEl0ZW0iLCJzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2UiLCJjb21wdXRlclRvb2xzIiwiZW50cnkiLCJmdW5jdGlvbkNhbGwiLCJjb21wdXRlckFjdGlvbiIsIkRFRkFVTFRfTUFYX1RVUk5TIiwiZ2V0VHJhY2luZyIsInRyYWNpbmdEaXNhYmxlZCIsInRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEiLCJnZW5lcmF0ZWRJdGVtcyIsInJhd0l0ZW1zIiwiUnVubmVyIiwiX1J1bm5lcl9pbnN0YW5jZXMiLCJydW5JbmRpdmlkdWFsU3RyZWFtX2ZuIiwicnVuSW5kaXZpZHVhbE5vblN0cmVhbV9mbiIsImV4cGxpY3RseU1vZGVsU2V0Iiwic2VsZWN0TW9kZWwiLCJ0dXJuUmVzdWx0IiwiaGFuZG9mZk5hbWVzIiwic2VyaWFsaXplZFRvb2xzIiwic2VyaWFsaXplZEhhbmRvZmZzIiwicnVuSW5wdXRHdWFyZHJhaWxzX2ZuIiwidHVybklucHV0IiwiYWdlbnRNb2RlbFNldHRpbmdzIiwiYWRqdXN0TW9kZWxTZXR0aW5nc0Zvck5vbkdQVDVSdW5uZXJNb2RlbCIsInJ1bk91dHB1dEd1YXJkcmFpbHNfZm4iLCJndWFyZHJhaWxzIiwiZ3VhcmRyYWlsQXJncyIsImd1YXJkcmFpbCIsImFnZW50T3V0cHV0IiwicnVuU3RyZWFtTG9vcF9mbiIsImZpbmFsUmVzcG9uc2UiLCJwcmVUb29sSXRlbXMiLCJhZ2VudE1vZGVsIiwicnVuQ29uZmlnTW9kZWwiLCJydW5uZXJNb2RlbCIsImNvcGllZE1vZGVsU2V0dGluZ3MiLCJfZyIsIl9mIiwiX2giLCJhZ2VudFRvb2xSdW5SZXN1bHRzIiwic2F2ZUFnZW50VG9vbFJ1blJlc3VsdCIsInJ1blJlc3VsdCIsIkFnZW50QXNUb29sTmVlZEFwcHJvdmFsU2NoYW1lIiwiX0FnZW50Iiwib3V0cHV0VHlwZXMiLCJ0b29sRGVzY3JpcHRpb24iLCJjdXN0b21PdXRwdXRFeHRyYWN0b3IiLCJydW5Db25maWciLCJydW5PcHRpb25zIiwidXNlc1N0b3BBdFRvb2xOYW1lcyIsIm91dHB1dFRleHQiLCJlbmFibGVkVG9vbHMiLCJjYW5kaWRhdGUiLCJtYXliZUlzRW5hYmxlZCIsImJhc2U2NFRvQXJyYXlCdWZmZXIiLCJiaW5hcnlTdHJpbmciLCJieXRlcyIsImFycmF5QnVmZmVyVG9CYXNlNjQiLCJhcnJheUJ1ZmZlciIsImdldExhc3RUZXh0RnJvbUF1ZGlvT3V0cHV0TWVzc2FnZSIsImxhc3RDb250ZW50SXRlbSIsImRpZmZSZWFsdGltZUhpc3RvcnkiLCJvbGRIaXN0b3J5IiwibmV3SGlzdG9yeSIsInJlbW92YWxzIiwiYWRkaXRpb25zIiwib2xkSXRlbSIsInVwZGF0ZXMiLCJoYXNXZWJSVENTdXBwb3J0IiwicmVtb3ZlQXVkaW9Gcm9tQ29udGVudCIsInVwZGF0ZVJlYWx0aW1lSGlzdG9yeSIsImhpc3RvcnkiLCJzaG91bGRJbmNsdWRlQXVkaW9EYXRhIiwidXBkYXRlZENvbnRlbnQiLCJuZXdFdmVudCIsImV4aXN0aW5nSW5kZXgiLCJpZHgiLCJwcmV2SW5kZXgiLCJIRUFERVJTIiwiV0VCU09DS0VUX01FVEEiLCJyZWFsdGltZUFwcHJvdmFsSXRlbVRvQXBwcm92YWxJdGVtIiwiYXBwcm92YWxJdGVtVG9SZWFsdGltZUFwcHJvdmFsSXRlbSIsIml0ZW1JZCIsInNlcnZlckxhYmVsIiwiUmVhbHRpbWVBZ2VudCIsImdldFJlYWx0aW1lR3VhcmRyYWlsU2V0dGluZ3MiLCJzZXR0aW5ncyIsImRlZmluZVJlYWx0aW1lT3V0cHV0R3VhcmRyYWlsIiwicG9saWN5SGludElucHV0IiwiYmFzZUd1YXJkcmFpbCIsInBvbGljeUhpbnQiLCJnZXRSZWFsdGltZUd1YXJkcmFpbEZlZWRiYWNrTWVzc2FnZSIsImlzRGVmaW5lZCIsImlzRGVwcmVjYXRlZENvbmZpZyIsInRvTmV3U2Vzc2lvbkNvbmZpZyIsImlucHV0Q29uZmlnIiwibm9ybWFsaXplQXVkaW9Gb3JtYXQiLCJyZXF1ZXN0ZWRPdXRwdXRWb2ljZSIsIm91dHB1dENvbmZpZyIsImYiLCJyZWFsdGltZU1lc3NhZ2VJdGVtU2NoZW1hIiwicmVhbHRpbWVUb29sQ2FsbEl0ZW0iLCJyZWFsdGltZU1jcENhbGxJdGVtIiwicmVhbHRpbWVNY3BDYWxsQXBwcm92YWxSZXF1ZXN0SXRlbSIsInJlYWx0aW1lUmVzcG9uc2UiLCJ6XG4gICAgICAgICAgICAub2JqZWN0IiwielxuICAgICAgICAuZW51bSIsInpcbiAgICAgICAgICAgIC5yZWNvcmQiLCJjb252ZXJzYXRpb25JdGVtQ29udGVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1TY2hlbWEiLCJ6XG4gICAgLm9iamVjdCIsImNvbnZlcnNhdGlvbkNyZWF0ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1BZGRlZEV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbURvbmVFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1EZWxldGVkRXZlbnRTY2hlbWEiLCJjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25Db21wbGV0ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkRlbHRhRXZlbnRTY2hlbWEiLCJjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25GYWlsZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1UcnVuY2F0ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1DcmVhdGVFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1EZWxldGVFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZUV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbVRydW5jYXRlRXZlbnRTY2hlbWEiLCJlcnJvckV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudFNjaGVtYSIsImlucHV0QXVkaW9CdWZmZXJBcHBlbmRFdmVudFNjaGVtYSIsImlucHV0QXVkaW9CdWZmZXJDbGVhckV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlckNvbW1pdEV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlckNvbW1pdHRlZEV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0YXJ0ZWRFdmVudFNjaGVtYSIsImlucHV0QXVkaW9CdWZmZXJTcGVlY2hTdG9wcGVkRXZlbnRTY2hlbWEiLCJvdXRwdXRBdWRpb0J1ZmZlclN0YXJ0ZWRFdmVudFNjaGVtYSIsIm91dHB1dEF1ZGlvQnVmZmVyU3RvcHBlZEV2ZW50U2NoZW1hIiwib3V0cHV0QXVkaW9CdWZmZXJDbGVhcmVkRXZlbnRTY2hlbWEiLCJyYXRlTGltaXRzVXBkYXRlZEV2ZW50U2NoZW1hIiwicmVzcG9uc2VBdWRpb0RlbHRhRXZlbnRTY2hlbWEiLCJyZXNwb25zZUF1ZGlvRG9uZUV2ZW50U2NoZW1hIiwicmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREZWx0YUV2ZW50U2NoZW1hIiwicmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZUNvbnRlbnRQYXJ0QWRkZWRFdmVudFNjaGVtYSIsInJlc3BvbnNlQ29udGVudFBhcnREb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZUNyZWF0ZWRFdmVudFNjaGVtYSIsInJlc3BvbnNlRG9uZUV2ZW50U2NoZW1hIiwicmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEZWx0YUV2ZW50U2NoZW1hIiwicmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZU91dHB1dEl0ZW1BZGRlZEV2ZW50U2NoZW1hIiwicmVzcG9uc2VPdXRwdXRJdGVtRG9uZUV2ZW50U2NoZW1hIiwicmVzcG9uc2VUZXh0RGVsdGFFdmVudFNjaGVtYSIsInJlc3BvbnNlVGV4dERvbmVFdmVudFNjaGVtYSIsInNlc3Npb25DcmVhdGVkRXZlbnRTY2hlbWEiLCJzZXNzaW9uVXBkYXRlZEV2ZW50U2NoZW1hIiwicmVzcG9uc2VDYW5jZWxFdmVudFNjaGVtYSIsInJlc3BvbnNlQ3JlYXRlRXZlbnRTY2hlbWEiLCJzZXNzaW9uVXBkYXRlRXZlbnRTY2hlbWEiLCJtY3BMaXN0VG9vbHNJblByb2dyZXNzRXZlbnRTY2hlbWEiLCJtY3BMaXN0VG9vbHNDb21wbGV0ZWRFdmVudFNjaGVtYSIsInJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnRTY2hlbWEiLCJyZXNwb25zZU1jcENhbGxBcmd1bWVudHNEb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZU1jcENhbGxJblByb2dyZXNzRXZlbnRTY2hlbWEiLCJyZXNwb25zZU1jcENhbGxDb21wbGV0ZWRFdmVudFNjaGVtYSIsIm1jcExpc3RUb29sc0ZhaWxlZEV2ZW50U2NoZW1hIiwiZ2VuZXJpY0V2ZW50U2NoZW1hIiwicmVhbHRpbWVTZXJ2ZXJFdmVudFNjaGVtYSIsInBhcnNlUmVhbHRpbWVFdmVudCIsInJhdyIsImdlbmVyaWNQYXJzZWQiLCJERUZBVUxUX09QRU5BSV9SRUFMVElNRV9NT0RFTCIsIkRFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHIiwiX09wZW5BSVJlYWx0aW1lQmFzZSIsIl9hcGlLZXkiLCJfdHJhY2luZ0NvbmZpZyIsIl9yYXdTZXNzaW9uQ29uZmlnIiwiYXBpS2V5IiwiaXNHZW5lcmljIiwiaW5wdXRUb2tlbnMiLCJvdXRwdXRUb2tlbnMiLCJ0b3RhbFRva2VucyIsInByZXZpb3VzSXRlbUlkIiwibWNwQXBwcm92YWxSZXF1ZXN0IiwibWNwQ2FsbCIsInJlYWx0aW1lSXRlbSIsIm90aGVyRXZlbnREYXRhIiwidHJpZ2dlclJlc3BvbnNlIiwiaW1hZ2UiLCJuZXdDb25maWciLCJzZXNzaW9uRGF0YSIsIl9qIiwiX2kiLCJfbCIsIl9uIiwiX20iLCJfcCIsIl9vIiwiX3IiLCJfcSIsIl90IiwiX3MiLCJfdiIsIl91IiwiX3ciLCJfeiIsIl95IiwiX0IiLCJfQSIsImNyZWF0ZVJlc3BvbnNlIiwiY3JlYXRlX3Jlc3BvbnNlIiwiZWFnZXJuZXNzIiwiaW50ZXJydXB0UmVzcG9uc2UiLCJpbnRlcnJ1cHRfcmVzcG9uc2UiLCJwcmVmaXhQYWRkaW5nTXMiLCJwcmVmaXhfcGFkZGluZ19tcyIsInNpbGVuY2VEdXJhdGlvbk1zIiwic2lsZW5jZV9kdXJhdGlvbl9tcyIsInRocmVzaG9sZCIsImlkbGVUaW1lb3V0TXMiLCJpZGxlX3RpbWVvdXRfbXMiLCJ0cmFjaW5nQ29uZmlnIiwic3RhcnRSZXNwb25zZSIsImF1ZGlvIiwiY29tbWl0IiwicmVtb3ZhbElkcyIsInVwZGF0ZSIsImFkZGl0aW9uc0FuZFVwZGF0ZXMiLCJhZGRpdGlvbiIsIml0ZW1FbnRyeSIsIk9wZW5BSVJlYWx0aW1lQmFzZSIsIk9wZW5BSVJlYWx0aW1lV2ViUlRDIiwiX3VybCIsIl9zdGF0ZSIsIl91c2VJbnNlY3VyZUFwaUtleSIsIl9vbmdvaW5nUmVzcG9uc2UiLCJfbXV0ZWQiLCJiYXNlVXJsIiwiaXNDbGllbnRLZXkiLCJ1c2VyU2Vzc2lvbkNvbmZpZyIsImNvbm5lY3Rpb25VcmwiLCJwZWVyQ29ubmVjdGlvbiIsImRhdGFDaGFubmVsIiwiYXVkaW9FbGVtZW50Iiwib2ZmZXIiLCJzZHBSZXNwb25zZSIsImFuc3dlciIsIm11dGVkIiwic2VuZGVyIiwiV2ViU29ja2V0IiwiT3BlbkFJUmVhbHRpbWVXZWJTb2NrZXQiLCJfT3BlbkFJUmVhbHRpbWVXZWJTb2NrZXRfaW5zdGFuY2VzIiwiX2N1cnJlbnRJdGVtSWQiLCJfY3VycmVudEF1ZGlvQ29udGVudEluZGV4IiwiX2NyZWF0ZVdlYlNvY2tldCIsIl9za2lwT3BlbkV2ZW50TGlzdGVuZXJzIiwiYXVkaW9FdmVudCIsInVybCIsInNlc3Npb25Db25maWciLCJzZXR1cFdlYlNvY2tldF9mbiIsImVsYXBzZWRUaW1lIiwiY2FuY2VsT25nb2luZ1Jlc3BvbnNlIiwibGVuZ3RoIiwiYXVkaW9fZW5kX21zIiwid3MiLCJ3ZWJzb2NrZXRBcmd1bWVudHMiLCJvblNvY2tldE9wZW5SZWFkeSIsImJ1ZmYiLCJmbXQiLCJyYXRlIiwiYXV0b21hdGljUmVzcG9uc2VDYW5jZWxsYXRpb25FbmFibGVkIiwiQkFDS0dST1VORF9SRVNVTFRfU1lNQk9MIiwiYmFja2dyb3VuZFJlc3VsdCIsImlzQmFja2dyb3VuZFJlc3VsdCIsImlzVmFsaWRSZWFsdGltZVRvb2wiLCJ0b1JlYWx0aW1lVG9vbERlZmluaXRpb24iLCJzZXJ2ZXJVcmwiLCJjbG9uZURlZmF1bHRTZXNzaW9uQ29uZmlnIiwiUmVhbHRpbWVTZXNzaW9uIiwiX1JlYWx0aW1lU2Vzc2lvbl9pbnN0YW5jZXMiLCJfdHJhbnNwb3J0IiwiX2N1cnJlbnRBZ2VudCIsIl9jdXJyZW50VG9vbHMiLCJfb3V0cHV0R3VhcmRyYWlscyIsIl9vdXRwdXRHdWFyZHJhaWxTZXR0aW5ncyIsIl90cmFuc2NyaWJlZFRleHREZWx0YXMiLCJfaGlzdG9yeSIsIl9zaG91bGRJbmNsdWRlQXVkaW9EYXRhIiwiX2ludGVycnVwdGVkQnlHdWFyZHJhaWwiLCJfYXVkaW9TdGFydGVkIiwiX2FsbE1jcFRvb2xzQnlTZXJ2ZXIiLCJfYXZhaWxhYmxlTWNwVG9vbHMiLCJfbGFzdFNlc3Npb25Db25maWciLCJfYXV0b21hdGljYWxseVRyaWdnZXJSZXNwb25zZUZvck1jcFRvb2xDYWxscyIsInNldEN1cnJlbnRBZ2VudF9mbiIsImdldFNlc3Npb25Db25maWdfZm4iLCJzZXRFdmVudExpc3RlbmVyc19mbiIsInVwZGF0ZWRIaXN0b3J5IiwiaGFuZGxlRnVuY3Rpb25Ub29sQ2FsbF9mbiIsImhhbmRvZmZUb29scyIsImhhc1Rvb2xzRGVmaW5lZCIsImhhc0hhbmRvZmZzRGVmaW5lZCIsInVwZGF0ZUF2YWlsYWJsZU1jcFRvb2xzX2ZuIiwiYWRkaXRpb25hbENvbmZpZyIsImluc3RydWN0aW9ucyIsImZ1bGxDb25maWciLCJoYW5kbGVIYW5kb2ZmX2ZuIiwiaGFuZGxlRnVuY3Rpb25DYWxsX2ZuIiwiZW5hYmxlZEhhbmRvZmZzIiwiZnVuY3Rpb25Ub29sTWFwIiwicG9zc2libGVIYW5kb2ZmIiwicmVzcG9uc2VJZCIsImZpcnN0VHJpcHdpcmVUcmlnZ2VyZWQiLCJmZWVkYmFja1RleHQiLCJjb21wbGV0ZWRFdmVudCIsInRleHRPdXRwdXQiLCJsYXN0UnVuSW5kZXgiLCJsYXN0SXRlbUlkIiwiZGVsdGEiLCJuZXdUZXh0IiwibmV3UnVuSW5kZXgiLCJpc05ldyIsImFkZGVkSXRlbSIsImFjdGl2ZU1jcENvbmZpZ3MiLCJhbGxvd2VkRnJvbUNvbmZpZyIsImNmZyIsImRlZHVwQnlOYW1lIiwibmV4dCIsInByZXYiLCJ1dGlscyIsInV0aWxJbXBvcnQuYmFzZTY0VG9BcnJheUJ1ZmZlciIsInV0aWxJbXBvcnQuYXJyYXlCdWZmZXJUb0Jhc2U2NCIsInV0aWxJbXBvcnQuZ2V0TGFzdFRleHRGcm9tQXVkaW9PdXRwdXRNZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ08sTUFBTUEsS0FBVztBQUFBLEVBRXBCLFNBQVc7QUFLZjtBQ1JPLGVBQWVDLEdBQVlDLEdBQUk7QUFDbEMsTUFBSTtBQUNBLFdBQU8sQ0FBQyxNQUFNLE1BQU1BLEdBQUk7QUFBQSxFQUM1QixTQUNPQyxHQUFPO0FBQ1YsV0FBTyxDQUFDQSxHQUFPLElBQUk7QUFBQSxFQUN2QjtBQUNKO0FDV08sU0FBU0MsR0FBd0JDLEdBQWlCQyxHQUFRO0FBQzdELFFBQU1DLElBQU0sRUFBRSxHQUFHRixFQUFlO0FBQ2hDLGdCQUFPLGlCQUFpQkUsR0FBSztBQUFBLElBQ3pCLFFBQVE7QUFBQSxNQUNKLE9BQU87QUFBQSxNQUNQLFlBQVk7QUFBQSxJQUN4QjtBQUFBLElBQ1EsV0FBVztBQUFBLE1BQ1AsT0FBT0Q7QUFBQSxNQUNQLFlBQVk7QUFBQSxJQUN4QjtBQUFBLEVBQ0EsQ0FBSyxHQUNNQztBQUNYO0FDL0JPLE1BQU1DLEtBQWlCLE9BQU8sbURBQW1ELEdBQ2xGQyxL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QUssT0FBTyxLQUFLLENBQUNBLE1BQU9BLEVBQUcsU0FBUyxLQUFLO0FBQUEsRUFDNUQ7QUFBQSxFQUNBLElBQUksVUFBVTtBQUNWLFdBQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLEtBQUssQ0FBQ0EsTUFBT0EsRUFBRyxTQUFTLE9BQU87QUFBQSxFQUM5RDtBQUFBLEVBQ0EsSUFBSSxTQUFTO0FBQ1QsV0FBTyxDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU8sS0FBSyxDQUFDQSxNQUFPQSxFQUFHLFNBQVMsTUFBTTtBQUFBLEVBQzdEO0FBQUEsRUFDQSxJQUFJLFdBQVc7QUFDWCxXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUNBLE1BQU9BLEVBQUcsU0FBUyxRQUFRO0FBQUEsRUFDL0Q7QUFBQSxFQUNBLElBQUksU0FBUztBQUNULFdBQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLEtBQUssQ0FBQ0EsTUFBT0EsRUFBRyxTQUFTLE1BQU07QUFBQSxFQUM3RDtBQUFBLEVBQ0EsSUFBSSxVQUFVO0FBQ1YsV0FBTyxDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU8sS0FBSyxDQUFDQSxNQUFPQSxFQUFHLFNBQVMsT0FBTztBQUFBLEVBQzlEO0FBQUEsRUFDQSxJQUFJLFNBQVM7QUFDVCxXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUNBLE1BQU9BLEVBQUcsU0FBUyxNQUFNO0FBQUEsRUFDN0Q7QUFBQSxFQUNBLElBQUksT0FBTztBQUNQLFdBQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLEtBQUssQ0FBQ0EsTUFBT0EsRUFBRyxTQUFTLElBQUk7QUFBQSxFQUMzRDtBQUFBLEVBQ0EsSUFBSSxTQUFTO0FBQ1QsV0FBTyxDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU8sS0FBSyxDQUFDQSxNQUFPQSxFQUFHLFNBQVMsTUFBTTtBQUFBLEVBQzdEO0FBQUEsRUFDQSxJQUFJLFdBQVc7QUFDWCxXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUNB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LENBQWU7QUFBQSxJQUNwRyxDQUFhO0FBQUEsRUFDTCxDQUFDO0FBQ0w7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BK1ksS0FBd0IsV0FBRzs7QUFFdkIsUUFBTXFCLEtBQW1Ccm9DLElBQUF1YyxFQUFBLE1BQUtxcEIsUUFBTCxnQkFBQTVsQyxFQUFvQixPQUFPLENBQUNrYSxNQUFNQSxFQUFFLFNBQVMsUUFDaEVvdUIsSUFBb0IsQ0FBQ0MsTUFBUTtBQUMvQixVQUFNMXRCLElBQVUwdEIsRUFBSTtBQUNwQixRQUFLMXRCLEdBRUw7QUFBQSxVQUFJLE1BQU0sUUFBUUEsQ0FBTztBQUNyQixlQUFPQTtBQUNYLFVBQUlBLEtBQVcsTUFBTSxRQUFRQSxFQUFRLFVBQVU7QUFDM0MsZUFBT0EsRUFBUTtBQUFBO0FBQUEsRUFFdkIsR0FDTTJ0QixJQUFjLG9CQUFJLElBQUc7QUFDM0IsYUFBV0QsS0FBT0YsR0FBa0I7QUFDaEMsVUFBTXR0QixJQUFRd0IsRUFBQSxNQUFLNnBCLElBQXFCLElBQUltQyxFQUFJLFlBQVksS0FBSyxDQUFBLEdBQzNEMXRCLElBQVV5dEIsRUFBa0JDLENBQUc7QUFDckMsZUFBV3IyQixLQUFRNkk7QUFDZixNQUFJRixLQUFXLENBQUNBLEVBQVEsU0FBUzNJLEVBQUssSUFBSSxLQUVyQ3MyQixFQUFZLElBQUl0MkIsRUFBSyxJQUFJLEtBQzFCczJCLEVBQVksSUFBSXQyQixFQUFLLE1BQU1BLENBQUk7QUFBQSxFQUczQztBQUNBLFFBQU11MkIsSUFBTyxNQUFNLEtBQUtELEVBQVksT0FBTSxDQUFFLEdBQ3RDRSxJQUFPbnNCLEVBQUEsTUFBSzhwQjtBQUlsQixHQUhnQnFDLEVBQUssV0FBV0QsRUFBSyxVQUNqQyxLQUFLLFVBQVVDLEVBQUssSUFBSSxDQUFDeHVCLE1BQU1BLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFDekMsS0FBSyxVQUFVdXVCLEVBQUssSUFBSSxDQUFDdnVCLE1BQU1BLEVBQUUsSUFBSSxFQUFFLE1BQU0sT0FFakR5RixFQUFBLE1BQUswbUIsSUFBcUJvQyxJQUMxQixLQUFLLEtBQUsscUJBQXFCbHNCLEVBQUEsTUFBSzhwQixHQUFrQjtBQUU5RDtBQzlnQlEsTUFBQ3NDLEtBQVE7QUFBQSxFQUNqQixxQkFBcUJDO0FBQUFBLEVBQ3JCLHFCQUFxQkM7QUFBQUEsRUFDckIsbUNBQW1DQztBQUN2QzsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDUxLDUyLDUzXX0=
